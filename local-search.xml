<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringCloud学习（八）————多级缓存</title>
    <link href="/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <url>/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-什么是多级缓存"><a href="#1-什么是多级缓存" class="headerlink" title="1.什么是多级缓存"></a>1.什么是多级缓存</h1><p>传统的缓存策略一般是请求到达Tomcat后，先查询Redis，如果未命中则查询数据库，如图：</p><p><img src="/../images/image-20210821075259137.png" alt="image-20210821075259137"></p><p>存在下面的问题：</p><p>•请求要经过Tomcat处理，Tomcat的性能成为整个系统的瓶颈</p><p>•Redis缓存失效时，会对数据库产生冲击</p><p>多级缓存就是充分利用请求处理的每个环节，分别添加缓存，减轻Tomcat压力，提升服务性能：</p><ul><li>浏览器访问静态资源时，优先读取浏览器本地缓存</li><li>访问非静态资源（ajax查询数据）时，访问服务端</li><li>请求到达Nginx后，优先读取Nginx本地缓存</li><li>如果Nginx本地缓存未命中，则去直接查询Redis（不经过Tomcat）</li><li>如果Redis查询未命中，则查询Tomcat</li><li>请求进入Tomcat后，优先查询JVM进程缓存</li><li>如果JVM进程缓存未命中，则查询数据库</li></ul><p><img src="/../images/image-20210821075558137.png" alt="image-20210821075558137"></p><p>在多级缓存架构中，Nginx内部需要编写本地缓存查询、Redis查询、Tomcat查询的业务逻辑，因此这样的nginx服务不再是一个<strong>反向代理服务器</strong>，而是一个编写<strong>业务的Web服务器了</strong>。</p><p>因此这样的业务Nginx服务也需要搭建集群来提高并发，再有专门的nginx服务来做反向代理，如图：</p><p><img src="/../images/image-20210821080511581.png" alt="image-20210821080511581"></p><p>另外，我们的Tomcat服务将来也会部署为集群模式：</p><p><img src="/../images/image-20210821080954947.png" alt="image-20210821080954947"></p><p>可见，多级缓存的关键有两个：</p><ul><li><p>一个是在nginx中编写业务，实现nginx本地缓存、Redis、Tomcat的查询</p></li><li><p>另一个就是在Tomcat中实现JVM进程缓存</p></li></ul><p>其中Nginx编程则会用到OpenResty框架结合Lua这样的语言。</p><p>这也是今天课程的难点和重点。</p><h1 id="2-JVM进程缓存"><a href="#2-JVM进程缓存" class="headerlink" title="2.JVM进程缓存"></a>2.JVM进程缓存</h1><p>为了演示多级缓存的案例，我们先准备一个商品查询的业务。</p><h2 id="2-1-导入案例"><a href="#2-1-导入案例" class="headerlink" title="2.1.导入案例"></a>2.1.导入案例</h2><p>参考课前资料的：《案例导入说明.md》</p><p><img src="/../images/image-20210821081418456.png" alt="image-20210821081418456"> </p><h2 id="2-2-初识Caffeine"><a href="#2-2-初识Caffeine" class="headerlink" title="2.2.初识Caffeine"></a>2.2.初识Caffeine</h2><p>缓存在日常开发中启动至关重要的作用，由于是存储在内存中，数据的读取速度是非常快的，能大量减少对数据库的访问，减少数据库的压力。我们把缓存分为两类：</p><ul><li>分布式缓存，例如Redis：<ul><li>优点：存储容量更大、可靠性更好、可以在集群间共享</li><li>缺点：访问缓存有网络开销</li><li>场景：缓存数据量较大、可靠性要求较高、需要在集群间共享</li></ul></li><li>进程本地缓存，例如HashMap、GuavaCache：<ul><li>优点：读取本地内存，没有网络开销，速度更快</li><li>缺点：存储容量有限、可靠性较低、无法共享</li><li>场景：性能要求较高，缓存数据量较小</li></ul></li></ul><p>我们今天会利用Caffeine框架来实现JVM进程缓存。</p><p><strong>Caffeine</strong>是一个基于Java8开发的，提供了近乎最佳命中率的高性能的本地缓存库。目前Spring内部的缓存使用的就是Caffeine。GitHub地址：<a href="https://github.com/ben-manes/caffeine">https://github.com/ben-manes/caffeine</a></p><p>Caffeine的性能非常好，下图是官方给出的性能对比：</p><p><img src="/../images/image-20210821081826399.png" alt="image-20210821081826399"></p><p>可以看到Caffeine的性能遥遥领先！</p><p>缓存使用的基本API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBasicOps</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 构建cache对象</span><br>    Cache&lt;String, String&gt; cache = Caffeine.newBuilder().build();<br><br>    <span class="hljs-comment">// 存数据</span><br>    cache.put(<span class="hljs-string">&quot;gf&quot;</span>, <span class="hljs-string">&quot;迪丽热巴&quot;</span>);<br><br>    <span class="hljs-comment">// 取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">gf</span> <span class="hljs-operator">=</span> cache.getIfPresent(<span class="hljs-string">&quot;gf&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;gf = &quot;</span> + gf);<br><br>    <span class="hljs-comment">// 取数据，包含两个参数：</span><br>    <span class="hljs-comment">// 参数一：缓存的key</span><br>    <span class="hljs-comment">// 参数二：Lambda表达式，表达式参数就是缓存的key，方法体是查询数据库的逻辑</span><br>    <span class="hljs-comment">// 优先根据key查询JVM缓存，如果未命中，则执行参数二的Lambda表达式</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">defaultGF</span> <span class="hljs-operator">=</span> cache.get(<span class="hljs-string">&quot;defaultGF&quot;</span>, key -&gt; &#123;<br>        <span class="hljs-comment">// 根据key去数据库查询数据</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;柳岩&quot;</span>;<br>    &#125;);<br>    System.out.println(<span class="hljs-string">&quot;defaultGF = &quot;</span> + defaultGF);<br>&#125;<br></code></pre></td></tr></table></figure><p>Caffeine既然是缓存的一种，肯定需要有缓存的清除策略，不然的话内存总会有耗尽的时候。</p><p>Caffeine提供了三种缓存驱逐策略：</p><ul><li><p><strong>基于容量</strong>：设置缓存的数量上限</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建缓存对象</span><br>Cache&lt;String, String&gt; cache = Caffeine.newBuilder()<br>    .maximumSize(<span class="hljs-number">1</span>) <span class="hljs-comment">// 设置缓存大小上限为 1</span><br>    .build();<br></code></pre></td></tr></table></figure></li><li><p><strong>基于时间</strong>：设置缓存的有效时间</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建缓存对象</span><br>Cache&lt;String, String&gt; cache = Caffeine.newBuilder()<br>    <span class="hljs-comment">// 设置缓存有效期为 10 秒，从最后一次写入开始计时 </span><br>    .expireAfterWrite(Duration.ofSeconds(<span class="hljs-number">10</span>)) <br>    .build();<br><br></code></pre></td></tr></table></figure></li><li><p><strong>基于引用</strong>：设置缓存为软引用或弱引用，利用GC来回收缓存数据。性能较差，不建议使用。</p></li></ul><blockquote><p><strong>注意</strong>：在默认情况下，当一个缓存元素过期的时候，Caffeine不会自动立即将其清理和驱逐。而是在一次读或写操作后，或者在空闲时间完成对失效数据的驱逐。</p></blockquote><h2 id="2-3-实现JVM进程缓存"><a href="#2-3-实现JVM进程缓存" class="headerlink" title="2.3.实现JVM进程缓存"></a>2.3.实现JVM进程缓存</h2><h3 id="2-3-1-需求"><a href="#2-3-1-需求" class="headerlink" title="2.3.1.需求"></a>2.3.1.需求</h3><p>利用Caffeine实现下列需求：</p><ul><li>给根据id查询商品的业务添加缓存，缓存未命中时查询数据库</li><li>给根据id查询商品库存的业务添加缓存，缓存未命中时查询数据库</li><li>缓存初始大小为100</li><li>缓存上限为10000</li></ul><h3 id="2-3-2-实现"><a href="#2-3-2-实现" class="headerlink" title="2.3.2.实现"></a>2.3.2.实现</h3><p>首先，我们需要定义两个Caffeine的缓存对象，分别保存商品、库存的缓存数据。</p><p>在item-service的<code>com.heima.item.config</code>包下定义<code>CaffeineConfig</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.item.config;<br><br><span class="hljs-keyword">import</span> com.github.benmanes.caffeine.cache.Cache;<br><span class="hljs-keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;<br><span class="hljs-keyword">import</span> com.heima.item.pojo.Item;<br><span class="hljs-keyword">import</span> com.heima.item.pojo.ItemStock;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaffeineConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Cache&lt;Long, Item&gt; <span class="hljs-title function_">itemCache</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Caffeine.newBuilder()<br>                .initialCapacity(<span class="hljs-number">100</span>)<br>                .maximumSize(<span class="hljs-number">10_000</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Cache&lt;Long, ItemStock&gt; <span class="hljs-title function_">stockCache</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Caffeine.newBuilder()<br>                .initialCapacity(<span class="hljs-number">100</span>)<br>                .maximumSize(<span class="hljs-number">10_000</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，修改item-service中的<code>com.heima.item.web</code>包下的ItemController类，添加缓存逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;item&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemService itemService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemStockService stockService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cache&lt;Long, Item&gt; itemCache;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cache&lt;Long, ItemStock&gt; stockCache;<br>    <br>    <span class="hljs-comment">// ...其它略</span><br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Item <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> itemCache.get(id, key -&gt; itemService.query()<br>                .ne(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">3</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, key)<br>                .one()<br>        );<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/stock/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ItemStock <span class="hljs-title function_">findStockById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> stockCache.get(id, key -&gt; stockService.getById(key));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-Lua语法入门"><a href="#3-Lua语法入门" class="headerlink" title="3.Lua语法入门"></a>3.Lua语法入门</h1><p>Nginx编程需要用到Lua语言，因此我们必须先入门Lua的基本语法。</p><h2 id="3-1-初识Lua"><a href="#3-1-初识Lua" class="headerlink" title="3.1.初识Lua"></a>3.1.初识Lua</h2><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。官网：<a href="https://www.lua.org/">https://www.lua.org/</a></p><p><img src="/../images/image-20210821091437975.png" alt="image-20210821091437975"></p><p>Lua经常嵌入到C语言开发的程序中，例如游戏开发、游戏插件等。</p><p>Nginx本身也是C语言开发，因此也允许基于Lua做拓展。</p><h2 id="3-1-HelloWorld"><a href="#3-1-HelloWorld" class="headerlink" title="3.1.HelloWorld"></a>3.1.HelloWorld</h2><p>CentOS7默认已经安装了Lua语言环境，所以可以直接运行Lua代码。</p><p>1）在Linux虚拟机的任意目录下，新建一个hello.lua文件</p><p><img src="/../images/image-20210821091621308.png" alt="image-20210821091621308"></p><p>2）添加下面的内容</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)  <br></code></pre></td></tr></table></figure><p>3）运行</p><p><img src="/../images/image-20210821091638140.png" alt="image-20210821091638140"></p><h2 id="3-2-变量和循环"><a href="#3-2-变量和循环" class="headerlink" title="3.2.变量和循环"></a>3.2.变量和循环</h2><p>学习任何语言必然离不开变量，而变量的声明必须先知道数据的类型。</p><h3 id="3-2-1-Lua的数据类型"><a href="#3-2-1-Lua的数据类型" class="headerlink" title="3.2.1.Lua的数据类型"></a>3.2.1.Lua的数据类型</h3><p>Lua中支持的常见数据类型包括：</p><p><img src="/../images/image-20210821091835406.png" alt="image-20210821091835406"></p><p>另外，Lua提供了type()函数来判断一个变量的数据类型：</p><p><img src="/../images/image-20210821091904332.png" alt="image-20210821091904332"></p><h3 id="3-2-2-声明变量"><a href="#3-2-2-声明变量" class="headerlink" title="3.2.2.声明变量"></a>3.2.2.声明变量</h3><p>Lua声明变量的时候无需指定数据类型，而是用local来声明变量为局部变量：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 声明字符串，可以用单引号或双引号，</span><br><span class="hljs-keyword">local</span> str = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-comment">-- 字符串拼接可以使用 ..</span><br><span class="hljs-keyword">local</span> str2 = <span class="hljs-string">&#x27;hello&#x27;</span> .. <span class="hljs-string">&#x27;world&#x27;</span><br><span class="hljs-comment">-- 声明数字</span><br><span class="hljs-keyword">local</span> num = <span class="hljs-number">21</span><br><span class="hljs-comment">-- 声明布尔类型</span><br><span class="hljs-keyword">local</span> flag = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>Lua中的table类型既可以作为数组，又可以作为Java中的map来使用。数组就是特殊的table，key是数组角标而已：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 声明数组 ，key为角标的 table</span><br><span class="hljs-keyword">local</span> arr = &#123;<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;lua&#x27;</span>&#125;<br><span class="hljs-comment">-- 声明table，类似java的map</span><br><span class="hljs-keyword">local</span> map =  &#123;name=<span class="hljs-string">&#x27;Jack&#x27;</span>, age=<span class="hljs-number">21</span>&#125;<br></code></pre></td></tr></table></figure><p>Lua中的数组角标是从1开始，访问的时候与Java中类似：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 访问数组，lua数组的角标从1开始</span><br><span class="hljs-built_in">print</span>(arr[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>Lua中的table可以用key来访问：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 访问table</span><br><span class="hljs-built_in">print</span>(map[<span class="hljs-string">&#x27;name&#x27;</span>])<br><span class="hljs-built_in">print</span>(map.name)<br></code></pre></td></tr></table></figure><h3 id="3-2-3-循环"><a href="#3-2-3-循环" class="headerlink" title="3.2.3.循环"></a>3.2.3.循环</h3><p>对于table，我们可以利用for循环来遍历。不过数组和普通table遍历略有差异。</p><p>遍历数组：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 声明数组 key为索引的 table</span><br><span class="hljs-keyword">local</span> arr = &#123;<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;lua&#x27;</span>&#125;<br><span class="hljs-comment">-- 遍历数组</span><br><span class="hljs-keyword">for</span> index,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(arr) <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">print</span>(index, value) <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>遍历普通table</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 声明map，也就是table</span><br><span class="hljs-keyword">local</span> map = &#123;name=<span class="hljs-string">&#x27;Jack&#x27;</span>, age=<span class="hljs-number">21</span>&#125;<br><span class="hljs-comment">-- 遍历table</span><br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">pairs</span>(map) <span class="hljs-keyword">do</span><br>   <span class="hljs-built_in">print</span>(key, value) <br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="3-3-条件控制、函数"><a href="#3-3-条件控制、函数" class="headerlink" title="3.3.条件控制、函数"></a>3.3.条件控制、函数</h2><p>Lua中的条件控制和函数声明与Java类似。</p><h3 id="3-3-1-函数"><a href="#3-3-1-函数" class="headerlink" title="3.3.1.函数"></a>3.3.1.函数</h3><p>定义函数的语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名<span class="hljs-params">( argument1, argument2..., argumentn)</span></span><br>    <span class="hljs-comment">-- 函数体</span><br>    <span class="hljs-keyword">return</span> 返回值<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>例如，定义一个函数，用来打印数组：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printArr</span><span class="hljs-params">(arr)</span></span><br>    <span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(arr) <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">print</span>(value)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="3-3-2-条件控制"><a href="#3-3-2-条件控制" class="headerlink" title="3.3.2.条件控制"></a>3.3.2.条件控制</h3><p>类似Java的条件控制，例如if、else语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span>(布尔表达式)<br><span class="hljs-keyword">then</span><br>   <span class="hljs-comment">--[ 布尔表达式为 true 时执行该语句块 --]</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-comment">--[ 布尔表达式为 false 时执行该语句块 --]</span><br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure><p>与java不同，布尔表达式中的逻辑运算是基于英文单词：</p><p><img src="/../images/image-20210821092657918.png" alt="image-20210821092657918"></p><h3 id="3-3-3-案例"><a href="#3-3-3-案例" class="headerlink" title="3.3.3.案例"></a>3.3.3.案例</h3><p>需求：自定义一个函数，可以打印table，当参数为nil时，打印错误信息</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printArr</span><span class="hljs-params">(arr)</span></span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> arr <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数组不能为空！&#x27;</span>)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(arr) <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">print</span>(value)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h1 id="4-实现多级缓存"><a href="#4-实现多级缓存" class="headerlink" title="4.实现多级缓存"></a>4.实现多级缓存</h1><p>多级缓存的实现离不开Nginx编程，而Nginx编程又离不开OpenResty。</p><h2 id="4-1-安装OpenResty"><a href="#4-1-安装OpenResty" class="headerlink" title="4.1.安装OpenResty"></a>4.1.安装OpenResty</h2><p>OpenResty® 是一个基于 Nginx的高性能 Web 平台，用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。具备下列特点：</p><ul><li>具备Nginx的完整功能</li><li>基于Lua语言进行扩展，集成了大量精良的 Lua 库、第三方模块</li><li>允许使用Lua<strong>自定义业务逻辑</strong>、<strong>自定义库</strong></li></ul><p>官方网站： <a href="https://openresty.org/cn/">https://openresty.org/cn/</a></p><p><img src="/../images/image-20210821092902946.png" alt="image-20210821092902946"></p><p>安装Lua可以参考课前资料提供的《安装OpenResty.md》：</p><p><img src="/../images/image-20210821092941139.png" alt="image-20210821092941139"> </p><h2 id="4-2-OpenResty快速入门"><a href="#4-2-OpenResty快速入门" class="headerlink" title="4.2.OpenResty快速入门"></a>4.2.OpenResty快速入门</h2><p>我们希望达到的多级缓存架构如图：</p><p><img src="/../images/yeVDlwtfMx.png" alt="yeVDlwtfMx"></p><p>其中：</p><ul><li><p>windows上的nginx用来做反向代理服务，将前端的查询商品的ajax请求代理到OpenResty集群</p></li><li><p>OpenResty集群用来编写多级缓存业务</p></li></ul><h3 id="4-2-1-反向代理流程"><a href="#4-2-1-反向代理流程" class="headerlink" title="4.2.1.反向代理流程"></a>4.2.1.反向代理流程</h3><p>现在，商品详情页使用的是假的商品数据。不过在浏览器中，可以看到页面有发起ajax请求查询真实商品数据。</p><p>这个请求如下：</p><p><img src="/../images/image-20210821093144700.png" alt="image-20210821093144700"></p><p>请求地址是localhost，端口是80，就被windows上安装的Nginx服务给接收到了。然后代理给了OpenResty集群：</p><p><img src="/../images/image-20210821094447709.png" alt="image-20210821094447709"></p><p>我们需要在OpenResty中编写业务，查询商品数据并返回到浏览器。</p><p>但是这次，我们先在OpenResty接收请求，返回假的商品数据。</p><h3 id="4-2-2-OpenResty监听请求"><a href="#4-2-2-OpenResty监听请求" class="headerlink" title="4.2.2.OpenResty监听请求"></a>4.2.2.OpenResty监听请求</h3><p>OpenResty的很多功能都依赖于其目录下的Lua库，需要在nginx.conf中指定依赖库的目录，并导入依赖：</p><p>1）添加对OpenResty的Lua模块的加载</p><p>修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件，在其中的http下面，添加下面代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#lua 模块</span><br><span class="hljs-attribute">lua_package_path</span> <span class="hljs-string">&quot;/usr/local/openresty/lualib/?.lua;;&quot;</span>;<br><span class="hljs-comment">#c模块     </span><br><span class="hljs-attribute">lua_package_cpath</span> <span class="hljs-string">&quot;/usr/local/openresty/lualib/?.so;;&quot;</span>;  <br></code></pre></td></tr></table></figure><p>2）监听/api/item路径</p><p>修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件，在nginx.conf的server下面，添加对/api/item这个路径的监听：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span>  /api/item &#123;<br>    <span class="hljs-comment"># 默认的响应类型</span><br>    <span class="hljs-attribute">default_type</span> application/json;<br>    <span class="hljs-comment"># 响应结果由lua/item.lua文件来决定</span><br>    <span class="hljs-attribute">content_by_lua_file</span> lua/item.lua;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个监听，就类似于SpringMVC中的<code>@GetMapping(&quot;/api/item&quot;)</code>做路径映射。</p><p>而<code>content_by_lua_file lua/item.lua</code>则相当于调用item.lua这个文件，执行其中的业务，把结果返回给用户。相当于java中调用service。</p><h3 id="4-2-3-编写item-lua"><a href="#4-2-3-编写item-lua" class="headerlink" title="4.2.3.编写item.lua"></a>4.2.3.编写item.lua</h3><p>1）在<code>/usr/loca/openresty/nginx</code>目录创建文件夹：lua</p><p><img src="/../images/image-20210821100755080.png" alt="image-20210821100755080"></p><p>2）在<code>/usr/loca/openresty/nginx/lua</code>文件夹下，新建文件：item.lua</p><p><img src="/../images/image-20210821100801756.png" alt="image-20210821100801756"></p><p>3）编写item.lua，返回假数据</p><p>item.lua中，利用ngx.say()函数返回数据到Response中</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.say(<span class="hljs-string">&#x27;&#123;&quot;id&quot;:10001,&quot;name&quot;:&quot;SALSA AIR&quot;,&quot;title&quot;:&quot;RIMOWA 21寸托运箱拉杆箱 SALSA AIR系列果绿色 820.70.36.4&quot;,&quot;price&quot;:17900,&quot;image&quot;:&quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t6934/364/1195375010/84676/e9f2c55f/597ece38N0ddcbc77.jpg!q70.jpg.webp&quot;,&quot;category&quot;:&quot;拉杆箱&quot;,&quot;brand&quot;:&quot;RIMOWA&quot;,&quot;spec&quot;:&quot;&quot;,&quot;status&quot;:1,&quot;createTime&quot;:&quot;2019-04-30T16:00:00.000+00:00&quot;,&quot;updateTime&quot;:&quot;2019-04-30T16:00:00.000+00:00&quot;,&quot;stock&quot;:2999,&quot;sold&quot;:31290&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>4）重新加载配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nginx -s reload<br></code></pre></td></tr></table></figure><p>刷新商品页面：<a href="http://localhost/item.html?id=1001%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C%EF%BC%9A">http://localhost/item.html?id=1001，即可看到效果：</a></p><p><img src="/../images/image-20210821101217089.png" alt="image-20210821101217089"></p><h2 id="4-3-请求参数处理"><a href="#4-3-请求参数处理" class="headerlink" title="4.3.请求参数处理"></a>4.3.请求参数处理</h2><p>上一节中，我们在OpenResty接收前端请求，但是返回的是假数据。</p><p>要返回真实数据，必须根据前端传递来的商品id，查询商品信息才可以。</p><p>那么如何获取前端传递的商品参数呢？</p><h3 id="4-3-1-获取参数的API"><a href="#4-3-1-获取参数的API" class="headerlink" title="4.3.1.获取参数的API"></a>4.3.1.获取参数的API</h3><p>OpenResty中提供了一些API用来获取不同类型的前端请求参数：</p><p><img src="/../images/image-20210821101433528.png" alt="image-20210821101433528"></p><h3 id="4-3-2-获取参数并返回"><a href="#4-3-2-获取参数并返回" class="headerlink" title="4.3.2.获取参数并返回"></a>4.3.2.获取参数并返回</h3><p>在前端发起的ajax请求如图：</p><p><img src="/../images/image-20210821101721649.png" alt="image-20210821101721649"></p><p>可以看到商品id是以路径占位符方式传递的，因此可以利用正则表达式匹配的方式来获取ID</p><p>1）获取商品id</p><p>修改<code>/usr/loca/openresty/nginx/nginx.conf</code>文件中监听/api/item的代码，利用正则表达式获取ID：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ /api/item/(\d+)</span> &#123;<br>    <span class="hljs-comment"># 默认的响应类型</span><br>    <span class="hljs-attribute">default_type</span> application/json;<br>    <span class="hljs-comment"># 响应结果由lua/item.lua文件来决定</span><br>    <span class="hljs-attribute">content_by_lua_file</span> lua/item.lua;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）拼接ID并返回</p><p>修改<code>/usr/loca/openresty/nginx/lua/item.lua</code>文件，获取id并拼接到结果中返回：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 获取商品id</span><br><span class="hljs-keyword">local</span> id = ngx.var[<span class="hljs-number">1</span>]<br><span class="hljs-comment">-- 拼接并返回</span><br>ngx.say(<span class="hljs-string">&#x27;&#123;&quot;id&quot;:&#x27;</span> .. id .. <span class="hljs-string">&#x27;,&quot;name&quot;:&quot;SALSA AIR&quot;,&quot;title&quot;:&quot;RIMOWA 21寸托运箱拉杆箱 SALSA AIR系列果绿色 820.70.36.4&quot;,&quot;price&quot;:17900,&quot;image&quot;:&quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t6934/364/1195375010/84676/e9f2c55f/597ece38N0ddcbc77.jpg!q70.jpg.webp&quot;,&quot;category&quot;:&quot;拉杆箱&quot;,&quot;brand&quot;:&quot;RIMOWA&quot;,&quot;spec&quot;:&quot;&quot;,&quot;status&quot;:1,&quot;createTime&quot;:&quot;2019-04-30T16:00:00.000+00:00&quot;,&quot;updateTime&quot;:&quot;2019-04-30T16:00:00.000+00:00&quot;,&quot;stock&quot;:2999,&quot;sold&quot;:31290&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>3）重新加载并测试</p><p>运行命令以重新加载OpenResty配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nginx -s reload<br></code></pre></td></tr></table></figure><p>刷新页面可以看到结果中已经带上了ID：</p><p><img src="/../images/image-20210821102235467.png" alt="image-20210821102235467"> </p><h2 id="4-4-查询Tomcat"><a href="#4-4-查询Tomcat" class="headerlink" title="4.4.查询Tomcat"></a>4.4.查询Tomcat</h2><p>拿到商品ID后，本应去缓存中查询商品信息，不过目前我们还未建立nginx、redis缓存。因此，这里我们先根据商品id去tomcat查询商品信息。我们实现如图部分：</p><p><img src="/../images/image-20210821102610167.png" alt="image-20210821102610167"></p><p>需要注意的是，我们的OpenResty是在虚拟机，Tomcat是在Windows电脑上。两者IP一定不要搞错了。</p><p><img src="/../images/image-20210821102959829.png" alt="image-20210821102959829"></p><h3 id="4-4-1-发送http请求的API"><a href="#4-4-1-发送http请求的API" class="headerlink" title="4.4.1.发送http请求的API"></a>4.4.1.发送http请求的API</h3><p>nginx提供了内部API用以发送http请求：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> resp = ngx.location.capture(<span class="hljs-string">&quot;/path&quot;</span>,&#123;<br>    method = ngx.HTTP_GET,   <span class="hljs-comment">-- 请求方式</span><br>    args = &#123;a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>&#125;,  <span class="hljs-comment">-- get方式传参数</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>返回的响应内容包括：</p><ul><li>resp.status：响应状态码</li><li>resp.header：响应头，是一个table</li><li>resp.body：响应体，就是响应数据</li></ul><p>注意：这里的path是路径，并不包含IP和端口。这个请求会被nginx内部的server监听并处理。</p><p>但是我们希望这个请求发送到Tomcat服务器，所以还需要编写一个server来对这个路径做反向代理：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /path &#123;<br>    <span class="hljs-comment"># 这里是windows电脑的ip和Java服务端口，需要确保windows防火墙处于关闭状态</span><br>    <span class="hljs-attribute">proxy_pass</span> http://192.168.150.1:8081; <br>&#125;<br></code></pre></td></tr></table></figure><p>原理如图：</p><p><img src="/../images/image-20210821104149061.png" alt="image-20210821104149061"></p><h3 id="4-4-2-封装http工具"><a href="#4-4-2-封装http工具" class="headerlink" title="4.4.2.封装http工具"></a>4.4.2.封装http工具</h3><p>下面，我们封装一个发送Http请求的工具，基于ngx.location.capture来实现查询tomcat。</p><p>1）添加反向代理，到windows的Java服务</p><p>因为item-service中的接口都是/item开头，所以我们监听/item路径，代理到windows上的tomcat服务。</p><p>修改 <code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件，添加一个location：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /item &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://192.168.150.1:8081;<br>&#125;<br></code></pre></td></tr></table></figure><p>以后，只要我们调用<code>ngx.location.capture(&quot;/item&quot;)</code>，就一定能发送请求到windows的tomcat服务。</p><p>2）封装工具类</p><p>之前我们说过，OpenResty启动时会加载以下两个目录中的工具文件：</p><p><img src="/../images/image-20210821104857413.png" alt="image-20210821104857413"></p><p>所以，自定义的http工具也需要放到这个目录下。</p><p>在<code>/usr/local/openresty/lualib</code>目录下，新建一个common.lua文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /usr/local/openresty/lualib/common.lua<br></code></pre></td></tr></table></figure><p>内容如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 封装函数，发送http请求，并解析响应</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_http</span><span class="hljs-params">(path, params)</span></span><br>    <span class="hljs-keyword">local</span> resp = ngx.location.capture(<span class="hljs-built_in">path</span>,&#123;<br>        method = ngx.HTTP_GET,<br>        args = params,<br>    &#125;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp <span class="hljs-keyword">then</span><br>        <span class="hljs-comment">-- 记录错误信息，返回404</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;http请求查询失败, path: &quot;</span>, <span class="hljs-built_in">path</span> , <span class="hljs-string">&quot;, args: &quot;</span>, args)<br>        ngx.<span class="hljs-built_in">exit</span>(<span class="hljs-number">404</span>)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> resp.body<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 将方法导出</span><br><span class="hljs-keyword">local</span> _M = &#123;  <br>    read_http = read_http<br>&#125;  <br><span class="hljs-keyword">return</span> _M<br></code></pre></td></tr></table></figure><p>这个工具将read_http函数封装到_M这个table类型的变量中，并且返回，这类似于导出。</p><p>使用的时候，可以利用<code>require(&#39;common&#39;)</code>来导入该函数库，这里的common是函数库的文件名。</p><p>3）实现商品查询</p><p>最后，我们修改<code>/usr/local/openresty/lua/item.lua</code>文件，利用刚刚封装的函数库实现对tomcat的查询：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 引入自定义common工具模块，返回值是common中返回的 _M</span><br><span class="hljs-keyword">local</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;common&quot;</span>)<br><span class="hljs-comment">-- 从 common中获取read_http这个函数</span><br><span class="hljs-keyword">local</span> read_http = common.read_http<br><span class="hljs-comment">-- 获取路径参数</span><br><span class="hljs-keyword">local</span> id = ngx.var[<span class="hljs-number">1</span>]<br><span class="hljs-comment">-- 根据id查询商品</span><br><span class="hljs-keyword">local</span> itemJSON = read_http(<span class="hljs-string">&quot;/item/&quot;</span>.. id, <span class="hljs-literal">nil</span>)<br><span class="hljs-comment">-- 根据id查询商品库存</span><br><span class="hljs-keyword">local</span> itemStockJSON = read_http(<span class="hljs-string">&quot;/item/stock/&quot;</span>.. id, <span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure><p>这里查询到的结果是json字符串，并且包含商品、库存两个json字符串，页面最终需要的是把两个json拼接为一个json：</p><p><img src="/../images/image-20210821110441222.png" alt="image-20210821110441222"></p><p>这就需要我们先把JSON变为lua的table，完成数据整合后，再转为JSON。</p><h3 id="4-4-3-CJSON工具类"><a href="#4-4-3-CJSON工具类" class="headerlink" title="4.4.3.CJSON工具类"></a>4.4.3.CJSON工具类</h3><p>OpenResty提供了一个cjson的模块用来处理JSON的序列化和反序列化。</p><p>官方地址： <a href="https://github.com/openresty/lua-cjson/">https://github.com/openresty/lua-cjson/</a></p><p>1）引入cjson模块：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> cjson = <span class="hljs-built_in">require</span> <span class="hljs-string">&quot;cjson&quot;</span><br></code></pre></td></tr></table></figure><p>2）序列化：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> obj = &#123;<br>    name = <span class="hljs-string">&#x27;jack&#x27;</span>,<br>    age = <span class="hljs-number">21</span><br>&#125;<br><span class="hljs-comment">-- 把 table 序列化为 json</span><br><span class="hljs-keyword">local</span> json = cjson.encode(obj)<br></code></pre></td></tr></table></figure><p>3）反序列化：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> json = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;jack&quot;, &quot;age&quot;: 21&#125;&#x27;</span><br><span class="hljs-comment">-- 反序列化 json为 table</span><br><span class="hljs-keyword">local</span> obj = cjson.decode(json);<br><span class="hljs-built_in">print</span>(obj.name)<br></code></pre></td></tr></table></figure><h3 id="4-4-4-实现Tomcat查询"><a href="#4-4-4-实现Tomcat查询" class="headerlink" title="4.4.4.实现Tomcat查询"></a>4.4.4.实现Tomcat查询</h3><p>下面，我们修改之前的item.lua中的业务，添加json处理功能：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入common函数库</span><br><span class="hljs-keyword">local</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;common&#x27;</span>)<br><span class="hljs-keyword">local</span> read_http = common.read_http<br><span class="hljs-comment">-- 导入cjson库</span><br><span class="hljs-keyword">local</span> cjson = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cjson&#x27;</span>)<br><br><span class="hljs-comment">-- 获取路径参数</span><br><span class="hljs-keyword">local</span> id = ngx.var[<span class="hljs-number">1</span>]<br><span class="hljs-comment">-- 根据id查询商品</span><br><span class="hljs-keyword">local</span> itemJSON = read_http(<span class="hljs-string">&quot;/item/&quot;</span>.. id, <span class="hljs-literal">nil</span>)<br><span class="hljs-comment">-- 根据id查询商品库存</span><br><span class="hljs-keyword">local</span> itemStockJSON = read_http(<span class="hljs-string">&quot;/item/stock/&quot;</span>.. id, <span class="hljs-literal">nil</span>)<br><br><span class="hljs-comment">-- JSON转化为lua的table</span><br><span class="hljs-keyword">local</span> item = cjson.decode(itemJSON)<br><span class="hljs-keyword">local</span> stock = cjson.decode(stockJSON)<br><br><span class="hljs-comment">-- 组合数据</span><br>item.stock = stock.stock<br>item.sold = stock.sold<br><br><span class="hljs-comment">-- 把item序列化为json 返回结果</span><br>ngx.say(cjson.encode(item))<br></code></pre></td></tr></table></figure><h3 id="4-4-5-基于ID负载均衡"><a href="#4-4-5-基于ID负载均衡" class="headerlink" title="4.4.5.基于ID负载均衡"></a>4.4.5.基于ID负载均衡</h3><p>刚才的代码中，我们的tomcat是单机部署。而实际开发中，tomcat一定是集群模式：</p><p><img src="/../images/image-20210821111023255.png" alt="image-20210821111023255"></p><p>因此，OpenResty需要对tomcat集群做负载均衡。</p><p>而默认的负载均衡规则是轮询模式，当我们查询/item/10001时：</p><ul><li>第一次会访问8081端口的tomcat服务，在该服务内部就形成了JVM进程缓存</li><li>第二次会访问8082端口的tomcat服务，该服务内部没有JVM缓存（因为JVM缓存无法共享），会查询数据库</li><li>…</li></ul><p>你看，因为轮询的原因，第一次查询8081形成的JVM缓存并未生效，直到下一次再次访问到8081时才可以生效，缓存命中率太低了。</p><p>怎么办？</p><p>如果能让同一个商品，每次查询时都访问同一个tomcat服务，那么JVM缓存就一定能生效了。</p><p>也就是说，我们需要根据商品id做负载均衡，而不是轮询。</p><h4 id="1）原理"><a href="#1）原理" class="headerlink" title="1）原理"></a>1）原理</h4><p>nginx提供了基于请求路径做负载均衡的算法：</p><p>nginx根据请求路径做hash运算，把得到的数值对tomcat服务的数量取余，余数是几，就访问第几个服务，实现负载均衡。</p><p>例如：</p><ul><li>我们的请求路径是 /item/10001</li><li>tomcat总数为2台（8081、8082）</li><li>对请求路径/item/1001做hash运算求余的结果为1</li><li>则访问第一个tomcat服务，也就是8081</li></ul><p>只要id不变，每次hash运算结果也不会变，那就可以保证同一个商品，一直访问同一个tomcat服务，确保JVM缓存生效。</p><h4 id="2）实现"><a href="#2）实现" class="headerlink" title="2）实现"></a>2）实现</h4><p>修改<code>/usr/local/openresty/nginx/conf/nginx.conf</code>文件，实现基于ID做负载均衡。</p><p>首先，定义tomcat集群，并设置基于路径做负载均衡：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> tomcat-cluster &#123;<br>    <span class="hljs-attribute">hash</span> <span class="hljs-variable">$request_uri</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.150.1:8081</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.150.1:8082</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，修改对tomcat服务的反向代理，目标指向tomcat集群：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /item &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://tomcat-cluster;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新加载OpenResty</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">nginx -s reload<br></code></pre></td></tr></table></figure><h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h4><p>启动两台tomcat服务：</p><p><img src="/../images/image-20210821112420464.png" alt="image-20210821112420464"></p><p>同时启动：</p><p><img src="/../images/image-20210821112444482.png" alt="image-20210821112444482"> </p><p>清空日志后，再次访问页面，可以看到不同id的商品，访问到了不同的tomcat服务：</p><p><img src="/../images/image-20210821112559965.png" alt="image-20210821112559965"></p><p><img src="/../images/image-20210821112637430.png" alt="image-20210821112637430"></p><h2 id="4-5-Redis缓存预热"><a href="#4-5-Redis缓存预热" class="headerlink" title="4.5.Redis缓存预热"></a>4.5.Redis缓存预热</h2><p>Redis缓存会面临冷启动问题：</p><p><strong>冷启动</strong>：服务刚刚启动时，Redis中并没有缓存，如果所有商品数据都在第一次查询时添加缓存，可能会给数据库带来较大压力。</p><p><strong>缓存预热</strong>：在实际开发中，我们可以利用大数据统计用户访问的热点数据，在项目启动时将这些热点数据提前查询并保存到Redis中。</p><p>我们数据量较少，并且没有数据统计相关功能，目前可以在启动时将所有数据都放入缓存中。</p><p>1）利用Docker安装Redis</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name redis -p 6379:6379 -d redis redis-server --appendonly <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p>2）在item-service服务中引入Redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3）配置Redis地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><br></code></pre></td></tr></table></figure><p>4）编写初始化类</p><p>缓存预热需要在项目启动时完成，并且必须是拿到RedisTemplate之后。</p><p>这里我们利用InitializingBean接口来实现，因为InitializingBean可以在对象被Spring创建并且成员变量全部注入后执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.item.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.heima.item.pojo.Item;<br><span class="hljs-keyword">import</span> com.heima.item.pojo.ItemStock;<br><span class="hljs-keyword">import</span> com.heima.item.service.IItemService;<br><span class="hljs-keyword">import</span> com.heima.item.service.IItemStockService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.InitializingBean;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemService itemService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemStockService stockService;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">MAPPER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 初始化缓存</span><br>        <span class="hljs-comment">// 1.查询商品信息</span><br>        List&lt;Item&gt; itemList = itemService.list();<br>        <span class="hljs-comment">// 2.放入缓存</span><br>        <span class="hljs-keyword">for</span> (Item item : itemList) &#123;<br>            <span class="hljs-comment">// 2.1.item序列化为JSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> MAPPER.writeValueAsString(item);<br>            <span class="hljs-comment">// 2.2.存入redis</span><br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:id:&quot;</span> + item.getId(), json);<br>        &#125;<br><br>        <span class="hljs-comment">// 3.查询商品库存信息</span><br>        List&lt;ItemStock&gt; stockList = stockService.list();<br>        <span class="hljs-comment">// 4.放入缓存</span><br>        <span class="hljs-keyword">for</span> (ItemStock stock : stockList) &#123;<br>            <span class="hljs-comment">// 2.1.item序列化为JSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> MAPPER.writeValueAsString(stock);<br>            <span class="hljs-comment">// 2.2.存入redis</span><br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:stock:id:&quot;</span> + stock.getId(), json);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6-查询Redis缓存"><a href="#4-6-查询Redis缓存" class="headerlink" title="4.6.查询Redis缓存"></a>4.6.查询Redis缓存</h2><p>现在，Redis缓存已经准备就绪，我们可以再OpenResty中实现查询Redis的逻辑了。如下图红框所示：</p><p><img src="/../images/image-20210821113340111.png" alt="image-20210821113340111"></p><p>当请求进入OpenResty之后：</p><ul><li>优先查询Redis缓存</li><li>如果Redis缓存未命中，再查询Tomcat</li></ul><h3 id="4-6-1-封装Redis工具"><a href="#4-6-1-封装Redis工具" class="headerlink" title="4.6.1.封装Redis工具"></a>4.6.1.封装Redis工具</h3><p>OpenResty提供了操作Redis的模块，我们只要引入该模块就能直接使用。但是为了方便，我们将Redis操作封装到之前的common.lua工具库中。</p><p>修改<code>/usr/local/openresty/lualib/common.lua</code>文件：</p><p>1）引入Redis模块，并初始化Redis对象</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入redis</span><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;resty.redis&#x27;</span>)<br><span class="hljs-comment">-- 初始化redis</span><br><span class="hljs-keyword">local</span> red = redis:new()<br>red:set_timeouts(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p>2）封装函数，用来释放Redis连接，其实是放入连接池</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 关闭redis连接的工具方法，其实是放入连接池</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close_redis</span><span class="hljs-params">(red)</span></span><br>    <span class="hljs-keyword">local</span> pool_max_idle_time = <span class="hljs-number">10000</span> <span class="hljs-comment">-- 连接的空闲时间，单位是毫秒</span><br>    <span class="hljs-keyword">local</span> pool_size = <span class="hljs-number">100</span> <span class="hljs-comment">--连接池大小</span><br>    <span class="hljs-keyword">local</span> ok, err = red:set_keepalive(pool_max_idle_time, pool_size)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;放入redis连接池失败: &quot;</span>, err)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>3）封装函数，根据key查询Redis数据</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 查询redis的方法 ip和port是redis地址，key是查询的key</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_redis</span><span class="hljs-params">(ip, port, key)</span></span><br>    <span class="hljs-comment">-- 获取一个连接</span><br>    <span class="hljs-keyword">local</span> ok, err = red:connect(ip, port)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;连接redis失败 : &quot;</span>, err)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">-- 查询redis</span><br>    <span class="hljs-keyword">local</span> resp, err = red:get(key)<br>    <span class="hljs-comment">-- 查询失败处理</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;查询Redis失败: &quot;</span>, err, <span class="hljs-string">&quot;, key = &quot;</span> , key)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">--得到的数据为空处理</span><br>    <span class="hljs-keyword">if</span> resp == ngx.null <span class="hljs-keyword">then</span><br>        resp = <span class="hljs-literal">nil</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;查询Redis数据为空, key = &quot;</span>, key)<br>    <span class="hljs-keyword">end</span><br>    close_redis(red)<br>    <span class="hljs-keyword">return</span> resp<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>4）导出</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 将方法导出</span><br><span class="hljs-keyword">local</span> _M = &#123;  <br>    read_http = read_http,<br>    read_redis = read_redis<br>&#125;  <br><span class="hljs-keyword">return</span> _M<br></code></pre></td></tr></table></figure><p>完整的common.lua：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入redis</span><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;resty.redis&#x27;</span>)<br><span class="hljs-comment">-- 初始化redis</span><br><span class="hljs-keyword">local</span> red = redis:new()<br>red:set_timeouts(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>)<br><br><span class="hljs-comment">-- 关闭redis连接的工具方法，其实是放入连接池</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close_redis</span><span class="hljs-params">(red)</span></span><br>    <span class="hljs-keyword">local</span> pool_max_idle_time = <span class="hljs-number">10000</span> <span class="hljs-comment">-- 连接的空闲时间，单位是毫秒</span><br>    <span class="hljs-keyword">local</span> pool_size = <span class="hljs-number">100</span> <span class="hljs-comment">--连接池大小</span><br>    <span class="hljs-keyword">local</span> ok, err = red:set_keepalive(pool_max_idle_time, pool_size)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;放入redis连接池失败: &quot;</span>, err)<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 查询redis的方法 ip和port是redis地址，key是查询的key</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_redis</span><span class="hljs-params">(ip, port, key)</span></span><br>    <span class="hljs-comment">-- 获取一个连接</span><br>    <span class="hljs-keyword">local</span> ok, err = red:connect(ip, port)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ok <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;连接redis失败 : &quot;</span>, err)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">-- 查询redis</span><br>    <span class="hljs-keyword">local</span> resp, err = red:get(key)<br>    <span class="hljs-comment">-- 查询失败处理</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;查询Redis失败: &quot;</span>, err, <span class="hljs-string">&quot;, key = &quot;</span> , key)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">--得到的数据为空处理</span><br>    <span class="hljs-keyword">if</span> resp == ngx.null <span class="hljs-keyword">then</span><br>        resp = <span class="hljs-literal">nil</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;查询Redis数据为空, key = &quot;</span>, key)<br>    <span class="hljs-keyword">end</span><br>    close_redis(red)<br>    <span class="hljs-keyword">return</span> resp<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 封装函数，发送http请求，并解析响应</span><br><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_http</span><span class="hljs-params">(path, params)</span></span><br>    <span class="hljs-keyword">local</span> resp = ngx.location.capture(<span class="hljs-built_in">path</span>,&#123;<br>        method = ngx.HTTP_GET,<br>        args = params,<br>    &#125;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resp <span class="hljs-keyword">then</span><br>        <span class="hljs-comment">-- 记录错误信息，返回404</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;http查询失败, path: &quot;</span>, <span class="hljs-built_in">path</span> , <span class="hljs-string">&quot;, args: &quot;</span>, args)<br>        ngx.<span class="hljs-built_in">exit</span>(<span class="hljs-number">404</span>)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">return</span> resp.body<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 将方法导出</span><br><span class="hljs-keyword">local</span> _M = &#123;  <br>    read_http = read_http,<br>    read_redis = read_redis<br>&#125;  <br><span class="hljs-keyword">return</span> _M<br></code></pre></td></tr></table></figure><h3 id="4-6-2-实现Redis查询"><a href="#4-6-2-实现Redis查询" class="headerlink" title="4.6.2.实现Redis查询"></a>4.6.2.实现Redis查询</h3><p>接下来，我们就可以去修改item.lua文件，实现对Redis的查询了。</p><p>查询逻辑是：</p><ul><li>根据id查询Redis</li><li>如果查询失败则继续查询Tomcat</li><li>将查询结果返回</li></ul><p>1）修改<code>/usr/local/openresty/lua/item.lua</code>文件，添加一个查询函数：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入common函数库</span><br><span class="hljs-keyword">local</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;common&#x27;</span>)<br><span class="hljs-keyword">local</span> read_http = common.read_http<br><span class="hljs-keyword">local</span> read_redis = common.read_redis<br><span class="hljs-comment">-- 封装查询函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_data</span><span class="hljs-params">(key, path, params)</span></span><br>    <span class="hljs-comment">-- 查询本地缓存</span><br>    <span class="hljs-keyword">local</span> val = read_redis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>, key)<br>    <span class="hljs-comment">-- 判断查询结果</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> val <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;redis查询失败，尝试查询http， key: &quot;</span>, key)<br>        <span class="hljs-comment">-- redis查询失败，去查询http</span><br>        val = read_http(<span class="hljs-built_in">path</span>, params)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">-- 返回数据</span><br>    <span class="hljs-keyword">return</span> val<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>2）而后修改商品查询、库存查询的业务：</p><p><img src="/../images/image-20210821114528954.png" alt="image-20210821114528954"></p><p>3）完整的item.lua代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入common函数库</span><br><span class="hljs-keyword">local</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;common&#x27;</span>)<br><span class="hljs-keyword">local</span> read_http = common.read_http<br><span class="hljs-keyword">local</span> read_redis = common.read_redis<br><span class="hljs-comment">-- 导入cjson库</span><br><span class="hljs-keyword">local</span> cjson = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cjson&#x27;</span>)<br><br><span class="hljs-comment">-- 封装查询函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_data</span><span class="hljs-params">(key, path, params)</span></span><br>    <span class="hljs-comment">-- 查询本地缓存</span><br>    <span class="hljs-keyword">local</span> val = read_redis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>, key)<br>    <span class="hljs-comment">-- 判断查询结果</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> val <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;redis查询失败，尝试查询http， key: &quot;</span>, key)<br>        <span class="hljs-comment">-- redis查询失败，去查询http</span><br>        val = read_http(<span class="hljs-built_in">path</span>, params)<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">-- 返回数据</span><br>    <span class="hljs-keyword">return</span> val<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 获取路径参数</span><br><span class="hljs-keyword">local</span> id = ngx.var[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">-- 查询商品信息</span><br><span class="hljs-keyword">local</span> itemJSON = read_data(<span class="hljs-string">&quot;item:id:&quot;</span> .. id,  <span class="hljs-string">&quot;/item/&quot;</span> .. id, <span class="hljs-literal">nil</span>)<br><span class="hljs-comment">-- 查询库存信息</span><br><span class="hljs-keyword">local</span> stockJSON = read_data(<span class="hljs-string">&quot;item:stock:id:&quot;</span> .. id, <span class="hljs-string">&quot;/item/stock/&quot;</span> .. id, <span class="hljs-literal">nil</span>)<br><br><span class="hljs-comment">-- JSON转化为lua的table</span><br><span class="hljs-keyword">local</span> item = cjson.decode(itemJSON)<br><span class="hljs-keyword">local</span> stock = cjson.decode(stockJSON)<br><span class="hljs-comment">-- 组合数据</span><br>item.stock = stock.stock<br>item.sold = stock.sold<br><br><span class="hljs-comment">-- 把item序列化为json 返回结果</span><br>ngx.say(cjson.encode(item))<br></code></pre></td></tr></table></figure><h2 id="4-7-Nginx本地缓存"><a href="#4-7-Nginx本地缓存" class="headerlink" title="4.7.Nginx本地缓存"></a>4.7.Nginx本地缓存</h2><p>现在，整个多级缓存中只差最后一环，也就是nginx的本地缓存了。如图：</p><p><img src="/../images/image-20210821114742950.png" alt="image-20210821114742950"></p><h3 id="4-7-1-本地缓存API"><a href="#4-7-1-本地缓存API" class="headerlink" title="4.7.1.本地缓存API"></a>4.7.1.本地缓存API</h3><p>OpenResty为Nginx提供了<strong>shard dict</strong>的功能，可以在nginx的多个worker之间共享数据，实现缓存功能。</p><p>1）开启共享字典，在nginx.conf的http下添加配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 共享字典，也就是本地缓存，名称叫做：item_cache，大小150m</span><br><span class="hljs-attribute">lua_shared_dict</span> item_cache <span class="hljs-number">150m</span>; <br></code></pre></td></tr></table></figure><p>2）操作共享字典：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 获取本地缓存对象</span><br><span class="hljs-keyword">local</span> item_cache = ngx.shared.item_cache<br><span class="hljs-comment">-- 存储, 指定key、value、过期时间，单位s，默认为0代表永不过期</span><br>item_cache:set(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-number">1000</span>)<br><span class="hljs-comment">-- 读取</span><br><span class="hljs-keyword">local</span> val = item_cache:get(<span class="hljs-string">&#x27;key&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="4-7-2-实现本地缓存查询"><a href="#4-7-2-实现本地缓存查询" class="headerlink" title="4.7.2.实现本地缓存查询"></a>4.7.2.实现本地缓存查询</h3><p>1）修改<code>/usr/local/openresty/lua/item.lua</code>文件，修改read_data查询函数，添加本地缓存逻辑：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入共享词典，本地缓存</span><br><span class="hljs-keyword">local</span> item_cache = ngx.shared.item_cache<br><br><span class="hljs-comment">-- 封装查询函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_data</span><span class="hljs-params">(key, expire, path, params)</span></span><br>    <span class="hljs-comment">-- 查询本地缓存</span><br>    <span class="hljs-keyword">local</span> val = item_cache:get(key)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> val <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;本地缓存查询失败，尝试查询Redis， key: &quot;</span>, key)<br>        <span class="hljs-comment">-- 查询redis</span><br>        val = read_redis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>, key)<br>        <span class="hljs-comment">-- 判断查询结果</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> val <span class="hljs-keyword">then</span><br>            ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;redis查询失败，尝试查询http， key: &quot;</span>, key)<br>            <span class="hljs-comment">-- redis查询失败，去查询http</span><br>            val = read_http(<span class="hljs-built_in">path</span>, params)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">-- 查询成功，把数据写入本地缓存</span><br>    item_cache:set(key, val, expire)<br>    <span class="hljs-comment">-- 返回数据</span><br>    <span class="hljs-keyword">return</span> val<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>2）修改item.lua中查询商品和库存的业务，实现最新的read_data函数：</p><p><img src="/../images/image-20210821115108528.png" alt="image-20210821115108528"></p><p>其实就是多了缓存时间参数，过期后nginx缓存会自动删除，下次访问即可更新缓存。</p><p>这里给商品基本信息设置超时时间为30分钟，库存为1分钟。</p><p>因为库存更新频率较高，如果缓存时间过长，可能与数据库差异较大。</p><p>3）完整的item.lua文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 导入common函数库</span><br><span class="hljs-keyword">local</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;common&#x27;</span>)<br><span class="hljs-keyword">local</span> read_http = common.read_http<br><span class="hljs-keyword">local</span> read_redis = common.read_redis<br><span class="hljs-comment">-- 导入cjson库</span><br><span class="hljs-keyword">local</span> cjson = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cjson&#x27;</span>)<br><span class="hljs-comment">-- 导入共享词典，本地缓存</span><br><span class="hljs-keyword">local</span> item_cache = ngx.shared.item_cache<br><br><span class="hljs-comment">-- 封装查询函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read_data</span><span class="hljs-params">(key, expire, path, params)</span></span><br>    <span class="hljs-comment">-- 查询本地缓存</span><br>    <span class="hljs-keyword">local</span> val = item_cache:get(key)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> val <span class="hljs-keyword">then</span><br>        ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;本地缓存查询失败，尝试查询Redis， key: &quot;</span>, key)<br>        <span class="hljs-comment">-- 查询redis</span><br>        val = read_redis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>, key)<br>        <span class="hljs-comment">-- 判断查询结果</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> val <span class="hljs-keyword">then</span><br>            ngx.<span class="hljs-built_in">log</span>(ngx.ERR, <span class="hljs-string">&quot;redis查询失败，尝试查询http， key: &quot;</span>, key)<br>            <span class="hljs-comment">-- redis查询失败，去查询http</span><br>            val = read_http(<span class="hljs-built_in">path</span>, params)<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">-- 查询成功，把数据写入本地缓存</span><br>    item_cache:set(key, val, expire)<br>    <span class="hljs-comment">-- 返回数据</span><br>    <span class="hljs-keyword">return</span> val<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">-- 获取路径参数</span><br><span class="hljs-keyword">local</span> id = ngx.var[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">-- 查询商品信息</span><br><span class="hljs-keyword">local</span> itemJSON = read_data(<span class="hljs-string">&quot;item:id:&quot;</span> .. id, <span class="hljs-number">1800</span>,  <span class="hljs-string">&quot;/item/&quot;</span> .. id, <span class="hljs-literal">nil</span>)<br><span class="hljs-comment">-- 查询库存信息</span><br><span class="hljs-keyword">local</span> stockJSON = read_data(<span class="hljs-string">&quot;item:stock:id:&quot;</span> .. id, <span class="hljs-number">60</span>, <span class="hljs-string">&quot;/item/stock/&quot;</span> .. id, <span class="hljs-literal">nil</span>)<br><br><span class="hljs-comment">-- JSON转化为lua的table</span><br><span class="hljs-keyword">local</span> item = cjson.decode(itemJSON)<br><span class="hljs-keyword">local</span> stock = cjson.decode(stockJSON)<br><span class="hljs-comment">-- 组合数据</span><br>item.stock = stock.stock<br>item.sold = stock.sold<br><br><span class="hljs-comment">-- 把item序列化为json 返回结果</span><br>ngx.say(cjson.encode(item))<br></code></pre></td></tr></table></figure><h1 id="5-缓存同步"><a href="#5-缓存同步" class="headerlink" title="5.缓存同步"></a>5.缓存同步</h1><p>大多数情况下，浏览器查询到的都是缓存数据，如果缓存数据与数据库数据存在较大差异，可能会产生比较严重的后果。</p><p>所以我们必须保证数据库数据、缓存数据的一致性，这就是缓存与数据库的同步。</p><h2 id="5-1-数据同步策略"><a href="#5-1-数据同步策略" class="headerlink" title="5.1.数据同步策略"></a>5.1.数据同步策略</h2><p>缓存数据同步的常见方式有三种：</p><p><strong>设置有效期</strong>：给缓存设置有效期，到期后自动删除。再次查询时更新</p><ul><li>优势：简单、方便</li><li>缺点：时效性差，缓存过期之前可能不一致</li><li>场景：更新频率较低，时效性要求低的业务</li></ul><p><strong>同步双写</strong>：在修改数据库的同时，直接修改缓存</p><ul><li>优势：时效性强，缓存与数据库强一致</li><li>缺点：有代码侵入，耦合度高；</li><li>场景：对一致性、时效性要求较高的缓存数据</li></ul><p><strong>异步通知：</strong>修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据</p><ul><li>优势：低耦合，可以同时通知多个缓存服务</li><li>缺点：时效性一般，可能存在中间不一致状态</li><li>场景：时效性要求一般，有多个服务需要同步</li></ul><p>而异步实现又可以基于MQ或者Canal来实现：</p><p>1）基于MQ的异步通知：</p><p><img src="/../images/image-20210821115552327.png" alt="image-20210821115552327"></p><p>解读：</p><ul><li>商品服务完成对数据的修改后，只需要发送一条消息到MQ中。</li><li>缓存服务监听MQ消息，然后完成对缓存的更新</li></ul><p>依然有少量的代码侵入。</p><p>2）基于Canal的通知</p><p><img src="/../images/image-20210821115719363.png" alt="image-20210821115719363"></p><p>解读：</p><ul><li>商品服务完成商品修改后，业务直接结束，没有任何代码侵入</li><li>Canal监听MySQL变化，当发现变化后，立即通知缓存服务</li><li>缓存服务接收到canal通知，更新缓存</li></ul><p>代码零侵入</p><h2 id="5-2-安装Canal"><a href="#5-2-安装Canal" class="headerlink" title="5.2.安装Canal"></a>5.2.安装Canal</h2><h3 id="5-2-1-认识Canal"><a href="#5-2-1-认识Canal" class="headerlink" title="5.2.1.认识Canal"></a>5.2.1.认识Canal</h3><p>**Canal [kə’næl]**，译意为水道/管道/沟渠，canal是阿里巴巴旗下的一款开源项目，基于Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费。GitHub的地址：<a href="https://github.com/alibaba/canal">https://github.com/alibaba/canal</a></p><p>Canal是基于mysql的主从同步来实现的，MySQL主从同步的原理如下：</p><p><img src="/../images/image-20210821115914748.png" alt="image-20210821115914748"></p><ul><li>1）MySQL master 将数据变更写入二进制日志( binary log），其中记录的数据叫做binary log events</li><li>2）MySQL slave 将 master 的 binary log events拷贝到它的中继日志(relay log)</li><li>3）MySQL slave 重放 relay log 中事件，将数据变更反映它自己的数据</li></ul><p>而Canal就是把自己伪装成MySQL的一个slave节点，从而监听master的binary log变化。再把得到的变化信息通知给Canal的客户端，进而完成对其它数据库的同步。</p><p><img src="/../images/image-20210821115948395.png" alt="image-20210821115948395"></p><h3 id="5-2-2-安装Canal"><a href="#5-2-2-安装Canal" class="headerlink" title="5.2.2.安装Canal"></a>5.2.2.安装Canal</h3><p>安装和配置Canal参考课前资料文档：</p><p><img src="/../images/image-20210821120017324.png" alt="image-20210821120017324"> </p><h2 id="5-3-监听Canal"><a href="#5-3-监听Canal" class="headerlink" title="5.3.监听Canal"></a>5.3.监听Canal</h2><p>Canal提供了各种语言的客户端，当Canal监听到binlog变化时，会通知Canal的客户端。</p><p><img src="/../images/image-20210821120049024.png" alt="image-20210821120049024"></p><p>我们可以利用Canal提供的Java客户端，监听Canal通知消息。当收到变化的消息时，完成对缓存的更新。</p><p>不过这里我们会使用GitHub上的第三方开源的canal-starter客户端。地址：<a href="https://github.com/NormanGyllenhaal/canal-client">https://github.com/NormanGyllenhaal/canal-client</a></p><p>与SpringBoot完美整合，自动装配，比官方客户端要简单好用很多。</p><h3 id="5-3-1-引入依赖："><a href="#5-3-1-引入依赖：" class="headerlink" title="5.3.1.引入依赖："></a>5.3.1.引入依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>top.javatool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>canal-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1-RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-2-编写配置："><a href="#5-3-2-编写配置：" class="headerlink" title="5.3.2.编写配置："></a>5.3.2.编写配置：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">canal:</span><br>  <span class="hljs-attr">destination:</span> <span class="hljs-string">heima</span> <span class="hljs-comment"># canal的集群名字，要与安装canal时设置的名称一致</span><br>  <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:11111</span> <span class="hljs-comment"># canal服务地址</span><br></code></pre></td></tr></table></figure><h3 id="5-3-3-修改Item实体类"><a href="#5-3-3-修改Item实体类" class="headerlink" title="5.3.3.修改Item实体类"></a>5.3.3.修改Item实体类</h3><p>通过@Id、@Column、等注解完成Item与数据库表字段的映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.item.pojo;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.data.annotation.Id;<br><span class="hljs-keyword">import</span> org.springframework.data.annotation.Transient;<br><br><span class="hljs-keyword">import</span> javax.persistence.Column;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;tb_item&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<span class="hljs-comment">//商品id</span><br>    <span class="hljs-meta">@Column(name = &quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//商品名称</span><br>    <span class="hljs-keyword">private</span> String title;<span class="hljs-comment">//商品标题</span><br>    <span class="hljs-keyword">private</span> Long price;<span class="hljs-comment">//价格（分）</span><br>    <span class="hljs-keyword">private</span> String image;<span class="hljs-comment">//商品图片</span><br>    <span class="hljs-keyword">private</span> String category;<span class="hljs-comment">//分类名称</span><br>    <span class="hljs-keyword">private</span> String brand;<span class="hljs-comment">//品牌名称</span><br>    <span class="hljs-keyword">private</span> String spec;<span class="hljs-comment">//规格</span><br>    <span class="hljs-keyword">private</span> Integer status;<span class="hljs-comment">//商品状态 1-正常，2-下架</span><br>    <span class="hljs-keyword">private</span> Date createTime;<span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<span class="hljs-comment">//更新时间</span><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-keyword">private</span> Integer stock;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-keyword">private</span> Integer sold;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-4-编写监听器"><a href="#5-3-4-编写监听器" class="headerlink" title="5.3.4.编写监听器"></a>5.3.4.编写监听器</h3><p>通过实现<code>EntryHandler&lt;T&gt;</code>接口编写监听器，监听Canal消息。注意两点：</p><ul><li>实现类通过<code>@CanalTable(&quot;tb_item&quot;)</code>指定监听的表信息</li><li>EntryHandler的泛型是与表对应的实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.item.canal;<br><br><span class="hljs-keyword">import</span> com.github.benmanes.caffeine.cache.Cache;<br><span class="hljs-keyword">import</span> com.heima.item.config.RedisHandler;<br><span class="hljs-keyword">import</span> com.heima.item.pojo.Item;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> top.javatool.canal.client.annotation.CanalTable;<br><span class="hljs-keyword">import</span> top.javatool.canal.client.handler.EntryHandler;<br><br><span class="hljs-meta">@CanalTable(&quot;tb_item&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EntryHandler</span>&lt;Item&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisHandler redisHandler;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cache&lt;Long, Item&gt; itemCache;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Item item)</span> &#123;<br>        <span class="hljs-comment">// 写数据到JVM进程缓存</span><br>        itemCache.put(item.getId(), item);<br>        <span class="hljs-comment">// 写数据到redis</span><br>        redisHandler.saveItem(item);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Item before, Item after)</span> &#123;<br>        <span class="hljs-comment">// 写数据到JVM进程缓存</span><br>        itemCache.put(after.getId(), after);<br>        <span class="hljs-comment">// 写数据到redis</span><br>        redisHandler.saveItem(after);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Item item)</span> &#123;<br>        <span class="hljs-comment">// 删除数据到JVM进程缓存</span><br>        itemCache.invalidate(item.getId());<br>        <span class="hljs-comment">// 删除数据到redis</span><br>        redisHandler.deleteItemById(item.getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里对Redis的操作都封装到了RedisHandler这个对象中，是我们之前做缓存预热时编写的一个类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.item.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.heima.item.pojo.Item;<br><span class="hljs-keyword">import</span> com.heima.item.pojo.ItemStock;<br><span class="hljs-keyword">import</span> com.heima.item.service.IItemService;<br><span class="hljs-keyword">import</span> com.heima.item.service.IItemStockService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.InitializingBean;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemService itemService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemStockService stockService;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">MAPPER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 初始化缓存</span><br>        <span class="hljs-comment">// 1.查询商品信息</span><br>        List&lt;Item&gt; itemList = itemService.list();<br>        <span class="hljs-comment">// 2.放入缓存</span><br>        <span class="hljs-keyword">for</span> (Item item : itemList) &#123;<br>            <span class="hljs-comment">// 2.1.item序列化为JSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> MAPPER.writeValueAsString(item);<br>            <span class="hljs-comment">// 2.2.存入redis</span><br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:id:&quot;</span> + item.getId(), json);<br>        &#125;<br><br>        <span class="hljs-comment">// 3.查询商品库存信息</span><br>        List&lt;ItemStock&gt; stockList = stockService.list();<br>        <span class="hljs-comment">// 4.放入缓存</span><br>        <span class="hljs-keyword">for</span> (ItemStock stock : stockList) &#123;<br>            <span class="hljs-comment">// 2.1.item序列化为JSON</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> MAPPER.writeValueAsString(stock);<br>            <span class="hljs-comment">// 2.2.存入redis</span><br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:stock:id:&quot;</span> + stock.getId(), json);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveItem</span><span class="hljs-params">(Item item)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> MAPPER.writeValueAsString(item);<br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;item:id:&quot;</span> + item.getId(), json);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteItemById</span><span class="hljs-params">(Long id)</span> &#123;<br>        redisTemplate.delete(<span class="hljs-string">&quot;item:id:&quot;</span> + id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多级缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习（七）————Redis集群</title>
    <link href="/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <url>/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><p>本章是基于CentOS7下的Redis集群教程，包括：</p><ul><li>单机安装Redis</li><li>Redis主从</li><li>Redis分片集群</li></ul><h1 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1.单机安装Redis"></a>1.单机安装Redis</h1><p>首先需要安装Redis所需要的依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y gcc tcl<br></code></pre></td></tr></table></figure><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="/../images/image-20210629114325516.png" alt="image-20210629114325516"></p><p>例如，我放到了/tmp目录：</p><p><img src="/../images/image-20210629114830642.png" alt="image-20210629114830642"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xvf redis-6.2.4.tar.gz<br></code></pre></td></tr></table></figure><p>解压后：</p><p><img src="/../images/image-20210629114941810.png" alt="image-20210629114941810"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> redis-6.2.4<br></code></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 绑定地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 数据库数量，设置为1</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br></code></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-server redis.conf<br></code></pre></td></tr></table></figure><p>停止redis服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli shutdown<br></code></pre></td></tr></table></figure><h1 id="2-Redis主从集群"><a href="#2-Redis主从集群" class="headerlink" title="2.Redis主从集群"></a>2.Redis主从集群</h1><h2 id="2-1-集群结构"><a href="#2-1-集群结构" class="headerlink" title="2.1.集群结构"></a>2.1.集群结构</h2><p>我们搭建的主从集群结构如图：</p><p><img src="/../images/image-20210630111505799.png" alt="image-20210630111505799"></p><p>共包含三个节点，一个主节点，两个从节点。</p><p>这里我们会在同一台虚拟机中开启3个redis实例，模拟主从集群，信息如下：</p><table><thead><tr><th align="center">IP</th><th align="center">PORT</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.150.101</td><td align="center">7001</td><td align="center">master</td></tr><tr><td align="center">192.168.150.101</td><td align="center">7002</td><td align="center">slave</td></tr><tr><td align="center">192.168.150.101</td><td align="center">7003</td><td align="center">slave</td></tr></tbody></table><h2 id="2-2-准备实例和配置"><a href="#2-2-准备实例和配置" class="headerlink" title="2.2.准备实例和配置"></a>2.2.准备实例和配置</h2><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>1）创建目录</p><p>我们创建三个文件夹，名字分别叫7001、7002、7003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">mkdir</span> 7001 7002 7003<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/../images/image-20210630113929868.png" alt="image-20210630113929868"></p><p>2）恢复原始配置</p><p>修改redis-6.2.4/redis.conf文件，将其中的持久化模式改为默认的RDB模式，AOF保持关闭状态。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 开启RDB</span><br><span class="hljs-comment"># save &quot;&quot;</span><br><span class="hljs-attr">save</span> <span class="hljs-string">3600 1</span><br><span class="hljs-attr">save</span> <span class="hljs-string">300 100</span><br><span class="hljs-attr">save</span> <span class="hljs-string">60 10000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 关闭AOF</span><br><span class="hljs-attr">appendonly</span> <span class="hljs-string">no</span><br></code></pre></td></tr></table></figure><p>3）拷贝配置文件到每个实例目录</p><p>然后将redis-6.2.4/redis.conf文件拷贝到三个目录中（在/tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方式一：逐个拷贝</span><br><span class="hljs-built_in">cp</span> redis-6.2.4/redis.conf 7001<br><span class="hljs-built_in">cp</span> redis-6.2.4/redis.conf 7002<br><span class="hljs-built_in">cp</span> redis-6.2.4/redis.conf 7003<br><span class="hljs-comment"># 方式二：管道组合命令，一键拷贝</span><br><span class="hljs-built_in">echo</span> 7001 7002 7003 | xargs -t -n 1 <span class="hljs-built_in">cp</span> redis-6.2.4/redis.conf<br></code></pre></td></tr></table></figure><p>4）修改每个实例的端口、工作目录</p><p>修改每个文件夹内的配置文件，将端口分别修改为7001、7002、7003，将rdb文件保存位置都修改为自己所在目录（在/tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -i -e <span class="hljs-string">&#x27;s/6379/7001/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/tmp\/7001\//g&#x27;</span> 7001/redis.conf<br>sed -i -e <span class="hljs-string">&#x27;s/6379/7002/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/tmp\/7002\//g&#x27;</span> 7002/redis.conf<br>sed -i -e <span class="hljs-string">&#x27;s/6379/7003/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/tmp\/7003\//g&#x27;</span> 7003/redis.conf<br></code></pre></td></tr></table></figure><p>5）修改每个实例的声明IP</p><p>虚拟机本身有多个IP，为了避免将来混乱，我们需要在redis.conf文件中指定每一个实例的绑定ip信息，格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># redis实例的声明 IP</span><br><span class="hljs-attr">replica-announce-ip</span> <span class="hljs-string">192.168.150.101</span><br></code></pre></td></tr></table></figure><p>每个目录都要改，我们一键完成修改（在/tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 逐一执行</span><br>sed -i <span class="hljs-string">&#x27;1a replica-announce-ip 192.168.150.101&#x27;</span> 7001/redis.conf<br>sed -i <span class="hljs-string">&#x27;1a replica-announce-ip 192.168.150.101&#x27;</span> 7002/redis.conf<br>sed -i <span class="hljs-string">&#x27;1a replica-announce-ip 192.168.150.101&#x27;</span> 7003/redis.conf<br><br><span class="hljs-comment"># 或者一键修改</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 | xargs -I&#123;&#125; -t sed -i <span class="hljs-string">&#x27;1a replica-announce-ip 192.168.150.101&#x27;</span> &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><h2 id="2-3-启动"><a href="#2-3-启动" class="headerlink" title="2.3.启动"></a>2.3.启动</h2><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 第1个</span><br>redis-server 7001/redis.conf<br><span class="hljs-comment"># 第2个</span><br>redis-server 7002/redis.conf<br><span class="hljs-comment"># 第3个</span><br>redis-server 7003/redis.conf<br></code></pre></td></tr></table></figure><p>启动后：</p><p><img src="/../images/image-20210630183914491.png" alt="image-20210630183914491"></p><p>如果要一键停止，可以运行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown<br></code></pre></td></tr></table></figure><h2 id="2-4-开启主从关系"><a href="#2-4-开启主从关系" class="headerlink" title="2.4.开启主从关系"></a>2.4.开启主从关系</h2><p>现在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。</p><p>有临时和永久两种模式：</p><ul><li><p>修改配置文件（永久生效）</p><ul><li>在redis.conf中添加一行配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ul></li><li><p>使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">slaveof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure></li></ul><p><strong><font color='red'>注意</font></strong>：在5.0以后新增命令replicaof，与salveof效果一致。</p><p>这里我们为了演示方便，使用方式二。</p><p>通过redis-cli命令连接7002，执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接 7002</span><br>redis-cli -p 7002<br><span class="hljs-comment"># 执行slaveof</span><br>slaveof 192.168.150.101 7001<br></code></pre></td></tr></table></figure><p>通过redis-cli命令连接7003，执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接 7003</span><br>redis-cli -p 7003<br><span class="hljs-comment"># 执行slaveof</span><br>slaveof 192.168.150.101 7001<br></code></pre></td></tr></table></figure><p>然后连接 7001节点，查看集群状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接 7001</span><br>redis-cli -p 7001<br><span class="hljs-comment"># 查看状态</span><br>info replication<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../images/image-20210630201258802.png" alt="image-20210630201258802"></p><h2 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5.测试"></a>2.5.测试</h2><p>执行下列操作以测试：</p><ul><li><p>利用redis-cli连接7001，执行<code>set num 123</code></p></li><li><p>利用redis-cli连接7002，执行<code>get num</code>，再执行<code>set num 666</code></p></li><li><p>利用redis-cli连接7003，执行<code>get num</code>，再执行<code>set num 888</code></p></li></ul><p>可以发现，只有在7001这个master节点上可以执行写操作，7002和7003这两个slave节点只能执行读操作。</p><h1 id="3-搭建哨兵集群"><a href="#3-搭建哨兵集群" class="headerlink" title="3.搭建哨兵集群"></a>3.搭建哨兵集群</h1><h2 id="3-1-集群结构"><a href="#3-1-集群结构" class="headerlink" title="3.1.集群结构"></a>3.1.集群结构</h2><p>这里我们搭建一个三节点形成的Sentinel集群，来监管之前的Redis主从集群。如图：</p><p><img src="/../images/image-20210701215227018.png" alt="image-20210701215227018"></p><p>三个sentinel实例信息如下：</p><table><thead><tr><th>节点</th><th align="center">IP</th><th align="center">PORT</th></tr></thead><tbody><tr><td>s1</td><td align="center">192.168.150.101</td><td align="center">27001</td></tr><tr><td>s2</td><td align="center">192.168.150.101</td><td align="center">27002</td></tr><tr><td>s3</td><td align="center">192.168.150.101</td><td align="center">27003</td></tr></tbody></table><h2 id="3-2-准备实例和配置"><a href="#3-2-准备实例和配置" class="headerlink" title="3.2.准备实例和配置"></a>3.2.准备实例和配置</h2><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>我们创建三个文件夹，名字分别叫s1、s2、s3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">mkdir</span> s1 s2 s3<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/../images/image-20210701215534714.png" alt="image-20210701215534714"></p><p>然后我们在s1目录创建一个sentinel.conf文件，添加下面的内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini">port 27001<br>sentinel announce-ip 192.168.150.101<br>sentinel monitor mymaster 192.168.150.101 7001 2<br>sentinel down-after-milliseconds mymaster 5000<br>sentinel failover-timeout mymaster 60000<br>dir &quot;/tmp/s1&quot;<br></code></pre></td></tr></table></figure><p>解读：</p><ul><li><code>port 27001</code>：是当前sentinel实例的端口</li><li><code>sentinel monitor mymaster 192.168.150.101 7001 2</code>：指定主节点信息<ul><li><code>mymaster</code>：主节点名称，自定义，任意写</li><li><code>192.168.150.101 7001</code>：主节点的ip和端口</li><li><code>2</code>：选举master时的quorum值</li></ul></li></ul><p>然后将s1/sentinel.conf文件拷贝到s2、s3两个目录中（在/tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方式一：逐个拷贝</span><br><span class="hljs-built_in">cp</span> s1/sentinel.conf s2<br><span class="hljs-built_in">cp</span> s1/sentinel.conf s3<br><span class="hljs-comment"># 方式二：管道组合命令，一键拷贝</span><br><span class="hljs-built_in">echo</span> s2 s3 | xargs -t -n 1 <span class="hljs-built_in">cp</span> s1/sentinel.conf<br></code></pre></td></tr></table></figure><p>修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -i -e <span class="hljs-string">&#x27;s/27001/27002/g&#x27;</span> -e <span class="hljs-string">&#x27;s/s1/s2/g&#x27;</span> s2/sentinel.conf<br>sed -i -e <span class="hljs-string">&#x27;s/27001/27003/g&#x27;</span> -e <span class="hljs-string">&#x27;s/s1/s3/g&#x27;</span> s3/sentinel.conf<br></code></pre></td></tr></table></figure><h2 id="3-3-启动"><a href="#3-3-启动" class="headerlink" title="3.3.启动"></a>3.3.启动</h2><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 第1个</span><br>redis-sentinel s1/sentinel.conf<br><span class="hljs-comment"># 第2个</span><br>redis-sentinel s2/sentinel.conf<br><span class="hljs-comment"># 第3个</span><br>redis-sentinel s3/sentinel.conf<br></code></pre></td></tr></table></figure><p>启动后：</p><p><img src="/../images/image-20210701220714104.png" alt="image-20210701220714104"></p><h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4.测试"></a>3.4.测试</h2><p>尝试让master节点7001宕机，查看sentinel日志：</p><p><img src="/../images/image-20210701222857997.png" alt="image-20210701222857997"></p><p>查看7003的日志：</p><p><img src="/../images/image-20210701223025709.png" alt="image-20210701223025709"></p><p>查看7002的日志：</p><p><img src="/../images/image-20210701223131264.png" alt="image-20210701223131264"></p><h1 id="4-搭建分片集群"><a href="#4-搭建分片集群" class="headerlink" title="4.搭建分片集群"></a>4.搭建分片集群</h1><h2 id="4-1-集群结构"><a href="#4-1-集群结构" class="headerlink" title="4.1.集群结构"></a>4.1.集群结构</h2><p>分片集群需要的节点数量较多，这里我们搭建一个最小的分片集群，包含3个master节点，每个master包含一个slave节点，结构如下：</p><p><img src="/../images/image-20210702164116027.png" alt="image-20210702164116027"></p><p>这里我们会在同一台虚拟机中开启6个redis实例，模拟分片集群，信息如下：</p><table><thead><tr><th align="center">IP</th><th align="center">PORT</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.150.101</td><td align="center">7001</td><td align="center">master</td></tr><tr><td align="center">192.168.150.101</td><td align="center">7002</td><td align="center">master</td></tr><tr><td align="center">192.168.150.101</td><td align="center">7003</td><td align="center">master</td></tr><tr><td align="center">192.168.150.101</td><td align="center">8001</td><td align="center">slave</td></tr><tr><td align="center">192.168.150.101</td><td align="center">8002</td><td align="center">slave</td></tr><tr><td align="center">192.168.150.101</td><td align="center">8003</td><td align="center">slave</td></tr></tbody></table><h2 id="4-2-准备实例和配置"><a href="#4-2-准备实例和配置" class="headerlink" title="4.2.准备实例和配置"></a>4.2.准备实例和配置</h2><p>删除之前的7001、7002、7003这几个目录，重新创建出7001、7002、7003、8001、8002、8003目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 删除旧的，避免配置干扰</span><br><span class="hljs-built_in">rm</span> -rf 7001 7002 7003<br><span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">mkdir</span> 7001 7002 7003 8001 8002 8003<br></code></pre></td></tr></table></figure><p>在/tmp下准备一个新的redis.conf文件，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini">port 6379<br><span class="hljs-comment"># 开启集群功能</span><br>cluster-enabled yes<br><span class="hljs-comment"># 集群的配置文件名称，不需要我们创建，由redis自己维护</span><br>cluster-config-file /tmp/6379/nodes.conf<br><span class="hljs-comment"># 节点心跳失败的超时时间</span><br>cluster-node-timeout 5000<br><span class="hljs-comment"># 持久化文件存放目录</span><br>dir /tmp/6379<br><span class="hljs-comment"># 绑定地址</span><br>bind 0.0.0.0<br><span class="hljs-comment"># 让redis后台运行</span><br>daemonize yes<br><span class="hljs-comment"># 注册的实例ip</span><br>replica-announce-ip 192.168.150.101<br><span class="hljs-comment"># 保护模式</span><br>protected-mode no<br><span class="hljs-comment"># 数据库数量</span><br>databases 1<br><span class="hljs-comment"># 日志</span><br>logfile /tmp/6379/run.log<br></code></pre></td></tr></table></figure><p>将这个文件拷贝到每个目录下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 执行拷贝</span><br><span class="hljs-built_in">echo</span> 7001 7002 7003 8001 8002 8003 | xargs -t -n 1 <span class="hljs-built_in">cp</span> redis.conf<br></code></pre></td></tr></table></figure><p>修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 修改配置文件</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t sed -i <span class="hljs-string">&#x27;s/6379/&#123;&#125;/g&#x27;</span> &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><h2 id="4-3-启动"><a href="#4-3-启动" class="headerlink" title="4.3.启动"></a>4.3.启动</h2><p>因为已经配置了后台启动模式，所以可以直接启动服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 一键启动所有服务</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-server &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><p>通过ps查看状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps -ef | grep redis<br></code></pre></td></tr></table></figure><p>发现服务都已经正常启动：</p><p><img src="/../images/image-20210702174255799.png" alt="image-20210702174255799"></p><p>如果要关闭所有进程，可以执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps -ef | grep redis | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="hljs-built_in">kill</span><br></code></pre></td></tr></table></figure><p>或者（推荐这种方式）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown<br></code></pre></td></tr></table></figure><h2 id="4-4-创建集群"><a href="#4-4-创建集群" class="headerlink" title="4.4.创建集群"></a>4.4.创建集群</h2><p>虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联。</p><p>我们需要执行命令来创建集群，在Redis5.0之前创建集群比较麻烦，5.0之后集群管理命令都集成到了redis-cli中。</p><p>1）Redis5.0之前</p><p>Redis5.0之前集群命令都是用redis安装包下的src/redis-trib.rb来实现的。因为redis-trib.rb是有ruby语言编写的所以需要安装ruby环境。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装依赖</span><br>yum -y install zlib ruby rubygems<br>gem install redis<br></code></pre></td></tr></table></figure><p>然后通过命令来管理集群：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入redis的src目录</span><br><span class="hljs-built_in">cd</span> /tmp/redis-6.2.4/src<br><span class="hljs-comment"># 创建集群</span><br>./redis-trib.rb create --replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003<br></code></pre></td></tr></table></figure><p>2）Redis5.0以后</p><p>我们使用的是Redis6.2.4版本，集群管理以及集成到了redis-cli中，格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli --cluster create --cluster-replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003<br></code></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>redis-cli --cluster</code>或者<code>./redis-trib.rb</code>：代表集群操作命令</li><li><code>create</code>：代表是创建集群</li><li><code>--replicas 1</code>或者<code>--cluster-replicas 1</code> ：指定集群中每个master的副本个数为1，此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master</li></ul><p>运行后的样子：</p><p><img src="/../images/image-20210702181101969.png" alt="image-20210702181101969"></p><p>这里输入yes，则集群开始创建：</p><p><img src="/../images/image-20210702181215705.png" alt="image-20210702181215705"></p><p>通过命令可以查看集群状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli -p 7001 cluster nodes<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20210702181922809.png" alt="image-20210702181922809"></p><h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5.测试"></a>4.5.测试</h2><p>尝试连接7001节点，存储一个数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接</span><br>redis-cli -p 7001<br><span class="hljs-comment"># 存储数据</span><br><span class="hljs-built_in">set</span> num 123<br><span class="hljs-comment"># 读取数据</span><br>get num<br><span class="hljs-comment"># 再次存储</span><br><span class="hljs-built_in">set</span> a 1<br></code></pre></td></tr></table></figure><p>结果悲剧了：</p><p><img src="/../images/image-20210702182343979.png" alt="image-20210702182343979"></p><p>集群操作时，需要给<code>redis-cli</code>加上<code>-c</code>参数才可以：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli -c -p 7001<br></code></pre></td></tr></table></figure><p>这次可以了：</p><p><img src="/../images/image-20210702182602145.png" alt="image-20210702182602145"></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis集群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习（六）————Seata</title>
    <link href="/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="seata的部署和集成"><a href="#seata的部署和集成" class="headerlink" title="seata的部署和集成"></a>seata的部署和集成</h1><h1 id="一、部署Seata的tc-server"><a href="#一、部署Seata的tc-server" class="headerlink" title="一、部署Seata的tc-server"></a>一、部署Seata的tc-server</h1><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h2><p>首先我们要下载seata-server包，地址在<a href="http://seata.io/zh-cn/blog/download.html">http</a><a href="http://seata.io/zh-cn/blog/download.html">://seata.io/zh-cn/blog/download</a><a href="http://seata.io/zh-cn/blog/download.html">.</a><a href="http://seata.io/zh-cn/blog/download.html">html</a> </p><p>当然，课前资料也准备好了：</p><p><img src="/../images/image-20210622202357640.png" alt="image-20210622202357640"></p><h2 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h2><p>在非中文目录解压缩这个zip包，其目录结构如下：</p><p><img src="/../images/image-20210622202515014.png" alt="image-20210622202515014"></p><h2 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h2><p>修改conf目录下的registry.conf文件：</p><p><img src="/../images/image-20210622202622874.png" alt="image-20210622202622874"></p><p>内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">registry</span> <span class="hljs-string">&#123;</span><br><span class="hljs-comment">  # tc服务的注册中心类，这里选择nacos，也可以是eureka、zookeeper等</span><br>  <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;nacos&quot;</span><br><br>  <span class="hljs-attr">nacos</span> <span class="hljs-string">&#123;</span><br><span class="hljs-comment">    # seata tc 服务注册到 nacos的服务名称，可以自定义</span><br>    <span class="hljs-attr">application</span> = <span class="hljs-string">&quot;seata-tc-server&quot;</span><br>    <span class="hljs-attr">serverAddr</span> = <span class="hljs-string">&quot;127.0.0.1:8848&quot;</span><br>    <span class="hljs-attr">group</span> = <span class="hljs-string">&quot;DEFAULT_GROUP&quot;</span><br>    <span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">cluster</span> = <span class="hljs-string">&quot;SH&quot;</span><br>    <span class="hljs-attr">username</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>    <span class="hljs-attr">password</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>  <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br><br><span class="hljs-attr">config</span> <span class="hljs-string">&#123;</span><br><span class="hljs-comment">  # 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置</span><br>  <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;nacos&quot;</span><br><span class="hljs-comment">  # 配置nacos地址等信息</span><br>  <span class="hljs-attr">nacos</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">serverAddr</span> = <span class="hljs-string">&quot;127.0.0.1:8848&quot;</span><br>    <span class="hljs-attr">namespace</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-attr">group</span> = <span class="hljs-string">&quot;SEATA_GROUP&quot;</span><br>    <span class="hljs-attr">username</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>    <span class="hljs-attr">password</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>    <span class="hljs-attr">dataId</span> = <span class="hljs-string">&quot;seataServer.properties&quot;</span><br>  <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-在nacos添加配置"><a href="#4-在nacos添加配置" class="headerlink" title="4.在nacos添加配置"></a>4.在nacos添加配置</h2><p>特别注意，为了让tc服务的集群可以共享配置，我们选择了nacos作为统一配置中心。因此服务端配置文件seataServer.properties文件需要在nacos中配好。</p><p>格式如下：</p><p><img src="/../images/image-20210622203609227.png" alt="image-20210622203609227"></p><p>配置内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 数据存储方式，db代表数据库</span><br><span class="hljs-attr">store.mode</span>=<span class="hljs-string">db</span><br><span class="hljs-attr">store.db.datasource</span>=<span class="hljs-string">druid</span><br><span class="hljs-attr">store.db.dbType</span>=<span class="hljs-string">mysql</span><br><span class="hljs-attr">store.db.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">store.db.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span><br><span class="hljs-attr">store.db.user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">store.db.password</span>=<span class="hljs-string">123</span><br><span class="hljs-attr">store.db.minConn</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">store.db.maxConn</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">store.db.globalTable</span>=<span class="hljs-string">global_table</span><br><span class="hljs-attr">store.db.branchTable</span>=<span class="hljs-string">branch_table</span><br><span class="hljs-attr">store.db.queryLimit</span>=<span class="hljs-string">100</span><br><span class="hljs-attr">store.db.lockTable</span>=<span class="hljs-string">lock_table</span><br><span class="hljs-attr">store.db.maxWait</span>=<span class="hljs-string">5000</span><br><span class="hljs-comment"># 事务、日志等配置</span><br><span class="hljs-attr">server.recovery.committingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.rollbackingRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.recovery.timeoutRetryPeriod</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">server.maxCommitRetryTimeout</span>=<span class="hljs-string">-1</span><br><span class="hljs-attr">server.maxRollbackRetryTimeout</span>=<span class="hljs-string">-1</span><br><span class="hljs-attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">server.undo.logSaveDays</span>=<span class="hljs-string">7</span><br><span class="hljs-attr">server.undo.logDeletePeriod</span>=<span class="hljs-string">86400000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 客户端与服务端传输方式</span><br><span class="hljs-attr">transport.serialization</span>=<span class="hljs-string">seata</span><br><span class="hljs-attr">transport.compressor</span>=<span class="hljs-string">none</span><br><span class="hljs-comment"># 关闭metrics功能，提高性能</span><br><span class="hljs-attr">metrics.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">metrics.registryType</span>=<span class="hljs-string">compact</span><br><span class="hljs-attr">metrics.exporterList</span>=<span class="hljs-string">prometheus</span><br><span class="hljs-attr">metrics.exporterPrometheusPort</span>=<span class="hljs-string">9898</span><br></code></pre></td></tr></table></figure><p>==其中的数据库地址、用户名、密码都需要修改成你自己的数据库信息。==</p><h2 id="5-创建数据库表"><a href="#5-创建数据库表" class="headerlink" title="5.创建数据库表"></a>5.创建数据库表</h2><p>特别注意：tc服务在管理分布式事务时，需要记录事务相关数据到数据库中，你需要提前创建好这些表。</p><p>新建一个名为seata的数据库，运行课前资料提供的sql文件：</p><p><img src="/../images/image-20210622204145159.png" alt="image-20210622204145159"></p><p>这些表主要记录全局事务、分支事务、全局锁信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET NAMES utf8mb4;<br>SET FOREIGN_KEY_CHECKS = 0;<br><br>-- ----------------------------<br>-- 分支事务表<br>-- ----------------------------<br>DROP TABLE IF EXISTS `branch_table`;<br>CREATE TABLE `branch_table`  (<br>  `branch_id` bigint(20) NOT NULL,<br>  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,<br>  `transaction_id` bigint(20) NULL DEFAULT NULL,<br>  `resource_group_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `resource_id` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `branch_type` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `status` tinyint(4) NULL DEFAULT NULL,<br>  `client_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `gmt_create` datetime(6) NULL DEFAULT NULL,<br>  `gmt_modified` datetime(6) NULL DEFAULT NULL,<br>  PRIMARY KEY (`branch_id`) USING BTREE,<br>  INDEX `idx_xid`(`xid`) USING BTREE<br>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;<br><br>-- ----------------------------<br>-- 全局事务表<br>-- ----------------------------<br>DROP TABLE IF EXISTS `global_table`;<br>CREATE TABLE `global_table`  (<br>  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,<br>  `transaction_id` bigint(20) NULL DEFAULT NULL,<br>  `status` tinyint(4) NOT NULL,<br>  `application_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `transaction_service_group` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `transaction_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `timeout` int(11) NULL DEFAULT NULL,<br>  `begin_time` bigint(20) NULL DEFAULT NULL,<br>  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,<br>  `gmt_create` datetime NULL DEFAULT NULL,<br>  `gmt_modified` datetime NULL DEFAULT NULL,<br>  PRIMARY KEY (`xid`) USING BTREE,<br>  INDEX `idx_gmt_modified_status`(`gmt_modified`, `status`) USING BTREE,<br>  INDEX `idx_transaction_id`(`transaction_id`) USING BTREE<br>) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;<br><br>SET FOREIGN_KEY_CHECKS = 1;<br></code></pre></td></tr></table></figure><h2 id="6-启动TC服务"><a href="#6-启动TC服务" class="headerlink" title="6.启动TC服务"></a>6.启动TC服务</h2><p>进入bin目录，运行其中的seata-server.bat即可：</p><p><img src="/../images/image-20210622205427318.png" alt="image-20210622205427318"></p><p>启动成功后，seata-server应该已经注册到nacos注册中心了。</p><p>打开浏览器，访问nacos地址：<a href="http://localhost:8848，然后进入服务列表页面，可以看到seata-tc-server的信息：">http://localhost:8848，然后进入服务列表页面，可以看到seata-tc-server的信息：</a></p><p><img src="/../images/image-20210622205901450.png" alt="image-20210622205901450"></p><h1 id="二、微服务集成seata"><a href="#二、微服务集成seata" class="headerlink" title="二、微服务集成seata"></a>二、微服务集成seata</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h2><p>首先，我们需要在微服务中引入seata依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.seata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h2><p>需要修改application.yml文件，添加一些配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">registry:</span> <span class="hljs-comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span><br>    <span class="hljs-comment"># 参考tc服务自己的registry.conf中的配置</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">nacos:</span> <span class="hljs-comment"># tc</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>      <span class="hljs-attr">application:</span> <span class="hljs-string">seata-tc-server</span> <span class="hljs-comment"># tc服务在nacos中的服务名称</span><br>      <span class="hljs-attr">cluster:</span> <span class="hljs-string">SH</span><br>  <span class="hljs-attr">tx-service-group:</span> <span class="hljs-string">seata-demo</span> <span class="hljs-comment"># 事务组，根据这个获取tc服务的cluster名称</span><br>  <span class="hljs-attr">service:</span><br>    <span class="hljs-attr">vgroup-mapping:</span> <span class="hljs-comment"># 事务组与TC服务cluster的映射关系</span><br>      <span class="hljs-attr">seata-demo:</span> <span class="hljs-string">SH</span><br></code></pre></td></tr></table></figure><h1 id="三、TC服务的高可用和异地容灾"><a href="#三、TC服务的高可用和异地容灾" class="headerlink" title="三、TC服务的高可用和异地容灾"></a>三、TC服务的高可用和异地容灾</h1><h2 id="1-模拟异地容灾的TC集群"><a href="#1-模拟异地容灾的TC集群" class="headerlink" title="1.模拟异地容灾的TC集群"></a>1.模拟异地容灾的TC集群</h2><p>计划启动两台seata的tc服务节点：</p><table><thead><tr><th>节点名称</th><th>ip地址</th><th>端口号</th><th>集群名称</th></tr></thead><tbody><tr><td>seata</td><td>127.0.0.1</td><td>8091</td><td>SH</td></tr><tr><td>seata2</td><td>127.0.0.1</td><td>8092</td><td>HZ</td></tr></tbody></table><p>之前我们已经启动了一台seata服务，端口是8091，集群名为SH。</p><p>现在，将seata目录复制一份，起名为seata2</p><p>修改seata2/conf/registry.conf内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">registry</span> &#123;<br>  <span class="hljs-comment"># tc服务的注册中心类，这里选择nacos，也可以是eureka、zookeeper等</span><br>  <span class="hljs-attribute">type</span> = <span class="hljs-string">&quot;nacos&quot;</span><br><br>  nacos &#123;<br>    <span class="hljs-comment"># seata tc 服务注册到 nacos的服务名称，可以自定义</span><br>    <span class="hljs-attribute">application</span> = <span class="hljs-string">&quot;seata-tc-server&quot;</span><br>    serverAddr = <span class="hljs-string">&quot;127.0.0.1:8848&quot;</span><br>    group = <span class="hljs-string">&quot;DEFAULT_GROUP&quot;</span><br>    namespace = <span class="hljs-string">&quot;&quot;</span><br>    cluster = <span class="hljs-string">&quot;HZ&quot;</span><br>    username = <span class="hljs-string">&quot;nacos&quot;</span><br>    password = <span class="hljs-string">&quot;nacos&quot;</span><br>  &#125;<br>&#125;<br><br>config &#123;<br>  <span class="hljs-comment"># 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置</span><br>  <span class="hljs-attribute">type</span> = <span class="hljs-string">&quot;nacos&quot;</span><br>  <span class="hljs-comment"># 配置nacos地址等信息</span><br>  nacos &#123;<br>    <span class="hljs-attribute">serverAddr</span> = <span class="hljs-string">&quot;127.0.0.1:8848&quot;</span><br>    namespace = <span class="hljs-string">&quot;&quot;</span><br>    group = <span class="hljs-string">&quot;SEATA_GROUP&quot;</span><br>    username = <span class="hljs-string">&quot;nacos&quot;</span><br>    password = <span class="hljs-string">&quot;nacos&quot;</span><br>    dataId = <span class="hljs-string">&quot;seataServer.properties&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入seata2/bin目录，然后运行命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">seata<span class="hljs-literal">-server</span>.bat <span class="hljs-literal">-p</span> <span class="hljs-number">8092</span><br></code></pre></td></tr></table></figure><p>打开nacos控制台，查看服务列表：</p><p><img src="/../images/image-20210624151150840.png" alt="image-20210624151150840"></p><p>点进详情查看：</p><p><img src="/../images/image-20210624151221747.png" alt="image-20210624151221747"></p><h2 id="2-将事务组映射配置到nacos"><a href="#2-将事务组映射配置到nacos" class="headerlink" title="2.将事务组映射配置到nacos"></a>2.将事务组映射配置到nacos</h2><p>接下来，我们需要将tx-service-group与cluster的映射关系都配置到nacos配置中心。</p><p>新建一个配置：</p><p><img src="/../images/image-20210624151507072.png" alt="image-20210624151507072"></p><p>配置的内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 事务组映射关系</span><br><span class="hljs-attr">service.vgroupMapping.seata-demo</span>=<span class="hljs-string">SH</span><br><br><span class="hljs-attr">service.enableDegrade</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">service.disableGlobalTransaction</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 与TC服务的通信配置</span><br><span class="hljs-attr">transport.type</span>=<span class="hljs-string">TCP</span><br><span class="hljs-attr">transport.server</span>=<span class="hljs-string">NIO</span><br><span class="hljs-attr">transport.heartbeat</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">transport.enableClientBatchSendRequest</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">transport.threadFactory.bossThreadPrefix</span>=<span class="hljs-string">NettyBoss</span><br><span class="hljs-attr">transport.threadFactory.workerThreadPrefix</span>=<span class="hljs-string">NettyServerNIOWorker</span><br><span class="hljs-attr">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class="hljs-string">NettyServerBizHandler</span><br><span class="hljs-attr">transport.threadFactory.shareBossWorker</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class="hljs-string">NettyClientSelector</span><br><span class="hljs-attr">transport.threadFactory.clientSelectorThreadSize</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class="hljs-string">NettyClientWorkerThread</span><br><span class="hljs-attr">transport.threadFactory.bossThreadSize</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">transport.threadFactory.workerThreadSize</span>=<span class="hljs-string">default</span><br><span class="hljs-attr">transport.shutdown.wait</span>=<span class="hljs-string">3</span><br><span class="hljs-comment"># RM配置</span><br><span class="hljs-attr">client.rm.asyncCommitBufferLimit</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">client.rm.lock.retryInterval</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">client.rm.lock.retryTimes</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">client.rm.reportRetryCount</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">client.rm.tableMetaCheckEnable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">client.rm.tableMetaCheckerInterval</span>=<span class="hljs-string">60000</span><br><span class="hljs-attr">client.rm.sqlParserType</span>=<span class="hljs-string">druid</span><br><span class="hljs-attr">client.rm.reportSuccessEnable</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">client.rm.sagaBranchRegisterEnable</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># TM配置</span><br><span class="hljs-attr">client.tm.commitRetryCount</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">client.tm.rollbackRetryCount</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">client.tm.defaultGlobalTransactionTimeout</span>=<span class="hljs-string">60000</span><br><span class="hljs-attr">client.tm.degradeCheck</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">client.tm.degradeCheckAllowTimes</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">client.tm.degradeCheckPeriod</span>=<span class="hljs-string">2000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># undo日志配置</span><br><span class="hljs-attr">client.undo.dataValidation</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">client.undo.logSerialization</span>=<span class="hljs-string">jackson</span><br><span class="hljs-attr">client.undo.onlyCareUpdateColumns</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">client.undo.logTable</span>=<span class="hljs-string">undo_log</span><br><span class="hljs-attr">client.undo.compress.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">client.undo.compress.type</span>=<span class="hljs-string">zip</span><br><span class="hljs-attr">client.undo.compress.threshold</span>=<span class="hljs-string">64k</span><br><span class="hljs-attr">client.log.exceptionRate</span>=<span class="hljs-string">100</span><br></code></pre></td></tr></table></figure><h2 id="3-微服务读取nacos配置"><a href="#3-微服务读取nacos配置" class="headerlink" title="3.微服务读取nacos配置"></a>3.微服务读取nacos配置</h2><p>接下来，需要修改每一个微服务的application.yml文件，让微服务读取nacos中的client.properties文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">seata:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">nacos</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">group:</span> <span class="hljs-string">SEATA_GROUP</span><br>      <span class="hljs-attr">data-id:</span> <span class="hljs-string">client.properties</span><br></code></pre></td></tr></table></figure><p>重启微服务，现在微服务到底是连接tc的SH集群，还是tc的HZ集群，都统一由nacos的client.properties来决定了。</p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Seata</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习（五）————微服务保护</title>
    <link href="/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="微服务保护"><a href="#微服务保护" class="headerlink" title="微服务保护"></a>微服务保护</h1><h1 id="1-初识Sentinel"><a href="#1-初识Sentinel" class="headerlink" title="1.初识Sentinel"></a>1.初识Sentinel</h1><h2 id="1-1-雪崩问题及解决方案"><a href="#1-1-雪崩问题及解决方案" class="headerlink" title="1.1.雪崩问题及解决方案"></a>1.1.雪崩问题及解决方案</h2><h3 id="1-1-1-雪崩问题"><a href="#1-1-1-雪崩问题" class="headerlink" title="1.1.1.雪崩问题"></a>1.1.1.雪崩问题</h3><p>微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。</p><p> <img src="/../images/1533829099748.png" alt="1533829099748"></p><p>如图，如果服务提供者I发生了故障，当前的应用的部分业务因为依赖于服务I，因此也会被阻塞。此时，其它不依赖于服务I的业务似乎不受影响。</p><p> <img src="/../images/1533829198240.png" alt="1533829198240"></p><p>但是，依赖服务I的业务请求被阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞：</p><p> <img src="/../images/1533829307389.png" alt="1533829307389"></p><p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，那么当前服务也就不可用了。</p><p>那么，依赖于当前服务的其它服务随着时间的推移，最终也都会变的不可用，形成级联失败，雪崩就发生了：</p><p><img src="/../images/image-20210715172710340.png" alt="image-20210715172710340"></p><h3 id="1-1-2-超时处理"><a href="#1-1-2-超时处理" class="headerlink" title="1.1.2.超时处理"></a>1.1.2.超时处理</h3><p>解决雪崩问题的常见方式有四种：</p><p>•超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</p><p><img src="/../images/image-20210715172820438.png" alt="image-20210715172820438"></p><h3 id="1-1-3-仓壁模式"><a href="#1-1-3-仓壁模式" class="headerlink" title="1.1.3.仓壁模式"></a>1.1.3.仓壁模式</h3><p>方案2：仓壁模式</p><p>仓壁模式来源于船舱的设计：</p><p><img src="/../images/image-20210715172946352.png" alt="image-20210715172946352"></p><p>船舱都会被隔板分离为多个独立空间，当船体破损时，只会导致部分空间进入，将故障控制在一定范围内，避免整个船体都被淹没。</p><p>于此类似，我们可以限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。</p><p><img src="/../images/image-20210715173215243.png" alt="image-20210715173215243"></p><h3 id="1-1-4-断路器"><a href="#1-1-4-断路器" class="headerlink" title="1.1.4.断路器"></a>1.1.4.断路器</h3><p>断路器模式：由<strong>断路器</strong>统计业务执行的异常比例，如果超出阈值则会<strong>熔断</strong>该业务，拦截访问该业务的一切请求。</p><p>断路器会统计访问某个服务的请求数量，异常比例：</p><p><img src="/../images/image-20210715173327075.png" alt="image-20210715173327075"></p><p>当发现访问服务D的请求异常比例过高时，认为服务D有导致雪崩的风险，会拦截访问服务D的一切请求，形成熔断：</p><p><img src="/../images/image-20210715173428073.png" alt="image-20210715173428073"></p><h3 id="1-1-5-限流"><a href="#1-1-5-限流" class="headerlink" title="1.1.5.限流"></a>1.1.5.限流</h3><p><strong>流量控制</strong>：限制业务访问的QPS，避免服务因流量的突增而故障。</p><p><img src="/../images/image-20210715173555158.png" alt="image-20210715173555158"></p><h3 id="1-1-6-总结"><a href="#1-1-6-总结" class="headerlink" title="1.1.6.总结"></a>1.1.6.总结</h3><p>什么是雪崩问题？</p><ul><li>微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。</li></ul><p>可以认为：</p><p><strong>限流</strong>是对服务的保护，避免因瞬间高并发流量而导致服务故障，进而避免雪崩。是一种<strong>预防</strong>措施。</p><p><strong>超时处理、线程隔离、降级熔断</strong>是在部分服务故障时，将故障控制在一定范围，避免雪崩。是一种<strong>补救</strong>措施。</p><h2 id="1-2-服务保护技术对比"><a href="#1-2-服务保护技术对比" class="headerlink" title="1.2.服务保护技术对比"></a>1.2.服务保护技术对比</h2><p>在SpringCloud当中支持多种服务保护技术：</p><ul><li><a href="https://github.com/Netflix/Hystrix">Netfix Hystrix</a></li><li><a href="https://github.com/alibaba/Sentinel">Sentinel</a></li><li><a href="https://github.com/resilience4j/resilience4j">Resilience4J</a></li></ul><p>早期比较流行的是Hystrix框架，但目前国内实用最广泛的还是阿里巴巴的Sentinel框架，这里我们做下对比：</p><table><thead><tr><th></th><th><strong>Sentinel</strong></th><th><strong>Hystrix</strong></th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离</td><td>线程池隔离/信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例或异常比例</td><td>基于失败比率</td></tr><tr><td>实时指标实现</td><td>滑动窗口</td><td>滑动窗口（基于 RxJava）</td></tr><tr><td>规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td></tr><tr><td>流量整形</td><td>支持慢启动、匀速排队模式</td><td>不支持</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td></tr><tr><td>控制台</td><td>开箱即用，可配置规则、查看秒级监控、机器发现等</td><td>不完善</td></tr><tr><td>常见框架的适配</td><td>Servlet、Spring Cloud、Dubbo、gRPC  等</td><td>Servlet、Spring Cloud Netflix</td></tr></tbody></table><h2 id="1-3-Sentinel介绍和安装"><a href="#1-3-Sentinel介绍和安装" class="headerlink" title="1.3.Sentinel介绍和安装"></a>1.3.Sentinel介绍和安装</h2><h3 id="1-3-1-初识Sentinel"><a href="#1-3-1-初识Sentinel" class="headerlink" title="1.3.1.初识Sentinel"></a>1.3.1.初识Sentinel</h3><p>Sentinel是阿里巴巴开源的一款微服务流量控制组件。官网地址：<a href="https://sentinelguard.io/zh-cn/index.html">https://sentinelguard.io/zh-cn/index.html</a></p><p>Sentinel 具有以下特征:</p><p>•<strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</p><p>•<strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p><p>•<strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p><p>•<strong>完善的</strong> <strong>SPI</strong> <strong>扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p><h3 id="1-3-2-安装Sentinel"><a href="#1-3-2-安装Sentinel" class="headerlink" title="1.3.2.安装Sentinel"></a>1.3.2.安装Sentinel</h3><p>1）下载</p><p>sentinel官方提供了UI控制台，方便我们对系统做限流设置。大家可以在<a href="https://github.com/alibaba/Sentinel/releases">GitHub</a>下载。</p><p>课前资料也提供了下载好的jar包：</p><p><img src="/../images/image-20210715174252531.png" alt="image-20210715174252531"></p><p>2）运行</p><p>将jar包放到任意非中文目录，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -jar sentinel-dashboard-1.8.1.jar<br></code></pre></td></tr></table></figure><p>如果要修改Sentinel的默认端口、账户、密码，可以通过下列配置：</p><table><thead><tr><th><strong>配置项</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>server.port</td><td>8080</td><td>服务端口</td></tr><tr><td>sentinel.dashboard.auth.username</td><td>sentinel</td><td>默认用户名</td></tr><tr><td>sentinel.dashboard.auth.password</td><td>sentinel</td><td>默认密码</td></tr></tbody></table><p>例如，修改端口：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.1.jar<br></code></pre></td></tr></table></figure><p>3）访问</p><p>访问<a href="http://localhost:8080页面，就可以看到sentinel的控制台了：">http://localhost:8080页面，就可以看到sentinel的控制台了：</a></p><p><img src="/../images/image-20210715190827846.png" alt="image-20210715190827846"></p><p>需要输入账号和密码，默认都是：sentinel</p><p>登录后，发现一片空白，什么都没有：</p><p><img src="/../images/image-20210715191134448.png" alt="image-20210715191134448"></p><p>这是因为我们还没有与微服务整合。</p><h2 id="1-4-微服务整合Sentinel"><a href="#1-4-微服务整合Sentinel" class="headerlink" title="1.4.微服务整合Sentinel"></a>1.4.微服务整合Sentinel</h2><p>我们在order-service中整合sentinel，并连接sentinel的控制台，步骤如下：</p><p>1）引入sentinel依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--sentinel--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）配置控制台</p><p>修改application.yaml文件，添加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8088</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span> <br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">transport:</span><br>        <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span><br></code></pre></td></tr></table></figure><p>3）访问order-service的任意端点</p><p>打开浏览器，访问<a href="http://localhost:8088/order/101%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E8%A7%A6%E5%8F%91sentinel%E7%9A%84%E7%9B%91%E6%8E%A7%E3%80%82">http://localhost:8088/order/101，这样才能触发sentinel的监控。</a></p><p>然后再访问sentinel的控制台，查看效果：</p><p><img src="/../images/image-20210715191241799.png" alt="image-20210715191241799"></p><h1 id="2-流量控制"><a href="#2-流量控制" class="headerlink" title="2.流量控制"></a>2.流量控制</h1><p>雪崩问题虽然有四种方案，但是限流是避免服务因突发的流量而发生故障，是对微服务雪崩问题的预防。我们先学习这种模式。</p><h2 id="2-1-簇点链路"><a href="#2-1-簇点链路" class="headerlink" title="2.1.簇点链路"></a>2.1.簇点链路</h2><p>当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，这样的一个调用链就叫做<strong>簇点链路</strong>。簇点链路中被监控的每一个接口就是一个<strong>资源</strong>。</p><p>默认情况下sentinel会监控SpringMVC的每一个端点（Endpoint，也就是controller中的方法），因此SpringMVC的每一个端点（Endpoint）就是调用链路中的一个资源。</p><p>例如，我们刚才访问的order-service中的OrderController中的端点：/order/{orderId}</p><p><img src="/../images/image-20210715191757319.png" alt="image-20210715191757319"></p><p>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：</p><ul><li>流控：流量控制</li><li>降级：降级熔断</li><li>热点：热点参数限流，是限流的一种</li><li>授权：请求的权限控制</li></ul><h2 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1.快速入门"></a>2.1.快速入门</h2><h3 id="2-1-1-示例"><a href="#2-1-1-示例" class="headerlink" title="2.1.1.示例"></a>2.1.1.示例</h3><p>点击资源/order/{orderId}后面的流控按钮，就可以弹出表单。</p><p><img src="/../images/image-20210715191757319.png" alt="image-20210715191757319"></p><p>表单中可以填写限流规则，如下：</p><p><img src="/../images/image-20210715192010657.png" alt="image-20210715192010657"></p><p>其含义是限制 /order/{orderId}这个资源的单机QPS为1，即每秒只允许1次请求，超出的请求会被拦截并报错。</p><h3 id="2-1-2-练习："><a href="#2-1-2-练习：" class="headerlink" title="2.1.2.练习："></a>2.1.2.练习：</h3><p>需求：给 /order/{orderId}这个资源设置流控规则，QPS不能超过 5，然后测试。</p><p>1）首先在sentinel控制台添加限流规则</p><p><img src="/../images/image-20210715192455429.png" alt="image-20210715192455429"></p><p>2）利用jmeter测试</p><p>如果没有用过jmeter，可以参考课前资料提供的文档《Jmeter快速入门.md》</p><p>课前资料提供了编写好的Jmeter测试样例：</p><p><img src="/../images/image-20210715200431615.png" alt="image-20210715200431615"></p><p>打开jmeter，导入课前资料提供的测试样例：</p><p><img src="/../images/image-20210715200537171.png" alt="image-20210715200537171"></p><p>选择：</p><p><img src="/../images/image-20210715200635414.png" alt="image-20210715200635414"></p><p>20个用户，2秒内运行完，QPS是10，超过了5.</p><p>选中<code>流控入门，QPS&lt;5</code>右键运行：</p><p><img src="/../images/image-20210715200804594.png" alt="image-20210715200804594"></p><blockquote><p>注意，不要点击菜单中的执行按钮来运行。</p></blockquote><p>结果：</p><p><img src="/../images/image-20210715200853671.png" alt="image-20210715200853671"></p><p>可以看到，成功的请求每次只有5个</p><h2 id="2-2-流控模式"><a href="#2-2-流控模式" class="headerlink" title="2.2.流控模式"></a>2.2.流控模式</h2><p>在添加限流规则时，点击高级选项，可以选择三种<strong>流控模式</strong>：</p><ul><li>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</li><li>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</li></ul><p><img src="/../images/image-20210715201827886.png" alt="image-20210715201827886"></p><p>快速入门测试的就是直接模式。</p><h3 id="2-2-1-关联模式"><a href="#2-2-1-关联模式" class="headerlink" title="2.2.1.关联模式"></a>2.2.1.关联模式</h3><p><strong>关联模式</strong>：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p><p><strong>配置规则</strong>：</p><p><img src="/../images/image-20210715202540786.png" alt="image-20210715202540786"></p><p><strong>语法说明</strong>：当/write资源访问量触发阈值时，就会对/read资源限流，避免影响/write资源。</p><p><strong>使用场景</strong>：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p><p><strong>需求说明</strong>：</p><ul><li><p>在OrderController新建两个端点：/order/query和/order/update，无需实现业务</p></li><li><p>配置流控规则，当/order/ update资源被访问的QPS超过5时，对/order/query请求限流</p></li></ul><p>1）定义/order/query端点，模拟订单查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/query&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryOrder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;查询订单成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）定义/order/update端点，模拟订单更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/update&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateOrder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;更新订单成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启服务，查看sentinel控制台的簇点链路：</p><p><img src="/../images/image-20210716101805951.png" alt="image-20210716101805951"></p><p>3）配置流控规则</p><p>对哪个端点限流，就点击哪个端点后面的按钮。我们是对订单查询/order/query限流，因此点击它后面的按钮：</p><p><img src="/../images/image-20210716101934499.png" alt="image-20210716101934499"></p><p>在表单中填写流控规则：</p><p><img src="/../images/image-20210716102103814.png" alt="image-20210716102103814"></p><p>4）在Jmeter测试</p><p>选择《流控模式-关联》：</p><p><img src="/../images/image-20210716102416266.png" alt="image-20210716102416266"></p><p>可以看到1000个用户，100秒，因此QPS为10，超过了我们设定的阈值：5</p><p>查看http请求：</p><p><img src="/../images/image-20210716102532554.png" alt="image-20210716102532554"></p><p>请求的目标是/order/update，这样这个断点就会触发阈值。</p><p>但限流的目标是/order/query，我们在浏览器访问，可以发现：</p><p><img src="/../images/image-20210716102636030.png" alt="image-20210716102636030"></p><p>确实被限流了。</p><p>5）总结</p><p><img src="/../images/image-20210716103143002.png" alt="image-20210716103143002"></p><h3 id="2-2-2-链路模式"><a href="#2-2-2-链路模式" class="headerlink" title="2.2.2.链路模式"></a>2.2.2.链路模式</h3><p><strong>链路模式</strong>：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。</p><p><strong>配置示例</strong>：</p><p>例如有两条请求链路：</p><ul><li><p>/test1 –&gt; /common</p></li><li><p>/test2 –&gt; /common</p></li></ul><p>如果只希望统计从/test2进入到/common的请求，则可以这样配置：</p><p><img src="/../images/image-20210716103536346.png" alt="image-20210716103536346"></p><p><strong>实战案例</strong></p><p>需求：有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。</p><p>步骤：</p><ol><li><p>在OrderService中添加一个queryGoods方法，不用实现业务</p></li><li><p>在OrderController中，改造/order/query端点，调用OrderService中的queryGoods方法</p></li><li><p>在OrderController中添加一个/order/save的端点，调用OrderService的queryGoods方法</p></li><li><p>给queryGoods设置限流规则，从/order/query进入queryGoods的方法限制QPS必须小于2</p></li></ol><p>实现：</p><h4 id="1）添加查询商品方法"><a href="#1）添加查询商品方法" class="headerlink" title="1）添加查询商品方法"></a>1）添加查询商品方法</h4><p>在order-service服务中，给OrderService类添加一个queryGoods方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryGoods</span><span class="hljs-params">()</span>&#123;<br>    System.err.println(<span class="hljs-string">&quot;查询商品&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）查询订单时，查询商品"><a href="#2）查询订单时，查询商品" class="headerlink" title="2）查询订单时，查询商品"></a>2）查询订单时，查询商品</h4><p>在order-service的OrderController中，修改/order/query端点的业务逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/query&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryOrder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 查询商品</span><br>    orderService.queryGoods();<br>    <span class="hljs-comment">// 查询订单</span><br>    System.out.println(<span class="hljs-string">&quot;查询订单&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;查询订单成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3）新增订单，查询商品"><a href="#3）新增订单，查询商品" class="headerlink" title="3）新增订单，查询商品"></a>3）新增订单，查询商品</h4><p>在order-service的OrderController中，修改/order/save端点，模拟新增订单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/save&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveOrder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 查询商品</span><br>    orderService.queryGoods();<br>    <span class="hljs-comment">// 查询订单</span><br>    System.err.println(<span class="hljs-string">&quot;新增订单&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;新增订单成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4）给查询商品添加资源标记"><a href="#4）给查询商品添加资源标记" class="headerlink" title="4）给查询商品添加资源标记"></a>4）给查询商品添加资源标记</h4><p>默认情况下，OrderService中的方法是不被Sentinel监控的，需要我们自己通过注解来标记要监控的方法。</p><p>给OrderService的queryGoods方法添加@SentinelResource注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SentinelResource(&quot;goods&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryGoods</span><span class="hljs-params">()</span>&#123;<br>    System.err.println(<span class="hljs-string">&quot;查询商品&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会导致链路模式失效。</p><p>我们需要关闭这种对SpringMVC的资源聚合，修改order-service服务的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">sentinel:</span><br>      <span class="hljs-attr">web-context-unify:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 关闭context整合</span><br></code></pre></td></tr></table></figure><p>重启服务，访问/order/query和/order/save，可以查看到sentinel的簇点链路规则中，出现了新的资源：</p><p><img src="/../images/image-20210716105227163.png" alt="image-20210716105227163"></p><h4 id="5）添加流控规则"><a href="#5）添加流控规则" class="headerlink" title="5）添加流控规则"></a>5）添加流控规则</h4><p>点击goods资源后面的流控按钮，在弹出的表单中填写下面信息：</p><p><img src="/../images/image-20210716105408723.png" alt="image-20210716105408723"></p><p>只统计从/order/query进入/goods的资源，QPS阈值为2，超出则被限流。</p><h4 id="6）Jmeter测试"><a href="#6）Jmeter测试" class="headerlink" title="6）Jmeter测试"></a>6）Jmeter测试</h4><p>选择《流控模式-链路》：</p><p><img src="/../images/image-20210716105612312.png" alt="image-20210716105612312"></p><p>可以看到这里200个用户，50秒内发完，QPS为4，超过了我们设定的阈值2</p><p>一个http请求是访问/order/save：</p><p><img src="/../images/image-20210716105812789.png" alt="image-20210716105812789"></p><p>运行的结果：</p><p><img src="/../images/image-20210716110027064.png" alt="image-20210716110027064"></p><p>完全不受影响。</p><p>另一个是访问/order/query：</p><p><img src="/../images/image-20210716105855951.png" alt="image-20210716105855951"></p><p>运行结果：</p><p><img src="/../images/image-20210716105956401.png" alt="image-20210716105956401"></p><p>每次只有2个通过。</p><h3 id="2-2-3-总结"><a href="#2-2-3-总结" class="headerlink" title="2.2.3.总结"></a>2.2.3.总结</h3><p>流控模式有哪些？</p><p>•直接：对当前资源限流</p><p>•关联：高优先级资源触发阈值，对低优先级资源限流。</p><p>•链路：阈值统计时，只统计从指定资源进入当前资源的请求，是对请求来源的限流</p><h2 id="2-3-流控效果"><a href="#2-3-流控效果" class="headerlink" title="2.3.流控效果"></a>2.3.流控效果</h2><p>在流控的高级选项中，还有一个流控效果选项：</p><p><img src="/../images/image-20210716110225104.png" alt="image-20210716110225104"></p><p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p><ul><li><p>快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。</p></li><li><p>warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。</p></li><li><p>排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长</p></li></ul><h3 id="2-3-1-warm-up"><a href="#2-3-1-warm-up" class="headerlink" title="2.3.1.warm up"></a>2.3.1.warm up</h3><p>阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。</p><p>warm up也叫<strong>预热模式</strong>，是应对服务冷启动的一种方案。请求阈值初始值是 maxThreshold / coldFactor，持续指定时长后，逐渐提高到maxThreshold值。而coldFactor的默认值是3.</p><p>例如，我设置QPS的maxThreshold为10，预热时间为5秒，那么初始阈值就是 10 / 3 ，也就是3，然后在5秒后逐渐增长到10.</p><p><img src="/../images/image-20210716110629796.png" alt="image-20210716110629796"></p><p><strong>案例</strong></p><p>需求：给/order/{orderId}这个资源设置限流，最大QPS为10，利用warm up效果，预热时长为5秒</p><h4 id="1）配置流控规则："><a href="#1）配置流控规则：" class="headerlink" title="1）配置流控规则："></a>1）配置流控规则：</h4><p><img src="/../images/image-20210716111012387.png" alt="image-20210716111012387"></p><h4 id="2）Jmeter测试"><a href="#2）Jmeter测试" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《流控效果，warm up》：</p><p><img src="/../images/image-20210716111136699.png" alt="image-20210716111136699"></p><p>QPS为10.</p><p>刚刚启动时，大部分请求失败，成功的只有3个，说明QPS被限定在3：</p><p><img src="/../images/image-20210716111303701.png" alt="image-20210716111303701"></p><p>随着时间推移，成功比例越来越高：</p><p><img src="/../images/image-20210716111404717.png" alt="image-20210716111404717"></p><p>到Sentinel控制台查看实时监控：</p><p><img src="/../images/image-20210716111526480.png" alt="image-20210716111526480"></p><p>一段时间后：</p><p><img src="/../images/image-20210716111658541.png" alt="image-20210716111658541"></p><h3 id="2-3-2-排队等待"><a href="#2-3-2-排队等待" class="headerlink" title="2.3.2.排队等待"></a>2.3.2.排队等待</h3><p>当请求超过QPS阈值时，快速失败和warm up 会拒绝新的请求并抛出异常。</p><p>而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。</p><p>工作原理</p><p>例如：QPS = 5，意味着每200ms处理一个队列中的请求；timeout = 2000，意味着<strong>预期等待时长</strong>超过2000ms的请求会被拒绝并抛出异常。</p><p>那什么叫做预期等待时长呢？</p><p>比如现在一下子来了12 个请求，因为每200ms执行一个请求，那么：</p><ul><li>第6个请求的<strong>预期等待时长</strong> =  200 * （6 - 1） = 1000ms</li><li>第12个请求的预期等待时长 = 200 * （12-1） = 2200ms</li></ul><p>现在，第1秒同时接收到10个请求，但第2秒只有1个请求，此时QPS的曲线这样的：</p><p><img src="/../images/image-20210716113147176.png" alt="image-20210716113147176"></p><p>如果使用队列模式做流控，所有进入的请求都要排队，以固定的200ms的间隔执行，QPS会变的很平滑：</p><p><img src="/../images/image-20210716113426524.png" alt="image-20210716113426524"></p><p>平滑的QPS曲线，对于服务器来说是更友好的。</p><p><strong>案例</strong></p><p>需求：给/order/{orderId}这个资源设置限流，最大QPS为10，利用排队的流控效果，超时时长设置为5s</p><h4 id="1）添加流控规则"><a href="#1）添加流控规则" class="headerlink" title="1）添加流控规则"></a>1）添加流控规则</h4><p><img src="/../images/image-20210716114048918.png" alt="image-20210716114048918"></p><h4 id="2）Jmeter测试-1"><a href="#2）Jmeter测试-1" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《流控效果，队列》：</p><p><img src="/../images/image-20210716114243558.png" alt="image-20210716114243558"></p><p>QPS为15，已经超过了我们设定的10。</p><p>如果是之前的 快速失败、warmup模式，超出的请求应该会直接报错。</p><p>但是我们看看队列模式的运行结果：</p><p><img src="/../images/image-20210716114429361.png" alt="image-20210716114429361"></p><p>全部都通过了。</p><p>再去sentinel查看实时监控的QPS曲线：</p><p><img src="/../images/image-20210716114522935.png" alt="image-20210716114522935"></p><p>QPS非常平滑，一致保持在10，但是超出的请求没有被拒绝，而是放入队列。因此<strong>响应时间</strong>（等待时间）会越来越长。</p><p>当队列满了以后，才会有部分请求失败：</p><p><img src="/../images/image-20210716114651137.png" alt="image-20210716114651137"></p><h3 id="2-3-3-总结"><a href="#2-3-3-总结" class="headerlink" title="2.3.3.总结"></a>2.3.3.总结</h3><p>流控效果有哪些？</p><ul><li><p>快速失败：QPS超过阈值时，拒绝新的请求</p></li><li><p>warm up： QPS超过阈值时，拒绝新的请求；QPS阈值是逐渐提升的，可以避免冷启动时高并发导致服务宕机。</p></li><li><p>排队等待：请求会进入队列，按照阈值允许的时间间隔依次执行请求；如果请求预期等待时长大于超时时间，直接拒绝</p></li></ul><h2 id="2-4-热点参数限流"><a href="#2-4-热点参数限流" class="headerlink" title="2.4.热点参数限流"></a>2.4.热点参数限流</h2><p>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是<strong>分别统计参数值相同的请求</strong>，判断是否超过QPS阈值。</p><h3 id="2-4-1-全局参数限流"><a href="#2-4-1-全局参数限流" class="headerlink" title="2.4.1.全局参数限流"></a>2.4.1.全局参数限流</h3><p>例如，一个根据id查询商品的接口：</p><p><img src="/../images/image-20210716115014663.png" alt="image-20210716115014663"></p><p>访问/goods/{id}的请求中，id参数值会有变化，热点参数限流会根据参数值分别统计QPS，统计结果：</p><p><img src="/../images/image-20210716115131463.png" alt="image-20210716115131463"></p><p>当id=1的请求触发阈值被限流时，id值不为1的请求不受影响。</p><p>配置示例：</p><p><img src="/../images/image-20210716115232426.png" alt="image-20210716115232426"></p><p>代表的含义是：对hot这个资源的0号参数（第一个参数）做统计，每1秒<strong>相同参数值</strong>的请求数不能超过5</p><h3 id="2-4-2-热点参数限流"><a href="#2-4-2-热点参数限流" class="headerlink" title="2.4.2.热点参数限流"></a>2.4.2.热点参数限流</h3><p>刚才的配置中，对查询商品这个接口的所有商品一视同仁，QPS都限定为5.</p><p>而在实际开发中，可能部分商品是热点商品，例如秒杀商品，我们希望这部分商品的QPS限制与其它商品不一样，高一些。那就需要配置热点参数限流的高级选项了：</p><p><img src="/../images/image-20210716115717523.png" alt="image-20210716115717523"></p><p>结合上一个配置，这里的含义是对0号的long类型参数限流，每1秒相同参数的QPS不能超过5，有两个例外：</p><p>•如果参数值是100，则每1秒允许的QPS为10</p><p>•如果参数值是101，则每1秒允许的QPS为15</p><h3 id="2-4-4-案例"><a href="#2-4-4-案例" class="headerlink" title="2.4.4.案例"></a>2.4.4.案例</h3><p><strong>案例需求</strong>：给/order/{orderId}这个资源添加热点参数限流，规则如下：</p><p>•默认的热点参数规则是每1秒请求量不超过2</p><p>•给102这个参数设置例外：每1秒请求量不超过4</p><p>•给103这个参数设置例外：每1秒请求量不超过10</p><p><strong>注意事项</strong>：热点参数限流对默认的SpringMVC资源无效，需要利用@SentinelResource注解标记资源</p><h4 id="1）标记资源"><a href="#1）标记资源" class="headerlink" title="1）标记资源"></a>1）标记资源</h4><p>给order-service中的OrderController中的/order/{orderId}资源添加注解：</p><p><img src="/../images/image-20210716120033572.png" alt="image-20210716120033572"></p><h4 id="2）热点参数限流规则"><a href="#2）热点参数限流规则" class="headerlink" title="2）热点参数限流规则"></a>2）热点参数限流规则</h4><p>访问该接口，可以看到我们标记的hot资源出现了：</p><p><img src="/../images/image-20210716120208509.png" alt="image-20210716120208509"></p><p>这里不要点击hot后面的按钮，页面有BUG</p><p>点击左侧菜单中<strong>热点规则</strong>菜单：</p><p><img src="/../images/image-20210716120319009.png" alt="image-20210716120319009"></p><p>点击新增，填写表单：</p><p><img src="/../images/image-20210716120536714.png" alt="image-20210716120536714"></p><h4 id="3）Jmeter测试"><a href="#3）Jmeter测试" class="headerlink" title="3）Jmeter测试"></a>3）Jmeter测试</h4><p>选择《热点参数限流 QPS1》：</p><p><img src="/../images/image-20210716120754527.png" alt="image-20210716120754527"></p><p>这里发起请求的QPS为5.</p><p>包含3个http请求：</p><p>普通参数，QPS阈值为2</p><p><img src="/../images/image-20210716120840501.png" alt="image-20210716120840501"></p><p>运行结果：</p><p><img src="/../images/image-20210716121105567.png" alt="image-20210716121105567"></p><p>例外项，QPS阈值为4</p><p><img src="/../images/image-20210716120900365.png" alt="image-20210716120900365"></p><p>运行结果：</p><p><img src="/../images/image-20210716121201630.png" alt="image-20210716121201630"></p><p>例外项，QPS阈值为10</p><p><img src="/../images/image-20210716120919131.png" alt="image-20210716120919131"></p><p>运行结果：</p><p><img src="/../images/image-20210716121220305.png" alt="image-20210716121220305"></p><h1 id="3-隔离和降级"><a href="#3-隔离和降级" class="headerlink" title="3.隔离和降级"></a>3.隔离和降级</h1><p>限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。</p><p>而要将这些故障控制在一定范围，避免雪崩，就要靠<strong>线程隔离</strong>（舱壁模式）和<strong>熔断降级</strong>手段了。</p><p><strong>线程隔离</strong>之前讲到过：调用者在调用服务提供者时，给每个调用的请求分配独立线程池，出现故障时，最多消耗这个线程池内资源，避免把调用者的所有资源耗尽。</p><p><img src="/../images/image-20210715173215243.png" alt="image-20210715173215243"></p><p><strong>熔断降级</strong>：是在调用方这边加入断路器，统计对服务提供者的调用，如果调用的失败比例过高，则熔断该业务，不允许访问该服务的提供者了。</p><p><img src="/../images/image-20210715173428073.png" alt="image-20210715173428073"></p><p>可以看到，不管是线程隔离还是熔断降级，都是对<strong>客户端</strong>（调用方）的保护。需要在<strong>调用方</strong> 发起远程调用时做线程隔离、或者服务熔断。</p><p>而我们的微服务远程调用都是基于Feign来完成的，因此我们需要将Feign与Sentinel整合，在Feign里面实现线程隔离和服务熔断。</p><h2 id="3-1-FeignClient整合Sentinel"><a href="#3-1-FeignClient整合Sentinel" class="headerlink" title="3.1.FeignClient整合Sentinel"></a>3.1.FeignClient整合Sentinel</h2><p>SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端保护必须整合Feign和Sentinel。</p><h3 id="3-1-1-修改配置，开启sentinel功能"><a href="#3-1-1-修改配置，开启sentinel功能" class="headerlink" title="3.1.1.修改配置，开启sentinel功能"></a>3.1.1.修改配置，开启sentinel功能</h3><p>修改OrderService的application.yml文件，开启Feign的Sentinel功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对sentinel的支持</span><br></code></pre></td></tr></table></figure><h3 id="3-1-2-编写失败降级逻辑"><a href="#3-1-2-编写失败降级逻辑" class="headerlink" title="3.1.2.编写失败降级逻辑"></a>3.1.2.编写失败降级逻辑</h3><p>业务失败后，不能直接报错，而应该返回用户一个友好提示或者默认结果，这个就是失败降级逻辑。</p><p>给FeignClient编写失败后的降级逻辑</p><p>①方式一：FallbackClass，无法对远程调用的异常做处理</p><p>②方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种</p><p>这里我们演示方式二的失败降级处理。</p><p><strong>步骤一</strong>：在feing-api项目中定义类，实现FallbackFactory：</p><p><img src="/../images/image-20210716122403502.png" alt="image-20210716122403502"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.feign.clients.fallback;<br><br><span class="hljs-keyword">import</span> cn.itcast.feign.clients.UserClient;<br><span class="hljs-keyword">import</span> cn.itcast.feign.pojo.User;<br><span class="hljs-keyword">import</span> feign.hystrix.FallbackFactory;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserClientFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;UserClient&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserClient <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserClient</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(Long id)</span> &#123;<br>                log.error(<span class="hljs-string">&quot;查询用户异常&quot;</span>, throwable);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>步骤二</strong>：在feing-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> UserClientFallbackFactory <span class="hljs-title function_">userClientFallbackFactory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserClientFallbackFactory</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>步骤三</strong>：在feing-api项目中的UserClient接口中使用UserClientFallbackFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.itcast.feign.clients.fallback.UserClientFallbackFactory;<br><span class="hljs-keyword">import</span> cn.itcast.feign.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;, fallbackFactory = UserClientFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启后，访问一次订单查询业务，然后查看sentinel控制台，可以看到新的簇点链路：</p><p><img src="/../images/image-20210716123705780.png" alt="image-20210716123705780"></p><h3 id="3-1-3-总结"><a href="#3-1-3-总结" class="headerlink" title="3.1.3.总结"></a>3.1.3.总结</h3><p>Sentinel支持的雪崩解决方案：</p><ul><li>线程隔离（仓壁模式）</li><li>降级熔断</li></ul><p>Feign整合Sentinel的步骤：</p><ul><li>在application.yml中配置：feign.sentienl.enable=true</li><li>给FeignClient编写FallbackFactory并注册为Bean</li><li>将FallbackFactory配置到FeignClient</li></ul><h2 id="3-2-线程隔离（舱壁模式）"><a href="#3-2-线程隔离（舱壁模式）" class="headerlink" title="3.2.线程隔离（舱壁模式）"></a>3.2.线程隔离（舱壁模式）</h2><h3 id="3-2-1-线程隔离的实现方式"><a href="#3-2-1-线程隔离的实现方式" class="headerlink" title="3.2.1.线程隔离的实现方式"></a>3.2.1.线程隔离的实现方式</h3><p>线程隔离有两种方式实现：</p><ul><li><p>线程池隔离</p></li><li><p>信号量隔离（Sentinel默认采用）</p></li></ul><p>如图：</p><p><img src="/../images/image-20210716123036937.png" alt="image-20210716123036937"></p><p><strong>线程池隔离</strong>：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</p><p><strong>信号量隔离</strong>：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求。</p><p>两者的优缺点：</p><p><img src="/../images/image-20210716123240518.png" alt="image-20210716123240518"></p><h3 id="3-2-2-sentinel的线程隔离"><a href="#3-2-2-sentinel的线程隔离" class="headerlink" title="3.2.2.sentinel的线程隔离"></a>3.2.2.sentinel的线程隔离</h3><p><strong>用法说明</strong>：</p><p>在添加限流规则时，可以选择两种阈值类型：</p><p><img src="/../images/image-20210716123411217.png" alt="image-20210716123411217"></p><ul><li><p>QPS：就是每秒的请求数，在快速入门中已经演示过</p></li><li><p>线程数：是该资源能使用用的tomcat线程数的最大值。也就是通过限制线程数量，实现<strong>线程隔离</strong>（舱壁模式）。</p></li></ul><p><strong>案例需求</strong>：给 order-service服务中的UserClient的查询用户接口设置流控规则，线程数不能超过 2。然后利用jemeter测试。</p><h4 id="1）配置隔离规则"><a href="#1）配置隔离规则" class="headerlink" title="1）配置隔离规则"></a>1）配置隔离规则</h4><p>选择feign接口后面的流控按钮：</p><p><img src="/../images/image-20210716123831992.png" alt="image-20210716123831992"></p><p>填写表单：</p><p><img src="/../images/image-20210716123936844.png" alt="image-20210716123936844"></p><h4 id="2）Jmeter测试-2"><a href="#2）Jmeter测试-2" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《阈值类型-线程数&lt;2》：</p><p><img src="/../images/image-20210716124229894.png" alt="image-20210716124229894"></p><p>一次发生10个请求，有较大概率并发线程数超过2，而超出的请求会走之前定义的失败降级逻辑。</p><p>查看运行结果：</p><p><img src="/../images/image-20210716124147820.png" alt="image-20210716124147820"></p><p>发现虽然结果都是通过了，不过部分请求得到的响应是降级返回的null信息。</p><h3 id="3-2-3-总结"><a href="#3-2-3-总结" class="headerlink" title="3.2.3.总结"></a>3.2.3.总结</h3><p>线程隔离的两种手段是？</p><ul><li><p>信号量隔离</p></li><li><p>线程池隔离</p></li></ul><p>信号量隔离的特点是？</p><ul><li>基于计数器模式，简单，开销小</li></ul><p>线程池隔离的特点是？</p><ul><li>基于线程池模式，有额外开销，但隔离控制更强</li></ul><h2 id="3-3-熔断降级"><a href="#3-3-熔断降级" class="headerlink" title="3.3.熔断降级"></a>3.3.熔断降级</h2><p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p><p>断路器控制熔断和放行是通过状态机来完成的：</p><p><img src="/../images/image-20210716130958518.png" alt="image-20210716130958518"></p><p>状态机包括三个状态：</p><ul><li>closed：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态</li><li>open：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态5秒后会进入half-open状态</li><li>half-open：半开状态，放行一次请求，根据执行结果来判断接下来的操作。<ul><li>请求成功：则切换到closed状态</li><li>请求失败：则切换到open状态</li></ul></li></ul><p>断路器熔断策略有三种：慢调用、异常比例、异常数</p><h3 id="3-3-1-慢调用"><a href="#3-3-1-慢调用" class="headerlink" title="3.3.1.慢调用"></a>3.3.1.慢调用</h3><p><strong>慢调用</strong>：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。</p><p>例如：</p><p><img src="/../images/image-20210716145934347.png" alt="image-20210716145934347"></p><p>解读：RT超过500ms的调用是慢调用，统计最近10000ms内的请求，如果请求量超过10次，并且慢调用比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</p><p><strong>案例</strong></p><p>需求：给 UserClient的查询用户接口设置降级规则，慢调用的RT阈值为50ms，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5</p><h4 id="1）设置慢调用"><a href="#1）设置慢调用" class="headerlink" title="1）设置慢调用"></a>1）设置慢调用</h4><p>修改user-service中的/user/{id}这个接口的业务。通过休眠模拟一个延迟时间：</p><p><img src="/../images/image-20210716150234787.png" alt="image-20210716150234787"></p><p>此时，orderId=101的订单，关联的是id为1的用户，调用时长为60ms：</p><p><img src="/../images/image-20210716150510956.png" alt="image-20210716150510956"></p><p>orderId=102的订单，关联的是id为2的用户，调用时长为非常短；</p><p><img src="/../images/image-20210716150605208.png" alt="image-20210716150605208"></p><h4 id="2）设置熔断规则"><a href="#2）设置熔断规则" class="headerlink" title="2）设置熔断规则"></a>2）设置熔断规则</h4><p>下面，给feign接口设置降级规则：</p><p><img src="/../images/image-20210716150654094.png" alt="image-20210716150654094"></p><p>规则：</p><p><img src="/../images/image-20210716150740434.png" alt="image-20210716150740434"></p><p>超过50ms的请求都会被认为是慢请求</p><h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h4><p>在浏览器访问：<a href="http://localhost:8088/order/101%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B05%E6%AC%A1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%EF%BC%9A">http://localhost:8088/order/101，快速刷新5次，可以发现：</a></p><p><img src="/../images/image-20210716150911004.png" alt="image-20210716150911004"></p><p>触发了熔断，请求时长缩短至5ms，快速失败了，并且走降级逻辑，返回的null</p><p>在浏览器访问：<a href="http://localhost:8088/order/102%EF%BC%8C%E7%AB%9F%E7%84%B6%E4%B9%9F%E8%A2%AB%E7%86%94%E6%96%AD%E4%BA%86%EF%BC%9A">http://localhost:8088/order/102，竟然也被熔断了：</a></p><p><img src="/../images/image-20210716151107785.png" alt="image-20210716151107785"></p><h3 id="3-3-2-异常比例、异常数"><a href="#3-3-2-异常比例、异常数" class="headerlink" title="3.3.2.异常比例、异常数"></a>3.3.2.异常比例、异常数</h3><p><strong>异常比例或异常数</strong>：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。</p><p>例如，一个异常比例设置：</p><p><img src="/../images/image-20210716131430682.png" alt="image-20210716131430682"></p><p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于0.4，则触发熔断。</p><p>一个异常数设置：</p><p><img src="/../images/image-20210716131522912.png" alt="image-20210716131522912"></p><p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于2次，则触发熔断。</p><p><strong>案例</strong></p><p>需求：给 UserClient的查询用户接口设置降级规则，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5s</p><h4 id="1）设置异常请求"><a href="#1）设置异常请求" class="headerlink" title="1）设置异常请求"></a>1）设置异常请求</h4><p>首先，修改user-service中的/user/{id}这个接口的业务。手动抛出异常，以触发异常比例的熔断：</p><p><img src="/../images/image-20210716151348183.png" alt="image-20210716151348183"></p><p>也就是说，id 为 2时，就会触发异常</p><h4 id="2）设置熔断规则-1"><a href="#2）设置熔断规则-1" class="headerlink" title="2）设置熔断规则"></a>2）设置熔断规则</h4><p>下面，给feign接口设置降级规则：</p><p><img src="/../images/image-20210716150654094.png" alt="image-20210716150654094"></p><p>规则：</p><p><img src="/../images/image-20210716151538785.png" alt="image-20210716151538785"></p><p>在5次请求中，只要异常比例超过0.4，也就是有2次以上的异常，就会触发熔断。</p><h4 id="3）测试-1"><a href="#3）测试-1" class="headerlink" title="3）测试"></a>3）测试</h4><p>在浏览器快速访问：<a href="http://localhost:8088/order/102%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B05%E6%AC%A1%EF%BC%8C%E8%A7%A6%E5%8F%91%E7%86%94%E6%96%AD%EF%BC%9A">http://localhost:8088/order/102，快速刷新5次，触发熔断：</a></p><p><img src="/../images/image-20210716151722916.png" alt="image-20210716151722916"></p><p>此时，我们去访问本来应该正常的103：</p><p><img src="/../images/image-20210716151844817.png" alt="image-20210716151844817"></p><h1 id="4-授权规则"><a href="#4-授权规则" class="headerlink" title="4.授权规则"></a>4.授权规则</h1><p>授权规则可以对请求方来源做判断和控制。</p><h2 id="4-1-授权规则"><a href="#4-1-授权规则" class="headerlink" title="4.1.授权规则"></a>4.1.授权规则</h2><h3 id="4-1-1-基本规则"><a href="#4-1-1-基本规则" class="headerlink" title="4.1.1.基本规则"></a>4.1.1.基本规则</h3><p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p><ul><li><p>白名单：来源（origin）在白名单内的调用者允许访问</p></li><li><p>黑名单：来源（origin）在黑名单内的调用者不允许访问</p></li></ul><p>点击左侧菜单的授权，可以看到授权规则：</p><p><img src="/../images/image-20210716152010750.png" alt="image-20210716152010750"></p><ul><li><p>资源名：就是受保护的资源，例如/order/{orderId}</p></li><li><p>流控应用：是来源者的名单，</p><ul><li>如果是勾选白名单，则名单中的来源被许可访问。</li><li>如果是勾选黑名单，则名单中的来源被禁止访问。</li></ul></li></ul><p>比如：</p><p><img src="/../images/image-20210716152349191.png" alt="image-20210716152349191"></p><p>我们允许请求从gateway到order-service，不允许浏览器访问order-service，那么白名单中就要填写<strong>网关的来源名称（origin）</strong>。</p><h3 id="4-1-2-如何获取origin"><a href="#4-1-2-如何获取origin" class="headerlink" title="4.1.2.如何获取origin"></a>4.1.2.如何获取origin</h3><p>Sentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RequestOriginParser</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从请求request对象中获取origin，获取方式自定义</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">parseOrigin</span><span class="hljs-params">(HttpServletRequest request)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法的作用就是从request对象中，获取请求者的origin值并返回。</p><p>默认情况下，sentinel不管请求者从哪里来，返回值永远是default，也就是说一切请求的来源都被认为是一样的值default。</p><p>因此，我们需要自定义这个接口的实现，让<strong>不同的请求，返回不同的origin</strong>。</p><p>例如order-service服务中，我们定义一个RequestOriginParser的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.order.sentinel;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.RequestOriginParser;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderOriginParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestOriginParser</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">parseOrigin</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-comment">// 1.获取请求头</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;origin&quot;</span>);<br>        <span class="hljs-comment">// 2.非空判断</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(origin)) &#123;<br>            origin = <span class="hljs-string">&quot;blank&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> origin;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们会尝试从request-header中获取origin值。</p><h3 id="4-1-3-给网关添加请求头"><a href="#4-1-3-给网关添加请求头" class="headerlink" title="4.1.3.给网关添加请求头"></a>4.1.3.给网关添加请求头</h3><p>既然获取请求origin的方式是从reques-header中获取origin值，我们必须让<strong>所有从gateway路由到微服务的请求都带上origin头</strong>。</p><p>这个需要利用之前学习的一个GatewayFilter来实现，AddRequestHeaderGatewayFilter。</p><p>修改gateway服务中的application.yml，添加一个defaultFilter：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">default-filters:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=origin,gateway</span><br>      <span class="hljs-attr">routes:</span><br>       <span class="hljs-comment"># ...略</span><br></code></pre></td></tr></table></figure><p>这样，从gateway路由的所有请求都会带上origin头，值为gateway。而从其它地方到达微服务的请求则没有这个头。</p><h3 id="4-1-4-配置授权规则"><a href="#4-1-4-配置授权规则" class="headerlink" title="4.1.4.配置授权规则"></a>4.1.4.配置授权规则</h3><p>接下来，我们添加一个授权规则，放行origin值为gateway的请求。</p><p><img src="/../images/image-20210716153250134.png" alt="image-20210716153250134"></p><p>配置如下：</p><p><img src="/../images/image-20210716153301069.png" alt="image-20210716153301069"></p><p>现在，我们直接跳过网关，访问order-service服务：</p><p><img src="/../images/image-20210716153348396.png" alt="image-20210716153348396"></p><p>通过网关访问：</p><p><img src="/../images/image-20210716153434095.png" alt="image-20210716153434095"></p><h2 id="4-2-自定义异常结果"><a href="#4-2-自定义异常结果" class="headerlink" title="4.2.自定义异常结果"></a>4.2.自定义异常结果</h2><p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。异常结果都是flow limmiting（限流）。这样不够友好，无法得知是限流还是降级还是授权拦截。</p><h3 id="4-2-1-异常类型"><a href="#4-2-1-异常类型" class="headerlink" title="4.2.1.异常类型"></a>4.2.1.异常类型</h3><p>而如果要自定义异常时的返回结果，需要实现BlockExceptionHandler接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BlockExceptionHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理请求被限流、降级、授权拦截时抛出的异常：BlockException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法有三个参数：</p><ul><li>HttpServletRequest request：request对象</li><li>HttpServletResponse response：response对象</li><li>BlockException e：被sentinel拦截时抛出的异常</li></ul><p>这里的BlockException包含多个不同的子类：</p><table><thead><tr><th><strong>异常</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>FlowException</td><td>限流异常</td></tr><tr><td>ParamFlowException</td><td>热点参数限流的异常</td></tr><tr><td>DegradeException</td><td>降级异常</td></tr><tr><td>AuthorityException</td><td>授权规则异常</td></tr><tr><td>SystemBlockException</td><td>系统规则异常</td></tr></tbody></table><h3 id="4-2-2-自定义异常处理"><a href="#4-2-2-自定义异常处理" class="headerlink" title="4.2.2.自定义异常处理"></a>4.2.2.自定义异常处理</h3><p>下面，我们就在order-service定义一个自定义异常处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.order.sentinel;<br><br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.BlockExceptionHandler;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityException;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowException;<br><span class="hljs-keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SentinelExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;未知异常&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">429</span>;<br><br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FlowException) &#123;<br>            msg = <span class="hljs-string">&quot;请求被限流了&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ParamFlowException) &#123;<br>            msg = <span class="hljs-string">&quot;请求被热点参数限流&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> DegradeException) &#123;<br>            msg = <span class="hljs-string">&quot;请求被降级了&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AuthorityException) &#123;<br>            msg = <span class="hljs-string">&quot;没有权限访问&quot;</span>;<br>            status = <span class="hljs-number">401</span>;<br>        &#125;<br><br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        response.setStatus(status);<br>        response.getWriter().println(<span class="hljs-string">&quot;&#123;\&quot;msg\&quot;: &quot;</span> + msg + <span class="hljs-string">&quot;, \&quot;status\&quot;: &quot;</span> + status + <span class="hljs-string">&quot;&#125;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启测试，在不同场景下，会返回不同的异常消息.</p><p>限流：</p><p><img src="/../images/image-20210716153938887.png" alt="image-20210716153938887"></p><p>授权拦截时：</p><p><img src="/../images/image-20210716154012736.png" alt="image-20210716154012736"></p><h1 id="5-规则持久化"><a href="#5-规则持久化" class="headerlink" title="5.规则持久化"></a>5.规则持久化</h1><p>现在，sentinel的所有规则都是内存存储，重启后所有规则都会丢失。在生产环境下，我们必须确保这些规则的持久化，避免丢失。</p><h2 id="5-1-规则管理模式"><a href="#5-1-规则管理模式" class="headerlink" title="5.1.规则管理模式"></a>5.1.规则管理模式</h2><p>规则是否能持久化，取决于规则管理模式，sentinel支持三种规则管理模式：</p><ul><li>原始模式：Sentinel的默认模式，将规则保存在内存，重启服务会丢失。</li><li>pull模式</li><li>push模式</li></ul><h3 id="5-1-1-pull模式"><a href="#5-1-1-pull模式" class="headerlink" title="5.1.1.pull模式"></a>5.1.1.pull模式</h3><p>pull模式：控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。</p><p><img src="/../images/image-20210716154155238.png" alt="image-20210716154155238"></p><h3 id="5-1-2-push模式"><a href="#5-1-2-push模式" class="headerlink" title="5.1.2.push模式"></a>5.1.2.push模式</h3><p>push模式：控制台将配置规则推送到远程配置中心，例如Nacos。Sentinel客户端监听Nacos，获取配置变更的推送消息，完成本地配置更新。</p><p><img src="/../images/image-20210716154215456.png" alt="image-20210716154215456"></p><h2 id="5-2-实现push模式"><a href="#5-2-实现push模式" class="headerlink" title="5.2.实现push模式"></a>5.2.实现push模式</h2><p>详细步骤可以参考课前资料的《sentinel规则持久化》：</p><p><img src="/assets/image-20210716154255466.png" alt="image-20210716154255466"></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务保护</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习（四）————ElasticSearch</title>
    <link href="/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式搜索引擎01"><a href="#分布式搜索引擎01" class="headerlink" title="分布式搜索引擎01"></a>分布式搜索引擎01</h1><p>– elasticsearch基础</p><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-初识elasticsearch"><a href="#1-初识elasticsearch" class="headerlink" title="1.初识elasticsearch"></a>1.初识elasticsearch</h1><h2 id="1-1-了解ES"><a href="#1-1-了解ES" class="headerlink" title="1.1.了解ES"></a>1.1.了解ES</h2><h3 id="1-1-1-elasticsearch的作用"><a href="#1-1-1-elasticsearch的作用" class="headerlink" title="1.1.1.elasticsearch的作用"></a>1.1.1.elasticsearch的作用</h3><p>elasticsearch是一款非常强大的开源搜索引擎，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容</p><p>例如：</p><ul><li><p>在GitHub搜索代码</p><p>  <img src="/../images/image-20210720193623245.png" alt="image-20210720193623245"></p></li><li><p>在电商网站搜索商品</p><p>  <img src="/../images/image-20210720193633483.png" alt="image-20210720193633483"></p></li><li><p>在百度搜索答案</p><p>  <img src="/../images/image-20210720193641907.png" alt="image-20210720193641907"></p></li><li><p>在打车软件搜索附近的车</p><p>  <img src="/../images/image-20210720193648044.png" alt="image-20210720193648044"></p></li></ul><h3 id="1-1-2-ELK技术栈"><a href="#1-1-2-ELK技术栈" class="headerlink" title="1.1.2.ELK技术栈"></a>1.1.2.ELK技术栈</h3><p>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域：</p><p><img src="/../images/image-20210720194008781.png" alt="image-20210720194008781"></p><p>而elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。</p><p><img src="/../images/image-20210720194230265.png" alt="image-20210720194230265"></p><h3 id="1-1-3-elasticsearch和lucene"><a href="#1-1-3-elasticsearch和lucene" class="headerlink" title="1.1.3.elasticsearch和lucene"></a>1.1.3.elasticsearch和lucene</h3><p>elasticsearch底层是基于<strong>lucene</strong>来实现的。</p><p><strong>Lucene</strong>是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发。官网地址：<a href="https://lucene.apache.org/">https://lucene.apache.org/</a> 。</p><p><img src="/../images/image-20210720194547780.png" alt="image-20210720194547780"></p><p><strong>elasticsearch</strong>的发展历史：</p><ul><li>2004年Shay Banon基于Lucene开发了Compass</li><li>2010年Shay Banon 重写了Compass，取名为Elasticsearch。</li></ul><p><img src="/../images/image-20210720195001221.png" alt="image-20210720195001221"></p><h3 id="1-1-4-为什么不是其他搜索技术？"><a href="#1-1-4-为什么不是其他搜索技术？" class="headerlink" title="1.1.4.为什么不是其他搜索技术？"></a>1.1.4.为什么不是其他搜索技术？</h3><p>目前比较知名的搜索引擎技术排名：</p><p><img src="/../images/image-20210720195142535.png" alt="image-20210720195142535"></p><p>虽然在早期，Apache Solr是最主要的搜索引擎技术，但随着发展elasticsearch已经渐渐超越了Solr，独占鳌头：</p><p><img src="/../images/image-20210720195306484.png" alt="image-20210720195306484"></p><h3 id="1-1-5-总结"><a href="#1-1-5-总结" class="headerlink" title="1.1.5.总结"></a>1.1.5.总结</h3><p>什么是elasticsearch？</p><ul><li>一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能</li></ul><p>什么是elastic stack（ELK）？</p><ul><li>是以elasticsearch为核心的技术栈，包括beats、Logstash、kibana、elasticsearch</li></ul><p>什么是Lucene？</p><ul><li>是Apache的开源搜索引擎类库，提供了搜索引擎的核心API</li></ul><h2 id="1-2-倒排索引"><a href="#1-2-倒排索引" class="headerlink" title="1.2.倒排索引"></a>1.2.倒排索引</h2><p>倒排索引的概念是基于MySQL这样的正向索引而言的。</p><h3 id="1-2-1-正向索引"><a href="#1-2-1-正向索引" class="headerlink" title="1.2.1.正向索引"></a>1.2.1.正向索引</h3><p>那么什么是正向索引呢？例如给下表（tb_goods）中的id创建索引：</p><p><img src="/../images/image-20210720195531539.png" alt="image-20210720195531539"></p><p>如果是根据id查询，那么直接走索引，查询速度非常快。</p><p>但如果是基于title做模糊查询，只能是逐行扫描数据，流程如下：</p><p>1）用户搜索数据，条件是title符合<code>&quot;%手机%&quot;</code></p><p>2）逐行获取数据，比如id为1的数据</p><p>3）判断数据中的title是否符合用户搜索条件</p><p>4）如果符合则放入结果集，不符合则丢弃。回到步骤1</p><p>逐行扫描，也就是全表扫描，随着数据量增加，其查询效率也会越来越低。当数据量达到数百万时，就是一场灾难。</p><h3 id="1-2-2-倒排索引"><a href="#1-2-2-倒排索引" class="headerlink" title="1.2.2.倒排索引"></a>1.2.2.倒排索引</h3><p>倒排索引中有两个非常重要的概念：</p><ul><li>文档（<code>Document</code>）：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li><li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p><strong>创建倒排索引</strong>是对正向索引的一种特殊处理，流程如下：</p><ul><li>将每一个文档的数据利用算法分词，得到一个个词条</li><li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li><li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li></ul><p>如图：</p><p><img src="/../images/image-20210720200457207.png" alt="image-20210720200457207"></p><p>倒排索引的<strong>搜索流程</strong>如下（以搜索”华为手机”为例）：</p><p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。</p><p>2）对用户输入内容<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。</p><p>3）拿着词条在倒排索引中查找，可以得到包含词条的文档id：1、2、3。</p><p>4）拿着文档id到正向索引中查找具体文档。</p><p>如图：</p><p><img src="/../images/image-20210720201115192.png" alt="image-20210720201115192"></p><p>虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档id都建立了索引，查询速度非常快！无需全表扫描。</p><h3 id="1-2-3-正向和倒排"><a href="#1-2-3-正向和倒排" class="headerlink" title="1.2.3.正向和倒排"></a>1.2.3.正向和倒排</h3><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p><ul><li><p><strong>正向索引</strong>是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。</p></li><li><p>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是<strong>根据词条找文档的过程</strong>。</p></li></ul><p>是不是恰好反过来了？</p><p>那么两者方式的优缺点是什么呢？</p><p><strong>正向索引</strong>：</p><ul><li>优点：<ul><li>可以给多个字段创建索引</li><li>根据索引字段搜索、排序速度非常快</li></ul></li><li>缺点：<ul><li>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</li></ul></li></ul><p><strong>倒排索引</strong>：</p><ul><li>优点：<ul><li>根据词条搜索、模糊搜索时，速度非常快</li></ul></li><li>缺点：<ul><li>只能给词条创建索引，而不是字段</li><li>无法根据字段做排序</li></ul></li></ul><h2 id="1-3-es的一些概念"><a href="#1-3-es的一些概念" class="headerlink" title="1.3.es的一些概念"></a>1.3.es的一些概念</h2><p>elasticsearch中有很多独有的概念，与mysql中略有差别，但也有相似之处。</p><h3 id="1-3-1-文档和字段"><a href="#1-3-1-文档和字段" class="headerlink" title="1.3.1.文档和字段"></a>1.3.1.文档和字段</h3><p>elasticsearch是面向<strong>文档（Document）</strong>存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为json格式后存储在elasticsearch中：</p><p><img src="/../images/image-20210720202707797.png" alt="image-20210720202707797"></p><p>而Json文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列。</p><h3 id="1-3-2-索引和映射"><a href="#1-3-2-索引和映射" class="headerlink" title="1.3.2.索引和映射"></a>1.3.2.索引和映射</h3><p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p><p>例如：</p><ul><li>所有用户文档，就可以组织在一起，称为用户的索引；</li><li>所有商品的文档，可以组织在一起，称为商品的索引；</li><li>所有订单的文档，可以组织在一起，称为订单的索引；</li></ul><p><img src="/../images/image-20210720203022172.png" alt="image-20210720203022172"></p><p>因此，我们可以把索引当做是数据库中的表。</p><p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束。</p><h3 id="1-3-3-mysql与elasticsearch"><a href="#1-3-3-mysql与elasticsearch" class="headerlink" title="1.3.3.mysql与elasticsearch"></a>1.3.3.mysql与elasticsearch</h3><p>我们统一的把mysql与elasticsearch的概念做一下对比：</p><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><p>是不是说，我们学习了elasticsearch就不再需要mysql了呢？</p><p>并不是如此，两者各自有自己的擅长支出：</p><ul><li><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</p></li><li><p>Elasticsearch：擅长海量数据的搜索、分析、计算</p></li></ul><p>因此在企业中，往往是两者结合使用：</p><ul><li>对安全性要求较高的写操作，使用mysql实现</li><li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><p><img src="/../images/image-20210720203534945.png" alt="image-20210720203534945"></p><h2 id="1-4-安装es、kibana"><a href="#1-4-安装es、kibana" class="headerlink" title="1.4.安装es、kibana"></a>1.4.安装es、kibana</h2><h3 id="1-4-1-安装"><a href="#1-4-1-安装" class="headerlink" title="1.4.1.安装"></a>1.4.1.安装</h3><p>参考课前资料：</p><p><img src="/../images/image-20210720203805350.png" alt="image-20210720203805350"> </p><h3 id="1-4-2-分词器"><a href="#1-4-2-分词器" class="headerlink" title="1.4.2.分词器"></a>1.4.2.分词器</h3><p>参考课前资料：</p><p><img src="/../images/image-20210720203805350.png" alt="image-20210720203805350"> </p><h3 id="1-4-3-总结"><a href="#1-4-3-总结" class="headerlink" title="1.4.3.总结"></a>1.4.3.总结</h3><p>分词器的作用是什么？</p><ul><li>创建倒排索引时对文档分词</li><li>用户搜索时，对输入的内容分词</li></ul><p>IK分词器有几种模式？</p><ul><li>ik_smart：智能切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul><p>IK分词器如何拓展词条？如何停用词条？</p><ul><li>利用config目录的IkAnalyzer.cfg.xml文件添加拓展词典和停用词典</li><li>在词典中添加拓展词条或者停用词条</li></ul><h1 id="2-索引库操作"><a href="#2-索引库操作" class="headerlink" title="2.索引库操作"></a>2.索引库操作</h1><p>索引库就类似数据库表，mapping映射就类似表的结构。</p><p>我们要向es中存储数据，必须先创建“库”和“表”。</p><h2 id="2-1-mapping映射属性"><a href="#2-1-mapping映射属性" class="headerlink" title="2.1.mapping映射属性"></a>2.1.mapping映射属性</h2><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</li><li>数值：long、integer、short、byte、double、float、</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul><p>例如下面的json文档：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">52.1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;isMarried&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员Java讲师&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zy@itcast.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">99.1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">99.5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">98.9</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的每个字段映射（mapping）：</p><ul><li>age：类型为 integer；参与搜索，因此需要index为true；无需分词器</li><li>weight：类型为float；参与搜索，因此需要index为true；无需分词器</li><li>isMarried：类型为boolean；参与搜索，因此需要index为true；无需分词器</li><li>info：类型为字符串，需要分词，因此是text；参与搜索，因此需要index为true；分词器可以用ik_smart</li><li>email：类型为字符串，但是不需要分词，因此是keyword；不参与搜索，因此需要index为false；无需分词器</li><li>score：虽然是数组，但是我们只看元素的类型，类型为float；参与搜索，因此需要index为true；无需分词器</li><li>name：类型为object，需要定义多个子属性<ul><li>name.firstName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</li><li>name.lastName；类型为字符串，但是不需要分词，因此是keyword；参与搜索，因此需要index为true；无需分词器</li></ul></li></ul><h2 id="2-2-索引库的CRUD"><a href="#2-2-索引库的CRUD" class="headerlink" title="2.2.索引库的CRUD"></a>2.2.索引库的CRUD</h2><p>这里我们统一使用Kibana编写DSL的方式来演示。</p><h3 id="2-2-1-创建索引库和映射"><a href="#2-2-1-创建索引库和映射" class="headerlink" title="2.2.1.创建索引库和映射"></a>2.2.1.创建索引库和映射</h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><ul><li>请求方式：PUT</li><li>请求路径：/索引库名，可以自定义</li><li>请求参数：mapping映射</li></ul><p>格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名称<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;字段名3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;子字段&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-comment">// ...略</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh">PUT /heima<br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;info&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;email&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;falsae&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;firstName&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      // ... 略<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-2-查询索引库"><a href="#2-2-2-查询索引库" class="headerlink" title="2.2.2.查询索引库"></a>2.2.2.查询索引库</h3><p><strong>基本语法</strong>：</p><ul><li><p>请求方式：GET</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式</strong>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /索引库名<br></code></pre></td></tr></table></figure><p><strong>示例</strong>：</p><p><img src="/../images/image-20210720211019329.png" alt="image-20210720211019329"></p><h3 id="2-2-3-修改索引库"><a href="#2-2-3-修改索引库" class="headerlink" title="2.2.3.修改索引库"></a>2.2.3.修改索引库</h3><p>倒排索引结构虽然不复杂，但是一旦数据结构改变（比如改变了分词器），就需要重新创建倒排索引，这简直是灾难。因此索引库<strong>一旦创建，无法修改mapping</strong>。</p><p>虽然无法修改mapping中已有的字段，但是却允许添加新的字段到mapping中，因为不会对倒排索引产生影响。</p><p><strong>语法说明</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;新字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>示例</strong>：</p><p><img src="/../images/image-20210720212357390.png" alt="image-20210720212357390"></p><h3 id="2-2-4-删除索引库"><a href="#2-2-4-删除索引库" class="headerlink" title="2.2.4.删除索引库"></a>2.2.4.删除索引库</h3><p><strong>语法：</strong></p><ul><li><p>请求方式：DELETE</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：无</p></li></ul><p><strong>格式：</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">DELETE</span> /索引库名<br></code></pre></td></tr></table></figure><p>在kibana中测试：</p><p><img src="/../images/image-20210720212123420.png" alt="image-20210720212123420"></p><h3 id="2-2-5-总结"><a href="#2-2-5-总结" class="headerlink" title="2.2.5.总结"></a>2.2.5.总结</h3><p>索引库操作有哪些？</p><ul><li>创建索引库：PUT /索引库名</li><li>查询索引库：GET /索引库名</li><li>删除索引库：DELETE /索引库名</li><li>添加字段：PUT /索引库名/_mapping</li></ul><h1 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3.文档操作"></a>3.文档操作</h1><h2 id="3-1-新增文档"><a href="#3-1-新增文档" class="headerlink" title="3.1.新增文档"></a>3.1.新增文档</h2><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /索引库名/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;子属性1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;子属性2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值4&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ...</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /heima/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员Java讲师&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zy@itcast.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>响应：</strong></p><p><img src="/../images/image-20210720212933362.png" alt="image-20210720212933362"></p><h2 id="3-2-查询文档"><a href="#3-2-查询文档" class="headerlink" title="3.2.查询文档"></a>3.2.查询文档</h2><p>根据rest风格，新增是post，查询应该是get，不过查询一般都需要条件，这里我们把文档id带上。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /<span class="hljs-punctuation">&#123;</span>索引库名称<span class="hljs-punctuation">&#125;</span>/_doc/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>通过kibana查看数据：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> /heima/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>查看结果：</strong></p><p><img src="/../images/image-20210720213345003.png" alt="image-20210720213345003"></p><h2 id="3-3-删除文档"><a href="#3-3-删除文档" class="headerlink" title="3.3.删除文档"></a>3.3.删除文档</h2><p>删除使用DELETE请求，同样，需要根据id进行删除：</p><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">DELETE</span> /&#123;索引库名&#125;/_doc/id值<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"># 根据id删除数据<br>DELETE /heima/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="/../images/image-20210720213634918.png" alt="image-20210720213634918"></p><h2 id="3-4-修改文档"><a href="#3-4-修改文档" class="headerlink" title="3.4.修改文档"></a>3.4.修改文档</h2><p>修改有两种方式：</p><ul><li>全量修改：直接覆盖原来的文档</li><li>增量修改：修改文档中的部分字段</li></ul><h3 id="3-4-1-全量修改"><a href="#3-4-1-全量修改" class="headerlink" title="3.4.1.全量修改"></a>3.4.1.全量修改</h3><p>全量修改是覆盖原来的文档，其本质是：</p><ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul><p><strong>注意</strong>：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;字段1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;字段2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// ... 略</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /heima/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑马程序员高级Java讲师&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zy@itcast.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;云&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赵&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-2-增量修改"><a href="#3-4-2-增量修改" class="headerlink" title="3.4.2.增量修改"></a>3.4.2.增量修改</h3><p>增量修改是只修改指定id匹配的文档中的部分字段。</p><p><strong>语法：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_update/文档id<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>         <span class="hljs-attr">&quot;字段名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新的值&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /heima/_update/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ZhaoYun@itcast.cn&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-5-总结"><a href="#3-5-总结" class="headerlink" title="3.5.总结"></a>3.5.总结</h2><p>文档操作有哪些？</p><ul><li>创建文档：POST /{索引库名}/_doc/文档id   { json文档 }</li><li>查询文档：GET /{索引库名}/_doc/文档id</li><li>删除文档：DELETE /{索引库名}/_doc/文档id</li><li>修改文档：<ul><li>全量修改：PUT /{索引库名}/_doc/文档id { json文档 }</li><li>增量修改：POST /{索引库名}/_update/文档id { “doc”: {字段}}</li></ul></li></ul><h1 id="4-RestAPI"><a href="#4-RestAPI" class="headerlink" title="4.RestAPI"></a>4.RestAPI</h1><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><p>其中的Java Rest Client又包括两种：</p><ul><li>Java Low Level Rest Client</li><li>Java High Level Rest Client</li></ul><p><img src="/../images/image-20210720214555863.png" alt="image-20210720214555863"></p><p>我们学习的是Java HighLevel Rest Client客户端API</p><h2 id="4-0-导入Demo工程"><a href="#4-0-导入Demo工程" class="headerlink" title="4.0.导入Demo工程"></a>4.0.导入Demo工程</h2><h3 id="4-0-1-导入数据"><a href="#4-0-1-导入数据" class="headerlink" title="4.0.1.导入数据"></a>4.0.1.导入数据</h3><p>首先导入课前资料提供的数据库数据：</p><p><img src="/../images/image-20210720220400297.png" alt="image-20210720220400297"> </p><p>数据结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_hotel` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店id&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店名称；例：7天酒店&#x27;</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店地址；例：航头路&#x27;</span>,<br>  `price` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店价格；例：329&#x27;</span>,<br>  `score` <span class="hljs-type">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店评分；例：45，就是4.5分&#x27;</span>,<br>  `brand` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店品牌；例：如家&#x27;</span>,<br>  `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;所在城市；例：上海&#x27;</span>,<br>  `star_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店星级，从低到高分别是：1星到5星，1钻到5钻&#x27;</span>,<br>  `business` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;商圈；例：虹桥&#x27;</span>,<br>  `latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;纬度；例：31.2497&#x27;</span>,<br>  `longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;经度；例：120.3925&#x27;</span>,<br>  `pic` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店图片；例:/img/1.jpg&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><h3 id="4-0-2-导入项目"><a href="#4-0-2-导入项目" class="headerlink" title="4.0.2.导入项目"></a>4.0.2.导入项目</h3><p>然后导入课前资料提供的项目:</p><p><img src="/../images/image-20210720220503411.png" alt="image-20210720220503411"> </p><p>项目结构如图：</p><p><img src="/../images/image-20210720220647541.png" alt="image-20210720220647541"></p><h3 id="4-0-3-mapping映射分析"><a href="#4-0-3-mapping映射分析" class="headerlink" title="4.0.3.mapping映射分析"></a>4.0.3.mapping映射分析</h3><p>创建索引库，最关键的是mapping映射，而mapping映射要考虑的信息包括：</p><ul><li>字段名</li><li>字段数据类型</li><li>是否参与搜索</li><li>是否需要分词</li><li>如果分词，分词器是什么？</li></ul><p>其中：</p><ul><li>字段名、字段数据类型，可以参考数据表结构的名称和类型</li><li>是否参与搜索要分析业务来判断，例如图片地址，就无需参与搜索</li><li>是否分词呢要看内容，内容如果是一个整体就无需分词，反之则要分词</li><li>分词器，我们可以统一使用ik_max_word</li></ul><p>来看下酒店数据的索引库结构:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /hotel<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;starName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;business&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;geo_point&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>几个特殊字段说明：</p><ul><li>location：地理坐标，里面包含精度、纬度</li><li>all：一个组合字段，其目的是将多字段的值 利用copy_to合并，提供给用户搜索</li></ul><p>地理坐标说明：</p><p><img src="/../images/image-20210720222110126.png" alt="image-20210720222110126"></p><p>copy_to说明：</p><p><img src="/../images/image-20210720222221516.png" alt="image-20210720222221516"></p><h3 id="4-0-4-初始化RestClient"><a href="#4-0-4-初始化RestClient" class="headerlink" title="4.0.4.初始化RestClient"></a>4.0.4.初始化RestClient</h3><p>在elasticsearch提供的API中，与elasticsearch一切交互都封装在一个名为RestHighLevelClient的类中，必须先完成这个对象的初始化，建立与elasticsearch的连接。</p><p>分为三步：</p><p>1）引入es的RestHighLevelClient依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）因为SpringBoot默认的ES版本是7.6.2，所以我们需要覆盖默认的ES版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>7.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3）初始化RestHighLevelClient：</p><p>初始化的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RestHighLevelClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>        HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>));<br></code></pre></td></tr></table></figure><p>这里为了单元测试方便，我们创建一个测试类HotelIndexTest，然后将初始化的代码编写在@BeforeEach方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel;<br><br><span class="hljs-keyword">import</span> org.apache.http.HttpHost;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.AfterEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelIndexTest</span> &#123;<br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>                HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>        ));<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.client.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-1-创建索引库"><a href="#4-1-创建索引库" class="headerlink" title="4.1.创建索引库"></a>4.1.创建索引库</h2><h3 id="4-1-1-代码解读"><a href="#4-1-1-代码解读" class="headerlink" title="4.1.1.代码解读"></a>4.1.1.代码解读</h3><p>创建索引库的API如下：</p><p><img src="/../images/image-20210720223049408.png" alt="image-20210720223049408"></p><p>代码分为三步：</p><ul><li>1）创建Request对象。因为是创建索引库的操作，因此Request是CreateIndexRequest。</li><li>2）添加请求参数，其实就是DSL的JSON参数部分。因为json字符串很长，这里是定义了静态字符串常量MAPPING_TEMPLATE，让代码看起来更加优雅。</li><li>3）发送请求，client.indices()方法的返回值是IndicesClient类型，封装了所有与索引库操作有关的方法。</li></ul><h3 id="4-1-2-完整示例"><a href="#4-1-2-完整示例" class="headerlink" title="4.1.2.完整示例"></a>4.1.2.完整示例</h3><p>在hotel-demo的cn.itcast.hotel.constants包下，创建一个类，定义mapping映射的JSON字符串常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.constants;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MAPPING_TEMPLATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;id\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;address\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;score\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;city\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;starName\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;business\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;location\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;pic\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;all\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在hotel-demo中的HotelIndexTest测试类中，编写单元测试，实现创建索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">createHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">CreateIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求的参数：DSL语句</span><br>    request.source(MAPPING_TEMPLATE, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.indices().create(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-删除索引库"><a href="#4-2-删除索引库" class="headerlink" title="4.2.删除索引库"></a>4.2.删除索引库</h2><p>删除索引库的DSL语句非常简单：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE /hotel<br></code></pre></td></tr></table></figure><p>与创建索引库相比：</p><ul><li>请求方式从PUT变为DELTE</li><li>请求路径不变</li><li>无请求参数</li></ul><p>所以代码的差异，注意体现在Request对象上。依然是三步走：</p><ul><li>1）创建Request对象。这次是DeleteIndexRequest对象</li><li>2）准备参数。这里是无参</li><li>3）发送请求。改用delete方法</li></ul><p>在hotel-demo中的HotelIndexTest测试类中，编写单元测试，实现删除索引：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">DeleteIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.indices().delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-判断索引库是否存在"><a href="#4-3-判断索引库是否存在" class="headerlink" title="4.3.判断索引库是否存在"></a>4.3.判断索引库是否存在</h2><p>判断索引库是否存在，本质就是查询，对应的DSL是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel<br></code></pre></td></tr></table></figure><p>因此与删除的Java代码流程是类似的。依然是三步走：</p><ul><li>1）创建Request对象。这次是GetIndexRequest对象</li><li>2）准备参数。这里是无参</li><li>3）发送请求。改用exists方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testExistsHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.创建Request对象</span><br>    <span class="hljs-type">GetIndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">exists</span> <span class="hljs-operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.输出</span><br>    System.err.println(exists ? <span class="hljs-string">&quot;索引库已经存在！&quot;</span> : <span class="hljs-string">&quot;索引库不存在！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4.总结"></a>4.4.总结</h2><p>JavaRestClient操作elasticsearch的流程基本类似。核心是client.indices()方法来获取索引库的操作对象。</p><p>索引库操作的基本步骤：</p><ul><li>初始化RestHighLevelClient</li><li>创建XxxIndexRequest。XXX是Create、Get、Delete</li><li>准备DSL（ Create时需要，其它是无参）</li><li>发送请求。调用RestHighLevelClient#indices().xxx()方法，xxx是create、exists、delete</li></ul><h1 id="5-RestClient操作文档"><a href="#5-RestClient操作文档" class="headerlink" title="5.RestClient操作文档"></a>5.RestClient操作文档</h1><p>为了与索引库操作分离，我们再次参加一个测试类，做两件事情：</p><ul><li>初始化RestHighLevelClient</li><li>我们的酒店数据在数据库，需要利用IHotelService去查询，所以注入这个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel;<br><br><span class="hljs-keyword">import</span> cn.itcast.hotel.pojo.Hotel;<br><span class="hljs-keyword">import</span> cn.itcast.hotel.service.IHotelService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.AfterEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDocumentTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService hotelService;<br><br>    <span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.client = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>                HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>        ));<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.client.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-1-新增文档"><a href="#5-1-新增文档" class="headerlink" title="5.1.新增文档"></a>5.1.新增文档</h2><p>我们要将数据库的酒店数据查询出来，写入elasticsearch中。</p><h3 id="5-1-1-索引库实体类"><a href="#5-1-1-索引库实体类" class="headerlink" title="5.1.1.索引库实体类"></a>5.1.1.索引库实体类</h3><p>数据库查询后的结果是一个Hotel类型的对象。结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;tb_hotel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hotel</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.INPUT)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String longitude;<br>    <span class="hljs-keyword">private</span> String latitude;<br>    <span class="hljs-keyword">private</span> String pic;<br>&#125;<br></code></pre></td></tr></table></figure><p>与我们的索引库结构存在差异：</p><ul><li>longitude和latitude需要合并为location</li></ul><p>因此，我们需要定义一个新的类型，与索引库结构吻合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDoc</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String location;<br>    <span class="hljs-keyword">private</span> String pic;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HotelDoc</span><span class="hljs-params">(Hotel hotel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = hotel.getId();<br>        <span class="hljs-built_in">this</span>.name = hotel.getName();<br>        <span class="hljs-built_in">this</span>.address = hotel.getAddress();<br>        <span class="hljs-built_in">this</span>.price = hotel.getPrice();<br>        <span class="hljs-built_in">this</span>.score = hotel.getScore();<br>        <span class="hljs-built_in">this</span>.brand = hotel.getBrand();<br>        <span class="hljs-built_in">this</span>.city = hotel.getCity();<br>        <span class="hljs-built_in">this</span>.starName = hotel.getStarName();<br>        <span class="hljs-built_in">this</span>.business = hotel.getBusiness();<br>        <span class="hljs-built_in">this</span>.location = hotel.getLatitude() + <span class="hljs-string">&quot;, &quot;</span> + hotel.getLongitude();<br>        <span class="hljs-built_in">this</span>.pic = hotel.getPic();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-1-2-语法说明"><a href="#5-1-2-语法说明" class="headerlink" title="5.1.2.语法说明"></a>5.1.2.语法说明</h3><p>新增文档的DSL语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /<span class="hljs-punctuation">&#123;</span>索引库名<span class="hljs-punctuation">&#125;</span>/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jack&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">21</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的java代码如图：</p><p><img src="/../images/image-20210720230027240.png" alt="image-20210720230027240"></p><p>可以看到与创建索引库类似，同样是三步走：</p><ul><li>1）创建Request对象</li><li>2）准备请求参数，也就是DSL中的JSON文档</li><li>3）发送请求</li></ul><p>变化的地方在于，这里直接使用client.xxx()的API，不再需要client.indices()了。</p><h3 id="5-1-3-完整代码"><a href="#5-1-3-完整代码" class="headerlink" title="5.1.3.完整代码"></a>5.1.3.完整代码</h3><p>我们导入酒店数据，基本流程一致，但是需要考虑几点变化：</p><ul><li>酒店数据来自于数据库，我们需要先查询出来，得到hotel对象</li><li>hotel对象需要转为HotelDoc对象</li><li>HotelDoc需要序列化为json格式</li></ul><p>因此，代码整体步骤如下：</p><ul><li>1）根据id查询酒店数据Hotel</li><li>2）将Hotel封装为HotelDoc</li><li>3）将HotelDoc序列化为JSON</li><li>4）创建IndexRequest，指定索引库名和id</li><li>5）准备请求参数，也就是JSON文档</li><li>6）发送请求</li></ul><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.根据id查询酒店数据</span><br>    <span class="hljs-type">Hotel</span> <span class="hljs-variable">hotel</span> <span class="hljs-operator">=</span> hotelService.getById(<span class="hljs-number">61083L</span>);<br>    <span class="hljs-comment">// 2.转换为文档类型</span><br>    <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>    <span class="hljs-comment">// 3.将HotelDoc转json</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(hotelDoc);<br><br>    <span class="hljs-comment">// 1.准备Request对象</span><br>    <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());<br>    <span class="hljs-comment">// 2.准备Json文档</span><br>    request.source(json, XContentType.JSON);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.index(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-查询文档"><a href="#5-2-查询文档" class="headerlink" title="5.2.查询文档"></a>5.2.查询文档</h2><h3 id="5-2-1-语法说明"><a href="#5-2-1-语法说明" class="headerlink" title="5.2.1.语法说明"></a>5.2.1.语法说明</h3><p>查询的DSL语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_doc/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>非常简单，因此代码大概分两步：</p><ul><li>准备Request对象</li><li>发送请求</li></ul><p>不过查询的目的是得到结果，解析为HotelDoc，因此难点是结果的解析。完整代码如下：</p><p><img src="/../images/image-20210720230811674.png" alt="image-20210720230811674"></p><p>可以看到，结果是一个JSON，其中文档放在一个<code>_source</code>属性中，因此解析就是拿到<code>_source</code>，反序列化为Java对象即可。</p><p>与之前类似，也是三步走：</p><ul><li>1）准备Request对象。这次是查询，所以是GetRequest</li><li>2）发送请求，得到结果。因为是查询，这里调用client.get()方法</li><li>3）解析结果，就是对JSON做反序列化</li></ul><h3 id="5-2-2-完整代码"><a href="#5-2-2-完整代码" class="headerlink" title="5.2.2.完整代码"></a>5.2.2.完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDocumentById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">GetRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61082&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求，得到响应</span><br>    <span class="hljs-type">GetResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.get(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 3.解析响应结果</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> response.getSourceAsString();<br><br>    <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br>    System.out.println(hotelDoc);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-删除文档"><a href="#5-3-删除文档" class="headerlink" title="5.3.删除文档"></a>5.3.删除文档</h2><p>删除的DSL为是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE /hotel/_doc/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>与查询相比，仅仅是请求方式从DELETE变成GET，可以想象Java代码应该依然是三步走：</p><ul><li>1）准备Request对象，因为是删除，这次是DeleteRequest对象。要指定索引库名和id</li><li>2）准备参数，无参</li><li>3）发送请求。因为是删除，所以是client.delete()方法</li></ul><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">// 2.发送请求</span><br>    client.delete(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-4-修改文档"><a href="#5-4-修改文档" class="headerlink" title="5.4.修改文档"></a>5.4.修改文档</h2><h3 id="5-4-1-语法说明"><a href="#5-4-1-语法说明" class="headerlink" title="5.4.1.语法说明"></a>5.4.1.语法说明</h3><p>修改我们讲过两种方式：</p><ul><li>全量修改：本质是先根据id删除，再新增</li><li>增量修改：修改文档中的指定字段值</li></ul><p>在RestClient的API中，全量修改与新增的API完全一致，判断依据是ID：</p><ul><li>如果新增时，ID已经存在，则修改</li><li>如果新增时，ID不存在，则新增</li></ul><p>这里不再赘述，我们主要关注增量修改。</p><p>代码示例如图：</p><p><img src="/../images/image-20210720231040875.png" alt="image-20210720231040875"></p><p>与之前类似，也是三步走：</p><ul><li>1）准备Request对象。这次是修改，所以是UpdateRequest</li><li>2）准备参数。也就是JSON文档，里面包含要修改的字段</li><li>3）更新文档。这里调用client.update()方法</li></ul><h3 id="5-4-2-完整代码"><a href="#5-4-2-完整代码" class="headerlink" title="5.4.2.完整代码"></a>5.4.2.完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">UpdateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">// 2.准备请求参数</span><br>    request.doc(<br>        <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;952&quot;</span>,<br>        <span class="hljs-string">&quot;starName&quot;</span>, <span class="hljs-string">&quot;四钻&quot;</span><br>    );<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.update(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-5-批量导入文档"><a href="#5-5-批量导入文档" class="headerlink" title="5.5.批量导入文档"></a>5.5.批量导入文档</h2><p>案例需求：利用BulkRequest批量将数据库数据导入到索引库中。</p><p>步骤如下：</p><ul><li><p>利用mybatis-plus查询酒店数据</p></li><li><p>将查询到的酒店数据（Hotel）转换为文档类型数据（HotelDoc）</p></li><li><p>利用JavaRestClient中的BulkRequest批处理，实现批量新增文档</p></li></ul><h3 id="5-5-1-语法说明"><a href="#5-5-1-语法说明" class="headerlink" title="5.5.1.语法说明"></a>5.5.1.语法说明</h3><p>批量处理BulkRequest，其本质就是将多个普通的CRUD请求组合在一起发送。</p><p>其中提供了一个add方法，用来添加其他请求：</p><p><img src="/../images/image-20210720232105943.png" alt="image-20210720232105943"></p><p>可以看到，能添加的请求包括：</p><ul><li>IndexRequest，也就是新增</li><li>UpdateRequest，也就是修改</li><li>DeleteRequest，也就是删除</li></ul><p>因此Bulk中添加了多个IndexRequest，就是批量新增功能了。示例：</p><p><img src="/../images/image-20210720232431383.png" alt="image-20210720232431383"></p><p>其实还是三步走：</p><ul><li>1）创建Request对象。这里是BulkRequest</li><li>2）准备参数。批处理的参数，就是其它Request对象，这里就是多个IndexRequest</li><li>3）发起请求。这里是批处理，调用的方法为client.bulk()方法</li></ul><p>我们在导入酒店数据时，将上述代码改造成for循环处理即可。</p><h3 id="5-5-2-完整代码"><a href="#5-5-2-完整代码" class="headerlink" title="5.5.2.完整代码"></a>5.5.2.完整代码</h3><p>在hotel-demo的HotelDocumentTest测试类中，编写单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBulkRequest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 批量查询酒店数据</span><br>    List&lt;Hotel&gt; hotels = hotelService.list();<br><br>    <span class="hljs-comment">// 1.创建Request</span><br>    <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br>    <span class="hljs-comment">// 2.准备参数，添加多个新增的Request</span><br>    <span class="hljs-keyword">for</span> (Hotel hotel : hotels) &#123;<br>        <span class="hljs-comment">// 2.1.转换为文档类型HotelDoc</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>        <span class="hljs-comment">// 2.2.创建新增文档的Request对象</span><br>        request.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>)<br>                    .id(hotelDoc.getId().toString())<br>                    .source(JSON.toJSONString(hotelDoc), XContentType.JSON));<br>    &#125;<br>    <span class="hljs-comment">// 3.发送请求</span><br>    client.bulk(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-6-小结"><a href="#5-6-小结" class="headerlink" title="5.6.小结"></a>5.6.小结</h2><p>文档操作的基本步骤：</p><ul><li>初始化RestHighLevelClient</li><li>创建XxxRequest。XXX是Index、Get、Update、Delete、Bulk</li><li>准备参数（Index、Update、Bulk时需要）</li><li>发送请求。调用RestHighLevelClient#.xxx()方法，xxx是index、get、update、delete、bulk</li><li>解析结果（Get时需要）</li></ul><hr><h1 id="分布式搜索引擎02"><a href="#分布式搜索引擎02" class="headerlink" title="分布式搜索引擎02"></a>分布式搜索引擎02</h1><p>在昨天的学习中，我们已经导入了大量数据到elasticsearch中，实现了elasticsearch的数据存储功能。但elasticsearch最擅长的还是搜索和数据分析。</p><p>所以今天，我们研究下elasticsearch的数据搜索功能。我们会分别使用<strong>DSL</strong>和<strong>RestClient</strong>实现搜索。</p><h1 id="0-学习目标-1"><a href="#0-学习目标-1" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-DSL查询文档"><a href="#1-DSL查询文档" class="headerlink" title="1.DSL查询文档"></a>1.DSL查询文档</h1><p>elasticsearch的查询依然是基于JSON风格的DSL来实现的。</p><h2 id="1-1-DSL查询分类"><a href="#1-1-DSL查询分类" class="headerlink" title="1.1.DSL查询分类"></a>1.1.DSL查询分类</h2><p>Elasticsearch提供了基于JSON的DSL（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">Domain Specific Language</a>）来定义查询。常见的查询类型包括：</p><ul><li><p><strong>查询所有</strong>：查询出所有数据，一般测试用。例如：match_all</p></li><li><p><strong>全文检索（full text）查询</strong>：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：</p><ul><li>match_query</li><li>multi_match_query</li></ul></li><li><p><strong>精确查询</strong>：根据精确词条值查找数据，一般是查找keyword、数值、日期、boolean等类型字段。例如：</p><ul><li>ids</li><li>range</li><li>term</li></ul></li><li><p><strong>地理（geo）查询</strong>：根据经纬度查询。例如：</p><ul><li>geo_distance</li><li>geo_bounding_box</li></ul></li><li><p><strong>复合（compound）查询</strong>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：</p><ul><li>bool</li><li>function_score</li></ul></li></ul><p>查询的语法基本一致：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;查询类型&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;查询条件&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;条件值&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>我们以查询所有为例，其中：</p><ul><li>查询类型为match_all</li><li>没有查询条件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 查询所有</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>其它查询无非就是<strong>查询类型</strong>、<strong>查询条件</strong>的变化。</p><h2 id="1-2-全文检索查询"><a href="#1-2-全文检索查询" class="headerlink" title="1.2.全文检索查询"></a>1.2.全文检索查询</h2><h3 id="1-2-1-使用场景"><a href="#1-2-1-使用场景" class="headerlink" title="1.2.1.使用场景"></a>1.2.1.使用场景</h3><p>全文检索查询的基本流程如下：</p><ul><li>对用户搜索的内容做分词，得到词条</li><li>根据词条去倒排索引库中匹配，得到文档id</li><li>根据文档id找到文档，返回给用户</li></ul><p>比较常用的场景包括：</p><ul><li>商城的输入框搜索</li><li>百度输入框搜索</li></ul><p>例如京东：</p><p><img src="/../images/image-20210721165326938.png" alt="image-20210721165326938"></p><p>因为是拿着词条去匹配，因此参与搜索的字段也必须是可分词的text类型的字段。</p><h3 id="1-2-2-基本语法"><a href="#1-2-2-基本语法" class="headerlink" title="1.2.2.基本语法"></a>1.2.2.基本语法</h3><p>常见的全文检索查询包括：</p><ul><li>match查询：单字段查询</li><li>multi_match查询：多字段查询，任意一个字段符合条件就算符合查询条件</li></ul><p>match查询语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEXT&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>mulit_match语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEXT&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;FIELD1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot; FIELD12&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-3-示例"><a href="#1-2-3-示例" class="headerlink" title="1.2.3.示例"></a>1.2.3.示例</h3><p>match查询示例：</p><p><img src="/../images/image-20210721170455419.png" alt="image-20210721170455419"></p><p>multi_match查询示例：</p><p><img src="/../images/image-20210721170720691.png" alt="image-20210721170720691"></p><p>可以看到，两种查询结果是一样的，为什么？</p><p>因为我们将brand、name、business值都利用copy_to复制到了all字段中。因此你根据三个字段搜索，和根据all字段搜索效果当然一样了。</p><p>但是，搜索字段越多，对查询性能影响越大，因此建议采用copy_to，然后单字段查询的方式。</p><h3 id="1-2-4-总结"><a href="#1-2-4-总结" class="headerlink" title="1.2.4.总结"></a>1.2.4.总结</h3><p>match和multi_match的区别是什么？</p><ul><li>match：根据一个字段查询</li><li>multi_match：根据多个字段查询，参与查询字段越多，查询性能越差</li></ul><h2 id="1-3-精准查询"><a href="#1-3-精准查询" class="headerlink" title="1.3.精准查询"></a>1.3.精准查询</h2><p>精确查询一般是查找keyword、数值、日期、boolean等类型字段。所以<strong>不会</strong>对搜索条件分词。常见的有：</p><ul><li>term：根据词条精确值查询</li><li>range：根据值的范围查询</li></ul><h3 id="1-3-1-term查询"><a href="#1-3-1-term查询" class="headerlink" title="1.3.1.term查询"></a>1.3.1.term查询</h3><p>因为精确查询的字段搜是不分词的字段，因此查询的条件也必须是<strong>不分词</strong>的词条。查询时，用户输入的内容跟自动值完全匹配时才认为符合条件。如果用户输入的内容过多，反而搜索不到数据。</p><p>语法说明：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// term查询</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VALUE&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><p>当我搜索的是精确词条时，能正确查询出结果：</p><p><img src="/../images/image-20210721171655308.png" alt="image-20210721171655308"></p><p>但是，当我搜索的内容不是词条，而是多个词语形成的短语时，反而搜索不到：</p><p><img src="/../images/image-20210721171838378.png" alt="image-20210721171838378"></p><h3 id="1-3-2-range查询"><a href="#1-3-2-range查询" class="headerlink" title="1.3.2.range查询"></a>1.3.2.range查询</h3><p>范围查询，一般应用在对数值类型做范围过滤的时候。比如做价格范围过滤。</p><p>基本语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// range查询</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 这里的gte代表大于等于，gt则代表大于</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span> <span class="hljs-comment">// lte代表小于等于，lt则代表小于</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><p><img src="/../images/image-20210721172307172.png" alt="image-20210721172307172"></p><h3 id="1-3-3-总结"><a href="#1-3-3-总结" class="headerlink" title="1.3.3.总结"></a>1.3.3.总结</h3><p>精确查询常见的有哪些？</p><ul><li>term查询：根据词条精确匹配，一般搜索keyword类型、数值类型、布尔类型、日期类型字段</li><li>range查询：根据数值范围查询，可以是数值、日期的范围</li></ul><h2 id="1-4-地理坐标查询"><a href="#1-4-地理坐标查询" class="headerlink" title="1.4.地理坐标查询"></a>1.4.地理坐标查询</h2><p>所谓的地理坐标查询，其实就是根据经纬度查询，官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html</a></p><p>常见的使用场景包括：</p><ul><li>携程：搜索我附近的酒店</li><li>滴滴：搜索我附近的出租车</li><li>微信：搜索我附近的人</li></ul><p>附近的酒店：</p><p><img src="/../images/image-20210721172645103.png" alt="image-20210721172645103"> </p><p>附近的车：</p><p><img src="/../images/image-20210721172654880.png" alt="image-20210721172654880"> </p><h3 id="1-4-1-矩形范围查询"><a href="#1-4-1-矩形范围查询" class="headerlink" title="1.4.1.矩形范围查询"></a>1.4.1.矩形范围查询</h3><p>矩形范围查询，也就是geo_bounding_box查询，查询坐标落在某个矩形范围的所有文档：</p><p><img src="/../images/DKV9HZbVS6.gif" alt="DKV9HZbVS6"></p><p>查询时，需要指定矩形的<strong>左上</strong>、<strong>右下</strong>两个点的坐标，然后画出一个矩形，落在该矩形内的都是符合条件的点。</p><p>语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// geo_bounding_box查询</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geo_bounding_box&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;top_left&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 左上点</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31.1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121.5</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bottom_right&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 右下点</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30.9</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121.7</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这种并不符合“附近的人”这样的需求，所以我们就不做了。</p><h3 id="1-4-2-附近查询"><a href="#1-4-2-附近查询" class="headerlink" title="1.4.2.附近查询"></a>1.4.2.附近查询</h3><p>附近查询，也叫做距离查询（geo_distance）：查询到指定中心点小于某个距离值的所有文档。</p><p>换句话来说，在地图上找一个点作为圆心，以指定距离为半径，画一个圆，落在圆内的坐标都算符合条件：</p><p><img src="/../images/vZrdKAh19C.gif" alt="vZrdKAh19C"></p><p>语法说明：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// geo_distance 查询</span><br>GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geo_distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15km&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 半径</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;31.21,121.5&quot;</span> <span class="hljs-comment">// 圆心</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例：</p><p>我们先搜索陆家嘴附近15km的酒店：</p><p><img src="/../images/image-20210721175443234.png" alt="image-20210721175443234"></p><p>发现共有47家酒店。</p><p>然后把半径缩短到3公里：</p><p><img src="/../images/image-20210721182031475.png" alt="image-20210721182031475"></p><p>可以发现，搜索到的酒店数量减少到了5家。</p><h2 id="1-5-复合查询"><a href="#1-5-复合查询" class="headerlink" title="1.5.复合查询"></a>1.5.复合查询</h2><p>复合（compound）查询：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑。常见的有两种：</p><ul><li>fuction score：算分函数查询，可以控制文档相关性算分，控制文档排名</li><li>bool query：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索</li></ul><h3 id="1-5-1-相关性算分"><a href="#1-5-1-相关性算分" class="headerlink" title="1.5.1.相关性算分"></a>1.5.1.相关性算分</h3><p>当我们利用match查询时，文档结果会根据与搜索词条的关联度打分（_score），返回结果时按照分值降序排列。</p><p>例如，我们搜索 “虹桥如家”，结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">17.850193</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;虹桥如家酒店真不错&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">12.259849</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;外滩如家酒店真不错&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">11.91091</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;迪士尼如家酒店真不错&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>在elasticsearch中，早期使用的打分算法是TF-IDF算法，公式如下：</p><p><img src="/../images/image-20210721190152134.png" alt="image-20210721190152134"></p><p>在后来的5.1版本升级中，elasticsearch将算法改进为BM25算法，公式如下：</p><p><img src="/../images/image-20210721190416214.png" alt="image-20210721190416214"></p><p>TF-IDF算法有一各缺陷，就是词条频率越高，文档得分也会越高，单个词条对文档影响较大。而BM25则会让单个词条的算分有一个上限，曲线更加平滑：</p><p><img src="/../images/image-20210721190907320.png" alt="image-20210721190907320"></p><p>小结：elasticsearch会根据词条和文档的相关度做打分，算法由两种：</p><ul><li>TF-IDF算法</li><li>BM25算法，elasticsearch5.1版本后采用的算法</li></ul><h3 id="1-5-2-算分函数查询"><a href="#1-5-2-算分函数查询" class="headerlink" title="1.5.2.算分函数查询"></a>1.5.2.算分函数查询</h3><p>根据相关度打分是比较合理的需求，但<strong>合理的不一定是产品经理需要</strong>的。</p><p>以百度为例，你搜索的结果中，并不是相关度越高排名越靠前，而是谁掏的钱多排名就越靠前。如图：</p><p><img src="/../images/image-20210721191144560.png" alt="image-20210721191144560"></p><p>要想认为控制相关性算分，就需要利用elasticsearch中的function score 查询了。</p><h4 id="1）语法说明"><a href="#1）语法说明" class="headerlink" title="1）语法说明"></a>1）语法说明</h4><p><img src="/../images/image-20210721191544750.png" alt="image-20210721191544750"></p><p>function score 查询中包含四部分内容：</p><ul><li><strong>原始查询</strong>条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，<strong>原始算分</strong>（query score)</li><li><strong>过滤条件</strong>：filter部分，符合该条件的文档才会重新算分</li><li><strong>算分函数</strong>：符合filter条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数<ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数算法</li></ul></li><li><strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括：<ul><li>multiply：相乘</li><li>replace：用function score替换query score</li><li>其它，例如：sum、avg、max、min</li></ul></li></ul><p>function score的运行流程如下：</p><ul><li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li><li>2）根据<strong>过滤条件</strong>，过滤文档</li><li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li><li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li></ul><p>因此，其中的关键点是：</p><ul><li>过滤条件：决定哪些文档的算分被修改</li><li>算分函数：决定函数算分的算法</li><li>运算模式：决定最终算分结果</li></ul><h4 id="2）示例"><a href="#2）示例" class="headerlink" title="2）示例"></a>2）示例</h4><p>需求：给“如家”这个品牌的酒店排名靠前一些</p><p>翻译一下这个需求，转换为之前说的四个要点：</p><ul><li>原始条件：不确定，可以任意变化</li><li>过滤条件：brand = “如家”</li><li>算分函数：可以简单粗暴，直接给固定的算分结果，weight</li><li>运算模式：比如求和</li></ul><p>因此最终的DSL语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;function_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  .... <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 原始查询，可以是任意条件</span><br>      <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-comment">// 算分函数</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 满足的条件，品牌必须是如家</span><br>            <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span> <span class="hljs-comment">// 算分权重为2</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;boost_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sum&quot;</span> <span class="hljs-comment">// 加权模式，求和</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>测试，在未添加算分函数时，如家得分如下：</p><p><img src="/../images/image-20210721193152520.png" alt="image-20210721193152520"></p><p>添加了算分函数后，如家得分就提升了：</p><p><img src="/../images/image-20210721193458182.png" alt="image-20210721193458182"></p><h4 id="3）小结"><a href="#3）小结" class="headerlink" title="3）小结"></a>3）小结</h4><p>function score query定义的三要素是什么？</p><ul><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算function score</li><li>加权方式：function score 与 query score如何运算</li></ul><h3 id="1-5-3-布尔查询"><a href="#1-5-3-布尔查询" class="headerlink" title="1.5.3.布尔查询"></a>1.5.3.布尔查询</h3><p>布尔查询是一个或多个查询子句的组合，每一个子句就是一个<strong>子查询</strong>。子查询的组合方式有：</p><ul><li>must：必须匹配每个子查询，类似“与”</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li><li>filter：必须匹配，<strong>不参与算分</strong></li></ul><p>比如在搜索酒店时，除了关键字搜索外，我们还可能根据品牌、价格、城市等字段做过滤：</p><p><img src="/../images/image-20210721193822848.png" alt="image-20210721193822848"></p><p>每一个不同的字段，其查询的条件、方式都不一样，必须是多个不同的查询，而要组合这些查询，就必须用bool查询了。</p><p>需要注意的是，搜索时，参与<strong>打分的字段越多，查询的性能也越差</strong>。因此这种多条件查询时，建议这样做：</p><ul><li>搜索框的关键字搜索，是全文检索查询，使用must查询，参与算分</li><li>其它过滤条件，采用filter查询。不参与算分</li></ul><h4 id="1）语法示例："><a href="#1）语法示例：" class="headerlink" title="1）语法示例："></a>1）语法示例：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;上海&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;should&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;皇冠假日&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华美达&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">500</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">45</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2）示例-1"><a href="#2）示例-1" class="headerlink" title="2）示例"></a>2）示例</h4><p>需求：搜索名字包含“如家”，价格不高于400，在坐标31.21,121.5周围10km范围内的酒店。</p><p>分析：</p><ul><li>名称搜索，属于全文检索查询，应该参与算分。放到must中</li><li>价格不高于400，用range查询，属于过滤条件，不参与算分。放到must_not中</li><li>周围10km范围内，用geo_distance查询，属于过滤条件，不参与算分。放到filter中</li></ul><p><img src="/../images/image-20210721194744183.png" alt="image-20210721194744183"></p><h4 id="3）小结-1"><a href="#3）小结-1" class="headerlink" title="3）小结"></a>3）小结</h4><p>bool查询有几种逻辑关系？</p><ul><li>must：必须匹配的条件，可以理解为“与”</li><li>should：选择性匹配的条件，可以理解为“或”</li><li>must_not：必须不匹配的条件，不参与打分</li><li>filter：必须匹配的条件，不参与打分</li></ul><h1 id="2-搜索结果处理"><a href="#2-搜索结果处理" class="headerlink" title="2.搜索结果处理"></a>2.搜索结果处理</h1><p>搜索的结果可以按照用户指定的方式去处理或展示。</p><h2 id="2-1-排序"><a href="#2-1-排序" class="headerlink" title="2.1.排序"></a>2.1.排序</h2><p>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-search-results.html">结果排序</a>。可以排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型等。</p><h3 id="2-1-1-普通字段排序"><a href="#2-1-1-普通字段排序" class="headerlink" title="2.1.1.普通字段排序"></a>2.1.1.普通字段排序</h3><p>keyword、数值、日期类型排序的语法基本一致。</p><p><strong>语法</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span>  <span class="hljs-comment">// 排序字段、排序方式ASC、DESC</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>排序条件是一个数组，也就是可以写多个排序条件。按照声明的顺序，当第一个条件相等时，再按照第二个条件排序，以此类推</p><p><strong>示例</strong>：</p><p>需求描述：酒店数据按照用户评价（score)降序排序，评价相同的按照价格(price)升序排序</p><p><img src="/../images/image-20210721195728306.png" alt="image-20210721195728306"></p><h3 id="2-1-2-地理坐标排序"><a href="#2-1-2-地理坐标排序" class="headerlink" title="2.1.2.地理坐标排序"></a>2.1.2.地理坐标排序</h3><p>地理坐标排序略有不同。</p><p><strong>语法说明</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_geo_distance&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;FIELD&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;纬度，经度&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 文档中geo_point类型的字段名、目标坐标点</span><br>          <span class="hljs-attr">&quot;order&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 排序方式</span><br>          <span class="hljs-attr">&quot;unit&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;km&quot;</span> <span class="hljs-comment">// 排序的距离单位</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个查询的含义是：</p><ul><li>指定一个坐标，作为目标点</li><li>计算每一个文档中，指定字段（必须是geo_point类型）的坐标 到目标点的距离是多少</li><li>根据距离排序</li></ul><p><strong>示例：</strong></p><p>需求描述：实现对酒店数据按照到你的位置坐标的距离升序排序</p><p>提示：获取你的位置的经纬度的方式：<a href="https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/">https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/</a></p><p>假设我的位置是：31.034661，121.612282，寻找我周围距离最近的酒店。</p><p><img src="/../images/image-20210721200214690.png" alt="image-20210721200214690"></p><h2 id="2-2-分页"><a href="#2-2-分页" class="headerlink" title="2.2.分页"></a>2.2.分页</h2><p>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。elasticsearch中通过修改from、size参数来控制要返回的分页结果：</p><ul><li>from：从第几个文档开始</li><li>size：总共查询几个文档</li></ul><p>类似于mysql中的<code>limit ?, ?</code></p><h3 id="2-2-1-基本的分页"><a href="#2-2-1-基本的分页" class="headerlink" title="2.2.1.基本的分页"></a>2.2.1.基本的分页</h3><p>分页的基本语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 分页开始的位置，默认为0</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 期望获取的文档总数</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-2-深度分页问题"><a href="#2-2-2-深度分页问题" class="headerlink" title="2.2.2.深度分页问题"></a>2.2.2.深度分页问题</h3><p>现在，我要查询990~1000的数据，查询逻辑要这么写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">990</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 分页开始的位置，默认为0</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 期望获取的文档总数</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里是查询990开始的数据，也就是 第990~第1000条 数据。</p><p>不过，elasticsearch内部分页时，必须先查询 0~1000条，然后截取其中的990 ~ 1000的这10条：</p><p><img src="/../images/image-20210721200643029.png" alt="image-20210721200643029"></p><p>查询TOP1000，如果es是单点模式，这并无太大影响。</p><p>但是elasticsearch将来一定是集群，例如我集群有5个节点，我要查询TOP1000的数据，并不是每个节点查询200条就可以了。</p><p>因为节点A的TOP200，在另一个节点可能排到10000名以外了。</p><p>因此要想获取整个集群的TOP1000，必须先查询出每个节点的TOP1000，汇总结果后，重新排名，重新截取TOP1000。</p><p><img src="/../images/image-20210721201003229.png" alt="image-20210721201003229"></p><p>那如果我要查询9900~10000的数据呢？是不是要先查询TOP10000呢？那每个节点都要查询10000条？汇总到内存中？</p><p>当查询分页深度较大时，汇总数据过多，对内存和CPU会产生非常大的压力，因此elasticsearch会禁止from+ size 超过10000的请求。</p><p>针对深度分页，ES提供了两种解决方案，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html">官方文档</a>：</p><ul><li>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</li><li>scroll：原理将排序后的文档id形成快照，保存在内存。官方已经不推荐使用。</li></ul><h3 id="2-2-3-小结"><a href="#2-2-3-小结" class="headerlink" title="2.2.3.小结"></a>2.2.3.小结</h3><p>分页查询的常见实现方案以及优缺点：</p><ul><li><p><code>from + size</code>：</p><ul><li>优点：支持随机翻页</li><li>缺点：深度分页问题，默认查询上限（from + size）是10000</li><li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索</li></ul></li><li><p><code>after search</code>：</p><ul><li>优点：没有查询上限（单次查询的size不超过10000）</li><li>缺点：只能向后逐页查询，不支持随机翻页</li><li>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页</li></ul></li><li><p><code>scroll</code>：</p><ul><li>优点：没有查询上限（单次查询的size不超过10000）</li><li>缺点：会有额外内存消耗，并且搜索结果是非实时的</li><li>场景：海量数据的获取和迁移。从ES7.1开始不推荐，建议用 after search方案。</li></ul></li></ul><h2 id="2-3-高亮"><a href="#2-3-高亮" class="headerlink" title="2.3.高亮"></a>2.3.高亮</h2><h3 id="2-3-1-高亮原理"><a href="#2-3-1-高亮原理" class="headerlink" title="2.3.1.高亮原理"></a>2.3.1.高亮原理</h3><p>什么是高亮显示呢？</p><p>我们在百度，京东搜索时，关键字会变成红色，比较醒目，这叫高亮显示：</p><p><img src="/../images/image-20210721202705030.png" alt="image-20210721202705030"></p><p>高亮显示的实现分为两步：</p><ul><li>1）给文档中的所有关键字都添加一个标签，例如<code>&lt;em&gt;</code>标签</li><li>2）页面给<code>&lt;em&gt;</code>标签编写CSS样式</li></ul><h3 id="2-3-2-实现高亮"><a href="#2-3-2-实现高亮" class="headerlink" title="2.3.2.实现高亮"></a>2.3.2.实现高亮</h3><p><strong>高亮的语法</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;TEXT&quot;</span> <span class="hljs-comment">// 查询条件，高亮一定要使用全文检索查询</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 指定要高亮的字段</span><br>      <span class="hljs-attr">&quot;FIELD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;em&gt;&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 用来标记高亮字段的前置标签</span><br>        <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;/em&gt;&quot;</span> <span class="hljs-comment">// 用来标记高亮字段的后置标签</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>高亮是对关键字高亮，因此<strong>搜索条件必须带有关键字</strong>，而不能是范围这样的查询。</li><li>默认情况下，<strong>高亮的字段，必须与搜索指定的字段一致</strong>，否则无法高亮</li><li>如果要对非搜索字段高亮，则需要添加一个属性：required_field_match=false</li></ul><p><strong>示例</strong>：</p><p><img src="/../images/image-20210721203349633.png" alt="image-20210721203349633"></p><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4.总结"></a>2.4.总结</h2><p>查询的DSL是一个大的JSON对象，包含下列属性：</p><ul><li>query：查询条件</li><li>from和size：分页条件</li><li>sort：排序条件</li><li>highlight：高亮条件</li></ul><p>示例：</p><p><img src="/../images/image-20210721203657850.png" alt="image-20210721203657850"></p><h1 id="3-RestClient查询文档"><a href="#3-RestClient查询文档" class="headerlink" title="3.RestClient查询文档"></a>3.RestClient查询文档</h1><p>文档的查询同样适用昨天学习的 RestHighLevelClient对象，基本步骤包括：</p><ul><li>1）准备Request对象</li><li>2）准备请求参数</li><li>3）发起请求</li><li>4）解析响应</li></ul><h2 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1.快速入门"></a>3.1.快速入门</h2><p>我们以match_all查询为例</p><h3 id="3-1-1-发起查询请求"><a href="#3-1-1-发起查询请求" class="headerlink" title="3.1.1.发起查询请求"></a>3.1.1.发起查询请求</h3><p><img src="/../images/image-20210721203950559.png" alt="image-20210721203950559"></p><p>代码解读：</p><ul><li><p>第一步，创建<code>SearchRequest</code>对象，指定索引库名</p></li><li><p>第二步，利用<code>request.source()</code>构建DSL，DSL中可以包含查询、分页、排序、高亮等</p><ul><li><code>query()</code>：代表查询条件，利用<code>QueryBuilders.matchAllQuery()</code>构建一个match_all查询的DSL</li></ul></li><li><p>第三步，利用client.search()发送请求，得到响应</p></li></ul><p>这里关键的API有两个，一个是<code>request.source()</code>，其中包含了查询、排序、分页、高亮等所有功能：</p><p><img src="/../images/image-20210721215640790.png" alt="image-20210721215640790"></p><p>另一个是<code>QueryBuilders</code>，其中包含match、term、function_score、bool等各种查询：</p><p><img src="/../images/image-20210721215729236.png" alt="image-20210721215729236"></p><h3 id="3-1-2-解析响应"><a href="#3-1-2-解析响应" class="headerlink" title="3.1.2.解析响应"></a>3.1.2.解析响应</h3><p>响应结果的解析：</p><p><img src="/../images/image-20210721214221057.png" alt="image-20210721214221057"></p><p>elasticsearch返回的结果是一个JSON字符串，结构包含：</p><ul><li><code>hits</code>：命中的结果<ul><li><code>total</code>：总条数，其中的value是具体的总条数值</li><li><code>max_score</code>：所有结果中得分最高的文档的相关性算分</li><li><code>hits</code>：搜索结果的文档数组，其中的每个文档都是一个json对象<ul><li><code>_source</code>：文档中的原始数据，也是json对象</li></ul></li></ul></li></ul><p>因此，我们解析响应结果，就是逐层解析JSON字符串，流程如下：</p><ul><li><code>SearchHits</code>：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果<ul><li><code>SearchHits#getTotalHits().value</code>：获取总条数信息</li><li><code>SearchHits#getHits()</code>：获取SearchHit数组，也就是文档数组<ul><li><code>SearchHit#getSourceAsString()</code>：获取文档结果中的_source，也就是原始的json文档数据</li></ul></li></ul></li></ul><h3 id="3-1-3-完整代码"><a href="#3-1-3-完整代码" class="headerlink" title="3.1.3.完整代码"></a>3.1.3.完整代码</h3><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    request.source()<br>        .query(QueryBuilders.matchAllQuery());<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br><br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-comment">// 4.解析响应</span><br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 4.1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    System.out.println(<span class="hljs-string">&quot;共搜索到&quot;</span> + total + <span class="hljs-string">&quot;条数据&quot;</span>);<br>    <span class="hljs-comment">// 4.2.文档数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-comment">// 4.3.遍历</span><br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 获取文档source</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br>        System.out.println(<span class="hljs-string">&quot;hotelDoc = &quot;</span> + hotelDoc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-4-小结"><a href="#3-1-4-小结" class="headerlink" title="3.1.4.小结"></a>3.1.4.小结</h3><p>查询的基本步骤是：</p><ol><li><p>创建SearchRequest对象</p></li><li><p>准备Request.source()，也就是DSL。</p><p> ① QueryBuilders来构建查询条件</p><p> ② 传入Request.source() 的 query() 方法</p></li><li><p>发送请求，得到结果</p></li><li><p>解析结果（参考JSON结果，从外到内，逐层解析）</p></li></ol><h2 id="3-2-match查询"><a href="#3-2-match查询" class="headerlink" title="3.2.match查询"></a>3.2.match查询</h2><p>全文检索的match和multi_match查询与match_all的API基本一致。差别是查询条件，也就是query的部分。</p><p><img src="/../images/image-20210721215923060.png" alt="image-20210721215923060"> </p><p>因此，Java代码上的差异主要是request.source().query()中的参数了。同样是利用QueryBuilders提供的方法：</p><p><img src="/../images/image-20210721215843099.png" alt="image-20210721215843099"> </p><p>而结果解析代码则完全一致，可以抽取并共享。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    request.source()<br>        .query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;如家&quot;</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-精确查询"><a href="#3-3-精确查询" class="headerlink" title="3.3.精确查询"></a>3.3.精确查询</h2><p>精确查询主要是两者：</p><ul><li>term：词条精确匹配</li><li>range：范围查询</li></ul><p>与之前的查询相比，差异同样在查询条件，其它都一样。</p><p>查询条件构造的API如下：</p><p><img src="/../images/image-20210721220305140.png" alt="image-20210721220305140"> </p><h2 id="3-4-布尔查询"><a href="#3-4-布尔查询" class="headerlink" title="3.4.布尔查询"></a>3.4.布尔查询</h2><p>布尔查询是用must、must_not、filter等方式组合其它查询，代码示例如下：</p><p><img src="/../images/image-20210721220927286.png" alt="image-20210721220927286"></p><p>可以看到，API与其它查询的差别同样是在查询条件的构建，QueryBuilders，结果解析等其他代码完全不变。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBool</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    <span class="hljs-comment">// 2.1.准备BooleanQuery</span><br>    <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>    <span class="hljs-comment">// 2.2.添加term</span><br>    boolQuery.must(QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;杭州&quot;</span>));<br>    <span class="hljs-comment">// 2.3.添加range</span><br>    boolQuery.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(<span class="hljs-number">250</span>));<br><br>    request.source().query(boolQuery);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-排序、分页"><a href="#3-5-排序、分页" class="headerlink" title="3.5.排序、分页"></a>3.5.排序、分页</h2><p>搜索结果的排序和分页是与query同级的参数，因此同样是使用request.source()来设置。</p><p>对应的API如下：</p><p><img src="/../images/image-20210721221121266.png" alt="image-20210721221121266"></p><p>完整代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageAndSort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 页码，每页大小</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, size = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    <span class="hljs-comment">// 2.1.query</span><br>    request.source().query(QueryBuilders.matchAllQuery());<br>    <span class="hljs-comment">// 2.2.排序 sort</span><br>    request.source().sort(<span class="hljs-string">&quot;price&quot;</span>, SortOrder.ASC);<br>    <span class="hljs-comment">// 2.3.分页 from、size</span><br>    request.source().from((page - <span class="hljs-number">1</span>) * size).size(<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-高亮"><a href="#3-6-高亮" class="headerlink" title="3.6.高亮"></a>3.6.高亮</h2><p>高亮的代码与之前代码差异较大，有两点：</p><ul><li>查询的DSL：其中除了查询条件，还需要添加高亮条件，同样是与query同级。</li><li>结果解析：结果除了要解析_source文档数据，还要解析高亮结果</li></ul><h3 id="3-6-1-高亮请求构建"><a href="#3-6-1-高亮请求构建" class="headerlink" title="3.6.1.高亮请求构建"></a>3.6.1.高亮请求构建</h3><p>高亮请求的构建API如下：</p><p><img src="/../images/image-20210721221744883.png" alt="image-20210721221744883"></p><p>上述代码省略了查询条件部分，但是大家不要忘了：高亮查询必须使用全文检索查询，并且要有搜索关键字，将来才可以对关键字高亮。</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHighlight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1.准备Request</span><br>    <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">// 2.准备DSL</span><br>    <span class="hljs-comment">// 2.1.query</span><br>    request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;如家&quot;</span>));<br>    <span class="hljs-comment">// 2.2.高亮</span><br>    request.source().highlighter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().field(<span class="hljs-string">&quot;name&quot;</span>).requireFieldMatch(<span class="hljs-literal">false</span>));<br>    <span class="hljs-comment">// 3.发送请求</span><br>    <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>    <span class="hljs-comment">// 4.解析响应</span><br>    handleResponse(response);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-2-高亮结果解析"><a href="#3-6-2-高亮结果解析" class="headerlink" title="3.6.2.高亮结果解析"></a>3.6.2.高亮结果解析</h3><p>高亮的结果与查询的文档结果默认是分离的，并不在一起。</p><p>因此解析高亮的代码需要额外处理：</p><p><img src="/../images/image-20210721222057212.png" alt="image-20210721222057212"></p><p>代码解读：</p><ul><li>第一步：从结果中获取source。hit.getSourceAsString()，这部分是非高亮结果，json字符串。还需要反序列为HotelDoc对象</li><li>第二步：获取高亮结果。hit.getHighlightFields()，返回值是一个Map，key是高亮字段名称，值是HighlightField对象，代表高亮值</li><li>第三步：从map中根据高亮字段名称，获取高亮字段值对象HighlightField</li><li>第四步：从HighlightField中获取Fragments，并且转为字符串。这部分就是真正的高亮字符串了</li><li>第五步：用高亮的结果替换HotelDoc中的非高亮结果</li></ul><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-comment">// 4.解析响应</span><br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 4.1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    System.out.println(<span class="hljs-string">&quot;共搜索到&quot;</span> + total + <span class="hljs-string">&quot;条数据&quot;</span>);<br>    <span class="hljs-comment">// 4.2.文档数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-comment">// 4.3.遍历</span><br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 获取文档source</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br>        <span class="hljs-comment">// 获取高亮结果</span><br>        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(highlightFields)) &#123;<br>            <span class="hljs-comment">// 根据字段名获取高亮结果</span><br>            <span class="hljs-type">HighlightField</span> <span class="hljs-variable">highlightField</span> <span class="hljs-operator">=</span> highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-keyword">if</span> (highlightField != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 获取高亮值</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> highlightField.getFragments()[<span class="hljs-number">0</span>].string();<br>                <span class="hljs-comment">// 覆盖非高亮结果</span><br>                hotelDoc.setName(name);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;hotelDoc = &quot;</span> + hotelDoc);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-黑马旅游案例"><a href="#4-黑马旅游案例" class="headerlink" title="4.黑马旅游案例"></a>4.黑马旅游案例</h1><p>下面，我们通过黑马旅游的案例来实战演练下之前学习的知识。</p><p>我们实现四部分功能：</p><ul><li>酒店搜索和分页</li><li>酒店结果过滤</li><li>我周边的酒店</li><li>酒店竞价排名</li></ul><p>启动我们提供的hotel-demo项目，其默认端口是8089，访问<a href="http://localhost:8090，就能看到项目页面了：">http://localhost:8090，就能看到项目页面了：</a></p><p><img src="/../images/image-20210721223159598.png" alt="image-20210721223159598"></p><h2 id="4-1-酒店搜索和分页"><a href="#4-1-酒店搜索和分页" class="headerlink" title="4.1.酒店搜索和分页"></a>4.1.酒店搜索和分页</h2><p>案例需求：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页</p><h3 id="4-1-1-需求分析"><a href="#4-1-1-需求分析" class="headerlink" title="4.1.1.需求分析"></a>4.1.1.需求分析</h3><p>在项目的首页，有一个大大的搜索框，还有分页按钮：</p><p><img src="/../images/image-20210721223859419.png" alt="image-20210721223859419"></p><p>点击搜索按钮，可以看到浏览器控制台发出了请求：</p><p><img src="/../images/image-20210721224033789.png" alt="image-20210721224033789"></p><p>请求参数如下：</p><p><img src="/../images/image-20210721224112708.png" alt="image-20210721224112708"></p><p>由此可以知道，我们这个请求的信息如下：</p><ul><li>请求方式：POST</li><li>请求路径：/hotel/list</li><li>请求参数：JSON对象，包含4个字段：<ul><li>key：搜索关键字</li><li>page：页码</li><li>size：每页大小</li><li>sortBy：排序，目前暂不实现</li></ul></li><li>返回值：分页查询，需要返回分页结果PageResult，包含两个属性：<ul><li><code>total</code>：总条数</li><li><code>List&lt;HotelDoc&gt;</code>：当前页的数据</li></ul></li></ul><p>因此，我们实现业务的流程如下：</p><ul><li>步骤一：定义实体类，接收请求参数的JSON对象</li><li>步骤二：编写controller，接收页面的请求</li><li>步骤三：编写业务实现，利用RestHighLevelClient实现搜索、分页</li></ul><h3 id="4-1-2-定义实体类"><a href="#4-1-2-定义实体类" class="headerlink" title="4.1.2.定义实体类"></a>4.1.2.定义实体类</h3><p>实体类有两个，一个是前端的请求参数实体，一个是服务端应该返回的响应结果实体。</p><p>1）请求参数</p><p>前端请求的json结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;搜索关键字&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sortBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>因此，我们在<code>cn.itcast.hotel.pojo</code>包下定义一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestParams</span> &#123;<br>    <span class="hljs-keyword">private</span> String key;<br>    <span class="hljs-keyword">private</span> Integer page;<br>    <span class="hljs-keyword">private</span> Integer size;<br>    <span class="hljs-keyword">private</span> String sortBy;<br>&#125;<br></code></pre></td></tr></table></figure><p>2）返回值</p><p>分页查询，需要返回分页结果PageResult，包含两个属性：</p><ul><li><code>total</code>：总条数</li><li><code>List&lt;HotelDoc&gt;</code>：当前页的数据</li></ul><p>因此，我们在<code>cn.itcast.hotel.pojo</code>中定义返回结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageResult</span> &#123;<br>    <span class="hljs-keyword">private</span> Long total;<br>    <span class="hljs-keyword">private</span> List&lt;HotelDoc&gt; hotels;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PageResult</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PageResult</span><span class="hljs-params">(Long total, List&lt;HotelDoc&gt; hotels)</span> &#123;<br>        <span class="hljs-built_in">this</span>.total = total;<br>        <span class="hljs-built_in">this</span>.hotels = hotels;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-3-定义controller"><a href="#4-1-3-定义controller" class="headerlink" title="4.1.3.定义controller"></a>4.1.3.定义controller</h3><p>定义一个HotelController，声明查询接口，满足下列要求：</p><ul><li>请求方式：Post</li><li>请求路径：/hotel/list</li><li>请求参数：对象，类型为RequestParam</li><li>返回值：PageResult，包含两个属性<ul><li><code>Long total</code>：总条数</li><li><code>List&lt;HotelDoc&gt; hotels</code>：酒店数据</li></ul></li></ul><p>因此，我们在<code>cn.itcast.hotel.web</code>中定义HotelController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/hotel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService hotelService;<br><span class="hljs-comment">// 搜索酒店数据</span><br>    <span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> RequestParams params)</span>&#123;<br>        <span class="hljs-keyword">return</span> hotelService.search(params);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-4-实现搜索业务"><a href="#4-1-4-实现搜索业务" class="headerlink" title="4.1.4.实现搜索业务"></a>4.1.4.实现搜索业务</h3><p>我们在controller调用了IHotelService，并没有实现该方法，因此下面我们就在IHotelService中定义方法，并且去实现业务逻辑。</p><p>1）在<code>cn.itcast.hotel.service</code>中的<code>IHotelService</code>接口中定义一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据关键字搜索酒店信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params 请求参数对象，包含用户输入的关键字 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 酒店文档列表</span><br><span class="hljs-comment"> */</span><br>PageResult <span class="hljs-title function_">search</span><span class="hljs-params">(RequestParams params)</span>;<br></code></pre></td></tr></table></figure><p>2）实现搜索业务，肯定离不开RestHighLevelClient，我们需要把它注册到Spring中作为一个Bean。在<code>cn.itcast.hotel</code>中的<code>HotelDemoApplication</code>中声明这个Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">client</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(<br>        HttpHost.create(<span class="hljs-string">&quot;http://192.168.150.101:9200&quot;</span>)<br>    ));<br>&#125;<br></code></pre></td></tr></table></figure><p>3）在<code>cn.itcast.hotel.service.impl</code>中的<code>HotelService</code>中实现search方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">search</span><span class="hljs-params">(RequestParams params)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.准备Request</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>        <span class="hljs-comment">// 2.准备DSL</span><br>        <span class="hljs-comment">// 2.1.query</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> params.getKey();<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(key)) &#123;<br>            boolQuery.must(QueryBuilders.matchAllQuery());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            boolQuery.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, key));<br>        &#125;<br><br>        <span class="hljs-comment">// 2.2.分页</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> params.getPage();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> params.getSize();<br>        request.source().from((page - <span class="hljs-number">1</span>) * size).size(size);<br><br>        <span class="hljs-comment">// 3.发送请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">// 4.解析响应</span><br>        <span class="hljs-keyword">return</span> handleResponse(response);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 结果解析</span><br><span class="hljs-keyword">private</span> PageResult <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>    <span class="hljs-comment">// 4.解析响应</span><br>    <span class="hljs-type">SearchHits</span> <span class="hljs-variable">searchHits</span> <span class="hljs-operator">=</span> response.getHits();<br>    <span class="hljs-comment">// 4.1.获取总条数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> searchHits.getTotalHits().value;<br>    <span class="hljs-comment">// 4.2.文档数组</span><br>    SearchHit[] hits = searchHits.getHits();<br>    <span class="hljs-comment">// 4.3.遍历</span><br>    List&lt;HotelDoc&gt; hotels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>        <span class="hljs-comment">// 获取文档source</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> JSON.parseObject(json, HotelDoc.class);<br><span class="hljs-comment">// 放入集合</span><br>        hotels.add(hotelDoc);<br>    &#125;<br>    <span class="hljs-comment">// 4.4.封装返回</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(total, hotels);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-酒店结果过滤"><a href="#4-2-酒店结果过滤" class="headerlink" title="4.2.酒店结果过滤"></a>4.2.酒店结果过滤</h2><p>需求：添加品牌、城市、星级、价格等过滤功能</p><h3 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1.需求分析"></a>4.2.1.需求分析</h3><p>在页面搜索框下面，会有一些过滤项：</p><p><img src="/../images/image-20210722091940726.png" alt="image-20210722091940726"></p><p>传递的参数如图：</p><p><img src="/../images/image-20210722092051994.png" alt="image-20210722092051994"> </p><p>包含的过滤条件有：</p><ul><li>brand：品牌值</li><li>city：城市</li><li>minPrice~maxPrice：价格范围</li><li>starName：星级</li></ul><p>我们需要做两件事情：</p><ul><li>修改请求参数的对象RequestParams，接收上述参数</li><li>修改业务逻辑，在搜索条件之外，添加一些过滤条件</li></ul><h3 id="4-2-2-修改实体类"><a href="#4-2-2-修改实体类" class="headerlink" title="4.2.2.修改实体类"></a>4.2.2.修改实体类</h3><p>修改在<code>cn.itcast.hotel.pojo</code>包下的实体类RequestParams：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestParams</span> &#123;<br>    <span class="hljs-keyword">private</span> String key;<br>    <span class="hljs-keyword">private</span> Integer page;<br>    <span class="hljs-keyword">private</span> Integer size;<br>    <span class="hljs-keyword">private</span> String sortBy;<br>    <span class="hljs-comment">// 下面是新增的过滤条件参数</span><br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> Integer minPrice;<br>    <span class="hljs-keyword">private</span> Integer maxPrice;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-3-修改搜索业务"><a href="#4-2-3-修改搜索业务" class="headerlink" title="4.2.3.修改搜索业务"></a>4.2.3.修改搜索业务</h3><p>在HotelService的search方法中，只有一个地方需要修改：requet.source().query( … )其中的查询条件。</p><p>在之前的业务中，只有match查询，根据关键字搜索，现在要添加条件过滤，包括：</p><ul><li>品牌过滤：是keyword类型，用term查询</li><li>星级过滤：是keyword类型，用term查询</li><li>价格过滤：是数值类型，用range查询</li><li>城市过滤：是keyword类型，用term查询</li></ul><p>多个查询条件组合，肯定是boolean查询来组合：</p><ul><li>关键字搜索放到must中，参与算分</li><li>其它过滤条件放到filter中，不参与算分</li></ul><p>因为条件构建的逻辑比较复杂，这里先封装为一个函数：</p><p><img src="/../images/image-20210722092935453.png" alt="image-20210722092935453"></p><p>buildBasicQuery的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildBasicQuery</span><span class="hljs-params">(RequestParams params, SearchRequest request)</span> &#123;<br>    <span class="hljs-comment">// 1.构建BooleanQuery</span><br>    <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>    <span class="hljs-comment">// 2.关键字搜索</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> params.getKey();<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(key)) &#123;<br>        boolQuery.must(QueryBuilders.matchAllQuery());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        boolQuery.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, key));<br>    &#125;<br>    <span class="hljs-comment">// 3.城市条件</span><br>    <span class="hljs-keyword">if</span> (params.getCity() != <span class="hljs-literal">null</span> &amp;&amp; !params.getCity().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>, params.getCity()));<br>    &#125;<br>    <span class="hljs-comment">// 4.品牌条件</span><br>    <span class="hljs-keyword">if</span> (params.getBrand() != <span class="hljs-literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;brand&quot;</span>, params.getBrand()));<br>    &#125;<br>    <span class="hljs-comment">// 5.星级条件</span><br>    <span class="hljs-keyword">if</span> (params.getStarName() != <span class="hljs-literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;starName&quot;</span>, params.getStarName()));<br>    &#125;<br><span class="hljs-comment">// 6.价格</span><br>    <span class="hljs-keyword">if</span> (params.getMinPrice() != <span class="hljs-literal">null</span> &amp;&amp; params.getMaxPrice() != <span class="hljs-literal">null</span>) &#123;<br>        boolQuery.filter(QueryBuilders<br>                         .rangeQuery(<span class="hljs-string">&quot;price&quot;</span>)<br>                         .gte(params.getMinPrice())<br>                         .lte(params.getMaxPrice())<br>                        );<br>    &#125;<br><span class="hljs-comment">// 7.放入source</span><br>    request.source().query(boolQuery);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-我周边的酒店"><a href="#4-3-我周边的酒店" class="headerlink" title="4.3.我周边的酒店"></a>4.3.我周边的酒店</h2><p>需求：我附近的酒店</p><h3 id="4-3-1-需求分析"><a href="#4-3-1-需求分析" class="headerlink" title="4.3.1.需求分析"></a>4.3.1.需求分析</h3><p>在酒店列表页的右侧，有一个小地图，点击地图的定位按钮，地图会找到你所在的位置：</p><p><img src="/../images/image-20210722093414542.png" alt="image-20210722093414542"> </p><p>并且，在前端会发起查询请求，将你的坐标发送到服务端：</p><p><img src="/../images/image-20210722093642382.png" alt="image-20210722093642382"> </p><p>我们要做的事情就是基于这个location坐标，然后按照距离对周围酒店排序。实现思路如下：</p><ul><li>修改RequestParams参数，接收location字段</li><li>修改search方法业务逻辑，如果location有值，添加根据geo_distance排序的功能</li></ul><h3 id="4-3-2-修改实体类"><a href="#4-3-2-修改实体类" class="headerlink" title="4.3.2.修改实体类"></a>4.3.2.修改实体类</h3><p>修改在<code>cn.itcast.hotel.pojo</code>包下的实体类RequestParams：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestParams</span> &#123;<br>    <span class="hljs-keyword">private</span> String key;<br>    <span class="hljs-keyword">private</span> Integer page;<br>    <span class="hljs-keyword">private</span> Integer size;<br>    <span class="hljs-keyword">private</span> String sortBy;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> Integer minPrice;<br>    <span class="hljs-keyword">private</span> Integer maxPrice;<br>    <span class="hljs-comment">// 我当前的地理坐标</span><br>    <span class="hljs-keyword">private</span> String location;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-3-3-距离排序API"><a href="#4-3-3-距离排序API" class="headerlink" title="4.3.3.距离排序API"></a>4.3.3.距离排序API</h3><p>我们以前学习过排序功能，包括两种：</p><ul><li>普通字段排序</li><li>地理坐标排序</li></ul><p>我们只讲了普通字段排序对应的java写法。地理坐标排序只学过DSL语法，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /indexName/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span>  <br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_geo_distance&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;FIELD&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;纬度，经度&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;order&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;unit&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;km&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>对应的java代码示例：</p><p><img src="/../images/image-20210722095227059.png" alt="image-20210722095227059"></p><h3 id="4-3-4-添加距离排序"><a href="#4-3-4-添加距离排序" class="headerlink" title="4.3.4.添加距离排序"></a>4.3.4.添加距离排序</h3><p>在<code>cn.itcast.hotel.service.impl</code>的<code>HotelService</code>的<code>search</code>方法中，添加一个排序功能：</p><p><img src="/../images/image-20210722095902314.png" alt="image-20210722095902314"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">search</span><span class="hljs-params">(RequestParams params)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.准备Request</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>        <span class="hljs-comment">// 2.准备DSL</span><br>        <span class="hljs-comment">// 2.1.query</span><br>        buildBasicQuery(params, request);<br><br>        <span class="hljs-comment">// 2.2.分页</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> params.getPage();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> params.getSize();<br>        request.source().from((page - <span class="hljs-number">1</span>) * size).size(size);<br><br>        <span class="hljs-comment">// 2.3.排序</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> params.getLocation();<br>        <span class="hljs-keyword">if</span> (location != <span class="hljs-literal">null</span> &amp;&amp; !location.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            request.source().sort(SortBuilders<br>                                  .geoDistanceSort(<span class="hljs-string">&quot;location&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeoPoint</span>(location))<br>                                  .order(SortOrder.ASC)<br>                                  .unit(DistanceUnit.KILOMETERS)<br>                                 );<br>        &#125;<br><br>        <span class="hljs-comment">// 3.发送请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">// 4.解析响应</span><br>        <span class="hljs-keyword">return</span> handleResponse(response);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-5-排序距离显示"><a href="#4-3-5-排序距离显示" class="headerlink" title="4.3.5.排序距离显示"></a>4.3.5.排序距离显示</h3><p>重启服务后，测试我的酒店功能：</p><p><img src="/../images/image-20210722100040674.png" alt="image-20210722100040674"></p><p>发现确实可以实现对我附近酒店的排序，不过并没有看到酒店到底距离我多远，这该怎么办？</p><p>排序完成后，页面还要获取我附近每个酒店的具体<strong>距离</strong>值，这个值在响应结果中是独立的：</p><p><img src="/../images/image-20210722095648542.png" alt="image-20210722095648542"></p><p>因此，我们在结果解析阶段，除了解析source部分以外，还要得到sort部分，也就是排序的距离，然后放到响应结果中。</p><p>我们要做两件事：</p><ul><li>修改HotelDoc，添加排序距离字段，用于页面显示</li><li>修改HotelService类中的handleResponse方法，添加对sort值的获取</li></ul><p>1）修改HotelDoc类，添加距离字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDoc</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String location;<br>    <span class="hljs-keyword">private</span> String pic;<br>    <span class="hljs-comment">// 排序时的 距离值</span><br>    <span class="hljs-keyword">private</span> Object distance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HotelDoc</span><span class="hljs-params">(Hotel hotel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = hotel.getId();<br>        <span class="hljs-built_in">this</span>.name = hotel.getName();<br>        <span class="hljs-built_in">this</span>.address = hotel.getAddress();<br>        <span class="hljs-built_in">this</span>.price = hotel.getPrice();<br>        <span class="hljs-built_in">this</span>.score = hotel.getScore();<br>        <span class="hljs-built_in">this</span>.brand = hotel.getBrand();<br>        <span class="hljs-built_in">this</span>.city = hotel.getCity();<br>        <span class="hljs-built_in">this</span>.starName = hotel.getStarName();<br>        <span class="hljs-built_in">this</span>.business = hotel.getBusiness();<br>        <span class="hljs-built_in">this</span>.location = hotel.getLatitude() + <span class="hljs-string">&quot;, &quot;</span> + hotel.getLongitude();<br>        <span class="hljs-built_in">this</span>.pic = hotel.getPic();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2）修改HotelService中的handleResponse方法</p><p><img src="/../images/image-20210722100613966.png" alt="image-20210722100613966"></p><p>重启后测试，发现页面能成功显示距离了：</p><p><img src="/../images/image-20210722100838604.png" alt="image-20210722100838604"></p><h2 id="4-4-酒店竞价排名"><a href="#4-4-酒店竞价排名" class="headerlink" title="4.4.酒店竞价排名"></a>4.4.酒店竞价排名</h2><p>需求：让指定的酒店在搜索结果中排名置顶</p><h3 id="4-4-1-需求分析"><a href="#4-4-1-需求分析" class="headerlink" title="4.4.1.需求分析"></a>4.4.1.需求分析</h3><p>要让指定酒店在搜索结果中排名置顶，效果如图：</p><p><img src="/../images/image-20210722100947292.png" alt="image-20210722100947292"></p><p>页面会给指定的酒店添加<strong>广告</strong>标记。</p><p>那怎样才能让指定的酒店排名置顶呢？</p><p>我们之前学习过的function_score查询可以影响算分，算分高了，自然排名也就高了。而function_score包含3个要素：</p><ul><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算function score</li><li>加权方式：function score 与 query score如何运算</li></ul><p>这里的需求是：让<strong>指定酒店</strong>排名靠前。因此我们需要给这些酒店添加一个标记，这样在过滤条件中就可以<strong>根据这个标记来判断，是否要提高算分</strong>。</p><p>比如，我们给酒店添加一个字段：isAD，Boolean类型：</p><ul><li>true：是广告</li><li>false：不是广告</li></ul><p>这样function_score包含3个要素就很好确定了：</p><ul><li>过滤条件：判断isAD 是否为true</li><li>算分函数：我们可以用最简单暴力的weight，固定加权值</li><li>加权方式：可以用默认的相乘，大大提高算分</li></ul><p>因此，业务的实现步骤包括：</p><ol><li><p>给HotelDoc类添加isAD字段，Boolean类型</p></li><li><p>挑选几个你喜欢的酒店，给它的文档数据添加isAD字段，值为true</p></li><li><p>修改search方法，添加function score功能，给isAD值为true的酒店增加权重</p></li></ol><h3 id="4-4-2-修改HotelDoc实体"><a href="#4-4-2-修改HotelDoc实体" class="headerlink" title="4.4.2.修改HotelDoc实体"></a>4.4.2.修改HotelDoc实体</h3><p>给<code>cn.itcast.hotel.pojo</code>包下的HotelDoc类添加isAD字段：</p><p><img src="/../images/image-20210722101908062.png" alt="image-20210722101908062"></p><h3 id="4-4-3-添加广告标记"><a href="#4-4-3-添加广告标记" class="headerlink" title="4.4.3.添加广告标记"></a>4.4.3.添加广告标记</h3><p>接下来，我们挑几个酒店，添加isAD字段，设置为true：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /hotel/_update/<span class="hljs-number">1902197537</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;isAD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>POST /hotel/_update/<span class="hljs-number">2056126831</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;isAD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>POST /hotel/_update/<span class="hljs-number">1989806195</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;isAD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>POST /hotel/_update/<span class="hljs-number">2056105938</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;isAD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-4-4-添加算分函数查询"><a href="#4-4-4-添加算分函数查询" class="headerlink" title="4.4.4.添加算分函数查询"></a>4.4.4.添加算分函数查询</h3><p>接下来我们就要修改查询条件了。之前是用的boolean 查询，现在要改成function_socre查询。</p><p>function_score查询结构如下：</p><p><img src="/../images/image-20210721191544750.png" alt="image-20210721191544750"></p><p>对应的JavaAPI如下：</p><p><img src="/../images/image-20210722102850818.png" alt="image-20210722102850818"></p><p>我们可以将之前写的boolean查询作为<strong>原始查询</strong>条件放到query中，接下来就是添加<strong>过滤条件</strong>、<strong>算分函数</strong>、<strong>加权模式</strong>了。所以原来的代码依然可以沿用。</p><p>修改<code>cn.itcast.hotel.service.impl</code>包下的<code>HotelService</code>类中的<code>buildBasicQuery</code>方法，添加算分函数查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildBasicQuery</span><span class="hljs-params">(RequestParams params, SearchRequest request)</span> &#123;<br>    <span class="hljs-comment">// 1.构建BooleanQuery</span><br>    <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>    <span class="hljs-comment">// 关键字搜索</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> params.getKey();<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(key)) &#123;<br>        boolQuery.must(QueryBuilders.matchAllQuery());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        boolQuery.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>, key));<br>    &#125;<br>    <span class="hljs-comment">// 城市条件</span><br>    <span class="hljs-keyword">if</span> (params.getCity() != <span class="hljs-literal">null</span> &amp;&amp; !params.getCity().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>, params.getCity()));<br>    &#125;<br>    <span class="hljs-comment">// 品牌条件</span><br>    <span class="hljs-keyword">if</span> (params.getBrand() != <span class="hljs-literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;brand&quot;</span>, params.getBrand()));<br>    &#125;<br>    <span class="hljs-comment">// 星级条件</span><br>    <span class="hljs-keyword">if</span> (params.getStarName() != <span class="hljs-literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;starName&quot;</span>, params.getStarName()));<br>    &#125;<br>    <span class="hljs-comment">// 价格</span><br>    <span class="hljs-keyword">if</span> (params.getMinPrice() != <span class="hljs-literal">null</span> &amp;&amp; params.getMaxPrice() != <span class="hljs-literal">null</span>) &#123;<br>        boolQuery.filter(QueryBuilders<br>                         .rangeQuery(<span class="hljs-string">&quot;price&quot;</span>)<br>                         .gte(params.getMinPrice())<br>                         .lte(params.getMaxPrice())<br>                        );<br>    &#125;<br><br>    <span class="hljs-comment">// 2.算分控制</span><br>    <span class="hljs-type">FunctionScoreQueryBuilder</span> <span class="hljs-variable">functionScoreQuery</span> <span class="hljs-operator">=</span><br>        QueryBuilders.functionScoreQuery(<br>        <span class="hljs-comment">// 原始查询，相关性算分的查询</span><br>        boolQuery,<br>        <span class="hljs-comment">// function score的数组</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;<br>            <span class="hljs-comment">// 其中的一个function score 元素</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(<br>                <span class="hljs-comment">// 过滤条件</span><br>                QueryBuilders.termQuery(<span class="hljs-string">&quot;isAD&quot;</span>, <span class="hljs-literal">true</span>),<br>                <span class="hljs-comment">// 算分函数</span><br>                ScoreFunctionBuilders.weightFactorFunction(<span class="hljs-number">10</span>)<br>            )<br>        &#125;);<br>    request.source().query(functionScoreQuery);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="分布式搜索引擎03"><a href="#分布式搜索引擎03" class="headerlink" title="分布式搜索引擎03"></a>分布式搜索引擎03</h1><h1 id="0-学习目标-2"><a href="#0-学习目标-2" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1数据聚合"><a href="#1数据聚合" class="headerlink" title="1数据聚合"></a>1数据聚合</h1><p>**<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">聚合（</a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">aggregations</a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html">）</a>**可以让我们极其方便的实现对数据的统计、分析、运算。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近实时搜索效果。</p><h2 id="1-1-聚合的种类"><a href="#1-1-聚合的种类" class="headerlink" title="1.1.聚合的种类"></a>1.1.聚合的种类</h2><p>聚合常见的有三类：</p><ul><li><p><strong>桶（Bucket）</strong>聚合：用来对文档做分组</p><ul><li>TermAggregation：按照文档字段值分组，例如按照品牌值分组、按照国家分组</li><li>Date Histogram：按照日期阶梯分组，例如一周为一组，或者一月为一组</li></ul></li><li><p><strong>度量（Metric）</strong>聚合：用以计算一些值，比如：最大值、最小值、平均值等</p><ul><li>Avg：求平均值</li><li>Max：求最大值</li><li>Min：求最小值</li><li>Stats：同时求max、min、avg、sum等</li></ul></li><li><p><strong>管道（pipeline）</strong>聚合：其它聚合的结果为基础做聚合</p></li></ul><blockquote><p><strong>注意：</strong>参加聚合的字段必须是keyword、日期、数值、布尔类型</p></blockquote><h2 id="1-2-DSL实现聚合"><a href="#1-2-DSL实现聚合" class="headerlink" title="1.2.DSL实现聚合"></a>1.2.DSL实现聚合</h2><p>现在，我们要统计所有数据中的酒店品牌有几种，其实就是按照品牌对数据分组。此时可以根据酒店品牌的名称做聚合，也就是Bucket聚合。</p><h3 id="1-2-1-Bucket聚合语法"><a href="#1-2-1-Bucket聚合语法" class="headerlink" title="1.2.1.Bucket聚合语法"></a>1.2.1.Bucket聚合语法</h3><p>语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 设置size为0，结果中不包含文档，只包含聚合结果</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 定义聚合</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">//给聚合起个名字</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合的类型，按照品牌值聚合，所以选择term</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 参与聚合的字段</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span> <span class="hljs-comment">// 希望获取的聚合结果数量</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>结果如图：</p><p><img src="/../images/image-20210723171948228.png" alt="image-20210723171948228"></p><h3 id="1-2-2-聚合结果排序"><a href="#1-2-2-聚合结果排序" class="headerlink" title="1.2.2.聚合结果排序"></a>1.2.2.聚合结果排序</h3><p>默认情况下，Bucket聚合会统计Bucket内的文档数量，记为_count，并且按照_count降序排序。</p><p>我们可以指定order属性，自定义聚合的排序方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span> <span class="hljs-comment">// 按照_count升序排列</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-3-限定聚合范围"><a href="#1-2-3-限定聚合范围" class="headerlink" title="1.2.3.限定聚合范围"></a>1.2.3.限定聚合范围</h3><p>默认情况下，Bucket聚合是对索引库的所有文档做聚合，但真实场景下，用户会输入搜索条件，因此聚合必须是对搜索结果聚合。那么聚合必须添加限定条件。</p><p>我们可以限定要聚合的文档范围，只要添加query条件即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span> <span class="hljs-comment">// 只对200元以下的文档聚合</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这次，聚合得到的品牌明显变少了：</p><p><img src="/../images/image-20210723172404836.png" alt="image-20210723172404836"></p><h3 id="1-2-4-Metric聚合语法"><a href="#1-2-4-Metric聚合语法" class="headerlink" title="1.2.4.Metric聚合语法"></a>1.2.4.Metric聚合语法</h3><p>上节课，我们对酒店按照品牌分组，形成了一个个桶。现在我们需要对桶内的酒店做运算，获取每个品牌的用户评分的min、max、avg等值。</p><p>这就要用到Metric聚合了，例如stat聚合：就可以获取min、max、avg等结果。</p><p>语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brandAgg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 是brands聚合的子聚合，也就是分组后对每组分别计算</span><br>        <span class="hljs-attr">&quot;score_stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合名称</span><br>          <span class="hljs-attr">&quot;stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 聚合类型，这里stats可以计算min、max、avg等</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;score&quot;</span> <span class="hljs-comment">// 聚合字段，这里是score</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这次的score_stats聚合是在brandAgg的聚合内部嵌套的子聚合。因为我们需要在每个桶分别计算。</p><p>另外，我们还可以给聚合结果做个排序，例如按照每个桶的酒店平均分做排序：</p><p><img src="/../images/image-20210723172917636.png" alt="image-20210723172917636"></p><h3 id="1-2-5-小结"><a href="#1-2-5-小结" class="headerlink" title="1.2.5.小结"></a>1.2.5.小结</h3><p>aggs代表聚合，与query同级，此时query的作用是？</p><ul><li>限定聚合的的文档范围</li></ul><p>聚合必须的三要素：</p><ul><li>聚合名称</li><li>聚合类型</li><li>聚合字段</li></ul><p>聚合可配置属性有：</p><ul><li>size：指定聚合结果数量</li><li>order：指定聚合结果排序方式</li><li>field：指定聚合字段</li></ul><h2 id="1-3-RestAPI实现聚合"><a href="#1-3-RestAPI实现聚合" class="headerlink" title="1.3.RestAPI实现聚合"></a>1.3.RestAPI实现聚合</h2><h3 id="1-3-1-API语法"><a href="#1-3-1-API语法" class="headerlink" title="1.3.1.API语法"></a>1.3.1.API语法</h3><p>聚合条件与query条件同级别，因此需要使用request.source()来指定聚合条件。</p><p>聚合条件的语法：</p><p><img src="/../images/image-20210723173057733.png" alt="image-20210723173057733"></p><p>聚合的结果也与查询结果不同，API也比较特殊。不过同样是JSON逐层解析：</p><p><img src="/../images/image-20210723173215728.png" alt="image-20210723173215728"></p><h3 id="1-3-2-业务需求"><a href="#1-3-2-业务需求" class="headerlink" title="1.3.2.业务需求"></a>1.3.2.业务需求</h3><p>需求：搜索页面的品牌、城市等信息不应该是在页面写死，而是通过聚合索引库中的酒店数据得来的：</p><p><img src="/../images/image-20210723192605566.png" alt="image-20210723192605566"></p><p>分析：</p><p>目前，页面的城市列表、星级列表、品牌列表都是写死的，并不会随着搜索结果的变化而变化。但是用户搜索条件改变时，搜索结果会跟着变化。</p><p>例如：用户搜索“东方明珠”，那搜索的酒店肯定是在上海东方明珠附近，因此，城市只能是上海，此时城市列表中就不应该显示北京、深圳、杭州这些信息了。</p><p>也就是说，搜索结果中包含哪些城市，页面就应该列出哪些城市；搜索结果中包含哪些品牌，页面就应该列出哪些品牌。</p><p>如何得知搜索结果中包含哪些品牌？如何得知搜索结果中包含哪些城市？</p><p>使用聚合功能，利用Bucket聚合，对搜索结果中的文档基于品牌分组、基于城市分组，就能得知包含哪些品牌、哪些城市了。</p><p>因为是对搜索结果聚合，因此聚合是<strong>限定范围的聚合</strong>，也就是说聚合的限定条件跟搜索文档的条件一致。</p><p>查看浏览器可以发现，前端其实已经发出了这样的一个请求：</p><p><img src="/../images/image-20210723193730799.png" alt="image-20210723193730799"></p><p>请求<strong>参数与搜索文档的参数完全一致</strong>。</p><p>返回值类型就是页面要展示的最终结果：</p><p><img src="/../images/image-20210723203915982.png" alt="image-20210723203915982"></p><p>结果是一个Map结构：</p><ul><li>key是字符串，城市、星级、品牌、价格</li><li>value是集合，例如多个城市的名称</li></ul><h3 id="1-3-3-业务实现"><a href="#1-3-3-业务实现" class="headerlink" title="1.3.3.业务实现"></a>1.3.3.业务实现</h3><p>在<code>cn.itcast.hotel.web</code>包的<code>HotelController</code>中添加一个方法，遵循下面的要求：</p><ul><li>请求方式：<code>POST</code></li><li>请求路径：<code>/hotel/filters</code></li><li>请求参数：<code>RequestParams</code>，与搜索文档的参数一致</li><li>返回值类型：<code>Map&lt;String, List&lt;String&gt;&gt;</code></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;filters&quot;)</span><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">getFilters</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> RequestParams params)</span>&#123;<br>    <span class="hljs-keyword">return</span> hotelService.getFilters(params);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里调用了IHotelService中的getFilters方法，尚未实现。</p><p>在<code>cn.itcast.hotel.service.IHotelService</code>中定义新方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">filters</span><span class="hljs-params">(RequestParams params)</span>;<br></code></pre></td></tr></table></figure><p>在<code>cn.itcast.hotel.service.impl.HotelService</code>中实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">filters</span><span class="hljs-params">(RequestParams params)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.准备Request</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>        <span class="hljs-comment">// 2.准备DSL</span><br>        <span class="hljs-comment">// 2.1.query</span><br>        buildBasicQuery(params, request);<br>        <span class="hljs-comment">// 2.2.设置size</span><br>        request.source().size(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 2.3.聚合</span><br>        buildAggregation(request);<br>        <span class="hljs-comment">// 3.发出请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">// 4.解析结果</span><br>        Map&lt;String, List&lt;String&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Aggregations</span> <span class="hljs-variable">aggregations</span> <span class="hljs-operator">=</span> response.getAggregations();<br>        <span class="hljs-comment">// 4.1.根据品牌名称，获取品牌结果</span><br>        List&lt;String&gt; brandList = getAggByName(aggregations, <span class="hljs-string">&quot;brandAgg&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;品牌&quot;</span>, brandList);<br>        <span class="hljs-comment">// 4.2.根据品牌名称，获取品牌结果</span><br>        List&lt;String&gt; cityList = getAggByName(aggregations, <span class="hljs-string">&quot;cityAgg&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;城市&quot;</span>, cityList);<br>        <span class="hljs-comment">// 4.3.根据品牌名称，获取品牌结果</span><br>        List&lt;String&gt; starList = getAggByName(aggregations, <span class="hljs-string">&quot;starAgg&quot;</span>);<br>        result.put(<span class="hljs-string">&quot;星级&quot;</span>, starList);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildAggregation</span><span class="hljs-params">(SearchRequest request)</span> &#123;<br>    request.source().aggregation(AggregationBuilders<br>                                 .terms(<span class="hljs-string">&quot;brandAgg&quot;</span>)<br>                                 .field(<span class="hljs-string">&quot;brand&quot;</span>)<br>                                 .size(<span class="hljs-number">100</span>)<br>                                );<br>    request.source().aggregation(AggregationBuilders<br>                                 .terms(<span class="hljs-string">&quot;cityAgg&quot;</span>)<br>                                 .field(<span class="hljs-string">&quot;city&quot;</span>)<br>                                 .size(<span class="hljs-number">100</span>)<br>                                );<br>    request.source().aggregation(AggregationBuilders<br>                                 .terms(<span class="hljs-string">&quot;starAgg&quot;</span>)<br>                                 .field(<span class="hljs-string">&quot;starName&quot;</span>)<br>                                 .size(<span class="hljs-number">100</span>)<br>                                );<br>&#125;<br><br><span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">getAggByName</span><span class="hljs-params">(Aggregations aggregations, String aggName)</span> &#123;<br>    <span class="hljs-comment">// 4.1.根据聚合名称获取聚合结果</span><br>    <span class="hljs-type">Terms</span> <span class="hljs-variable">brandTerms</span> <span class="hljs-operator">=</span> aggregations.get(aggName);<br>    <span class="hljs-comment">// 4.2.获取buckets</span><br>    List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Terms</span>.Bucket&gt; buckets = brandTerms.getBuckets();<br>    <span class="hljs-comment">// 4.3.遍历</span><br>    List&lt;String&gt; brandList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (Terms.Bucket bucket : buckets) &#123;<br>        <span class="hljs-comment">// 4.4.获取key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> bucket.getKeyAsString();<br>        brandList.add(key);<br>    &#125;<br>    <span class="hljs-keyword">return</span> brandList;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-自动补全"><a href="#2-自动补全" class="headerlink" title="2.自动补全"></a>2.自动补全</h1><p>当用户在搜索框输入字符时，我们应该提示出与该字符有关的搜索项，如图：</p><p><img src="/../images/image-20210723204936367.png" alt="image-20210723204936367"></p><p>这种根据用户输入的字母，提示完整词条的功能，就是自动补全了。</p><p>因为需要根据拼音字母来推断，因此要用到拼音分词功能。</p><h2 id="2-1-拼音分词器"><a href="#2-1-拼音分词器" class="headerlink" title="2.1.拼音分词器"></a>2.1.拼音分词器</h2><p>要实现根据字母做补全，就必须对文档按照拼音分词。在GitHub上恰好有elasticsearch的拼音分词插件。地址：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p><p><img src="/../images/image-20210723205932746.png" alt="image-20210723205932746"></p><p>课前资料中也提供了拼音分词器的安装包：</p><p><img src="/../images/image-20210723205722303.png" alt="image-20210723205722303"> </p><p>安装方式与IK分词器一样，分三步：</p><p>​    ①解压</p><p>​    ②上传到虚拟机中，elasticsearch的plugin目录</p><p>​    ③重启elasticsearch</p><p>​    ④测试</p><p>详细安装步骤可以参考IK分词器的安装过程。</p><p>测试用法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家酒店还不错&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../images/image-20210723210126506.png" alt="image-20210723210126506"> </p><h2 id="2-2-自定义分词器"><a href="#2-2-自定义分词器" class="headerlink" title="2.2.自定义分词器"></a>2.2.自定义分词器</h2><p>默认的拼音分词器会将每个汉字单独分为拼音，而我们希望的是每个词条形成一组拼音，需要对拼音分词器做个性化定制，形成自定义分词器。</p><p>elasticsearch中分词器（analyzer）的组成包含三部分：</p><ul><li>character filters：在tokenizer之前对文本进行处理。例如删除字符、替换字符</li><li>tokenizer：将文本按照一定的规则切割成词条（term）。例如keyword，就是不分词；还有ik_smart</li><li>tokenizer filter：将tokenizer输出的词条做进一步处理。例如大小写转换、同义词处理、拼音处理等</li></ul><p>文档分词时会依次由这三部分来处理文档：</p><p>   <img src="/../images/image-20210723210427878.png" alt="image-20210723210427878"></p><p>声明自定义分词器的语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义分词器</span><br>        <span class="hljs-attr">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  <span class="hljs-comment">// 分词器名称</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;py&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 自定义tokenizer filter</span><br>        <span class="hljs-attr">&quot;py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 过滤器名称</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 过滤器类型，这里是pinyin</span><br>  <span class="hljs-attr">&quot;keep_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_joined_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_original&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;limit_first_letter_length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;remove_duplicated_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_analyzer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="/../images/image-20210723211829150.png" alt="image-20210723211829150"></p><p>总结：</p><p>如何使用拼音分词器？</p><ul><li><p>①下载pinyin分词器</p></li><li><p>②解压并放到elasticsearch的plugin目录</p></li><li><p>③重启即可</p></li></ul><p>如何自定义分词器？</p><ul><li><p>①创建索引库时，在settings中配置，可以包含三部分</p></li><li><p>②character filter</p></li><li><p>③tokenizer</p></li><li><p>④filter</p></li></ul><p>拼音分词器注意事项？</p><ul><li>为了避免搜索到同音字，搜索时不要使用拼音分词器</li></ul><h2 id="2-3-自动补全查询"><a href="#2-3-自动补全查询" class="headerlink" title="2.3.自动补全查询"></a>2.3.自动补全查询</h2><p>elasticsearch提供了<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/search-suggesters.html">Completion Suggester</a>查询来实现自动补全功能。这个查询会匹配以用户输入内容开头的词条并返回。为了提高补全查询的效率，对于文档中字段的类型有一些约束：</p><ul><li><p>参与补全查询的字段必须是completion类型。</p></li><li><p>字段的内容一般是用来补全的多个词条形成的数组。</p></li></ul><p>比如，一个这样的索引库：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 创建索引库</span><br>PUT test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;completion&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后插入下面的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 示例数据</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Sony&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;WH-1000XM3&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;SK-II&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;PITERA&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>POST test/_doc<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Nintendo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;switch&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查询的DSL语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 自动补全查询</span><br>GET /test/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title_suggest&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 关键字</span><br>      <span class="hljs-attr">&quot;completion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 补全查询的字段</span><br>        <span class="hljs-attr">&quot;skip_duplicates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 跳过重复的</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span> <span class="hljs-comment">// 获取前10条结果</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-实现酒店搜索框自动补全"><a href="#2-4-实现酒店搜索框自动补全" class="headerlink" title="2.4.实现酒店搜索框自动补全"></a>2.4.实现酒店搜索框自动补全</h2><p>现在，我们的hotel索引库还没有设置拼音分词器，需要修改索引库中的配置。但是我们知道索引库是无法修改的，只能删除然后重新创建。</p><p>另外，我们需要添加一个字段，用来做自动补全，将brand、suggestion、city等都放进去，作为自动补全的提示。</p><p>因此，总结一下，我们需要做的事情包括：</p><ol><li><p>修改hotel索引库结构，设置自定义拼音分词器</p></li><li><p>修改索引库的name、all字段，使用自定义分词器</p></li><li><p>索引库添加一个新字段suggestion，类型为completion类型，使用自定义的分词器</p></li><li><p>给HotelDoc类添加suggestion字段，内容包含brand、business</p></li><li><p>重新导入数据到hotel库</p></li></ol><h3 id="2-4-1-修改酒店映射结构"><a href="#2-4-1-修改酒店映射结构" class="headerlink" title="2.4.1.修改酒店映射结构"></a>2.4.1.修改酒店映射结构</h3><p>代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 酒店数据索引库</span><br>PUT /hotel<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;analysis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;text_anlyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;py&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;completion_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;tokenizer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;py&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;py&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pinyin&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_joined_full_pinyin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;keep_original&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;limit_first_letter_length&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;remove_duplicated_term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text_anlyzer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;starName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;business&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;copy_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;geo_point&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text_anlyzer&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;search_analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;suggestion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;completion&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;completion_analyzer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-2-修改HotelDoc实体"><a href="#2-4-2-修改HotelDoc实体" class="headerlink" title="2.4.2.修改HotelDoc实体"></a>2.4.2.修改HotelDoc实体</h3><p>HotelDoc中要添加一个字段，用来做自动补全，内容可以是酒店品牌、城市、商圈等信息。按照自动补全字段的要求，最好是这些字段的数组。</p><p>因此我们在HotelDoc中添加一个suggestion字段，类型为<code>List&lt;String&gt;</code>，然后将brand、city、business等信息放到里面。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelDoc</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> Integer price;<br>    <span class="hljs-keyword">private</span> Integer score;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> String city;<br>    <span class="hljs-keyword">private</span> String starName;<br>    <span class="hljs-keyword">private</span> String business;<br>    <span class="hljs-keyword">private</span> String location;<br>    <span class="hljs-keyword">private</span> String pic;<br>    <span class="hljs-keyword">private</span> Object distance;<br>    <span class="hljs-keyword">private</span> Boolean isAD;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; suggestion;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HotelDoc</span><span class="hljs-params">(Hotel hotel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = hotel.getId();<br>        <span class="hljs-built_in">this</span>.name = hotel.getName();<br>        <span class="hljs-built_in">this</span>.address = hotel.getAddress();<br>        <span class="hljs-built_in">this</span>.price = hotel.getPrice();<br>        <span class="hljs-built_in">this</span>.score = hotel.getScore();<br>        <span class="hljs-built_in">this</span>.brand = hotel.getBrand();<br>        <span class="hljs-built_in">this</span>.city = hotel.getCity();<br>        <span class="hljs-built_in">this</span>.starName = hotel.getStarName();<br>        <span class="hljs-built_in">this</span>.business = hotel.getBusiness();<br>        <span class="hljs-built_in">this</span>.location = hotel.getLatitude() + <span class="hljs-string">&quot;, &quot;</span> + hotel.getLongitude();<br>        <span class="hljs-built_in">this</span>.pic = hotel.getPic();<br>        <span class="hljs-comment">// 组装suggestion</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.business.contains(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>            <span class="hljs-comment">// business有多个值，需要切割</span><br>            String[] arr = <span class="hljs-built_in">this</span>.business.split(<span class="hljs-string">&quot;/&quot;</span>);<br>            <span class="hljs-comment">// 添加元素</span><br>            <span class="hljs-built_in">this</span>.suggestion = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-built_in">this</span>.suggestion.add(<span class="hljs-built_in">this</span>.brand);<br>            Collections.addAll(<span class="hljs-built_in">this</span>.suggestion, arr);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.suggestion = Arrays.asList(<span class="hljs-built_in">this</span>.brand, <span class="hljs-built_in">this</span>.business);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-3-重新导入"><a href="#2-4-3-重新导入" class="headerlink" title="2.4.3.重新导入"></a>2.4.3.重新导入</h3><p>重新执行之前编写的导入数据功能，可以看到新的酒店数据中包含了suggestion：</p><p><img src="/../images/image-20210723213546183.png" alt="image-20210723213546183"></p><h3 id="2-4-4-自动补全查询的JavaAPI"><a href="#2-4-4-自动补全查询的JavaAPI" class="headerlink" title="2.4.4.自动补全查询的JavaAPI"></a>2.4.4.自动补全查询的JavaAPI</h3><p>之前我们学习了自动补全查询的DSL，而没有学习对应的JavaAPI，这里给出一个示例：</p><p><img src="/../images/image-20210723213759922.png" alt="image-20210723213759922"></p><p>而自动补全的结果也比较特殊，解析的代码如下：</p><p><img src="/../images/image-20210723213917524.png" alt="image-20210723213917524"></p><h3 id="2-4-5-实现搜索框自动补全"><a href="#2-4-5-实现搜索框自动补全" class="headerlink" title="2.4.5.实现搜索框自动补全"></a>2.4.5.实现搜索框自动补全</h3><p>查看前端页面，可以发现当我们在输入框键入时，前端会发起ajax请求：</p><p><img src="/../images/image-20210723214021062.png" alt="image-20210723214021062"></p><p>返回值是补全词条的集合，类型为<code>List&lt;String&gt;</code></p><p>1）在<code>cn.itcast.hotel.web</code>包下的<code>HotelController</code>中添加新接口，接收新的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;suggestion&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getSuggestions</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;key&quot;)</span> String prefix)</span> &#123;<br>    <span class="hljs-keyword">return</span> hotelService.getSuggestions(prefix);<br>&#125;<br></code></pre></td></tr></table></figure><p>2）在<code>cn.itcast.hotel.service</code>包下的<code>IhotelService</code>中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; <span class="hljs-title function_">getSuggestions</span><span class="hljs-params">(String prefix)</span>;<br></code></pre></td></tr></table></figure><p>3）在<code>cn.itcast.hotel.service.impl.HotelService</code>中实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getSuggestions</span><span class="hljs-params">(String prefix)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.准备Request</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>        <span class="hljs-comment">// 2.准备DSL</span><br>        request.source().suggest(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuggestBuilder</span>().addSuggestion(<br>            <span class="hljs-string">&quot;suggestions&quot;</span>,<br>            SuggestBuilders.completionSuggestion(<span class="hljs-string">&quot;suggestion&quot;</span>)<br>            .prefix(prefix)<br>            .skipDuplicates(<span class="hljs-literal">true</span>)<br>            .size(<span class="hljs-number">10</span>)<br>        ));<br>        <span class="hljs-comment">// 3.发起请求</span><br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.search(request, RequestOptions.DEFAULT);<br>        <span class="hljs-comment">// 4.解析结果</span><br>        <span class="hljs-type">Suggest</span> <span class="hljs-variable">suggest</span> <span class="hljs-operator">=</span> response.getSuggest();<br>        <span class="hljs-comment">// 4.1.根据补全查询名称，获取补全结果</span><br>        <span class="hljs-type">CompletionSuggestion</span> <span class="hljs-variable">suggestions</span> <span class="hljs-operator">=</span> suggest.getSuggestion(<span class="hljs-string">&quot;suggestions&quot;</span>);<br>        <span class="hljs-comment">// 4.2.获取options</span><br>        List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestions.getOptions();<br>        <span class="hljs-comment">// 4.3.遍历</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(options.size());<br>        <span class="hljs-keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> option.getText().toString();<br>            list.add(text);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-数据同步"><a href="#3-数据同步" class="headerlink" title="3.数据同步"></a>3.数据同步</h1><p>elasticsearch中的酒店数据来自于mysql数据库，因此mysql数据发生改变时，elasticsearch也必须跟着改变，这个就是elasticsearch与mysql之间的<strong>数据同步</strong>。</p><p><img src="/../images/image-20210723214758392.png" alt="image-20210723214758392"></p><h2 id="3-1-思路分析"><a href="#3-1-思路分析" class="headerlink" title="3.1.思路分析"></a>3.1.思路分析</h2><p>常见的数据同步方案有三种：</p><ul><li>同步调用</li><li>异步通知</li><li>监听binlog</li></ul><h3 id="3-1-1-同步调用"><a href="#3-1-1-同步调用" class="headerlink" title="3.1.1.同步调用"></a>3.1.1.同步调用</h3><p>方案一：同步调用</p><p><img src="/../images/image-20210723214931869.png" alt="image-20210723214931869"></p><p>基本步骤如下：</p><ul><li>hotel-demo对外提供接口，用来修改elasticsearch中的数据</li><li>酒店管理服务在完成数据库操作后，直接调用hotel-demo提供的接口，</li></ul><h3 id="3-1-2-异步通知"><a href="#3-1-2-异步通知" class="headerlink" title="3.1.2.异步通知"></a>3.1.2.异步通知</h3><p>方案二：异步通知</p><p><img src="/../images/image-20210723215140735.png" alt="image-20210723215140735"></p><p>流程如下：</p><ul><li>hotel-admin对mysql数据库数据完成增、删、改后，发送MQ消息</li><li>hotel-demo监听MQ，接收到消息后完成elasticsearch数据修改</li></ul><h3 id="3-1-3-监听binlog"><a href="#3-1-3-监听binlog" class="headerlink" title="3.1.3.监听binlog"></a>3.1.3.监听binlog</h3><p>方案三：监听binlog</p><p><img src="/../images/image-20210723215518541.png" alt="image-20210723215518541"></p><p>流程如下：</p><ul><li>给mysql开启binlog功能</li><li>mysql完成增、删、改操作都会记录在binlog中</li><li>hotel-demo基于canal监听binlog变化，实时更新elasticsearch中的内容</li></ul><h3 id="3-1-4-选择"><a href="#3-1-4-选择" class="headerlink" title="3.1.4.选择"></a>3.1.4.选择</h3><p>方式一：同步调用</p><ul><li>优点：实现简单，粗暴</li><li>缺点：业务耦合度高</li></ul><p>方式二：异步通知</p><ul><li>优点：低耦合，实现难度一般</li><li>缺点：依赖mq的可靠性</li></ul><p>方式三：监听binlog</p><ul><li>优点：完全解除服务间耦合</li><li>缺点：开启binlog增加数据库负担、实现复杂度高</li></ul><h2 id="3-2-实现数据同步"><a href="#3-2-实现数据同步" class="headerlink" title="3.2.实现数据同步"></a>3.2.实现数据同步</h2><h3 id="3-2-1-思路"><a href="#3-2-1-思路" class="headerlink" title="3.2.1.思路"></a>3.2.1.思路</h3><p>利用课前资料提供的hotel-admin项目作为酒店管理的微服务。当酒店数据发生增、删、改时，要求对elasticsearch中数据也要完成相同操作。</p><p>步骤：</p><ul><li><p>导入课前资料提供的hotel-admin项目，启动并测试酒店数据的CRUD</p></li><li><p>声明exchange、queue、RoutingKey</p></li><li><p>在hotel-admin中的增、删、改业务中完成消息发送</p></li><li><p>在hotel-demo中完成消息监听，并更新elasticsearch中数据</p></li><li><p>启动并测试数据同步功能</p></li></ul><h3 id="3-2-2-导入demo"><a href="#3-2-2-导入demo" class="headerlink" title="3.2.2.导入demo"></a>3.2.2.导入demo</h3><p>导入课前资料提供的hotel-admin项目：</p><p><img src="/../images/image-20210723220237930.png" alt="image-20210723220237930"></p><p>运行后，访问 <a href="http://localhost:8099/">http://localhost:8099</a></p><p><img src="/../images/image-20210723220354464.png" alt="image-20210723220354464"></p><p>其中包含了酒店的CRUD功能：</p><p><img src="/../images/image-20210723220511090.png" alt="image-20210723220511090"></p><h3 id="3-2-3-声明交换机、队列"><a href="#3-2-3-声明交换机、队列" class="headerlink" title="3.2.3.声明交换机、队列"></a>3.2.3.声明交换机、队列</h3><p>MQ结构如图：</p><p><img src="/../images/image-20210723215850307.png" alt="image-20210723215850307"></p><h4 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><p>在hotel-admin、hotel-demo中引入rabbitmq的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--amqp--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2）声明队列交换机名称"><a href="#2）声明队列交换机名称" class="headerlink" title="2）声明队列交换机名称"></a>2）声明队列交换机名称</h4><p>在hotel-admin和hotel-demo中的<code>cn.itcast.hotel.constatnts</code>包下新建一个类<code>MqConstants</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.constatnts;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConstants</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.topic&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听新增和修改的队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_INSERT_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.insert.queue&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听删除的队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_DELETE_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.delete.queue&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增或修改的RoutingKey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_INSERT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.insert&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除的RoutingKey</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOTEL_DELETE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hotel.delete&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3）声明队列交换机"><a href="#3）声明队列交换机" class="headerlink" title="3）声明队列交换机"></a>3）声明队列交换机</h4><p>在hotel-demo中，定义配置类，声明队列、交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.config;<br><br><span class="hljs-keyword">import</span> cn.itcast.hotel.constants.MqConstants;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.TopicExchange;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title function_">topicExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TopicExchange</span>(MqConstants.HOTEL_EXCHANGE, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">insertQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(MqConstants.HOTEL_INSERT_QUEUE, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">deleteQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(MqConstants.HOTEL_DELETE_QUEUE, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">insertQueueBinding</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(insertQueue()).to(topicExchange()).with(MqConstants.HOTEL_INSERT_KEY);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">deleteQueueBinding</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(deleteQueue()).to(topicExchange()).with(MqConstants.HOTEL_DELETE_KEY);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-4-发送MQ消息"><a href="#3-2-4-发送MQ消息" class="headerlink" title="3.2.4.发送MQ消息"></a>3.2.4.发送MQ消息</h3><p>在hotel-admin中的增、删、改业务中分别发送MQ消息：</p><p><img src="/../images/image-20210723221843816.png" alt="image-20210723221843816"></p><h3 id="3-2-5-接收MQ消息"><a href="#3-2-5-接收MQ消息" class="headerlink" title="3.2.5.接收MQ消息"></a>3.2.5.接收MQ消息</h3><p>hotel-demo接收到MQ消息要做的事情包括：</p><ul><li>新增消息：根据传递的hotel的id查询hotel信息，然后新增一条数据到索引库</li><li>删除消息：根据传递的hotel的id删除索引库中的一条数据</li></ul><p>1）首先在hotel-demo的<code>cn.itcast.hotel.service</code>包下的<code>IHotelService</code>中新增新增、删除业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>2）给hotel-demo中的<code>cn.itcast.hotel.service.impl</code>包下的HotelService中实现业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.准备Request</span><br>        <span class="hljs-type">DeleteRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>, id.toString());<br>        <span class="hljs-comment">// 2.发送请求</span><br>        client.delete(request, RequestOptions.DEFAULT);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 0.根据id查询酒店数据</span><br>        <span class="hljs-type">Hotel</span> <span class="hljs-variable">hotel</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-comment">// 转换为文档类型</span><br>        <span class="hljs-type">HotelDoc</span> <span class="hljs-variable">hotelDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br><br>        <span class="hljs-comment">// 1.准备Request对象</span><br>        <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>).id(hotel.getId().toString());<br>        <span class="hljs-comment">// 2.准备Json文档</span><br>        request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);<br>        <span class="hljs-comment">// 3.发送请求</span><br>        client.index(request, RequestOptions.DEFAULT);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3）编写监听器</p><p>在hotel-demo中的<code>cn.itcast.hotel.mq</code>包新增一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.hotel.mq;<br><br><span class="hljs-keyword">import</span> cn.itcast.hotel.constants.MqConstants;<br><span class="hljs-keyword">import</span> cn.itcast.hotel.service.IHotelService;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotelListener</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IHotelService hotelService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听酒店新增或修改的业务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 酒店id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RabbitListener(queues = MqConstants.HOTEL_INSERT_QUEUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenHotelInsertOrUpdate</span><span class="hljs-params">(Long id)</span>&#123;<br>        hotelService.insertById(id);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听酒店删除的业务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 酒店id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RabbitListener(queues = MqConstants.HOTEL_DELETE_QUEUE)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenHotelDelete</span><span class="hljs-params">(Long id)</span>&#123;<br>        hotelService.deleteById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-集群"><a href="#4-集群" class="headerlink" title="4.集群"></a>4.集群</h1><p>单机的elasticsearch做数据存储，必然面临两个问题：海量数据存储问题、单点故障问题。</p><ul><li>海量数据存储问题：将索引库从逻辑上拆分为N个分片（shard），存储到多个节点</li><li>单点故障问题：将分片数据在不同节点备份（replica ）</li></ul><p><strong>ES集群相关概念</strong>:</p><ul><li><p>集群（cluster）：一组拥有共同的 cluster name 的 节点。</p></li><li><p><font color="red">节点（node)</font>   ：集群中的一个 Elasticearch 实例</p></li><li><p><font color="red">分片（shard）</font>：索引可以被拆分为不同的部分进行存储，称为分片。在集群环境下，一个索引的不同分片可以拆分到不同的节点中</p><p>  解决问题：数据量太大，单点存储量有限的问题。</p><p>  <img src="/../images/image-20200104124440086-5602723.png" alt="image-20200104124440086"></p><blockquote><p>此处，我们把数据分成3片：shard0、shard1、shard2</p></blockquote></li><li><p>主分片（Primary shard）：相对于副本分片的定义。</p></li><li><p>副本分片（Replica shard）每个主分片可以有一个或者多个副本，数据和主分片一样。</p><p>  ​    </p></li></ul><p>数据备份可以保证高可用，但是每个分片备份一份，所需要的节点数量就会翻一倍，成本实在是太高了！</p><p>为了在高可用和成本间寻求平衡，我们可以这样做：</p><ul><li>首先对数据分片，存储到不同节点</li><li>然后对每个分片进行备份，放到对方节点，完成互相备份</li></ul><p>这样可以大大减少所需要的服务节点数量，如图，我们以3分片，每个分片备份一份为例：</p><p><img src="/../images/image-20200104124551912.png" alt="image-20200104124551912"></p><p>现在，每个分片都有1个备份，存储在3个节点：</p><ul><li>node0：保存了分片0和1</li><li>node1：保存了分片0和2</li><li>node2：保存了分片1和2</li></ul><h2 id="4-1-搭建ES集群"><a href="#4-1-搭建ES集群" class="headerlink" title="4.1.搭建ES集群"></a>4.1.搭建ES集群</h2><p>参考课前资料的文档：</p><p><img src="/../images/image-20210723222732427.png" alt="image-20210723222732427"> </p><p>其中的第四章节：</p><p><img src="/../images/image-20210723222812619.png" alt="image-20210723222812619"> </p><h2 id="4-2-集群脑裂问题"><a href="#4-2-集群脑裂问题" class="headerlink" title="4.2.集群脑裂问题"></a>4.2.集群脑裂问题</h2><h3 id="4-2-1-集群职责划分"><a href="#4-2-1-集群职责划分" class="headerlink" title="4.2.1.集群职责划分"></a>4.2.1.集群职责划分</h3><p>elasticsearch中集群节点有不同的职责划分：</p><p><img src="/../images/image-20210723223008967.png" alt="image-20210723223008967"></p><p>默认情况下，集群中的任何一个节点都同时具备上述四种角色。</p><p>但是真实的集群一定要将集群职责分离：</p><ul><li>master节点：对CPU要求高，但是内存要求第</li><li>data节点：对CPU和内存要求都高</li><li>coordinating节点：对网络带宽、CPU要求高</li></ul><p>职责分离可以让我们根据不同节点的需求分配不同的硬件去部署。而且避免业务之间的互相干扰。</p><p>一个典型的es集群职责划分如图：</p><p><img src="/../images/image-20210723223629142.png" alt="image-20210723223629142"></p><h3 id="4-2-2-脑裂问题"><a href="#4-2-2-脑裂问题" class="headerlink" title="4.2.2.脑裂问题"></a>4.2.2.脑裂问题</h3><p>脑裂是因为集群中的节点失联导致的。</p><p>例如一个集群中，主节点与其它节点失联：</p><p><img src="/../images/image-20210723223804995.png" alt="image-20210723223804995"></p><p>此时，node2和node3认为node1宕机，就会重新选主：</p><p><img src="/../images/image-20210723223845754.png" alt="image-20210723223845754"></p><p>当node3当选后，集群继续对外提供服务，node2和node3自成集群，node1自成集群，两个集群数据不同步，出现数据差异。</p><p>当网络恢复后，因为集群中有两个master节点，集群状态的不一致，出现脑裂的情况：</p><p><img src="/../images/image-20210723224000555.png" alt="image-20210723224000555"></p><p>解决脑裂的方案是，要求选票超过 ( eligible节点数量 + 1 ）/ 2 才能当选为主，因此eligible节点数量最好是奇数。对应配置项是discovery.zen.minimum_master_nodes，在es7.0以后，已经成为默认配置，因此一般不会发生脑裂问题</p><p>例如：3个节点形成的集群，选票必须超过 （3 + 1） / 2 ，也就是2票。node3得到node2和node3的选票，当选为主。node1只有自己1票，没有当选。集群中依然只有1个主节点，没有出现脑裂。</p><h3 id="4-2-3-小结"><a href="#4-2-3-小结" class="headerlink" title="4.2.3.小结"></a>4.2.3.小结</h3><p>master eligible节点的作用是什么？</p><ul><li>参与集群选主</li><li>主节点可以管理集群状态、管理分片信息、处理创建和删除索引库的请求</li></ul><p>data节点的作用是什么？</p><ul><li>数据的CRUD</li></ul><p>coordinator节点的作用是什么？</p><ul><li><p>路由请求到其它节点</p></li><li><p>合并查询到的结果，返回给用户</p></li></ul><h2 id="4-3-集群分布式存储"><a href="#4-3-集群分布式存储" class="headerlink" title="4.3.集群分布式存储"></a>4.3.集群分布式存储</h2><p>当新增文档时，应该保存到不同分片，保证数据均衡，那么coordinating node如何确定数据该存储到哪个分片呢？</p><h3 id="4-3-1-分片存储测试"><a href="#4-3-1-分片存储测试" class="headerlink" title="4.3.1.分片存储测试"></a>4.3.1.分片存储测试</h3><p>插入三条数据：</p><p><img src="/../images/image-20210723225006058.png" alt="image-20210723225006058"></p><p><img src="/../images/image-20210723225034637.png" alt="image-20210723225034637"></p><p><img src="/../images/image-20210723225112029.png" alt="image-20210723225112029"></p><p>测试可以看到，三条数据分别在不同分片：</p><p><img src="/../images/image-20210723225227928.png" alt="image-20210723225227928"></p><p>结果：</p><p><img src="/../images/image-20210723225342120.png" alt="image-20210723225342120"></p><h3 id="4-3-2-分片存储原理"><a href="#4-3-2-分片存储原理" class="headerlink" title="4.3.2.分片存储原理"></a>4.3.2.分片存储原理</h3><p>elasticsearch会通过hash算法来计算文档应该存储到哪个分片：</p><p><img src="/../images/image-20210723224354904.png" alt="image-20210723224354904"></p><p>说明：</p><ul><li>_routing默认是文档的id</li><li>算法与分片数量有关，因此索引库一旦创建，分片数量不能修改！</li></ul><p>新增文档的流程如下：</p><p><img src="/../images/image-20210723225436084.png" alt="image-20210723225436084"></p><p>解读：</p><ul><li>1）新增一个id=1的文档</li><li>2）对id做hash运算，假如得到的是2，则应该存储到shard-2</li><li>3）shard-2的主分片在node3节点，将数据路由到node3</li><li>4）保存文档</li><li>5）同步给shard-2的副本replica-2，在node2节点</li><li>6）返回结果给coordinating-node节点</li></ul><h2 id="4-4-集群分布式查询"><a href="#4-4-集群分布式查询" class="headerlink" title="4.4.集群分布式查询"></a>4.4.集群分布式查询</h2><p>elasticsearch的查询分成两个阶段：</p><ul><li><p>scatter phase：分散阶段，coordinating node会把请求分发到每一个分片</p></li><li><p>gather phase：聚集阶段，coordinating node汇总data node的搜索结果，并处理为最终结果集返回给用户</p></li></ul><p><img src="/../images/image-20210723225809848.png" alt="image-20210723225809848"></p><h2 id="4-5-集群故障转移"><a href="#4-5-集群故障转移" class="headerlink" title="4.5.集群故障转移"></a>4.5.集群故障转移</h2><p>集群的master节点会监控集群中的节点状态，如果发现有节点宕机，会立即将宕机节点的分片数据迁移到其它节点，确保数据安全，这个叫做故障转移。</p><p>1）例如一个集群结构如图：</p><p><img src="/../images/image-20210723225945963.png" alt="image-20210723225945963"></p><p>现在，node1是主节点，其它两个节点是从节点。</p><p>2）突然，node1发生了故障：</p><p><img src="/../images/image-20210723230020574.png" alt="image-20210723230020574"></p><p>宕机后的第一件事，需要重新选主，例如选中了node2：</p><p><img src="/../images/image-20210723230055974.png" alt="image-20210723230055974"></p><p>node2成为主节点后，会检测集群监控状态，发现：shard-1、shard-0没有副本节点。因此需要将node1上的数据迁移到node2、node3：</p><p><img src="/../images/image-20210723230216642.png" alt="image-20210723230216642"></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习（三）————RabbitMQ</title>
    <link href="/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h1 id="1-初识MQ"><a href="#1-初识MQ" class="headerlink" title="1.初识MQ"></a>1.初识MQ</h1><h2 id="1-1-同步和异步通讯"><a href="#1-1-同步和异步通讯" class="headerlink" title="1.1.同步和异步通讯"></a>1.1.同步和异步通讯</h2><p>微服务间通讯有同步和异步两种方式：</p><p>同步通讯：就像打电话，需要实时响应。</p><p>异步通讯：就像发邮件，不需要马上回复。</p><p><img src="/../images/image-20210717161939695.png" alt="image-20210717161939695"></p><p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p><h3 id="1-1-1-同步通讯"><a href="#1-1-1-同步通讯" class="headerlink" title="1.1.1.同步通讯"></a>1.1.1.同步通讯</h3><p>我们之前学习的Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：</p><p><img src="/../images/image-20210717162004285.png" alt="image-20210717162004285"></p><p>总结：</p><p>同步调用的优点：</p><ul><li>时效性较强，可以立即得到结果</li></ul><p>同步调用的问题：</p><ul><li>耦合度高</li><li>性能和吞吐能力下降</li><li>有额外的资源消耗</li><li>有级联失败问题</li></ul><h3 id="1-1-2-异步通讯"><a href="#1-1-2-异步通讯" class="headerlink" title="1.1.2.异步通讯"></a>1.1.2.异步通讯</h3><p>异步调用则可以避免上述问题：</p><p>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p><p>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p><p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p><p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p><p><img src="/../images/image-20210422095356088.png" alt="image-20210422095356088"></p><p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p><p>好处：</p><ul><li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p></li><li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p></li><li><p>调用间没有阻塞，不会造成无效的资源占用</p></li><li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p></li><li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p></li></ul><p>缺点：</p><ul><li>架构复杂了，业务没有明显的流程线，不好管理</li><li>需要依赖于Broker的可靠、安全、性能</li></ul><p>好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。</p><h2 id="1-2-技术对比："><a href="#1-2-技术对比：" class="headerlink" title="1.2.技术对比："></a>1.2.技术对比：</h2><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。</p><p>比较常见的MQ实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p><p>追求可靠性：RabbitMQ、RocketMQ</p><p>追求吞吐能力：RocketMQ、Kafka</p><p>追求消息低延迟：RabbitMQ、Kafka</p><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h1><h2 id="2-1-安装RabbitMQ"><a href="#2-1-安装RabbitMQ" class="headerlink" title="2.1.安装RabbitMQ"></a>2.1.安装RabbitMQ</h2><p>安装RabbitMQ，参考课前资料：</p><p><img src="/../images/image-20210717162628635.png" alt="image-20210717162628635"></p><p>MQ的基本结构：</p><p><img src="/../images/image-20210717162752376.png" alt="image-20210717162752376"></p><p>RabbitMQ中的一些角色：</p><ul><li>publisher：生产者</li><li>consumer：消费者</li><li>exchange个：交换机，负责消息路由</li><li>queue：队列，存储消息</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li></ul><h2 id="2-2-RabbitMQ消息模型"><a href="#2-2-RabbitMQ消息模型" class="headerlink" title="2.2.RabbitMQ消息模型"></a>2.2.RabbitMQ消息模型</h2><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：</p><p><img src="/../images/image-20210717163332646.png" alt="image-20210717163332646"></p><h2 id="2-3-导入Demo工程"><a href="#2-3-导入Demo工程" class="headerlink" title="2.3.导入Demo工程"></a>2.3.导入Demo工程</h2><p>课前资料提供了一个Demo工程，mq-demo:</p><p><img src="/../images/image-20210717163253264.png" alt="image-20210717163253264"></p><p>导入后可以看到结构如下：</p><p><img src="/../images/image-20210717163604330.png" alt="image-20210717163604330"></p><p>包括三部分：</p><ul><li>mq-demo：父工程，管理项目依赖</li><li>publisher：消息的发送者</li><li>consumer：消息的消费者</li></ul><h2 id="2-4-入门案例"><a href="#2-4-入门案例" class="headerlink" title="2.4.入门案例"></a>2.4.入门案例</h2><p>简单队列模式的模型图：</p><p> <img src="/../images/image-20210717163434647.png" alt="image-20210717163434647"></p><p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><h3 id="2-4-1-publisher实现"><a href="#2-4-1-publisher实现" class="headerlink" title="2.4.1.publisher实现"></a>2.4.1.publisher实现</h3><p>思路：</p><ul><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>发送消息</li><li>关闭连接和channel</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.helloworld;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PublisherTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 1.建立连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">&quot;192.168.150.101&quot;</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;itcast&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123321&quot;</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 3.创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4.发送消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, rabbitmq!&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, queueName, <span class="hljs-literal">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;发送消息成功：【&quot;</span> + message + <span class="hljs-string">&quot;】&quot;</span>);<br><br>        <span class="hljs-comment">// 5.关闭通道和连接</span><br>        channel.close();<br>        connection.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-2-consumer实现"><a href="#2-4-2-consumer实现" class="headerlink" title="2.4.2.consumer实现"></a>2.4.2.consumer实现</h3><p>代码思路：</p><ul><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>订阅消息</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.helloworld;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br>        <span class="hljs-comment">// 1.建立连接</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">&quot;192.168.150.101&quot;</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;itcast&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123321&quot;</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> factory.newConnection();<br><br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br><br>        <span class="hljs-comment">// 3.创建队列</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4.订阅消息</span><br>        channel.basicConsume(queueName, <span class="hljs-literal">true</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope,</span><br><span class="hljs-params">                                       AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                <span class="hljs-comment">// 5.处理消息</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body);<br>                System.out.println(<span class="hljs-string">&quot;接收到消息：【&quot;</span> + message + <span class="hljs-string">&quot;】&quot;</span>);<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;等待接收消息。。。。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5.总结"></a>2.5.总结</h2><p>基本消息队列的消息发送流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>利用channel向队列发送消息</p></li></ol><p>基本消息队列的消息接收流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>定义consumer的消费行为handleDelivery()</p></li><li><p>利用channel将消费者与队列绑定</p></li></ol><h1 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3.SpringAMQP"></a>3.SpringAMQP</h1><p>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p><p>SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a></p><p><img src="/../images/image-20210717164024967.png" alt="image-20210717164024967"></p><p><img src="/../images/image-20210717164038678.png" alt="image-20210717164038678"></p><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息 </li></ul><h2 id="3-1-Basic-Queue-简单队列模型"><a href="#3-1-Basic-Queue-简单队列模型" class="headerlink" title="3.1.Basic Queue 简单队列模型"></a>3.1.Basic Queue 简单队列模型</h2><p>在父工程mq-demo中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-1-消息发送"><a href="#3-1-1-消息发送" class="headerlink" title="3.1.1.消息发送"></a>3.1.1.消息发送</h3><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">itcast</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.spring;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 队列名称</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-comment">// 消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, spring amqp!&quot;</span>;<br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-2-消息接收"><a href="#3-1-2-消息接收" class="headerlink" title="3.1.2.消息接收"></a>3.1.2.消息接收</h3><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">itcast</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueueMessage</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-3-测试"><a href="#3-1-3-测试" class="headerlink" title="3.1.3.测试"></a>3.1.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p><h2 id="3-2-WorkQueue"><a href="#3-2-WorkQueue" class="headerlink" title="3.2.WorkQueue"></a>3.2.WorkQueue</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="/../images/image-20210717164238910.png" alt="image-20210717164238910"></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p><h3 id="3-2-1-消息发送"><a href="#3-2-1-消息发送" class="headerlink" title="3.2.1.消息发送"></a>3.2.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p><p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * workQueue</span><br><span class="hljs-comment">     * 向队列中不停发送消息，模拟消息堆积。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWorkQueue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">queueName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, message_&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(queueName, message + i);<br>        Thread.sleep(<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-2-消息接收"><a href="#3-2-2-消息接收" class="headerlink" title="3.2.2.消息接收"></a>3.2.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">20</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWorkQueue2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.err.println(<span class="hljs-string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到这个消费者sleep了1000秒，模拟任务耗时。</p><h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3.测试"></a>3.2.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p><p>可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。</p><p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p><h3 id="3-2-4-能者多劳"><a href="#3-2-4-能者多劳" class="headerlink" title="3.2.4.能者多劳"></a>3.2.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span><br></code></pre></td></tr></table></figure><h3 id="3-2-5-总结"><a href="#3-2-5-总结" class="headerlink" title="3.2.5.总结"></a>3.2.5.总结</h3><p>Work模型的使用：</p><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h2 id="3-3-发布-订阅"><a href="#3-3-发布-订阅" class="headerlink" title="3.3.发布/订阅"></a>3.3.发布/订阅</h2><p>发布订阅的模型如图：</p><p><img src="/../images/image-20210717165309625.png" alt="image-20210717165309625"></p><p>可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="3-4-Fanout"><a href="#3-4-Fanout" class="headerlink" title="3.4.Fanout"></a>3.4.Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><p><img src="/../images/image-20210717165438225.png" alt="image-20210717165438225"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个队列</li><li>2）  每个队列都要绑定到Exchange（交换机）</li><li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>4）  交换机把消息发送给绑定过的所有队列</li><li>5）  订阅队列的消费者都能拿到消息</li></ul><p>我们的计划是这样的：</p><ul><li>创建一个交换机 itcast.fanout，类型是Fanout</li><li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li></ul><p><img src="/../images/image-20210717165509466.png" alt="image-20210717165509466"></p><h3 id="3-4-1-声明队列和交换机"><a href="#3-4-1-声明队列和交换机" class="headerlink" title="3.4.1.声明队列和交换机"></a>3.4.1.声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p><p><img src="/../images/image-20210717165552676.png" alt="image-20210717165552676"></p><p>在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.config;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.FanoutExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FanoutConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 声明交换机</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Fanout类型交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title function_">fanoutExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FanoutExchange</span>(<span class="hljs-string">&quot;itcast.fanout&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第1个队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定队列和交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingQueue1</span><span class="hljs-params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第2个队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定队列和交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">bindingQueue2</span><span class="hljs-params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-2-消息发送"><a href="#3-4-2-消息发送" class="headerlink" title="3.4.2.消息发送"></a>3.4.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFanoutExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itcast.fanout&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, everyone!&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-3-消息接收"><a href="#3-4-3-消息接收" class="headerlink" title="3.4.3.消息接收"></a>3.4.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue1</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue2</span><span class="hljs-params">(String msg)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>交换机的作用是什么？</p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p>声明队列、交换机、绑定关系的Bean是什么？</p><ul><li>Queue</li><li>FanoutExchange</li><li>Binding</li></ul><h2 id="3-5-Direct"><a href="#3-5-Direct" class="headerlink" title="3.5.Direct"></a>3.5.Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p><img src="/../images/image-20210717170041447.png" alt="image-20210717170041447"></p><p> 在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><strong>案例需求如下</strong>：</p><ol><li><p>利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. direct发送消息</p></li></ol><p><img src="/../images/image-20210717170223317.png" alt="image-20210717170223317"></p><h3 id="3-5-1-基于注解声明队列和交换机"><a href="#3-5-1-基于注解声明队列和交换机" class="headerlink" title="3.5.1.基于注解声明队列和交换机"></a>3.5.1.基于注解声明队列和交换机</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDirectQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-2-消息发送"><a href="#3-5-2-消息发送" class="headerlink" title="3.5.2.消息发送"></a>3.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendDirectExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itcast.direct&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;red&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-3-总结"><a href="#3-5-3-总结" class="headerlink" title="3.5.3.总结"></a>3.5.3.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p><ul><li>@Queue</li><li>@Exchange</li></ul><h2 id="3-6-Topic"><a href="#3-6-Topic" class="headerlink" title="3.6.Topic"></a>3.6.Topic</h2><h3 id="3-6-1-说明"><a href="#3-6-1-说明" class="headerlink" title="3.6.1.说明"></a>3.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>​     </p><p>图示：</p><p> <img src="/../images/image-20210717170705380.png" alt="image-20210717170705380"></p><p>解释：</p><ul><li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li><li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li></ul><p>案例需求：</p><p>实现思路如下：</p><ol><li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. topic发送消息</p></li></ol><p><img src="/../images/image-20210717170829229.png" alt="image-20210717170829229"></p><h3 id="3-6-2-消息发送"><a href="#3-6-2-消息发送" class="headerlink" title="3.6.2.消息发送"></a>3.6.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * topicExchange</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendTopicExchange</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;itcast.topic&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;china.news&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-3-消息接收"><a href="#3-6-3-消息接收" class="headerlink" title="3.6.3.消息接收"></a>3.6.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">    key = &quot;china.#&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">    key = &quot;#.news&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-4-总结"><a href="#3-6-4-总结" class="headerlink" title="3.6.4.总结"></a>3.6.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li><li><code>#</code>：代表0个或多个词</li><li><code>*</code>：代表1个词</li></ul><h2 id="3-7-消息转换器"><a href="#3-7-消息转换器" class="headerlink" title="3.7.消息转换器"></a>3.7.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p><img src="/../images/image-20200525170410401.png" alt="image-20200525170410401"></p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们来测试一下。</p><h3 id="3-7-1-测试默认转换器"><a href="#3-7-1-测试默认转换器" class="headerlink" title="3.7.1.测试默认转换器"></a>3.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 准备消息</span><br>    Map&lt;String,Object&gt; msg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    msg.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>    msg.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">21</span>);<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;simple.queue&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>停止consumer服务</p><p>发送消息后查看控制台：</p><p><img src="/../images/image-20210422232835363.png" alt="image-20210422232835363"></p><h3 id="3-7-2-配置JSON转换器"><a href="#3-7-2-配置JSON转换器" class="headerlink" title="3.7.2.配置JSON转换器"></a>3.7.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><p>在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置消息转换器。</p><p>在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">jsonMessageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="服务异步通信-高级篇"><a href="#服务异步通信-高级篇" class="headerlink" title="服务异步通信-高级篇"></a>服务异步通信-高级篇</h1><p>消息队列在使用过程中，面临着很多实际问题需要思考：</p><p><img src="/../images/image-20210718155003157.png" alt="image-20210718155003157"></p><h1 id="1-消息可靠性"><a href="#1-消息可靠性" class="headerlink" title="1.消息可靠性"></a>1.消息可靠性</h1><p>消息从发送，到消费者接收，会经理多个过程：</p><p><img src="/../images/image-20210718155059371.png" alt="image-20210718155059371"></p><p>其中的每一步都可能导致消息丢失，常见的丢失原因包括：</p><ul><li>发送时丢失：<ul><li>生产者发送的消息未送达exchange</li><li>消息到达exchange后未到达queue</li></ul></li><li>MQ宕机，queue将消息丢失</li><li>consumer接收到消息后未消费就宕机</li></ul><p>针对这些问题，RabbitMQ分别给出了解决方案：</p><ul><li>生产者确认机制</li><li>mq持久化</li><li>消费者确认机制</li><li>失败重试机制</li></ul><p>下面我们就通过案例来演示每一个步骤。</p><p>首先，导入课前资料提供的demo工程：</p><p><img src="/../images/image-20210718155328927.png" alt="image-20210718155328927"></p><p>项目结构如下：</p><p><img src="/../images/image-20210718155448734.png" alt="image-20210718155448734"></p><h2 id="1-1-生产者消息确认"><a href="#1-1-生产者消息确认" class="headerlink" title="1.1.生产者消息确认"></a>1.1.生产者消息确认</h2><p>RabbitMQ提供了publisher confirm机制来避免消息发送到MQ过程中丢失。这种机制必须给每个消息指定一个唯一ID。消息发送到MQ以后，会返回一个结果给发送者，表示消息是否处理成功。</p><p>返回结果有两种方式：</p><ul><li>publisher-confirm，发送者确认<ul><li>消息成功投递到交换机，返回ack</li><li>消息未投递到交换机，返回nack</li></ul></li><li>publisher-return，发送者回执<ul><li>消息投递到交换机了，但是没有路由到队列。返回ACK，及路由失败原因。</li></ul></li></ul><p><img src="/../images/image-20210718160907166.png" alt="image-20210718160907166"></p><p>注意：</p><p><img src="/../images/image-20210718161707992.png" alt="image-20210718161707992"></p><h3 id="1-1-1-修改配置"><a href="#1-1-1-修改配置" class="headerlink" title="1.1.1.修改配置"></a>1.1.1.修改配置</h3><p>首先，修改publisher服务中的application.yml文件，添加下面的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">correlated</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">template:</span><br>      <span class="hljs-attr">mandatory:</span> <span class="hljs-literal">true</span><br>   <br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><code>publish-confirm-type</code>：开启publisher-confirm，这里支持两种类型：<ul><li><code>simple</code>：同步等待confirm结果，直到超时</li><li><code>correlated</code>：异步回调，定义ConfirmCallback，MQ返回结果时会回调这个ConfirmCallback</li></ul></li><li><code>publish-returns</code>：开启publish-return功能，同样是基于callback机制，不过是定义ReturnCallback</li><li><code>template.mandatory</code>：定义消息路由失败时的策略。true，则调用ReturnCallback；false：则直接丢弃消息</li></ul><h3 id="1-1-2-定义Return回调"><a href="#1-1-2-定义Return回调" class="headerlink" title="1.1.2.定义Return回调"></a>1.1.2.定义Return回调</h3><p>每个RabbitTemplate只能配置一个ReturnCallback，因此需要在项目加载时配置：</p><p>修改publisher服务，添加一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.config;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContextAware;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">// 获取RabbitTemplate</span><br>        <span class="hljs-type">RabbitTemplate</span> <span class="hljs-variable">rabbitTemplate</span> <span class="hljs-operator">=</span> applicationContext.getBean(RabbitTemplate.class);<br>        <span class="hljs-comment">// 设置ReturnCallback</span><br>        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt; &#123;<br>            <span class="hljs-comment">// 投递失败，记录日志</span><br>            log.info(<span class="hljs-string">&quot;消息发送失败，应答码&#123;&#125;，原因&#123;&#125;，交换机&#123;&#125;，路由键&#123;&#125;,消息&#123;&#125;&quot;</span>,<br>                     replyCode, replyText, exchange, routingKey, message.toString());<br>            <span class="hljs-comment">// 如果有业务需要，可以重发消息</span><br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1-3-定义ConfirmCallback"><a href="#1-1-3-定义ConfirmCallback" class="headerlink" title="1.1.3.定义ConfirmCallback"></a>1.1.3.定义ConfirmCallback</h3><p>ConfirmCallback可以在发送消息时指定，因为每个业务处理confirm成功或失败的逻辑不一定相同。</p><p>在publisher服务的cn.itcast.mq.spring.SpringAmqpTest类中，定义一个单元测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage2SimpleQueue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">// 1.消息体</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, spring amqp!&quot;</span>;<br>    <span class="hljs-comment">// 2.全局唯一的消息ID，需要封装到CorrelationData中</span><br>    <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(UUID.randomUUID().toString());<br>    <span class="hljs-comment">// 3.添加callback</span><br>    correlationData.getFuture().addCallback(<br>        result -&gt; &#123;<br>            <span class="hljs-keyword">if</span>(result.isAck())&#123;<br>                <span class="hljs-comment">// 3.1.ack，消息成功</span><br>                log.debug(<span class="hljs-string">&quot;消息发送成功, ID:&#123;&#125;&quot;</span>, correlationData.getId());<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 3.2.nack，消息失败</span><br>                log.error(<span class="hljs-string">&quot;消息发送失败, ID:&#123;&#125;, 原因&#123;&#125;&quot;</span>,correlationData.getId(), result.getReason());<br>            &#125;<br>        &#125;,<br>        ex -&gt; log.error(<span class="hljs-string">&quot;消息发送异常, ID:&#123;&#125;, 原因&#123;&#125;&quot;</span>,correlationData.getId(),ex.getMessage())<br>    );<br>    <span class="hljs-comment">// 4.发送消息</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;task.direct&quot;</span>, <span class="hljs-string">&quot;task&quot;</span>, message, correlationData);<br><br>    <span class="hljs-comment">// 休眠一会儿，等待ack回执</span><br>    Thread.sleep(<span class="hljs-number">2000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-消息持久化"><a href="#1-2-消息持久化" class="headerlink" title="1.2.消息持久化"></a>1.2.消息持久化</h2><p>生产者确认可以确保消息投递到RabbitMQ的队列中，但是消息发送到RabbitMQ以后，如果突然宕机，也可能导致消息丢失。</p><p>要想确保消息在RabbitMQ中安全保存，必须开启消息持久化机制。</p><ul><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li></ul><h3 id="1-2-1-交换机持久化"><a href="#1-2-1-交换机持久化" class="headerlink" title="1.2.1.交换机持久化"></a>1.2.1.交换机持久化</h3><p>RabbitMQ中交换机默认是非持久化的，mq重启后就丢失。</p><p>SpringAMQP中可以通过代码指定交换机持久化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">simpleExchange</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;simple.direct&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>事实上，默认情况下，由SpringAMQP声明的交换机都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的交换机都会带上<code>D</code>的标示：</p><p><img src="/../images/image-20210718164412450.png" alt="image-20210718164412450"></p><h3 id="1-2-2-队列持久化"><a href="#1-2-2-队列持久化" class="headerlink" title="1.2.2.队列持久化"></a>1.2.2.队列持久化</h3><p>RabbitMQ中队列默认是非持久化的，mq重启后就丢失。</p><p>SpringAMQP中可以通过代码指定交换机持久化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">simpleQueue</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 使用QueueBuilder构建队列，durable就是持久化的</span><br>    <span class="hljs-keyword">return</span> QueueBuilder.durable(<span class="hljs-string">&quot;simple.queue&quot;</span>).build();<br>&#125;<br></code></pre></td></tr></table></figure><p>事实上，默认情况下，由SpringAMQP声明的队列都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的队列都会带上<code>D</code>的标示：</p><p><img src="/../images/image-20210718164729543.png" alt="image-20210718164729543"></p><h3 id="1-2-3-消息持久化"><a href="#1-2-3-消息持久化" class="headerlink" title="1.2.3.消息持久化"></a>1.2.3.消息持久化</h3><p>利用SpringAMQP发送消息时，可以设置消息的属性（MessageProperties），指定delivery-mode：</p><ul><li>1：非持久化</li><li>2：持久化</li></ul><p>用java代码指定：</p><p><img src="/../images/image-20210718165100016.png" alt="image-20210718165100016"></p><p>默认情况下，SpringAMQP发出的任何消息都是持久化的，不用特意指定。</p><h2 id="1-3-消费者消息确认"><a href="#1-3-消费者消息确认" class="headerlink" title="1.3.消费者消息确认"></a>1.3.消费者消息确认</h2><p>RabbitMQ是<strong>阅后即焚</strong>机制，RabbitMQ确认消息被消费者消费后会立刻删除。</p><p>而RabbitMQ是通过消费者回执来确认消费者是否成功处理消息的：消费者获取消息后，应该向RabbitMQ发送ACK回执，表明自己已经处理消息。</p><p>设想这样的场景：</p><ul><li>1）RabbitMQ投递消息给消费者</li><li>2）消费者获取消息后，返回ACK给RabbitMQ</li><li>3）RabbitMQ删除消息</li><li>4）消费者宕机，消息尚未处理</li></ul><p>这样，消息就丢失了。因此消费者返回ACK的时机非常重要。</p><p>而SpringAMQP则允许配置三种确认模式：</p><p>•manual：手动ack，需要在业务代码结束后，调用api发送ack。</p><p>•auto：自动ack，由spring监测listener代码是否出现异常，没有异常则返回ack；抛出异常则返回nack</p><p>•none：关闭ack，MQ假定消费者获取消息后会成功处理，因此消息投递后立即被删除</p><p>由此可知：</p><ul><li>none模式下，消息投递是不可靠的，可能丢失</li><li>auto模式类似事务机制，出现异常时返回nack，消息回滚到mq；没有异常，返回ack</li><li>manual：自己根据业务情况，判断什么时候该ack</li></ul><p>一般，我们都是使用默认的auto即可。</p><h3 id="1-3-1-演示none模式"><a href="#1-3-1-演示none模式" class="headerlink" title="1.3.1.演示none模式"></a>1.3.1.演示none模式</h3><p>修改consumer服务的application.yml文件，添加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">none</span> <span class="hljs-comment"># 关闭ack</span><br></code></pre></td></tr></table></figure><p>修改consumer服务的SpringRabbitListener类中的方法，模拟一个消息处理异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueue</span><span class="hljs-params">(String msg)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;消费者接收到simple.queue的消息：【&#123;&#125;】&quot;</span>, msg);<br>    <span class="hljs-comment">// 模拟异常</span><br>    System.out.println(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);<br>    log.debug(<span class="hljs-string">&quot;消息处理完成！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试可以发现，当消息处理抛异常时，消息依然被RabbitMQ删除了。</p><h3 id="1-3-2-演示auto模式"><a href="#1-3-2-演示auto模式" class="headerlink" title="1.3.2.演示auto模式"></a>1.3.2.演示auto模式</h3><p>再次把确认机制修改为auto:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">auto</span> <span class="hljs-comment"># 关闭ack</span><br></code></pre></td></tr></table></figure><p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为unack（未确定状态）：</p><p><img src="/../images/image-20210718171705383.png" alt="image-20210718171705383"></p><p>抛出异常后，因为Spring会自动返回nack，所以消息恢复至Ready状态，并且没有被RabbitMQ删除：</p><p><img src="/../images/image-20210718171759179.png" alt="image-20210718171759179"></p><h2 id="1-4-消费失败重试机制"><a href="#1-4-消费失败重试机制" class="headerlink" title="1.4.消费失败重试机制"></a>1.4.消费失败重试机制</h2><p>当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者，然后再次异常，再次requeue，无限循环，导致mq的消息处理飙升，带来不必要的压力：</p><p><img src="/../images/image-20210718172746378.png" alt="image-20210718172746378"></p><p>怎么办呢？</p><h3 id="1-4-1-本地重试"><a href="#1-4-1-本地重试" class="headerlink" title="1.4.1.本地重试"></a>1.4.1.本地重试</h3><p>我们可以利用Spring的retry机制，在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。</p><p>修改consumer服务的application.yml文件，添加内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">retry:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启消费者失败重试</span><br>          <span class="hljs-attr">initial-interval:</span> <span class="hljs-number">1000</span> <span class="hljs-comment"># 初识的失败等待时长为1秒</span><br>          <span class="hljs-attr">multiplier:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span><br>          <span class="hljs-attr">max-attempts:</span> <span class="hljs-number">3</span> <span class="hljs-comment"># 最大重试次数</span><br>          <span class="hljs-attr">stateless:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span><br></code></pre></td></tr></table></figure><p>重启consumer服务，重复之前的测试。可以发现：</p><ul><li>在重试3次后，SpringAMQP会抛出异常AmqpRejectAndDontRequeueException，说明本地重试触发了</li><li>查看RabbitMQ控制台，发现消息被删除了，说明最后SpringAMQP返回的是ack，mq删除消息了</li></ul><p>结论：</p><ul><li>开启本地重试时，消息处理过程中抛出异常，不会requeue到队列，而是在消费者本地重试</li><li>重试达到最大次数后，Spring会返回ack，消息会被丢弃</li></ul><h3 id="1-4-2-失败策略"><a href="#1-4-2-失败策略" class="headerlink" title="1.4.2.失败策略"></a>1.4.2.失败策略</h3><p>在之前的测试中，达到最大重试次数后，消息会被丢弃，这是由Spring内部机制决定的。</p><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有MessageRecovery接口来处理，它包含三种不同的实现：</p><ul><li><p>RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式</p></li><li><p>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队</p></li><li><p>RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机</p></li></ul><p>比较优雅的一种处理方案是RepublishMessageRecoverer，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p><p>1）在consumer服务中定义处理失败消息的交换机和队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">errorMessageExchange</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;error.direct&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">errorQueue</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;error.queue&quot;</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">errorBinding</span><span class="hljs-params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2）定义一个RepublishMessageRecoverer，关联队列和交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageRecoverer <span class="hljs-title function_">republishMessageRecoverer</span><span class="hljs-params">(RabbitTemplate rabbitTemplate)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="hljs-string">&quot;error.direct&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.mq.config;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.DirectExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.retry.MessageRecoverer;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorMessageConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">errorMessageExchange</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;error.direct&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">errorQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;error.queue&quot;</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">errorBinding</span><span class="hljs-params">(Queue errorQueue, DirectExchange errorMessageExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(errorQueue).to(errorMessageExchange).with(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageRecoverer <span class="hljs-title function_">republishMessageRecoverer</span><span class="hljs-params">(RabbitTemplate rabbitTemplate)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="hljs-string">&quot;error.direct&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5.总结"></a>1.5.总结</h2><p>如何确保RabbitMQ消息的可靠性？</p><ul><li>开启生产者确认机制，确保生产者的消息能到达队列</li><li>开启持久化功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为auto，由spring确认消息处理成功后完成ack</li><li>开启消费者失败重试机制，并设置MessageRecoverer，多次重试失败后将消息投递到异常交换机，交由人工处理</li></ul><h1 id="2-死信交换机"><a href="#2-死信交换机" class="headerlink" title="2.死信交换机"></a>2.死信交换机</h1><h2 id="2-1-初识死信交换机"><a href="#2-1-初识死信交换机" class="headerlink" title="2.1.初识死信交换机"></a>2.1.初识死信交换机</h2><h3 id="2-1-1-什么是死信交换机"><a href="#2-1-1-什么是死信交换机" class="headerlink" title="2.1.1.什么是死信交换机"></a>2.1.1.什么是死信交换机</h3><p>什么是死信？</p><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用basic.reject或 basic.nack声明消费失败，并且消息的requeue参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p>如果这个包含死信的队列配置了<code>dead-letter-exchange</code>属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong>（Dead Letter Exchange，检查DLX）。</p><p>如图，一个消息被消费者拒绝了，变成了死信：</p><p><img src="/../images/image-20210718174328383.png" alt="image-20210718174328383"></p><p>因为simple.queue绑定了死信交换机 dl.direct，因此死信会投递给这个交换机：</p><p><img src="/../images/image-20210718174416160.png" alt="image-20210718174416160"></p><p>如果这个死信交换机也绑定了一个队列，则消息最终会进入这个存放死信的队列：</p><p><img src="/../images/image-20210718174506856.png" alt="image-20210718174506856"></p><p>另外，队列将死信投递给死信交换机时，必须知道两个信息：</p><ul><li>死信交换机名称</li><li>死信交换机与死信队列绑定的RoutingKey</li></ul><p>这样才能确保投递的消息能到达死信交换机，并且正确的路由到死信队列。</p><p><img src="/../images/image-20210821073801398.png" alt="image-20210821073801398"></p><h3 id="2-1-2-利用死信交换机接收死信（拓展）"><a href="#2-1-2-利用死信交换机接收死信（拓展）" class="headerlink" title="2.1.2.利用死信交换机接收死信（拓展）"></a>2.1.2.利用死信交换机接收死信（拓展）</h3><p>在失败重试策略中，默认的RejectAndDontRequeueRecoverer会在本地重试次数耗尽后，发送reject给RabbitMQ，消息变成死信，被丢弃。</p><p>我们可以给simple.queue添加一个死信交换机，给死信交换机绑定一个队列。这样消息变成死信后也不会丢弃，而是最终投递到死信交换机，路由到与死信交换机绑定的队列。</p><p><img src="/../images/image-20210718174506856.png" alt="image-20210718174506856"></p><p>我们在consumer服务中，定义一组死信交换机、死信队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明普通的 simple.queue队列，并且为其指定死信交换机：dl.direct</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">simpleQueue2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> QueueBuilder.durable(<span class="hljs-string">&quot;simple.queue&quot;</span>) <span class="hljs-comment">// 指定队列名称，并持久化</span><br>        .deadLetterExchange(<span class="hljs-string">&quot;dl.direct&quot;</span>) <span class="hljs-comment">// 指定死信交换机</span><br>        .build();<br>&#125;<br><span class="hljs-comment">// 声明死信交换机 dl.direct</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">dlExchange</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;dl.direct&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>&#125;<br><span class="hljs-comment">// 声明存储死信的队列 dl.queue</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">dlQueue</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;dl.queue&quot;</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-comment">// 将死信队列 与 死信交换机绑定</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">dlBinding</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(dlQueue()).to(dlExchange()).with(<span class="hljs-string">&quot;simple&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-3-总结"><a href="#2-1-3-总结" class="headerlink" title="2.1.3.总结"></a>2.1.3.总结</h3><p>什么样的消息会成为死信？</p><ul><li>消息被消费者reject或者返回nack</li><li>消息超时未消费</li><li>队列满了</li></ul><p>死信交换机的使用场景是什么？</p><ul><li>如果队列绑定了死信交换机，死信会投递到死信交换机；</li><li>可以利用死信交换机收集所有消费者处理失败的消息（死信），交由人工处理，进一步提高消息队列的可靠性。</li></ul><h2 id="2-2-TTL"><a href="#2-2-TTL" class="headerlink" title="2.2.TTL"></a>2.2.TTL</h2><p>一个队列中的消息如果超时未消费，则会变为死信，超时分为两种情况：</p><ul><li>消息所在的队列设置了超时时间</li><li>消息本身设置了超时时间</li></ul><p><img src="/../images/image-20210718182643311.png" alt="image-20210718182643311"></p><h3 id="2-2-1-接收超时死信的死信交换机"><a href="#2-2-1-接收超时死信的死信交换机" class="headerlink" title="2.2.1.接收超时死信的死信交换机"></a>2.2.1.接收超时死信的死信交换机</h3><p>在consumer服务的SpringRabbitListener中，定义一个新的消费者，并且声明 死信交换机、死信队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;dl.ttl.queue&quot;, durable = &quot;true&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;dl.ttl.direct&quot;),</span><br><span class="hljs-meta">    key = &quot;ttl&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenDlQueue</span><span class="hljs-params">(String msg)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;接收到 dl.ttl.queue的延迟消息：&#123;&#125;&quot;</span>, msg);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-2-声明一个队列，并且指定TTL"><a href="#2-2-2-声明一个队列，并且指定TTL" class="headerlink" title="2.2.2.声明一个队列，并且指定TTL"></a>2.2.2.声明一个队列，并且指定TTL</h3><p>要给队列设置超时时间，需要在声明队列时配置x-message-ttl属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">ttlQueue</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> QueueBuilder.durable(<span class="hljs-string">&quot;ttl.queue&quot;</span>) <span class="hljs-comment">// 指定队列名称，并持久化</span><br>        .ttl(<span class="hljs-number">10000</span>) <span class="hljs-comment">// 设置队列的超时时间，10秒</span><br>        .deadLetterExchange(<span class="hljs-string">&quot;dl.ttl.direct&quot;</span>) <span class="hljs-comment">// 指定死信交换机</span><br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，这个队列设定了死信交换机为<code>dl.ttl.direct</code></p><p>声明交换机，将ttl与交换机绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">ttlExchange</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(<span class="hljs-string">&quot;ttl.direct&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">ttlBinding</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> BindingBuilder.bind(ttlQueue()).to(ttlExchange()).with(<span class="hljs-string">&quot;ttl&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>发送消息，但是不要指定TTL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTTLQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建消息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello, ttl queue&quot;</span>;<br>    <span class="hljs-comment">// 消息ID，需要封装到CorrelationData中</span><br>    <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(UUID.randomUUID().toString());<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;ttl.direct&quot;</span>, <span class="hljs-string">&quot;ttl&quot;</span>, message, correlationData);<br>    <span class="hljs-comment">// 记录日志</span><br>    log.debug(<span class="hljs-string">&quot;发送消息成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>发送消息的日志：</p><p><img src="/../images/image-20210718191657478.png" alt="image-20210718191657478"></p><p>查看下接收消息的日志：</p><p><img src="/../images/image-20210718191738706.png" alt="image-20210718191738706"></p><p>因为队列的TTL值是10000ms，也就是10秒。可以看到消息发送与接收之间的时差刚好是10秒。</p><h3 id="2-2-3-发送消息时，设定TTL"><a href="#2-2-3-发送消息时，设定TTL" class="headerlink" title="2.2.3.发送消息时，设定TTL"></a>2.2.3.发送消息时，设定TTL</h3><p>在发送消息时，也可以指定TTL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTTLMsg</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建消息</span><br>    <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> MessageBuilder<br>        .withBody(<span class="hljs-string">&quot;hello, ttl message&quot;</span>.getBytes(StandardCharsets.UTF_8))<br>        .setExpiration(<span class="hljs-string">&quot;5000&quot;</span>)<br>        .build();<br>    <span class="hljs-comment">// 消息ID，需要封装到CorrelationData中</span><br>    <span class="hljs-type">CorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorrelationData</span>(UUID.randomUUID().toString());<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;ttl.direct&quot;</span>, <span class="hljs-string">&quot;ttl&quot;</span>, message, correlationData);<br>    log.debug(<span class="hljs-string">&quot;发送消息成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看发送消息日志：</p><p><img src="/../images/image-20210718191939140.png" alt="image-20210718191939140"></p><p>接收消息日志：</p><p><img src="/../images/image-20210718192004662.png" alt="image-20210718192004662"></p><p>这次，发送与接收的延迟只有5秒。说明当队列、消息都设置了TTL时，任意一个到期就会成为死信。</p><h3 id="2-2-4-总结"><a href="#2-2-4-总结" class="headerlink" title="2.2.4.总结"></a>2.2.4.总结</h3><p>消息超时的两种方式是？</p><ul><li>给队列设置ttl属性，进入队列后超过ttl时间的消息变为死信</li><li>给消息设置ttl属性，队列接收到消息超过ttl时间后变为死信</li></ul><p>如何实现发送一个消息20秒后消费者才收到消息？</p><ul><li>给消息的目标队列指定死信交换机</li><li>将消费者监听的队列绑定到死信交换机</li><li>发送消息时给消息设置超时时间为20秒</li></ul><h2 id="2-3-延迟队列"><a href="#2-3-延迟队列" class="headerlink" title="2.3.延迟队列"></a>2.3.延迟队列</h2><p>利用TTL结合死信交换机，我们实现了消息发出后，消费者延迟收到消息的效果。这种消息模式就称为延迟队列（Delay Queue）模式。</p><p>延迟队列的使用场景包括：</p><ul><li>延迟发送短信</li><li>用户下单，如果用户在15 分钟内未支付，则自动取消</li><li>预约工作会议，20分钟后自动通知所有参会人员</li></ul><p>因为延迟队列的需求非常多，所以RabbitMQ的官方也推出了一个插件，原生支持延迟队列效果。</p><p>这个插件就是DelayExchange插件。参考RabbitMQ的插件列表页面：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p><p><img src="/../images/image-20210718192529342.png" alt="image-20210718192529342"></p><p>使用方式可以参考官网地址：<a href="https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq">https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</a></p><h3 id="2-3-1-安装DelayExchange插件"><a href="#2-3-1-安装DelayExchange插件" class="headerlink" title="2.3.1.安装DelayExchange插件"></a>2.3.1.安装DelayExchange插件</h3><p>参考课前资料：</p><p><img src="/../images/image-20210718193409812.png" alt="image-20210718193409812"></p><h3 id="2-3-2-DelayExchange原理"><a href="#2-3-2-DelayExchange原理" class="headerlink" title="2.3.2.DelayExchange原理"></a>2.3.2.DelayExchange原理</h3><p>DelayExchange需要将一个交换机声明为delayed类型。当我们发送消息到delayExchange时，流程如下：</p><ul><li>接收消息</li><li>判断消息是否具备x-delay属性</li><li>如果有x-delay属性，说明是延迟消息，持久化到硬盘，读取x-delay值，作为延迟时间</li><li>返回routing not found结果给消息发送者</li><li>x-delay时间到期后，重新投递消息到指定队列</li></ul><h3 id="2-3-3-使用DelayExchange"><a href="#2-3-3-使用DelayExchange" class="headerlink" title="2.3.3.使用DelayExchange"></a>2.3.3.使用DelayExchange</h3><p>插件的使用也非常简单：声明一个交换机，交换机的类型可以是任意类型，只需要设定delayed属性为true即可，然后声明队列与其绑定即可。</p><h4 id="1）声明DelayExchange交换机"><a href="#1）声明DelayExchange交换机" class="headerlink" title="1）声明DelayExchange交换机"></a>1）声明DelayExchange交换机</h4><p>基于注解方式（推荐）：</p><p><img src="/../images/image-20210718193747649.png" alt="image-20210718193747649"></p><p>也可以基于@Bean的方式：</p><p><img src="/../images/image-20210718193831076.png" alt="image-20210718193831076"></p><h4 id="2）发送消息"><a href="#2）发送消息" class="headerlink" title="2）发送消息"></a>2）发送消息</h4><p>发送消息时，一定要携带x-delay属性，指定延迟的时间：</p><p><img src="/../images/image-20210718193917009.png" alt="image-20210718193917009"></p><h3 id="2-3-4-总结"><a href="#2-3-4-总结" class="headerlink" title="2.3.4.总结"></a>2.3.4.总结</h3><p>延迟队列插件的使用步骤包括哪些？</p><p>•声明一个交换机，添加delayed属性为true</p><p>•发送消息时，添加x-delay头，值为超时时间</p><h1 id="3-惰性队列"><a href="#3-惰性队列" class="headerlink" title="3.惰性队列"></a>3.惰性队列</h1><h2 id="3-1-消息堆积问题"><a href="#3-1-消息堆积问题" class="headerlink" title="3.1.消息堆积问题"></a>3.1.消息堆积问题</h2><p>当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息达到上限。之后发送的消息就会成为死信，可能会被丢弃，这就是消息堆积问题。</p><p><img src="/../images/image-20210718194040498.png" alt="image-20210718194040498"></p><p>解决消息堆积有两种思路：</p><ul><li>增加更多消费者，提高消费速度。也就是我们之前说的work queue模式</li><li>扩大队列容积，提高堆积上限</li></ul><p>要提升队列容积，把消息保存在内存中显然是不行的。</p><h2 id="3-2-惰性队列"><a href="#3-2-惰性队列" class="headerlink" title="3.2.惰性队列"></a>3.2.惰性队列</h2><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的概念，也就是惰性队列。惰性队列的特征如下：</p><ul><li>接收到消息后直接存入磁盘而非内存</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储</li></ul><h3 id="3-2-1-基于命令行设置lazy-queue"><a href="#3-2-1-基于命令行设置lazy-queue" class="headerlink" title="3.2.1.基于命令行设置lazy-queue"></a>3.2.1.基于命令行设置lazy-queue</h3><p>而要设置一个队列为惰性队列，只需要在声明队列时，指定x-queue-mode属性为lazy即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rabbitmqctl set_policy Lazy <span class="hljs-string">&quot;^lazy-queue$&quot;</span> <span class="hljs-string">&#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27;</span> --apply-to queues  <br></code></pre></td></tr></table></figure><p>命令解读：</p><ul><li><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</li><li><code>set_policy</code> ：添加一个策略</li><li><code>Lazy</code> ：策略名称，可以自定义</li><li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li><li><code>&#39;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#39;</code> ：设置队列模式为lazy模式</li><li><code>--apply-to queues  </code>：策略的作用对象，是所有的队列</li></ul><h3 id="3-2-2-基于-Bean声明lazy-queue"><a href="#3-2-2-基于-Bean声明lazy-queue" class="headerlink" title="3.2.2.基于@Bean声明lazy-queue"></a>3.2.2.基于@Bean声明lazy-queue</h3><p><img src="/../images/image-20210718194522223.png" alt="image-20210718194522223"></p><h3 id="3-2-3-基于-RabbitListener声明LazyQueue"><a href="#3-2-3-基于-RabbitListener声明LazyQueue" class="headerlink" title="3.2.3.基于@RabbitListener声明LazyQueue"></a>3.2.3.基于@RabbitListener声明LazyQueue</h3><p><img src="/../images/image-20210718194539054.png" alt="image-20210718194539054"></p><h3 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3.总结"></a>3.3.总结</h3><p>消息堆积问题的解决方案？</p><ul><li>队列上绑定多个消费者，提高消费速度</li><li>使用惰性队列，可以再mq中保存更多消息</li></ul><p>惰性队列的优点有哪些？</p><ul><li>基于磁盘存储，消息上限高</li><li>没有间歇性的page-out，性能比较稳定</li></ul><p>惰性队列的缺点有哪些？</p><ul><li>基于磁盘存储，消息时效性会降低</li><li>性能受限于磁盘的IO</li></ul><h1 id="4-MQ集群"><a href="#4-MQ集群" class="headerlink" title="4.MQ集群"></a>4.MQ集群</h1><h2 id="4-1-集群分类"><a href="#4-1-集群分类" class="headerlink" title="4.1.集群分类"></a>4.1.集群分类</h2><p>RabbitMQ的是基于Erlang语言编写，而Erlang又是一个面向并发的语言，天然支持集群模式。RabbitMQ的集群有两种模式：</p><p>•<strong>普通集群</strong>：是一种分布式集群，将队列分散到集群的各个节点，从而提高整个集群的并发能力。</p><p>•<strong>镜像集群</strong>：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。</p><p>镜像集群虽然支持主从，但主从同步并不是强一致的，某些情况下可能有数据丢失的风险。因此在RabbitMQ的3.8版本以后，推出了新的功能：<strong>仲裁队列</strong>来代替镜像集群，底层采用Raft协议确保主从的数据一致性。</p><h2 id="4-2-普通集群"><a href="#4-2-普通集群" class="headerlink" title="4.2.普通集群"></a>4.2.普通集群</h2><h3 id="4-2-1-集群结构和特征"><a href="#4-2-1-集群结构和特征" class="headerlink" title="4.2.1.集群结构和特征"></a>4.2.1.集群结构和特征</h3><p>普通集群，或者叫标准集群（classic cluster），具备下列特征：</p><ul><li>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包含队列中的消息。</li><li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li><li>队列所在节点宕机，队列中的消息就会丢失</li></ul><p>结构如图：</p><p><img src="/../images/image-20210718220843323.png" alt="image-20210718220843323"></p><h3 id="4-2-2-部署"><a href="#4-2-2-部署" class="headerlink" title="4.2.2.部署"></a>4.2.2.部署</h3><p>参考课前资料：《RabbitMQ部署指南.md》</p><h2 id="4-3-镜像集群"><a href="#4-3-镜像集群" class="headerlink" title="4.3.镜像集群"></a>4.3.镜像集群</h2><h3 id="4-3-1-集群结构和特征"><a href="#4-3-1-集群结构和特征" class="headerlink" title="4.3.1.集群结构和特征"></a>4.3.1.集群结构和特征</h3><p>镜像集群：本质是主从模式，具备下面的特征：</p><ul><li>交换机、队列、队列中的消息会在各个mq的镜像节点之间同步备份。</li><li>创建队列的节点被称为该队列的<strong>主节点，</strong>备份到的其它节点叫做该队列的<strong>镜像</strong>节点。</li><li>一个队列的主节点可能是另一个队列的镜像节点</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主</li></ul><p>结构如图：</p><p><img src="/../images/image-20210718221039542.png" alt="image-20210718221039542"></p><h3 id="4-3-2-部署"><a href="#4-3-2-部署" class="headerlink" title="4.3.2.部署"></a>4.3.2.部署</h3><p>参考课前资料：《RabbitMQ部署指南.md》</p><h2 id="4-4-仲裁队列"><a href="#4-4-仲裁队列" class="headerlink" title="4.4.仲裁队列"></a>4.4.仲裁队列</h2><h3 id="4-4-1-集群特征"><a href="#4-4-1-集群特征" class="headerlink" title="4.4.1.集群特征"></a>4.4.1.集群特征</h3><p>仲裁队列：仲裁队列是3.8版本以后才有的新功能，用来替代镜像队列，具备下列特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，强一致</li></ul><h3 id="4-4-2-部署"><a href="#4-4-2-部署" class="headerlink" title="4.4.2.部署"></a>4.4.2.部署</h3><p>参考课前资料：《RabbitMQ部署指南.md》</p><h3 id="4-4-3-Java代码创建仲裁队列"><a href="#4-4-3-Java代码创建仲裁队列" class="headerlink" title="4.4.3.Java代码创建仲裁队列"></a>4.4.3.Java代码创建仲裁队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">quorumQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> QueueBuilder<br>        .durable(<span class="hljs-string">&quot;quorum.queue&quot;</span>) <span class="hljs-comment">// 持久化</span><br>        .quorum() <span class="hljs-comment">// 仲裁队列</span><br>        .build();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-4-SpringAMQP连接MQ集群"><a href="#4-4-4-SpringAMQP连接MQ集群" class="headerlink" title="4.4.4.SpringAMQP连接MQ集群"></a>4.4.4.SpringAMQP连接MQ集群</h3><p>注意，这里用address来代替host、port方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  rabbitmq:<br>    addresses: <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.105</span>:<span class="hljs-number">8071</span>, <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.105</span>:<span class="hljs-number">8072</span>, <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.105</span>:<span class="hljs-number">8073</span><br>    username: itcast<br>    password: <span class="hljs-number">123321</span><br>    virtual-host: /<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习（二）————Docker</title>
    <link href="/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker实用篇"><a href="#Docker实用篇" class="headerlink" title="Docker实用篇"></a>Docker实用篇</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-初识Docker"><a href="#1-初识Docker" class="headerlink" title="1.初识Docker"></a>1.初识Docker</h1><h2 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1.什么是Docker"></a>1.1.什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li><li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li></ul><h3 id="1-1-1-应用部署的环境问题"><a href="#1-1-1-应用部署的环境问题" class="headerlink" title="1.1.1.应用部署的环境问题"></a>1.1.1.应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li><p>依赖关系复杂，容易出现兼容性问题</p></li><li><p>开发、测试、生产环境有差异</p></li></ul><p><img src="/../images/image-20210731141907366.png" alt="image-20210731141907366"></p><p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p><h3 id="1-1-2-Docker解决依赖兼容问题"><a href="#1-1-2-Docker解决依赖兼容问题" class="headerlink" title="1.1.2.Docker解决依赖兼容问题"></a>1.1.2.Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p><p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><p><img src="/../images/image-20210731142219735.png" alt="image-20210731142219735"></p><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h3 id="1-1-3-Docker解决操作系统环境差异"><a href="#1-1-3-Docker解决操作系统环境差异" class="headerlink" title="1.1.3.Docker解决操作系统环境差异"></a>1.1.3.Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p><p><img src="/../images/image-20210731143401460.png" alt="image-20210731143401460"></p><p>结构包括：</p><ul><li>计算机硬件：例如CPU、内存、磁盘等</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>应用于计算机交互的流程如下：</p><p>1）应用调用操作系统应用（函数库），实现各种功能</p><p>2）系统函数库是对内核指令集的封装，会调用内核指令</p><p>3）内核指令操作计算机硬件</p><p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p><p><img src="/../images/image-20210731144304990.png" alt="image-20210731144304990"></p><p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p><p><img src="/../images/image-20210731144458680.png" alt="image-20210731144458680"></p><p>Docker如何解决不同系统环境的问题？</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><p>如图：</p><p><img src="/../images/image-20210731144820638.png" alt="image-20210731144820638"></p><h3 id="1-1-4-小结"><a href="#1-1-4-小结" class="headerlink" title="1.1.4.小结"></a>1.1.4.小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p><ul><li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li></ul><p>Docker如何解决开发、测试、生产环境有差异的问题？</p><ul><li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li></ul><p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过一行命令完成，方便快捷</li></ul><h2 id="1-2-Docker和虚拟机的区别"><a href="#1-2-Docker和虚拟机的区别" class="headerlink" title="1.2.Docker和虚拟机的区别"></a>1.2.Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p><p>两者有什么差异呢？</p><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p><p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p><p><img src="/../images/image-20210731145914960.png" alt="image-20210731145914960"></p><p>对比来看：</p><p><img src="/../images/image-20210731152243765.png" alt="image-20210731152243765"></p><p>小结：</p><p>Docker和虚拟机的差异：</p><ul><li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p></li><li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p></li></ul><h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3.Docker架构"></a>1.3.Docker架构</h2><h3 id="1-3-1-镜像和容器"><a href="#1-3-1-镜像和容器" class="headerlink" title="1.3.1.镜像和容器"></a>1.3.1.镜像和容器</h3><p>Docker中有几个重要的概念：</p><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p><p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p><p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p><p><img src="/../images/image-20210731153059464.png" alt="image-20210731153059464"></p><p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p><h3 id="1-3-2-DockerHub"><a href="#1-3-2-DockerHub" class="headerlink" title="1.3.2.DockerHub"></a>1.3.2.DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p><ul><li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p></li><li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p></li></ul><p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p><p><img src="/../images/image-20210731153743354.png" alt="image-20210731153743354"></p><h3 id="1-3-3-Docker架构"><a href="#1-3-3-Docker架构" class="headerlink" title="1.3.3.Docker架构"></a>1.3.3.Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p></li><li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p></li></ul><p>如图：</p><p><img src="/../images/image-20210731154257653.png" alt="image-20210731154257653"></p><h3 id="1-3-4-小结"><a href="#1-3-4-小结" class="headerlink" title="1.3.4.小结"></a>1.3.4.小结</h3><p>镜像：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p>容器：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p>Docker结构：</p><ul><li><p>服务端：接收命令或远程请求，操作镜像或容器</p></li><li><p>客户端：发送命令或者请求到Docker服务端</p></li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4.安装Docker"></a>1.4.安装Docker</h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker。参考课前资料中的文档：</p><p><img src="/../images/image-20210731155002425.png" alt="image-20210731155002425"></p><h1 id="2-Docker的基本操作"><a href="#2-Docker的基本操作" class="headerlink" title="2.Docker的基本操作"></a>2.Docker的基本操作</h1><h2 id="2-1-镜像操作"><a href="#2-1-镜像操作" class="headerlink" title="2.1.镜像操作"></a>2.1.镜像操作</h2><h3 id="2-1-1-镜像名称"><a href="#2-1-1-镜像名称" class="headerlink" title="2.1.1.镜像名称"></a>2.1.1.镜像名称</h3><p>首先来看下镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p>如图：</p><p><img src="/../images/image-20210731155141362.png" alt="image-20210731155141362"></p><p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h3 id="2-1-2-镜像命令"><a href="#2-1-2-镜像命令" class="headerlink" title="2.1.2.镜像命令"></a>2.1.2.镜像命令</h3><p>常见的镜像操作命令如图：</p><p><img src="/../images/image-20210731155649535.png" alt="image-20210731155649535"></p><h3 id="2-1-3-案例1-拉取、查看镜像"><a href="#2-1-3-案例1-拉取、查看镜像" class="headerlink" title="2.1.3.案例1-拉取、查看镜像"></a>2.1.3.案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p><p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p><p><img src="/../images/image-20210731155844368-1710011176627.png" alt="image-20210731155844368"></p><p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p><p><img src="/../images/image-20210731155856199-1710011176627.png" alt="image-20210731155856199"></p><p>3）通过命令：docker images 查看拉取到的镜像</p><p><img src="/../images/image-20210731155903037-1710011176627.png" alt="image-20210731155903037"></p><h3 id="2-1-4-案例2-保存、导入镜像"><a href="#2-1-4-案例2-保存、导入镜像" class="headerlink" title="2.1.4.案例2-保存、导入镜像"></a>2.1.4.案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p><p>1）利用docker xx –help命令查看docker save和docker load的语法</p><p>例如，查看save命令用法，可以输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker save --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../images/image-20210731161104732-1710011176627.png" alt="image-20210731161104732"></p><p>命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker save -o [保存的目标文件名称] [镜像名称]<br></code></pre></td></tr></table></figure><p>2）使用docker save导出镜像到磁盘 </p><p>运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker save -o nginx.tar nginx:latest<br></code></pre></td></tr></table></figure><p>结果如图：</p><p><img src="/../images/image-20210731161354344-1710011176627.png" alt="image-20210731161354344"></p><p>3）使用docker load加载镜像</p><p>先删除本地的nginx镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker rmi nginx:latest<br></code></pre></td></tr></table></figure><p>然后运行命令，加载本地文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker load -i nginx.tar<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../images/image-20210731161746245-1710011176627.png" alt="image-20210731161746245"></p><h3 id="2-1-5-练习"><a href="#2-1-5-练习" class="headerlink" title="2.1.5.练习"></a>2.1.5.练习</h3><p>需求：去DockerHub搜索并拉取一个Redis镜像</p><p>目标：</p><p>1）去DockerHub搜索Redis镜像</p><p>2）查看Redis镜像的名称和版本</p><p>3）利用docker pull命令拉取镜像</p><p>4）利用docker save命令将 redis:latest打包为一个redis.tar包</p><p>5）利用docker rmi 删除本地的redis:latest</p><p>6）利用docker load 重新加载 redis.tar文件</p><h2 id="2-2-容器操作"><a href="#2-2-容器操作" class="headerlink" title="2.2.容器操作"></a>2.2.容器操作</h2><h3 id="2-2-1-容器相关命令"><a href="#2-2-1-容器相关命令" class="headerlink" title="2.2.1.容器相关命令"></a>2.2.1.容器相关命令</h3><p>容器操作的命令如图：</p><p><img src="/../images/image-20210731161950495.png" alt="image-20210731161950495"></p><p>容器保护三个状态：</p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p>其中：</p><ul><li><p>docker run：创建并运行一个容器，处于运行状态</p></li><li><p>docker pause：让一个运行的容器暂停</p></li><li><p>docker unpause：让一个容器从暂停状态恢复运行</p></li><li><p>docker stop：停止一个运行的容器</p></li><li><p>docker start：让一个停止的容器再次运行</p></li><li><p>docker rm：删除一个容器</p></li></ul><h3 id="2-2-2-案例-创建并运行一个容器"><a href="#2-2-2-案例-创建并运行一个容器" class="headerlink" title="2.2.2.案例-创建并运行一个容器"></a>2.2.2.案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name containerName -p 80:80 -d nginx<br></code></pre></td></tr></table></figure><p>命令解读：</p><ul><li>docker run ：创建并运行一个容器</li><li>–name : 给容器起一个名字，比如叫做mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p><p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p><p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p><p><img src="/../images/image-20210731163255863.png" alt="image-20210731163255863"></p><h3 id="2-2-3-案例-进入容器，修改文件"><a href="#2-2-3-案例-进入容器，修改文件" class="headerlink" title="2.2.3.案例-进入容器，修改文件"></a>2.2.3.案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p><p><strong>提示</strong>：进入容器要用到docker exec命令。</p><p><strong>步骤</strong>：</p><p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker <span class="hljs-built_in">exec</span> -it mn bash<br></code></pre></td></tr></table></figure><p>命令解读：</p><ul><li><p>docker exec ：进入容器内部，执行一个命令</p></li><li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p></li><li><p>mn ：要进入的容器的名称</p></li><li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p></li></ul><p>2）进入nginx的HTML所在目录 /usr/share/nginx/html</p><p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p><p><img src="/../images/image-20210731164159811-1710011176627.png" alt="image-20210731164159811"></p><p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p><p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p><p>我们执行命令，进入该目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/share/nginx/html<br></code></pre></td></tr></table></figure><p> 查看目录下文件：</p><p><img src="/../images/image-20210731164455818-1710011176627.png" alt="image-20210731164455818"></p><p>3）修改index.html的内容</p><p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -i -e <span class="hljs-string">&#x27;s#Welcome to nginx#传智教育欢迎您#g&#x27;</span> -e <span class="hljs-string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html<br></code></pre></td></tr></table></figure><p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p><p><img src="/../images/image-20210731164717604-1710011176627.png" alt="image-20210731164717604"></p><h3 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4.小结"></a>2.2.4.小结</h3><p>docker run命令的常见参数有哪些？</p><ul><li>–name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p>查看容器日志的命令：</p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p>查看容器状态：</p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h2 id="2-3-数据卷（容器数据管理）"><a href="#2-3-数据卷（容器数据管理）" class="headerlink" title="2.3.数据卷（容器数据管理）"></a>2.3.数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p><p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p><p><img src="/../images/image-20210731172440275.png" alt="image-20210731172440275"></p><p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p><h3 id="2-3-1-什么是数据卷"><a href="#2-3-1-什么是数据卷" class="headerlink" title="2.3.1.什么是数据卷"></a>2.3.1.什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p><p><img src="/../images/image-20210731173541846.png" alt="image-20210731173541846"></p><p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p><p>这样，我们操作宿主机的/var/lib/docker/volumes/html目录，就等于操作容器内的/usr/share/nginx/html目录了</p><h3 id="2-3-2-数据集操作命令"><a href="#2-3-2-数据集操作命令" class="headerlink" title="2.3.2.数据集操作命令"></a>2.3.2.数据集操作命令</h3><p>数据卷操作的基本语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume [COMMAND]<br></code></pre></td></tr></table></figure><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><h3 id="2-3-3-创建和查看数据卷"><a href="#2-3-3-创建和查看数据卷" class="headerlink" title="2.3.3.创建和查看数据卷"></a>2.3.3.创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p><p>① 创建数据卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume create html<br></code></pre></td></tr></table></figure><p>② 查看所有数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../images/image-20210731173746910-1710011176627.png" alt="image-20210731173746910"></p><p>③ 查看数据卷详细信息卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume inspect html<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/../images/image-20210731173809877-1710011176627.png" alt="image-20210731173809877"></p><p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p><p><strong>小结</strong>：</p><p>数据卷的作用：</p><ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul><p>数据卷操作：</p><ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul><h3 id="2-3-4-挂载数据卷"><a href="#2-3-4-挂载数据卷" class="headerlink" title="2.3.4.挂载数据卷"></a>2.3.4.挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run \<br>  --name mn \<br>  -v html:/root/html \<br>  -p 8080:80<br>  nginx \<br></code></pre></td></tr></table></figure><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li></ul><h3 id="2-3-5-案例-给nginx挂载数据卷"><a href="#2-3-5-案例-给nginx挂载数据卷" class="headerlink" title="2.3.5.案例-给nginx挂载数据卷"></a>2.3.5.案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p><p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置/usr/share/nginx/html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p><p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p><p>步骤：</p><p>① 创建容器并挂载数据卷到容器内的HTML目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx<br></code></pre></td></tr></table></figure><p>② 进入html数据卷所在位置，并修改HTML内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看html数据卷的位置</span><br>docker volume inspect html<br><span class="hljs-comment"># 进入该目录</span><br><span class="hljs-built_in">cd</span> /var/lib/docker/volumes/html/_data<br><span class="hljs-comment"># 修改文件</span><br>vi index.html<br></code></pre></td></tr></table></figure><h3 id="2-3-6-案例-给MySQL挂载本地目录"><a href="#2-3-6-案例-给MySQL挂载本地目录" class="headerlink" title="2.3.6.案例-给MySQL挂载本地目录"></a>2.3.6.案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li><li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li></ul><p>如图：</p><p><img src="/../images/image-20210731175155453-1710011176627.png" alt="image-20210731175155453"></p><p><strong>语法</strong>：</p><p>目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p><p>实现思路如下：</p><p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p><p>2）创建目录/tmp/mysql/data</p><p>3）创建目录/tmp/mysql/conf，将课前资料提供的hmy.cnf文件上传到/tmp/mysql/conf</p><p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p><p>① 挂载/tmp/mysql/data到mysql容器内数据存储目录</p><p>② 挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件</p><p>③ 设置MySQL密码</p><h3 id="2-3-7-小结"><a href="#2-3-7-小结" class="headerlink" title="2.3.7.小结"></a>2.3.7.小结</h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p><ul><li>-v volume名称:容器内目录</li><li>-v 宿主机文件:容器内文</li><li>-v 宿主机目录:容器内目录</li></ul><p>数据卷挂载与目录直接挂载的</p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul><h1 id="3-Dockerfile自定义镜像"><a href="#3-Dockerfile自定义镜像" class="headerlink" title="3.Dockerfile自定义镜像"></a>3.Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="3-1-镜像结构"><a href="#3-1-镜像结构" class="headerlink" title="3.1.镜像结构"></a>3.1.镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以MySQL为例，来看看镜像的组成结构：</p><p><img src="/../images/image-20210731175806273.png" alt="image-20210731175806273"></p><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="3-2-Dockerfile语法"><a href="#3-2-Dockerfile语法" class="headerlink" title="3.2.Dockerfile语法"></a>3.2.Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p><p>而描述上述信息的文件就是Dockerfile文件。</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><p><img src="/../images/image-20210731180321133-1710011176627.png" alt="image-20210731180321133"></p><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><h2 id="3-3-构建Java项目"><a href="#3-3-构建Java项目" class="headerlink" title="3.3.构建Java项目"></a>3.3.构建Java项目</h2><h3 id="3-3-1-基于Ubuntu构建Java项目"><a href="#3-3-1-基于Ubuntu构建Java项目" class="headerlink" title="3.3.1.基于Ubuntu构建Java项目"></a>3.3.1.基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li><p>步骤1：新建一个空文件夹docker-demo</p><p>  <img src="/../images/image-20210801101207444.png" alt="image-20210801101207444"></p></li><li><p>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</p><p>  <img src="/../images/image-20210801101314816.png" alt="image-20210801101314816"></p></li><li><p>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</p><p>  <img src="/../images/image-20210801101410200.png" alt="image-20210801101410200"></p></li><li><p>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</p><p>  <img src="/../images/image-20210801101455590.png" alt="image-20210801101455590"></p><p>  其中的内容如下：</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 指定基础镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">16.04</span><br><span class="hljs-comment"># 配置环境变量，JDK的安装目录</span><br><span class="hljs-keyword">ENV</span> JAVA_DIR=/usr/local<br><br><span class="hljs-comment"># 拷贝jdk和java项目的包</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="hljs-variable">$JAVA_DIR</span>/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span><br><br><span class="hljs-comment"># 安装JDK</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAVA_DIR</span> \</span><br><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="language-bash"> &amp;&amp; <span class="hljs-built_in">mv</span> ./jdk1.8.0_144 ./java8</span><br><br><span class="hljs-comment"># 配置环境变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8<br><span class="hljs-keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin<br><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8090</span><br><span class="hljs-comment"># 入口，java项目的启动命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span><br></code></pre></td></tr></table></figure></li><li><p>步骤5：进入docker-demo</p><p>  将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p></li><li><p>步骤6：运行命令：</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker build -t javaweb:1.0 .<br></code></pre></td></tr></table></figure></li></ul><p>最后访问 <a href="http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAip">http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip</a></p><h3 id="3-3-2-基于java8构建Java项目"><a href="#3-3-2-基于java8构建Java项目" class="headerlink" title="3.3.2.基于java8构建Java项目"></a>3.3.2.基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p></li><li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p></li><li><p>③ 编写Dockerfile文件：</p><ul><li><p>a ）基于java:8-alpine作为基础镜像</p></li><li><p>b ）将app.jar拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口ENTRYPOINT</p><p>  内容如下：</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span>-alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8090</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>④ 使用docker build命令构建镜像</p></li><li><p>⑤ 使用docker run创建容器并运行</p></li></ul><h2 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4.小结"></a>3.4.小结</h2><p>小结：</p><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol><h1 id="4-Docker-Compose"><a href="#4-Docker-Compose" class="headerlink" title="4.Docker-Compose"></a>4.Docker-Compose</h1><p>Docker Compose可以基于Compose文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><p><img src="/../images/image-20210731180921742.png" alt="image-20210731180921742"></p><h2 id="4-1-初识DockerCompose"><a href="#4-1-初识DockerCompose" class="headerlink" title="4.1.初识DockerCompose"></a>4.1.初识DockerCompose</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">version<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3.8&quot;</span><br> services<span class="hljs-punctuation">:</span><br>  mysql<span class="hljs-punctuation">:</span><br>    image<span class="hljs-punctuation">:</span> mysql<span class="hljs-punctuation">:</span><span class="hljs-number">5.7</span><span class="hljs-number">.25</span><br>    environment<span class="hljs-punctuation">:</span><br>     MYSQL_ROOT_PASSWORD<span class="hljs-punctuation">:</span> <span class="hljs-number">123</span> <br>    volumes<span class="hljs-punctuation">:</span><br>     - <span class="hljs-string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span><br>     - <span class="hljs-string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span><br>  web<span class="hljs-punctuation">:</span><br>    build<span class="hljs-punctuation">:</span> .<br>    ports<span class="hljs-punctuation">:</span><br>     - <span class="hljs-string">&quot;8090:8090&quot;</span><br><br></code></pre></td></tr></table></figure><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p><p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p><h2 id="4-2-安装DockerCompose"><a href="#4-2-安装DockerCompose" class="headerlink" title="4.2.安装DockerCompose"></a>4.2.安装DockerCompose</h2><p>参考课前资料</p><h2 id="4-3-部署微服务集群"><a href="#4-3-部署微服务集群" class="headerlink" title="4.3.部署微服务集群"></a>4.3.部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p><p><strong>实现思路</strong>：</p><p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p><p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p><p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p><p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p><p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p><h3 id="4-3-1-compose文件"><a href="#4-3-1-compose文件" class="headerlink" title="4.3.1.compose文件"></a>4.3.1.compose文件</h3><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p><p><img src="/../images/image-20210731181341330.png" alt="image-20210731181341330"></p><p>内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.2&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nacos/nacos-server</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MODE:</span> <span class="hljs-string">standalone</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8848:8848&quot;</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.25</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span><br>  <span class="hljs-attr">userservice:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./user-service</span><br>  <span class="hljs-attr">orderservice:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./order-service</span><br>  <span class="hljs-attr">gateway:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./gateway</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;10010:10010&quot;</span><br></code></pre></td></tr></table></figure><p>可以看到，其中包含5个service服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心<ul><li><code>image: nacos/nacos-server</code>： 基于nacos/nacos-server镜像构建</li><li><code>environment</code>：环境变量<ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了8848端口</li></ul></li><li><code>mysql</code>：数据库<ul><li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li><li><code>environment</code>：环境变量<ul><li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li></ul><p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p><p><img src="/../images/image-20210801095205034.png" alt="image-20210801095205034"></p><p>查看微服务目录，可以看到都包含Dockerfile文件：</p><p><img src="/../images/image-20210801095320586.png" alt="image-20210801095320586"></p><p>内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span>-alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span><br></code></pre></td></tr></table></figure><h3 id="4-3-2-修改微服务配置"><a href="#4-3-2-修改微服务配置" class="headerlink" title="4.3.2.修改微服务配置"></a>4.3.2.修改微服务配置</h3><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p><p>如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">orderservice</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos:8848</span> <span class="hljs-comment"># nacos服务地址</span><br></code></pre></td></tr></table></figure><h3 id="4-3-3-打包"><a href="#4-3-3-打包" class="headerlink" title="4.3.3.打包"></a>4.3.3.打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 服务打包的最终名称 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>app<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打包后：</p><p><img src="/../images/image-20210801095951030.png" alt="image-20210801095951030"></p><h3 id="4-3-4-拷贝jar包到部署目录"><a href="#4-3-4-拷贝jar包到部署目录" class="headerlink" title="4.3.4.拷贝jar包到部署目录"></a>4.3.4.拷贝jar包到部署目录</h3><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p><p>user-service：</p><p><img src="/../images/image-20210801100201253.png" alt="image-20210801100201253"></p><p>order-service：</p><p><img src="/../images/image-20210801100231495.png" alt="image-20210801100231495"></p><p>gateway：</p><p><img src="/../images/image-20210801100308102.png" alt="image-20210801100308102"></p><h3 id="4-3-5-部署"><a href="#4-3-5-部署" class="headerlink" title="4.3.5.部署"></a>4.3.5.部署</h3><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p><p>上传到任意目录：</p><p><img src="/../images/image-20210801100955653.png" alt="image-20210801100955653"></p><p>部署：</p><p>进入cloud-demo目录，然后运行下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker-compose up -d<br></code></pre></td></tr></table></figure><h1 id="5-Docker镜像仓库"><a href="#5-Docker镜像仓库" class="headerlink" title="5.Docker镜像仓库"></a>5.Docker镜像仓库</h1><h2 id="5-1-搭建私有镜像仓库"><a href="#5-1-搭建私有镜像仓库" class="headerlink" title="5.1.搭建私有镜像仓库"></a>5.1.搭建私有镜像仓库</h2><p>参考课前资料《CentOS7安装Docker.md》</p><h2 id="5-2-推送、拉取镜像"><a href="#5-2-推送、拉取镜像" class="headerlink" title="5.2.推送、拉取镜像"></a>5.2.推送、拉取镜像</h2><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure><p>② 推送镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker push 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure><p>③ 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud（一）————注册中心、Gateway</title>
    <link href="/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/03/10/SpringCloud%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud01"><a href="#SpringCloud01" class="headerlink" title="SpringCloud01"></a>SpringCloud01</h1><h1 id="1-认识微服务"><a href="#1-认识微服务" class="headerlink" title="1.认识微服务"></a>1.认识微服务</h1><p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p><h2 id="1-0-学习目标"><a href="#1-0-学习目标" class="headerlink" title="1.0.学习目标"></a>1.0.学习目标</h2><p>了解微服务架构的优缺点</p><h2 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1.单体架构"></a>1.1.单体架构</h2><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p><p><img src="/../images/image-20210713202807818.png" alt="image-20210713202807818"></p><p>单体架构的优缺点如下：</p><p><strong>优点：</strong></p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点：</strong></p><ul><li>耦合度高（维护困难、升级困难）</li></ul><h2 id="1-2-分布式架构"><a href="#1-2-分布式架构" class="headerlink" title="1.2.分布式架构"></a>1.2.分布式架构</h2><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p><p><img src="/../images/image-20210713203124797.png" alt="image-20210713203124797"></p><p>分布式架构的优缺点：</p><p><strong>优点：</strong></p><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul><p><strong>缺点：</strong></p><ul><li>服务调用关系错综复杂</li></ul><p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p><ul><li>服务拆分的粒度如何界定？</li><li>服务之间如何调用？</li><li>服务的调用关系如何管理？</li></ul><p>人们需要制定一套行之有效的标准来约束分布式架构。</p><h2 id="1-3-微服务"><a href="#1-3-微服务" class="headerlink" title="1.3.微服务"></a>1.3.微服务</h2><p>微服务的架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p><img src="/../images/image-20210713203753373.png" alt="image-20210713203753373"></p><p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p><p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p><p>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案。</p><p>其中在Java领域最引人注目的就是SpringCloud提供的方案了。</p><h2 id="1-4-SpringCloud"><a href="#1-4-SpringCloud" class="headerlink" title="1.4.SpringCloud"></a>1.4.SpringCloud</h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud%E3%80%82">https://spring.io/projects/spring-cloud。</a></p><p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><p>其中常见的组件包括：</p><p><img src="/../images/image-20210713204155887.png" alt="image-20210713204155887"></p><p>另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：</p><p><img src="/../images/image-20210713205003790.png" alt="image-20210713205003790"></p><p>我们课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。</p><h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5.总结"></a>1.5.总结</h2><ul><li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p></li><li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p></li><li><p>微服务：一种良好的分布式架构方案</p><p>  ①优点：拆分粒度更小、服务更独立、耦合度更低</p><p>  ②缺点：架构非常复杂，运维、监控、部署难度提高</p></li><li><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p></li></ul><h1 id="2-服务拆分和远程调用"><a href="#2-服务拆分和远程调用" class="headerlink" title="2.服务拆分和远程调用"></a>2.服务拆分和远程调用</h1><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p><h2 id="2-1-服务拆分原则"><a href="#2-1-服务拆分原则" class="headerlink" title="2.1.服务拆分原则"></a>2.1.服务拆分原则</h2><p>这里我总结了微服务拆分时的几个原则：</p><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><p><img src="/../images/image-20210713210800950.png" alt="image-20210713210800950"></p><h2 id="2-2-服务拆分示例"><a href="#2-2-服务拆分示例" class="headerlink" title="2.2.服务拆分示例"></a>2.2.服务拆分示例</h2><p>以课前资料中的微服务cloud-demo为例，其结构如下：</p><p><img src="/../images/image-20210713211009593.png" alt="image-20210713211009593"></p><p>cloud-demo：父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul><p>要求：</p><ul><li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul><h3 id="2-2-1-导入Sql语句"><a href="#2-2-1-导入Sql语句" class="headerlink" title="2.2.1.导入Sql语句"></a>2.2.1.导入Sql语句</h3><p>首先，将课前资料提供的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>导入到mysql中：</p><p><img src="/../images/image-20210713211417049.png" alt="image-20210713211417049"></p><p>cloud-user表中初始数据如下：</p><p><img src="/../images/image-20210713211550169.png" alt="image-20210713211550169"></p><p>cloud-order表中初始数据如下：</p><p><img src="/../images/image-20210713211657319.png" alt="image-20210713211657319"></p><p>cloud-order表中持有cloud-user表中的id字段。</p><h3 id="2-2-2-导入demo工程"><a href="#2-2-2-导入demo工程" class="headerlink" title="2.2.2.导入demo工程"></a>2.2.2.导入demo工程</h3><p>用IDEA导入课前资料提供的Demo：</p><p><img src="/../images/image-20210713211814094.png" alt="image-20210713211814094"></p><p>项目结构如下：</p><p><img src="/../images/image-20210713212656887.png" alt="image-20210713212656887"></p><p>导入后，会在IDEA右下角出现弹窗：</p><p><img src="/../images/image-20210713212349272.png" alt="image-20210713212349272"></p><p>点击弹窗，然后按下图选择：</p><p><img src="/../images/image-20210713212336185.png" alt="image-20210713212336185"></p><p>会出现这样的菜单：</p><p><img src="/../images/image-20210713212513324.png" alt="image-20210713212513324"></p><p>配置下项目使用的JDK：</p><p><img src="/../images/image-20210713220736408.png" alt="image-20210713220736408"></p><h2 id="2-3-实现远程调用案例"><a href="#2-3-实现远程调用案例" class="headerlink" title="2.3.实现远程调用案例"></a>2.3.实现远程调用案例</h2><p>在order-service服务中，有一个根据id查询订单的接口：</p><p><img src="/../images/image-20210713212749575.png" alt="image-20210713212749575"></p><p>根据id查询订单，返回值是Order对象，如图：</p><p><img src="/../images/image-20210713212901725.png" alt="image-20210713212901725"></p><p>其中的user为null</p><p>在user-service中有一个根据id查询用户的接口：</p><p><img src="/../images/image-20210713213146089.png" alt="image-20210713213146089"></p><p>查询的结果如图：</p><p><img src="/../images/image-20210713213213075.png" alt="image-20210713213213075"></p><h3 id="2-3-1-案例需求："><a href="#2-3-1-案例需求：" class="headerlink" title="2.3.1.案例需求："></a>2.3.1.案例需求：</h3><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p><p><img src="/../images/image-20210713213312278.png" alt="image-20210713213312278"></p><p>因此，我们需要在order-service中 向user-service发起一个http的请求，调用<a href="http://localhost:8081/user/%7BuserId%7D%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E3%80%82">http://localhost:8081/user/{userId}这个接口。</a></p><p>大概的步骤是这样的：</p><ul><li>注册一个RestTemplate的实例到Spring容器</li><li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li><li>将查询的User填充到Order对象，一起返回</li></ul><h3 id="2-3-2-注册RestTemplate"><a href="#2-3-2-注册RestTemplate" class="headerlink" title="2.3.2.注册RestTemplate"></a>2.3.2.注册RestTemplate</h3><p>首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.order;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-3-实现远程调用"><a href="#2-3-3-实现远程调用" class="headerlink" title="2.3.3.实现远程调用"></a>2.3.3.实现远程调用</h3><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p><p><img src="/../images/image-20210713213959569.png" alt="image-20210713213959569"></p><h2 id="2-4-提供者与消费者"><a href="#2-4-提供者与消费者" class="headerlink" title="2.4.提供者与消费者"></a>2.4.提供者与消费者</h2><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><p><img src="/../images/image-20210713214404481.png" alt="image-20210713214404481"></p><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p><p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul><p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p><h1 id="3-Eureka注册中心"><a href="#3-Eureka注册中心" class="headerlink" title="3.Eureka注册中心"></a>3.Eureka注册中心</h1><p>假如我们的服务提供者user-service部署了多个实例，如图：</p><p><img src="/../images/image-20210713214925388.png" alt="image-20210713214925388"></p><p>大家思考几个问题：</p><ul><li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li>有多个user-service实例地址，order-service调用时该如何选择？</li><li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li></ul><h2 id="3-1-Eureka的结构和作用"><a href="#3-1-Eureka的结构和作用" class="headerlink" title="3.1.Eureka的结构和作用"></a>3.1.Eureka的结构和作用</h2><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p><p><img src="/../images/image-20210713220104956.png" alt="image-20210713220104956"></p><p>回答之前的各个问题。</p><p>问题1：order-service如何得知user-service实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册</li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取</li></ul><p>问题2：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li><li>向该实例地址发起远程调用</li></ul><p>问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service拉取服务时，就能将故障实例排除了</li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><p>因此，接下来我们动手实践的步骤包括：</p><p><img src="/../images/image-20210713220509769.png" alt="image-20210713220509769"></p><h2 id="3-2-搭建eureka-server"><a href="#3-2-搭建eureka-server" class="headerlink" title="3.2.搭建eureka-server"></a>3.2.搭建eureka-server</h2><p>首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务</p><h3 id="3-2-1-创建eureka-server服务"><a href="#3-2-1-创建eureka-server服务" class="headerlink" title="3.2.1.创建eureka-server服务"></a>3.2.1.创建eureka-server服务</h3><p>在cloud-demo父工程下，创建一个子模块：</p><p><img src="/../images/image-20210713220605881.png" alt="image-20210713220605881"></p><p>填写模块信息：</p><p><img src="/../images/image-20210713220857396.png" alt="image-20210713220857396"></p><p>然后填写服务信息：</p><p><img src="/../images/image-20210713221339022.png" alt="image-20210713221339022"></p><h3 id="3-2-2-引入eureka依赖"><a href="#3-2-2-引入eureka依赖" class="headerlink" title="3.2.2.引入eureka依赖"></a>3.2.2.引入eureka依赖</h3><p>引入SpringCloud为eureka提供的starter依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-3-编写启动类"><a href="#3-2-3-编写启动类" class="headerlink" title="3.2.3.编写启动类"></a>3.2.3.编写启动类</h3><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.eureka;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-4-编写配置文件"><a href="#3-2-4-编写配置文件" class="headerlink" title="3.2.4.编写配置文件"></a>3.2.4.编写配置文件</h3><p>编写一个application.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span> <br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><h3 id="3-2-5-启动服务"><a href="#3-2-5-启动服务" class="headerlink" title="3.2.5.启动服务"></a>3.2.5.启动服务</h3><p>启动微服务，然后在浏览器访问：<a href="http://127.0.0.1:10086/">http://127.0.0.1:10086</a></p><p>看到下面结果应该是成功了：</p><p><img src="/../images/image-20210713222157190.png" alt="image-20210713222157190"></p><h2 id="3-3-服务注册"><a href="#3-3-服务注册" class="headerlink" title="3.3.服务注册"></a>3.3.服务注册</h2><p>下面，我们将user-service注册到eureka-server中去。</p><h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2）配置文件"><a href="#2）配置文件" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><h3 id="3）启动多个user-service实例"><a href="#3）启动多个user-service实例" class="headerlink" title="3）启动多个user-service实例"></a>3）启动多个user-service实例</h3><p>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。</p><p>首先，复制原来的user-service启动配置：</p><p><img src="/../images/image-20210713222656562.png" alt="image-20210713222656562"></p><p>然后，在弹出的窗口中，填写信息：</p><p><img src="/../images/image-20210713222757702.png" alt="image-20210713222757702"></p><p>现在，SpringBoot窗口会出现两个user-service启动配置：</p><p><img src="/../images/image-20210713222841951.png" alt="image-20210713222841951"></p><p>不过，第一个是8081端口，第二个是8082端口。</p><p>启动两个user-service实例：</p><p><img src="/../images/image-20210713223041491.png" alt="image-20210713223041491"></p><p>查看eureka-server管理页面：</p><p><img src="/../images/image-20210713223150650.png" alt="image-20210713223150650"></p><h2 id="3-4-服务发现"><a href="#3-4-服务发现" class="headerlink" title="3.4.服务发现"></a>3.4.服务发现</h2><p>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p><h3 id="1）引入依赖-1"><a href="#1）引入依赖-1" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。</p><p>在order-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2）配置文件-1"><a href="#2）配置文件-1" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p><p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">orderservice</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure><h3 id="3）服务拉取和负载均衡"><a href="#3）服务拉取和负载均衡" class="headerlink" title="3）服务拉取和负载均衡"></a>3）服务拉取和负载均衡</h3><p>最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。</p><p>不过这些动作不用我们去做，只需要添加一些注解即可。</p><p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p><p><img src="/../images/image-20210713224049419.png" alt="image-20210713224049419"></p><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p><p><img src="/../images/image-20210713224245731.png" alt="image-20210713224245731"></p><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p><h1 id="4-Ribbon负载均衡"><a href="#4-Ribbon负载均衡" class="headerlink" title="4.Ribbon负载均衡"></a>4.Ribbon负载均衡</h1><p>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p><h2 id="4-1-负载均衡原理"><a href="#4-1-负载均衡原理" class="headerlink" title="4.1.负载均衡原理"></a>4.1.负载均衡原理</h2><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><p><img src="/../images/image-20210713224517686.png" alt="image-20210713224517686"></p><p>那么我们发出的请求明明是<a href="http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F">http://userservice/user/1，怎么变成了http://localhost:8081的呢？</a></p><h2 id="4-2-源码跟踪"><a href="#4-2-源码跟踪" class="headerlink" title="4.2.源码跟踪"></a>4.2.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h3 id="1）LoadBalancerIntercepor"><a href="#1）LoadBalancerIntercepor" class="headerlink" title="1）LoadBalancerIntercepor"></a>1）LoadBalancerIntercepor</h3><p><img src="/../images/1525620483637.png" alt="1525620483637"></p><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h3 id="2）LoadBalancerClient"><a href="#2）LoadBalancerClient" class="headerlink" title="2）LoadBalancerClient"></a>2）LoadBalancerClient</h3><p>继续跟入execute方法：</p><p><img src="/../images/1525620787090.png" alt="1525620787090"></p><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><p> <img src="/../images/1525620835911.png" alt="1525620835911"></p><p>果然实现了负载均衡。</p><h3 id="3）负载均衡策略IRule"><a href="#3）负载均衡策略IRule" class="headerlink" title="3）负载均衡策略IRule"></a>3）负载均衡策略IRule</h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><p> <img src="/../images/1525620835911.png" alt="1525620835911"></p><p>我们继续跟入：</p><p><img src="/../images/1544361421671.png" alt="1544361421671"></p><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><p> <img src="/../images/1525622652849.png" alt="1525622652849"></p><p>我们看看这个rule是谁：</p><p> <img src="/../images/1525622699666.png" alt="1525622699666"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p> <img src="/../images/1525622754316.png" alt="1525622754316"></p><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h3 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><p><img src="/../images/image-20210713224724673.png" alt="image-20210713224724673"></p><p>基本流程如下：</p><ul><li>拦截我们的RestTemplate请求<a href="http://userservice/user/1">http://userservice/user/1</a></li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82">http://localhost:8081/user/1，发起真实请求</a></li></ul><h2 id="4-3-负载均衡策略"><a href="#4-3-负载均衡策略" class="headerlink" title="4.3.负载均衡策略"></a>4.3.负载均衡策略</h2><h3 id="4-3-1-负载均衡策略"><a href="#4-3-1-负载均衡策略" class="headerlink" title="4.3.1.负载均衡策略"></a>4.3.1.负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><p><img src="/../images/image-20210713225653000.png" alt="image-20210713225653000"></p><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h3 id="4-3-2-自定义负载均衡策略"><a href="#4-3-2-自定义负载均衡策略" class="headerlink" title="4.3.2.自定义负载均衡策略"></a>4.3.2.自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span> <span class="hljs-comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span> <span class="hljs-comment"># 负载均衡规则 </span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h2 id="4-4-饥饿加载"><a href="#4-4-饥饿加载" class="headerlink" title="4.4.饥饿加载"></a>4.4.饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">eager-load:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">clients:</span> <span class="hljs-string">userservice</span><br></code></pre></td></tr></table></figure><h1 id="5-Nacos注册中心"><a href="#5-Nacos注册中心" class="headerlink" title="5.Nacos注册中心"></a>5.Nacos注册中心</h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h2 id="5-1-认识和安装Nacos"><a href="#5-1-认识和安装Nacos" class="headerlink" title="5.1.认识和安装Nacos"></a>5.1.认识和安装Nacos</h2><p><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p><p><img src="/../images/image-20210713230444308.png" alt="image-20210713230444308"></p><p>安装方式可以参考课前资料《Nacos安装指南.md》</p><h2 id="5-2-服务注册到nacos"><a href="#5-2-服务注册到nacos" class="headerlink" title="5.2.服务注册到nacos"></a>5.2.服务注册到nacos</h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="1）引入依赖-2"><a href="#1）引入依赖-2" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><h3 id="2）配置nacos地址"><a href="#2）配置nacos地址" class="headerlink" title="2）配置nacos地址"></a>2）配置nacos地址</h3><p>在user-service和order-service的application.yml中添加nacos地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><h3 id="3）重启"><a href="#3）重启" class="headerlink" title="3）重启"></a>3）重启</h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><p><img src="/../images/image-20210713231439607.png" alt="image-20210713231439607"></p><h2 id="5-3-服务分级存储模型"><a href="#5-3-服务分级存储模型" class="headerlink" title="5.3.服务分级存储模型"></a>5.3.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="/../images/image-20210713232522531.png" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="/../images/image-20210713232658928.png" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="5-3-1-给user-service配置集群"><a href="#5-3-1-给user-service配置集群" class="headerlink" title="5.3.1.给user-service配置集群"></a>5.3.1.给user-service配置集群</h3><p>修改user-service的application.yml文件，添加集群配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><p><img src="/../images/image-20210713232916215.png" alt="image-20210713232916215"></p><p>我们再次复制一个user-service启动配置，添加属性：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH<br></code></pre></td></tr></table></figure><p>配置如图所示：</p><p><img src="/../images/image-20210713233528982.png" alt="image-20210713233528982"></p><p>启动UserApplication3后再次查看nacos控制台：</p><p><img src="/../images/image-20210713233727923.png" alt="image-20210713233727923"></p><h3 id="5-3-2-同集群优先的负载均衡"><a href="#5-3-2-同集群优先的负载均衡" class="headerlink" title="5.3.2.同集群优先的负载均衡"></a>5.3.2.同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">spring:<br>  cloud:<br>    nacos:<br>      server-addr: localhost:8848<br>      discovery:<br>        cluster-name: HZ <span class="hljs-comment"># 集群名称</span><br></code></pre></td></tr></table></figure><p>2）修改负载均衡规则</p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="hljs-comment"># 负载均衡规则 </span><br></code></pre></td></tr></table></figure><h2 id="5-4-权重配置"><a href="#5-4-权重配置" class="headerlink" title="5.4.权重配置"></a>5.4.权重配置</h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="/../images/image-20210713235133225.png" alt="image-20210713235133225"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="/../images/image-20210713235235219.png" alt="image-20210713235235219"></p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h2 id="5-5-环境隔离"><a href="#5-5-环境隔离" class="headerlink" title="5.5.环境隔离"></a>5.5.环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p><img src="/../images/image-20210714000101516.png" alt="image-20210714000101516"></p><h3 id="5-5-1-创建namespace"><a href="#5-5-1-创建namespace" class="headerlink" title="5.5.1.创建namespace"></a>5.5.1.创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="/../images/image-20210714000414781.png" alt="image-20210714000414781"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="/../images/image-20210714000440143.png" alt="image-20210714000440143"></p><p>然后，填写表单：</p><p><img src="/../images/image-20210714000505928.png" alt="image-20210714000505928"></p><p>就能在页面看到一个新的namespace：</p><p><img src="/../images/image-20210714000522913.png" alt="image-20210714000522913"></p><h3 id="5-5-2-给微服务配置namespace"><a href="#5-5-2-给微服务配置namespace" class="headerlink" title="5.5.2.给微服务配置namespace"></a>5.5.2.给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="hljs-comment"># 命名空间，填ID</span><br></code></pre></td></tr></table></figure><p>重启order-service后，访问控制台，可以看到下面的结果：</p><p><img src="/../images/image-20210714000830703.png" alt="image-20210714000830703"></p><p><img src="/../images/image-20210714000837140.png" alt="image-20210714000837140"></p><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p><p><img src="/../images/image-20210714000941256.png" alt="image-20210714000941256"></p><h2 id="5-6-Nacos与Eureka的区别"><a href="#5-6-Nacos与Eureka的区别" class="headerlink" title="5.6.Nacos与Eureka的区别"></a>5.6.Nacos与Eureka的区别</h2><p>Nacos的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">ephemeral:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 设置为非临时实例</span><br></code></pre></td></tr></table></figure><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="/../images/image-20210714001728017.png" alt="image-20210714001728017"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><hr><h1 id="SpringCloud实用篇02"><a href="#SpringCloud实用篇02" class="headerlink" title="SpringCloud实用篇02"></a>SpringCloud实用篇02</h1><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><h1 id="1-Nacos配置管理"><a href="#1-Nacos配置管理" class="headerlink" title="1.Nacos配置管理"></a>1.Nacos配置管理</h1><p>Nacos除了可以做注册中心，同样可以做配置管理来使用。</p><h2 id="1-1-统一配置管理"><a href="#1-1-统一配置管理" class="headerlink" title="1.1.统一配置管理"></a>1.1.统一配置管理</h2><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</p><p><img src="/../images/image-20210714164426792.png" alt="image-20210714164426792"></p><p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p><h3 id="1-1-1-在nacos中添加配置文件"><a href="#1-1-1-在nacos中添加配置文件" class="headerlink" title="1.1.1.在nacos中添加配置文件"></a>1.1.1.在nacos中添加配置文件</h3><p>如何在nacos中管理配置呢？</p><p><img src="/../images/image-20210714164742924.png" alt="image-20210714164742924"></p><p>然后在弹出的表单中，填写配置信息：</p><p><img src="/../images/image-20210714164856664.png" alt="image-20210714164856664"></p><blockquote><p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p></blockquote><h3 id="1-1-2-从微服务拉取配置"><a href="#1-1-2-从微服务拉取配置" class="headerlink" title="1.1.2.从微服务拉取配置"></a>1.1.2.从微服务拉取配置</h3><p>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。</p><p>但如果尚未读取application.yml，又如何得知nacos地址呢？</p><p>因此spring引入了一种新的配置文件：bootstrap.yaml文件，会在application.yml之前被读取，流程如下：</p><p><img src="/../images/L0iFYNF.png" alt="img"></p><p>1）引入nacos-config依赖</p><p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos配置管理依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）添加bootstrap.yaml</p><p>然后，在user-service中添加一个bootstrap.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#开发环境，这里是dev </span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># Nacos地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><p>这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据</p><p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id，来读取配置。</p><p>本例中，就是去读取<code>userservice-dev.yaml</code>：</p><p><img src="/../images/image-20210714170845901.png" alt="image-20210714170845901"></p><p>3）读取nacos配置</p><p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p><p><img src="/../images/image-20210714170337448.png" alt="image-20210714170337448"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.user.web;<br><br><span class="hljs-keyword">import</span> cn.itcast.user.pojo.User;<br><span class="hljs-keyword">import</span> cn.itcast.user.service.UserService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dateformat;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));<br>    &#125;<br>    <span class="hljs-comment">// ...略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在页面访问，可以看到效果：</p><p><img src="/../images/image-20210714170449612.png" alt="image-20210714170449612"></p><h2 id="1-2-配置热更新"><a href="#1-2-配置热更新" class="headerlink" title="1.2.配置热更新"></a>1.2.配置热更新</h2><p>我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p><p>要实现配置热更新，可以使用两种方式：</p><h3 id="1-2-1-方式一"><a href="#1-2-1-方式一" class="headerlink" title="1.2.1.方式一"></a>1.2.1.方式一</h3><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p><p><img src="/../images/image-20210714171036335-1710011019361.png" alt="image-20210714171036335"></p><h3 id="1-2-2-方式二"><a href="#1-2-2-方式二" class="headerlink" title="1.2.2.方式二"></a>1.2.2.方式二</h3><p>使用@ConfigurationProperties注解代替@Value注解。</p><p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.user.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PatternProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String dateformat;<br>&#125;<br></code></pre></td></tr></table></figure><p>在UserController中使用这个类代替@Value：</p><p><img src="/../images/image-20210714171316124.png" alt="image-20210714171316124"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.user.web;<br><br><span class="hljs-keyword">import</span> cn.itcast.user.config.PatternProperties;<br><span class="hljs-keyword">import</span> cn.itcast.user.pojo.User;<br><span class="hljs-keyword">import</span> cn.itcast.user.service.UserService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PatternProperties patternProperties;<br><br>    <span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">now</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));<br>    &#125;<br><br>    <span class="hljs-comment">// 略</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-配置共享"><a href="#1-3-配置共享" class="headerlink" title="1.3.配置共享"></a>1.3.配置共享</h2><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p><p>下面我们通过案例来测试配置共享</p><h3 id="1）添加一个环境共享配置"><a href="#1）添加一个环境共享配置" class="headerlink" title="1）添加一个环境共享配置"></a>1）添加一个环境共享配置</h3><p>我们在nacos中添加一个userservice.yaml文件：</p><p><img src="/../images/image-20210714173233650-1710011019361.png" alt="image-20210714173233650"></p><h3 id="2）在user-service中读取共享配置"><a href="#2）在user-service中读取共享配置" class="headerlink" title="2）在user-service中读取共享配置"></a>2）在user-service中读取共享配置</h3><p>在user-service服务中，修改PatternProperties类，读取新添加的属性：</p><p><img src="/../images/image-20210714173324231-1710011019361.png" alt="image-20210714173324231"></p><p>在user-service服务中，修改UserController，添加一个方法：</p><p><img src="/../images/image-20210714173721309-1710011019361.png" alt="image-20210714173721309"></p><h3 id="3）运行两个UserApplication，使用不同的profile"><a href="#3）运行两个UserApplication，使用不同的profile" class="headerlink" title="3）运行两个UserApplication，使用不同的profile"></a>3）运行两个UserApplication，使用不同的profile</h3><p>修改UserApplication2这个启动项，改变其profile值：</p><p><img src="/../images/image-20210714173538538-1710011019362.png" alt="image-20210714173538538"></p><p><img src="/../images/image-20210714173519963-1710011019362.png" alt="image-20210714173519963"></p><p>这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。</p><p>启动UserApplication和UserApplication2</p><p>访问<a href="http://localhost:8081/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:8081/user/prop，结果：</a></p><p><img src="/../images/image-20210714174313344-1710011019362.png" alt="image-20210714174313344"></p><p>访问<a href="http://localhost:8082/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:8082/user/prop，结果：</a></p><p><img src="/../images/image-20210714174424818-1710011019363.png" alt="image-20210714174424818"></p><p>可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</p><h3 id="4）配置共享的优先级"><a href="#4）配置共享的优先级" class="headerlink" title="4）配置共享的优先级"></a>4）配置共享的优先级</h3><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p><p><img src="/../images/image-20210714174623557-1710011019362.png" alt="image-20210714174623557"></p><h2 id="1-4-搭建Nacos集群"><a href="#1-4-搭建Nacos集群" class="headerlink" title="1.4.搭建Nacos集群"></a>1.4.搭建Nacos集群</h2><p>Nacos生产环境下一定要部署为集群状态，部署方式参考课前资料中的文档：</p><p><img src="/../images/image-20210714174728042.png" alt="image-20210714174728042"></p><h1 id="2-Feign远程调用"><a href="#2-Feign远程调用" class="headerlink" title="2.Feign远程调用"></a>2.Feign远程调用</h1><p>先来看我们以前利用RestTemplate发起远程调用的代码：</p><p><img src="/../images/image-20210714174814204.png" alt="image-20210714174814204"></p><p>存在下面的问题：</p><p>•代码可读性差，编程体验不统一</p><p>•参数复杂URL难以维护</p><p>Feign是一个声明式的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p><p>其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</p><p><img src="/../images/image-20210714174918088.png" alt="image-20210714174918088"></p><h2 id="2-1-Feign替代RestTemplate"><a href="#2-1-Feign替代RestTemplate" class="headerlink" title="2.1.Feign替代RestTemplate"></a>2.1.Feign替代RestTemplate</h2><p>Fegin的使用步骤如下：</p><h3 id="1）引入依赖-3"><a href="#1）引入依赖-3" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>我们在order-service服务的pom文件中引入feign的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2）添加注解"><a href="#2）添加注解" class="headerlink" title="2）添加注解"></a>2）添加注解</h3><p>在order-service的启动类添加注解开启Feign的功能：</p><p><img src="/../images/image-20210714175102524-1710011019363.png" alt="image-20210714175102524"></p><h3 id="3）编写Feign的客户端"><a href="#3）编写Feign的客户端" class="headerlink" title="3）编写Feign的客户端"></a>3）编写Feign的客户端</h3><p>在order-service中新建一个接口，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.order.client;<br><br><span class="hljs-keyword">import</span> cn.itcast.order.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><br><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserClient</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    User <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：userservice</li><li>请求方式：GET</li><li>请求路径：/user/{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p><h3 id="4）测试"><a href="#4）测试" class="headerlink" title="4）测试"></a>4）测试</h3><p>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：</p><p><img src="/../images/image-20210714175415087.png" alt="image-20210714175415087"></p><p>是不是看起来优雅多了。</p><h3 id="5）总结"><a href="#5）总结" class="headerlink" title="5）总结"></a>5）总结</h3><p>使用Feign的步骤：</p><p>① 引入依赖</p><p>② 添加@EnableFeignClients注解</p><p>③ 编写FeignClient接口</p><p>④ 使用FeignClient中定义的方法代替RestTemplate</p><h2 id="2-2-自定义配置"><a href="#2-2-自定义配置" class="headerlink" title="2.2.自定义配置"></a>2.2.自定义配置</h2><p>Feign可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p><p>下面以日志为例来演示如何自定义配置。</p><h3 id="2-2-1-配置文件方式"><a href="#2-2-1-配置文件方式" class="headerlink" title="2.2.1.配置文件方式"></a>2.2.1.配置文件方式</h3><p>基于配置文件修改feign的日志级别可以针对单个服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span>  <br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span> <br>      <span class="hljs-attr">userservice:</span> <span class="hljs-comment"># 针对某个微服务的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#  日志级别 </span><br></code></pre></td></tr></table></figure><p>也可以针对所有服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span>  <br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span> <br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#  日志级别 </span><br></code></pre></td></tr></table></figure><p>而日志的级别分为四种：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><h3 id="2-2-2-Java代码方式"><a href="#2-2-2-Java代码方式" class="headerlink" title="2.2.2.Java代码方式"></a>2.2.2.Java代码方式</h3><p>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfiguration</span>  &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.BASIC; <span class="hljs-comment">// 日志级别为BASIC</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> <br></code></pre></td></tr></table></figure><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> <br></code></pre></td></tr></table></figure><h2 id="2-3-Feign使用优化"><a href="#2-3-Feign使用优化" class="headerlink" title="2.3.Feign使用优化"></a>2.3.Feign使用优化</h2><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p><p>•URLConnection：默认实现，不支持连接池</p><p>•Apache HttpClient ：支持连接池</p><p>•OKHttp：支持连接池</p><p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p><p>这里我们用Apache的HttpClient来演示。</p><p>1）引入依赖</p><p>在order-service的pom文件中引入Apache的HttpClient依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--httpClient的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）配置连接池</p><p>在order-service的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># default全局的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span> <span class="hljs-comment"># 日志级别，BASIC就是基本的请求和响应信息</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对HttpClient的支持</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大的连接数</span><br>    <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 每个路径的最大连接数</span><br></code></pre></td></tr></table></figure><p>接下来，在FeignClientFactoryBean中的loadBalance方法中打断点：</p><p><img src="/../images/image-20210714185925910.png" alt="image-20210714185925910"></p><p>Debug方式启动order-service服务，可以看到这里的client，底层就是Apache HttpClient：</p><p><img src="/../images/image-20210714190041542.png" alt="image-20210714190041542"></p><p>总结，Feign的优化：</p><p>1.日志级别尽量用basic</p><p>2.使用HttpClient或OKHttp代替URLConnection</p><p>①  引入feign-httpClient依赖</p><p>②  配置文件开启httpClient功能，设置连接池参数</p><h2 id="2-4-最佳实践"><a href="#2-4-最佳实践" class="headerlink" title="2.4.最佳实践"></a>2.4.最佳实践</h2><p>所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。</p><p>自习观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：</p><p>feign客户端：</p><p><img src="/../images/image-20210714190542730-1710011019363.png" alt="image-20210714190542730"></p><p>UserController：</p><p><img src="/../images/image-20210714190528450-1710011019363.png" alt="image-20210714190528450"></p><p>有没有一种办法简化这种重复的代码编写呢？</p><h3 id="2-4-1-继承方式"><a href="#2-4-1-继承方式" class="headerlink" title="2.4.1.继承方式"></a>2.4.1.继承方式</h3><p>一样的代码可以通过继承来共享：</p><p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p><p>2）Feign客户端和Controller都集成改接口</p><p><img src="/../images/image-20210714190640857.png" alt="image-20210714190640857"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p></li></ul><h3 id="2-4-2-抽取方式"><a href="#2-4-2-抽取方式" class="headerlink" title="2.4.2.抽取方式"></a>2.4.2.抽取方式</h3><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="/../images/image-20210714214041796.png" alt="image-20210714214041796"></p><h3 id="2-4-3-实现基于抽取的最佳实践"><a href="#2-4-3-实现基于抽取的最佳实践" class="headerlink" title="2.4.3.实现基于抽取的最佳实践"></a>2.4.3.实现基于抽取的最佳实践</h3><h4 id="1）抽取"><a href="#1）抽取" class="headerlink" title="1）抽取"></a>1）抽取</h4><p>首先创建一个module，命名为feign-api：</p><p><img src="/../images/image-20210714204557771.png" alt="image-20210714204557771"></p><p>项目结构：</p><p><img src="/../images/image-20210714204656214.png" alt="image-20210714204656214"></p><p>在feign-api中然后引入feign的starter依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p><p><img src="/../images/image-20210714205221970.png" alt="image-20210714205221970"></p><h4 id="2）在order-service中使用feign-api"><a href="#2）在order-service中使用feign-api" class="headerlink" title="2）在order-service中使用feign-api"></a>2）在order-service中使用feign-api</h4><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p><p>在order-service的pom文件中中引入feign-api的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.itcast.demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p><h4 id="3）重启测试"><a href="#3）重启测试" class="headerlink" title="3）重启测试"></a>3）重启测试</h4><p>重启后，发现服务报错了：</p><p><img src="/../images/image-20210714205623048.png" alt="image-20210714205623048"></p><p>这是因为UserClient现在在cn.itcast.feign.clients包下，</p><p>而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。</p><h4 id="4）解决扫描包问题"><a href="#4）解决扫描包问题" class="headerlink" title="4）解决扫描包问题"></a>4）解决扫描包问题</h4><p>方式一：</p><p>指定Feign应该扫描的包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span><br></code></pre></td></tr></table></figure><p>方式二：</p><p>指定需要加载的Client接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span><br></code></pre></td></tr></table></figure><h1 id="3-Gateway服务网关"><a href="#3-Gateway服务网关" class="headerlink" title="3.Gateway服务网关"></a>3.Gateway服务网关</h1><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><h2 id="3-1-为什么需要网关"><a href="#3-1-为什么需要网关" class="headerlink" title="3.1.为什么需要网关"></a>3.1.为什么需要网关</h2><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><p><img src="/../images/image-20210714210131152.png" alt="image-20210714210131152"></p><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><h2 id="3-2-gateway快速入门"><a href="#3-2-gateway快速入门" class="headerlink" title="3.2.gateway快速入门"></a>3.2.gateway快速入门</h2><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p><ol><li>创建SpringBoot工程gateway，引入网关依赖</li><li>编写启动类</li><li>编写基础配置和路由规则</li><li>启动网关服务进行测试</li></ol><h3 id="1）创建gateway服务，引入依赖"><a href="#1）创建gateway服务，引入依赖" class="headerlink" title="1）创建gateway服务，引入依赖"></a>1）创建gateway服务，引入依赖</h3><p>创建服务：</p><p><img src="/../images/image-20210714210919458-1710011019363.png" alt="image-20210714210919458"></p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--网关--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--nacos服务发现依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2）编写启动类"><a href="#2）编写启动类" class="headerlink" title="2）编写启动类"></a>2）编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.gateway;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayApplication</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(GatewayApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3）编写基础配置和路由规则"><a href="#3）编写基础配置和路由规则" class="headerlink" title="3）编写基础配置和路由规则"></a>3）编写基础配置和路由规则</h3><p>创建application.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span> <span class="hljs-comment"># 网关端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos地址</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment"># 网关路由配置</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <span class="hljs-comment"># 路由id，自定义，只要唯一即可</span><br>          <span class="hljs-comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <span class="hljs-comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span><br></code></pre></td></tr></table></figure><p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p><h3 id="4）重启测试"><a href="#4）重启测试" class="headerlink" title="4）重启测试"></a>4）重启测试</h3><p>重启网关，访问<a href="http://localhost:10010/user/1%E6%97%B6%EF%BC%8C%E7%AC%A6%E5%90%88%60/user/**%60%E8%A7%84%E5%88%99%EF%BC%8C%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B0uri%EF%BC%9Ahttp://userservice/user/1%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BA%86%E7%BB%93%E6%9E%9C%EF%BC%9A">http://localhost:10010/user/1时，符合`/user/**`规则，请求转发到uri：http://userservice/user/1，得到了结果：</a></p><p><img src="/../images/image-20210714211908341-1710011019363.png" alt="image-20210714211908341"></p><h3 id="5）网关路由的流程图"><a href="#5）网关路由的流程图" class="headerlink" title="5）网关路由的流程图"></a>5）网关路由的流程图</h3><p>整个访问的流程如下：</p><p><img src="/../images/image-20210714211742956-1710011019363.png" alt="image-20210714211742956"></p><p>总结：</p><p>网关搭建步骤：</p><ol><li><p>创建项目，引入nacos服务发现和gateway依赖</p></li><li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p></li></ol><p>路由配置包括：</p><ol><li><p>路由id：路由的唯一标示</p></li><li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p></li><li><p>路由断言（predicates）：判断路由的规则，</p></li><li><p>路由过滤器（filters）：对请求或响应做处理</p></li></ol><p>接下来，就重点来学习路由断言和路由过滤器的详细知识</p><h2 id="3-3-断言工厂"><a href="#3-3-断言工厂" class="headerlink" title="3.3.断言工厂"></a>3.3.断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path=/user/**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between=2037-01-20T17:42:47.789-07:00[America/Denver],  2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者-  Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>我们只需要掌握Path这种路由工程就可以了。</p><h2 id="3-4-过滤器工厂"><a href="#3-4-过滤器工厂" class="headerlink" title="3.4.过滤器工厂"></a>3.4.过滤器工厂</h2><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="/../images/image-20210714212312871.png" alt="image-20210714212312871"></p><h3 id="3-4-1-路由过滤器的种类"><a href="#3-4-1-路由过滤器的种类" class="headerlink" title="3.4.1.路由过滤器的种类"></a>3.4.1.路由过滤器的种类</h3><p>Spring提供了31种不同的路由过滤器工厂。例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><h3 id="3-4-2-请求头过滤器"><a href="#3-4-2-请求头过滤器" class="headerlink" title="3.4.2.请求头过滤器"></a>3.4.2.请求头过滤器</h3><p>下面我们以AddRequestHeader 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!</p></blockquote><p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <br>        <span class="hljs-attr">predicates:</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <br>        <span class="hljs-attr">filters:</span> <span class="hljs-comment"># 过滤器</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span> <span class="hljs-comment"># 添加请求头</span><br></code></pre></td></tr></table></figure><p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p><h3 id="3-4-3-默认过滤器"><a href="#3-4-3-默认过滤器" class="headerlink" title="3.4.3.默认过滤器"></a>3.4.3.默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <br>        <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <br>        <span class="hljs-attr">predicates:</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>      <span class="hljs-attr">default-filters:</span> <span class="hljs-comment"># 默认过滤项</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,</span> <span class="hljs-string">Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span> <br></code></pre></td></tr></table></figure><h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>过滤器的作用是什么？</p><p>① 对路由的请求或响应做加工处理，比如添加请求头</p><p>② 配置在路由下的过滤器只对当前路由的请求生效</p><p>defaultFilters的作用是什么？</p><p>① 对所有路由都生效的过滤器</p><h2 id="3-5-全局过滤器"><a href="#3-5-全局过滤器" class="headerlink" title="3.5.全局过滤器"></a>3.5.全局过滤器</h2><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p><h3 id="3-5-1-全局过滤器作用"><a href="#3-5-1-全局过滤器作用" class="headerlink" title="3.5.1.全局过滤器作用"></a>3.5.1.全局过滤器作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p>定义方式是实现GlobalFilter接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  处理当前请求，有必要的话通过&#123;<span class="hljs-doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span><br><span class="hljs-comment">     */</span><br>    Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在filter中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h3 id="3-5-2-自定义全局过滤器"><a href="#3-5-2-自定义全局过滤器" class="headerlink" title="3.5.2.自定义全局过滤器"></a>3.5.2.自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li><p>参数中是否有authorization，</p></li><li><p>authorization参数值是否为admin</p></li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：</p><p>在gateway中定义一个过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.gateway.filters;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-meta">@Order(-1)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">// 1.获取请求参数</span><br>        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();<br>        <span class="hljs-comment">// 2.获取authorization参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> params.getFirst(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-comment">// 3.校验</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(auth)) &#123;<br>            <span class="hljs-comment">// 放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">// 4.拦截</span><br>        <span class="hljs-comment">// 4.1.禁止访问，设置状态码</span><br>        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);<br>        <span class="hljs-comment">// 4.2.结束处理</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-3-过滤器执行顺序"><a href="#3-5-3-过滤器执行顺序" class="headerlink" title="3.5.3.过滤器执行顺序"></a>3.5.3.过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="/../images/image-20210714214228409.png" alt="image-20210714214228409"></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><h2 id="3-6-跨域问题"><a href="#3-6-跨域问题" class="headerlink" title="3.6.跨域问题"></a>3.6.跨域问题</h2><h3 id="3-6-1-什么是跨域问题"><a href="#3-6-1-什么是跨域问题" class="headerlink" title="3.6.1.什么是跨域问题"></a>3.6.1.什么是跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li><p>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</p></li><li><p>域名相同，端口不同：localhost:8080和localhost8081</p></li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><p>解决方案：CORS，这个以前应该学习过，这里不再赘述了。不知道的小伙伴可以查看<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><h3 id="3-6-2-模拟跨域问题"><a href="#3-6-2-模拟跨域问题" class="headerlink" title="3.6.2.模拟跨域问题"></a>3.6.2.模拟跨域问题</h3><p>找到课前资料的页面文件：</p><p><img src="/../images/image-20210714215713563.png" alt="image-20210714215713563"></p><p>放入tomcat或者nginx这样的web服务器中，启动并访问。</p><p>可以在浏览器控制台看到下面的错误：</p><p><img src="/../images/image-20210714215832675.png" alt="image-20210714215832675"></p><p>从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p><h3 id="3-6-3-解决跨域问题"><a href="#3-6-3-解决跨域问题" class="headerlink" title="3.6.3.解决跨域问题"></a>3.6.3.解决跨域问题</h3><p>在gateway服务的application.yml文件中，添加下面的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-comment"># 。。。</span><br>      <span class="hljs-attr">globalcors:</span> <span class="hljs-comment"># 全局的跨域处理</span><br>        <span class="hljs-attr">add-to-simple-url-handler-mapping:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 解决options请求被拦截问题</span><br>        <span class="hljs-attr">corsConfigurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-comment"># 允许哪些网站的跨域请求 </span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://localhost:8090&quot;</span><br>            <span class="hljs-attr">allowedMethods:</span> <span class="hljs-comment"># 允许的跨域ajax的请求方式</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;GET&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;POST&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;DELETE&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;PUT&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;OPTIONS&quot;</span><br>            <span class="hljs-attr">allowedHeaders:</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment"># 允许在请求中携带的头信息</span><br>            <span class="hljs-attr">allowCredentials:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否允许携带cookie</span><br>            <span class="hljs-attr">maxAge:</span> <span class="hljs-number">360000</span> <span class="hljs-comment"># 这次跨域检测的有效期</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册中心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty学习（四）</title>
    <link href="/2024/03/10/Netty%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2024/03/10/Netty%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="四-优化与源码"><a href="#四-优化与源码" class="headerlink" title="四. 优化与源码"></a>四. 优化与源码</h1><h2 id="1-优化"><a href="#1-优化" class="headerlink" title="1. 优化"></a>1. 优化</h2><h3 id="1-1-扩展序列化算法"><a href="#1-1-扩展序列化算法" class="headerlink" title="1.1 扩展序列化算法"></a>1.1 扩展序列化算法</h3><p>序列化，反序列化主要用在消息正文的转换上</p><ul><li>序列化时，需要将 Java 对象变为要传输的数据（可以是 byte[]，或 json 等，最终都需要变成 byte[]）</li><li>反序列化时，需要将传入的正文数据还原成 Java 对象，便于处理</li></ul><p>目前的代码仅支持 Java 自带的序列化，反序列化机制，核心代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反序列化</span><br><span class="hljs-type">byte</span>[] body = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bodyLength];<br>byteByf.readBytes(body);<br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(body));<br><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) in.readObject();<br>message.setSequenceId(sequenceId);<br><br><span class="hljs-comment">// 序列化</span><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(out).writeObject(message);<br><span class="hljs-type">byte</span>[] bytes = out.toByteArray();<br></code></pre></td></tr></table></figure><p>为了支持更多序列化算法，抽象一个 Serializer 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Serializer</span> &#123;<br><br>    <span class="hljs-comment">// 反序列化方法</span><br>    &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(Class&lt;T&gt; clazz, <span class="hljs-type">byte</span>[] bytes)</span>;<br><br>    <span class="hljs-comment">// 序列化方法</span><br>    &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T object);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>提供两个实现，我这里直接将实现加入了枚举类 Serializer.Algorithm 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">SerializerAlgorithm</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializer</span> &#123;<br><span class="hljs-comment">// Java 实现</span><br>    Java &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(Class&lt;T&gt; clazz, <span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> in.readObject();<br>                <span class="hljs-keyword">return</span> (T) object;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;SerializerAlgorithm.Java 反序列化错误&quot;</span>, e);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T object) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(out).writeObject(object);<br>                <span class="hljs-keyword">return</span> out.toByteArray();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;SerializerAlgorithm.Java 序列化错误&quot;</span>, e);<br>            &#125;<br>        &#125;<br>    &#125;, <br>    <span class="hljs-comment">// Json 实现(引入了 Gson 依赖)</span><br>    Json &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(Class&lt;T&gt; clazz, <span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>().fromJson(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, StandardCharsets.UTF_8), clazz);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T object) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>().toJson(object).getBytes(StandardCharsets.UTF_8);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 需要从协议的字节中得到是哪种序列化算法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SerializerAlgorithm <span class="hljs-title function_">getByInt</span><span class="hljs-params">(<span class="hljs-type">int</span> type)</span> &#123;<br>        SerializerAlgorithm[] array = SerializerAlgorithm.values();<br>        <span class="hljs-keyword">if</span> (type &lt; <span class="hljs-number">0</span> || type &gt; array.length - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;超过 SerializerAlgorithm 范围&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> array[type];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>增加配置类和配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br>    <span class="hljs-keyword">static</span> Properties properties;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Config.class.getResourceAsStream(<span class="hljs-string">&quot;/application.properties&quot;</span>)) &#123;<br>            properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            properties.load(in);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInInitializerError</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getServerPort</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;server.port&quot;</span>);<br>        <span class="hljs-keyword">if</span>(value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">8080</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Integer.parseInt(value);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Serializer.Algorithm <span class="hljs-title function_">getSerializerAlgorithm</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;serializer.algorithm&quot;</span>);<br>        <span class="hljs-keyword">if</span>(value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Serializer.Algorithm.Java;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Serializer.Algorithm.valueOf(value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">serializer.algorithm</span>=<span class="hljs-string">Json</span><br></code></pre></td></tr></table></figure><p>修改编解码器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageCodecSharable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessageToMessageCodec</span>&lt;ByteBuf, Message&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>        <span class="hljs-comment">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;);<br>        <span class="hljs-comment">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(Config.getSerializerAlgorithm().ordinal());<br>        <span class="hljs-comment">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class="hljs-comment">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class="hljs-comment">// 无意义，对齐填充</span><br>        out.writeByte(<span class="hljs-number">0xff</span>);<br>        <span class="hljs-comment">// 6. 获取内容的字节数组</span><br>        <span class="hljs-type">byte</span>[] bytes = Config.getSerializerAlgorithm().serialize(msg);<br>        <span class="hljs-comment">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class="hljs-comment">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>        outList.add(out);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">magicNum</span> <span class="hljs-operator">=</span> in.readInt();<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> in.readByte();<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">serializerAlgorithm</span> <span class="hljs-operator">=</span> in.readByte(); <span class="hljs-comment">// 0 或 1</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">messageType</span> <span class="hljs-operator">=</span> in.readByte(); <span class="hljs-comment">// 0,1,2...</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sequenceId</span> <span class="hljs-operator">=</span> in.readInt();<br>        in.readByte();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> in.readInt();<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>        in.readBytes(bytes, <span class="hljs-number">0</span>, length);<br><br>        <span class="hljs-comment">// 找到反序列化算法</span><br>        Serializer.<span class="hljs-type">Algorithm</span> <span class="hljs-variable">algorithm</span> <span class="hljs-operator">=</span> Serializer.Algorithm.values()[serializerAlgorithm];<br>        <span class="hljs-comment">// 确定具体消息类型</span><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Message</span>&gt; messageClass = Message.getMessageClass(messageType);<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> algorithm.deserialize(messageClass, bytes);<br><span class="hljs-comment">//        log.debug(&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;, magicNum, version, serializerType, messageType, sequenceId, length);</span><br><span class="hljs-comment">//        log.debug(&quot;&#123;&#125;&quot;, message);</span><br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中确定具体消息类型，可以根据 <code>消息类型字节</code> 获取到对应的 <code>消息 class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据消息类型字节，获得对应的消息 class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> messageType 消息类型字节</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 消息 class</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Message</span>&gt; getMessageClass(<span class="hljs-type">int</span> messageType) &#123;<br>        <span class="hljs-keyword">return</span> messageClasses.get(messageType);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sequenceId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> messageType;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMessageType</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LoginRequestMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LoginResponseMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ChatRequestMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ChatResponseMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupCreateRequestMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupCreateResponseMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupJoinRequestMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupJoinResponseMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupQuitRequestMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupQuitResponseMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupChatRequestMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupChatResponseMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupMembersRequestMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">GroupMembersResponseMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PingMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">14</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PongMessage</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Integer, Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Message</span>&gt;&gt; messageClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        messageClasses.put(LoginRequestMessage, LoginRequestMessage.class);<br>        messageClasses.put(LoginResponseMessage, LoginResponseMessage.class);<br>        messageClasses.put(ChatRequestMessage, ChatRequestMessage.class);<br>        messageClasses.put(ChatResponseMessage, ChatResponseMessage.class);<br>        messageClasses.put(GroupCreateRequestMessage, GroupCreateRequestMessage.class);<br>        messageClasses.put(GroupCreateResponseMessage, GroupCreateResponseMessage.class);<br>        messageClasses.put(GroupJoinRequestMessage, GroupJoinRequestMessage.class);<br>        messageClasses.put(GroupJoinResponseMessage, GroupJoinResponseMessage.class);<br>        messageClasses.put(GroupQuitRequestMessage, GroupQuitRequestMessage.class);<br>        messageClasses.put(GroupQuitResponseMessage, GroupQuitResponseMessage.class);<br>        messageClasses.put(GroupChatRequestMessage, GroupChatRequestMessage.class);<br>        messageClasses.put(GroupChatResponseMessage, GroupChatResponseMessage.class);<br>        messageClasses.put(GroupMembersRequestMessage, GroupMembersRequestMessage.class);<br>        messageClasses.put(GroupMembersResponseMessage, GroupMembersResponseMessage.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-参数调优"><a href="#1-2-参数调优" class="headerlink" title="1.2 参数调优"></a>1.2 参数调优</h3><h4 id="1）CONNECT-TIMEOUT-MILLIS"><a href="#1）CONNECT-TIMEOUT-MILLIS" class="headerlink" title="1）CONNECT_TIMEOUT_MILLIS"></a>1）CONNECT_TIMEOUT_MILLIS</h4><ul><li><p>属于 SocketChannal 参数</p></li><li><p>用在客户端建立连接时，如果在指定毫秒内无法连接，会抛出 timeout 异常</p></li><li><p>SO_TIMEOUT 主要用在阻塞 IO，阻塞 IO 中 accept，read 等都是无限等待的，如果不希望永远阻塞，使用它调整超时时间</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestConnectionTimeout</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>                    .group(group)<br>                    .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="hljs-number">300</span>)<br>                    .channel(NioSocketChannel.class)<br>                    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>());<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br>            future.sync().channel().closeFuture().sync(); <span class="hljs-comment">// 断点1</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            log.debug(<span class="hljs-string">&quot;timeout&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外源码部分 <code>io.netty.channel.nio.AbstractNioChannel.AbstractNioUnsafe#connect</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-keyword">final</span> SocketAddress remoteAddress, <span class="hljs-keyword">final</span> SocketAddress localAddress, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// Schedule connect timeout.</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">connectTimeoutMillis</span> <span class="hljs-operator">=</span> config().getConnectTimeoutMillis();<br>    <span class="hljs-keyword">if</span> (connectTimeoutMillis &gt; <span class="hljs-number">0</span>) &#123;<br>        connectTimeoutFuture = eventLoop().schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;                <br>                <span class="hljs-type">ChannelPromise</span> <span class="hljs-variable">connectPromise</span> <span class="hljs-operator">=</span> AbstractNioChannel.<span class="hljs-built_in">this</span>.connectPromise;<br>                <span class="hljs-type">ConnectTimeoutException</span> <span class="hljs-variable">cause</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectTimeoutException</span>(<span class="hljs-string">&quot;connection timed out: &quot;</span> + remoteAddress); <span class="hljs-comment">// 断点2</span><br>                <span class="hljs-keyword">if</span> (connectPromise != <span class="hljs-literal">null</span> &amp;&amp; connectPromise.tryFailure(cause)) &#123;<br>                    close(voidPromise());<br>                &#125;<br>            &#125;<br>        &#125;, connectTimeoutMillis, TimeUnit.MILLISECONDS);<br>    &#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）SO-BACKLOG"><a href="#2）SO-BACKLOG" class="headerlink" title="2）SO_BACKLOG"></a>2）SO_BACKLOG</h4><ul><li>属于 ServerSocketChannal 参数</li></ul><pre><code class=" mermaid">sequenceDiagramparticipant c as clientparticipant s as serverparticipant sq as syns queueparticipant aq as accept queues -&gt;&gt; s : bind()s -&gt;&gt; s : listen()c -&gt;&gt; c : connect()c -&gt;&gt; s : 1. SYNNote left of c : SYN_SENDs -&gt;&gt; sq : putNote right of s : SYN_RCVDs -&gt;&gt; c : 2. SYN + ACKNote left of c : ESTABLISHEDc -&gt;&gt; s : 3. ACKsq -&gt;&gt; aq : putNote right of s : ESTABLISHEDaq --&gt;&gt; s : s -&gt;&gt; s : accept()</code></pre><ol><li>第一次握手，client 发送 SYN 到 server，状态修改为 SYN_SEND，server 收到，状态改变为 SYN_REVD，并将该请求放入 sync queue 队列</li><li>第二次握手，server 回复 SYN + ACK 给 client，client 收到，状态改变为 ESTABLISHED，并发送 ACK 给 server</li><li>第三次握手，server 收到 ACK，状态改变为 ESTABLISHED，将该请求从 sync queue 放入 accept queue</li></ol><p>其中</p><ul><li><p>在 linux 2.2 之前，backlog 大小包括了两个队列的大小，在 2.2 之后，分别用下面两个参数来控制</p></li><li><p>sync queue - 半连接队列</p><ul><li>大小通过 /proc/sys/net/ipv4/tcp_max_syn_backlog 指定，在 <code>syncookies</code> 启用的情况下，逻辑上没有最大值限制，这个设置便被忽略</li></ul></li><li><p>accept queue - 全连接队列</p><ul><li>其大小通过 /proc/sys/net/core/somaxconn 指定，在使用 listen 函数时，内核会根据传入的 backlog 参数与系统参数，取二者的较小值</li><li>如果 accpet queue 队列满了，server 将发送一个拒绝连接的错误信息到 client</li></ul></li></ul><p>netty 中</p><p>可以通过  option(ChannelOption.SO_BACKLOG, 值) 来设置大小</p><p>可以通过下面源码查看默认大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultServerSocketChannelConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultChannelConfig</span><br>                                              <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServerSocketChannelConfig</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">backlog</span> <span class="hljs-operator">=</span> NetUtil.SOMAXCONN;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>课堂调试关键断点为：<code>io.netty.channel.nio.NioEventLoop#processSelectedKey</code></p><p>oio 中更容易说明，不用 debug 模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">accept</span> <span class="hljs-operator">=</span> ss.accept();<br>        System.out.println(accept);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端启动 4 个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>();<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()+<span class="hljs-string">&quot; connecting...&quot;</span>);<br>            s.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8888</span>),<span class="hljs-number">1000</span>);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()+<span class="hljs-string">&quot; connected...&quot;</span>);<br>            s.getOutputStream().write(<span class="hljs-number">1</span>);<br>            System.in.read();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()+<span class="hljs-string">&quot; connecting timeout...&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第 1，2，3 个客户端都打印，但除了第一个处于 accpet 外，其它两个都处于 accept queue 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Tue Apr <span class="hljs-number">21</span> <span class="hljs-number">20</span>:<span class="hljs-number">30</span>:<span class="hljs-number">28</span> CST <span class="hljs-number">2020</span> connecting...<br>Tue Apr <span class="hljs-number">21</span> <span class="hljs-number">20</span>:<span class="hljs-number">30</span>:<span class="hljs-number">28</span> CST <span class="hljs-number">2020</span> connected...<br></code></pre></td></tr></table></figure><p>第 4 个客户端连接时</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Tue</span> Apr <span class="hljs-number">21</span> <span class="hljs-number">20</span>:<span class="hljs-number">53</span>:<span class="hljs-number">58</span> CST <span class="hljs-number">2020</span> connecting...<br><span class="hljs-attribute">Tue</span> Apr <span class="hljs-number">21</span> <span class="hljs-number">20</span>:<span class="hljs-number">53</span>:<span class="hljs-number">59</span> CST <span class="hljs-number">2020</span> connecting timeout...<br><span class="hljs-attribute">java</span>.net.SocketTimeoutException: connect timed out<br></code></pre></td></tr></table></figure><h4 id="3）ulimit-n"><a href="#3）ulimit-n" class="headerlink" title="3）ulimit -n"></a>3）ulimit -n</h4><ul><li>属于操作系统参数</li></ul><h4 id="4）TCP-NODELAY"><a href="#4）TCP-NODELAY" class="headerlink" title="4）TCP_NODELAY"></a>4）TCP_NODELAY</h4><ul><li>属于 SocketChannal 参数</li></ul><h4 id="5）SO-SNDBUF-amp-SO-RCVBUF"><a href="#5）SO-SNDBUF-amp-SO-RCVBUF" class="headerlink" title="5）SO_SNDBUF &amp; SO_RCVBUF"></a>5）SO_SNDBUF &amp; SO_RCVBUF</h4><ul><li>SO_SNDBUF 属于 SocketChannal 参数</li><li>SO_RCVBUF 既可用于 SocketChannal 参数，也可以用于 ServerSocketChannal 参数（建议设置到 ServerSocketChannal 上）</li></ul><h4 id="6）ALLOCATOR"><a href="#6）ALLOCATOR" class="headerlink" title="6）ALLOCATOR"></a>6）ALLOCATOR</h4><ul><li>属于 SocketChannal 参数</li><li>用来分配 ByteBuf， ctx.alloc()</li></ul><h4 id="7）RCVBUF-ALLOCATOR"><a href="#7）RCVBUF-ALLOCATOR" class="headerlink" title="7）RCVBUF_ALLOCATOR"></a>7）RCVBUF_ALLOCATOR</h4><ul><li>属于 SocketChannal 参数</li><li>控制 netty 接收缓冲区大小</li><li>负责入站数据的分配，决定入站缓冲区的大小（并可动态调整），统一采用 direct 直接内存，具体池化还是非池化由 allocator 决定</li></ul><h3 id="1-3-RPC-框架"><a href="#1-3-RPC-框架" class="headerlink" title="1.3 RPC 框架"></a>1.3 RPC 框架</h3><h4 id="1）准备工作"><a href="#1）准备工作" class="headerlink" title="1）准备工作"></a>1）准备工作</h4><p>这些代码可以认为是现成的，无需从头编写练习</p><p>为了简化起见，在原来聊天项目的基础上新增 Rpc 请求和响应消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">// 省略旧的代码</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RPC_MESSAGE_TYPE_REQUEST</span> <span class="hljs-operator">=</span> <span class="hljs-number">101</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>  <span class="hljs-variable">RPC_MESSAGE_TYPE_RESPONSE</span> <span class="hljs-operator">=</span> <span class="hljs-number">102</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>        messageClasses.put(RPC_MESSAGE_TYPE_REQUEST, RpcRequestMessage.class);<br>        messageClasses.put(RPC_MESSAGE_TYPE_RESPONSE, RpcResponseMessage.class);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>请求消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@ToString(callSuper = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcRequestMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Message</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调用的接口全限定名，服务端根据它找到实现</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String interfaceName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 调用接口中的方法名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String methodName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法返回类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; returnType;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法参数类型数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Class[] parameterTypes;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法参数值数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object[] parameterValue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RpcRequestMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> sequenceId, String interfaceName, String methodName, Class&lt;?&gt; returnType, Class[] parameterTypes, Object[] parameterValue)</span> &#123;<br>        <span class="hljs-built_in">super</span>.setSequenceId(sequenceId);<br>        <span class="hljs-built_in">this</span>.interfaceName = interfaceName;<br>        <span class="hljs-built_in">this</span>.methodName = methodName;<br>        <span class="hljs-built_in">this</span>.returnType = returnType;<br>        <span class="hljs-built_in">this</span>.parameterTypes = parameterTypes;<br>        <span class="hljs-built_in">this</span>.parameterValue = parameterValue;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMessageType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> RPC_MESSAGE_TYPE_REQUEST;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString(callSuper = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcResponseMessage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Message</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Object returnValue;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异常值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Exception exceptionValue;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMessageType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> RPC_MESSAGE_TYPE_RESPONSE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器架子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">LoggingHandler</span> <span class="hljs-variable">LOGGING_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class="hljs-type">MessageCodecSharable</span> <span class="hljs-variable">MESSAGE_CODEC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodecSharable</span>();<br>        <br>        <span class="hljs-comment">// rpc 请求消息处理器，待实现</span><br>        <span class="hljs-type">RpcRequestMessageHandler</span> <span class="hljs-variable">RPC_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcRequestMessageHandler</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-number">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;server error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端架子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">LoggingHandler</span> <span class="hljs-variable">LOGGING_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class="hljs-type">MessageCodecSharable</span> <span class="hljs-variable">MESSAGE_CODEC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodecSharable</span>();<br>        <br>        <span class="hljs-comment">// rpc 响应消息处理器，待实现</span><br>        <span class="hljs-type">RpcResponseMessageHandler</span> <span class="hljs-variable">RPC_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcResponseMessageHandler</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器端的 service 获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServicesFactory</span> &#123;<br><br>    <span class="hljs-keyword">static</span> Properties properties;<br>    <span class="hljs-keyword">static</span> Map&lt;Class&lt;?&gt;, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> Config.class.getResourceAsStream(<span class="hljs-string">&quot;/application.properties&quot;</span>)) &#123;<br>            properties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            properties.load(in);<br>            Set&lt;String&gt; names = properties.stringPropertyNames();<br>            <span class="hljs-keyword">for</span> (String name : names) &#123;<br>                <span class="hljs-keyword">if</span> (name.endsWith(<span class="hljs-string">&quot;Service&quot;</span>)) &#123;<br>                    Class&lt;?&gt; interfaceClass = Class.forName(name);<br>                    Class&lt;?&gt; instanceClass = Class.forName(properties.getProperty(name));<br>                    map.put(interfaceClass, instanceClass.newInstance());<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException | InstantiationException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExceptionInInitializerError</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getService</span><span class="hljs-params">(Class&lt;T&gt; interfaceClass)</span> &#123;<br>        <span class="hljs-keyword">return</span> (T) map.get(interfaceClass);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关配置 application.properties</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">serializer.algorithm=Json<br>cn<span class="hljs-selector-class">.itcast</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.service</span>.HelloService=cn<span class="hljs-selector-class">.itcast</span><span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.service</span>.HelloServiceImpl<br></code></pre></td></tr></table></figure><h4 id="2）服务器-handler"><a href="#2）服务器-handler" class="headerlink" title="2）服务器 handler"></a>2）服务器 handler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcRequestMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;RpcRequestMessage&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, RpcRequestMessage message)</span> &#123;<br>        <span class="hljs-type">RpcResponseMessage</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcResponseMessage</span>();<br>        response.setSequenceId(message.getSequenceId());<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取真正的实现对象</span><br>            <span class="hljs-type">HelloService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> (HelloService)<br>                    ServicesFactory.getService(Class.forName(message.getInterfaceName()));<br>            <br>            <span class="hljs-comment">// 获取要调用的方法</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> service.getClass().getMethod(message.getMethodName(), message.getParameterTypes());<br>            <br>            <span class="hljs-comment">// 调用方法</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> method.invoke(service, message.getParameterValue());<br>            <span class="hljs-comment">// 调用成功</span><br>            response.setReturnValue(invoke);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">// 调用异常</span><br>            response.setExceptionValue(e);<br>        &#125;<br>        <span class="hljs-comment">// 返回结果</span><br>        ctx.writeAndFlush(response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3）客户端代码第一版"><a href="#3）客户端代码第一版" class="headerlink" title="3）客户端代码第一版"></a>3）客户端代码第一版</h4><p>只发消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">LoggingHandler</span> <span class="hljs-variable">LOGGING_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class="hljs-type">MessageCodecSharable</span> <span class="hljs-variable">MESSAGE_CODEC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodecSharable</span>();<br>        <span class="hljs-type">RpcResponseMessageHandler</span> <span class="hljs-variable">RPC_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcResponseMessageHandler</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(RPC_HANDLER);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>).sync().channel();<br><br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> channel.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcRequestMessage</span>(<br>                    <span class="hljs-number">1</span>,<br>                    <span class="hljs-string">&quot;cn.itcast.server.service.HelloService&quot;</span>,<br>                    <span class="hljs-string">&quot;sayHello&quot;</span>,<br>                    String.class,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;张三&quot;</span>&#125;<br>            )).addListener(promise -&gt; &#123;<br>                <span class="hljs-keyword">if</span> (!promise.isSuccess()) &#123;<br>                    <span class="hljs-type">Throwable</span> <span class="hljs-variable">cause</span> <span class="hljs-operator">=</span> promise.cause();<br>                    log.error(<span class="hljs-string">&quot;error&quot;</span>, cause);<br>                &#125;<br>            &#125;);<br><br>            channel.closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4）客户端-handler-第一版"><a href="#4）客户端-handler-第一版" class="headerlink" title="4）客户端 handler 第一版"></a>4）客户端 handler 第一版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcResponseMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;RpcResponseMessage&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, RpcResponseMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5）客户端代码-第二版"><a href="#5）客户端代码-第二版" class="headerlink" title="5）客户端代码 第二版"></a>5）客户端代码 第二版</h4><p>包括 channel 管理，代理，接收结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcClientManager</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HelloService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> getProxyService(HelloService.class);<br>        System.out.println(service.sayHello(<span class="hljs-string">&quot;zhangsan&quot;</span>));<br><span class="hljs-comment">//        System.out.println(service.sayHello(&quot;lisi&quot;));</span><br><span class="hljs-comment">//        System.out.println(service.sayHello(&quot;wangwu&quot;));</span><br>    &#125;<br><br>    <span class="hljs-comment">// 创建代理类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getProxyService</span><span class="hljs-params">(Class&lt;T&gt; serviceClass)</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> serviceClass.getClassLoader();<br>        Class&lt;?&gt;[] interfaces = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;serviceClass&#125;;<br>        <span class="hljs-comment">//                                                            sayHello  &quot;张三&quot;</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(loader, interfaces, (proxy, method, args) -&gt; &#123;<br>            <span class="hljs-comment">// 1. 将方法调用转换为 消息对象</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">sequenceId</span> <span class="hljs-operator">=</span> SequenceIdGenerator.nextId();<br>            <span class="hljs-type">RpcRequestMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcRequestMessage</span>(<br>                    sequenceId,<br>                    serviceClass.getName(),<br>                    method.getName(),<br>                    method.getReturnType(),<br>                    method.getParameterTypes(),<br>                    args<br>            );<br>            <span class="hljs-comment">// 2. 将消息对象发送出去</span><br>            getChannel().writeAndFlush(msg);<br><br>            <span class="hljs-comment">// 3. 准备一个空 Promise 对象，来接收结果             指定 promise 对象异步接收结果线程</span><br>            DefaultPromise&lt;Object&gt; promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPromise</span>&lt;&gt;(getChannel().eventLoop());<br>            RpcResponseMessageHandler.PROMISES.put(sequenceId, promise);<br><br><span class="hljs-comment">//            promise.addListener(future -&gt; &#123;</span><br><span class="hljs-comment">//                // 线程</span><br><span class="hljs-comment">//            &#125;);</span><br><br>            <span class="hljs-comment">// 4. 等待 promise 结果</span><br>            promise.await();<br>            <span class="hljs-keyword">if</span>(promise.isSuccess()) &#123;<br>                <span class="hljs-comment">// 调用正常</span><br>                <span class="hljs-keyword">return</span> promise.getNow();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 调用失败</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(promise.cause());<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> (T) o;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">LOCK</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-comment">// 获取唯一的 channel 对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Channel <span class="hljs-title function_">getChannel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> channel;<br>        &#125;<br>        <span class="hljs-keyword">synchronized</span> (LOCK) &#123; <span class="hljs-comment">//  t2</span><br>            <span class="hljs-keyword">if</span> (channel != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// t1</span><br>                <span class="hljs-keyword">return</span> channel;<br>            &#125;<br>            initChannel();<br>            <span class="hljs-keyword">return</span> channel;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化 channel 方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">LoggingHandler</span> <span class="hljs-variable">LOGGING_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class="hljs-type">MessageCodecSharable</span> <span class="hljs-variable">MESSAGE_CODEC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodecSharable</span>();<br>        <span class="hljs-type">RpcResponseMessageHandler</span> <span class="hljs-variable">RPC_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcResponseMessageHandler</span>();<br>        <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>        bootstrap.channel(NioSocketChannel.class);<br>        bootstrap.group(group);<br>        bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcotolFrameDecoder</span>());<br>                ch.pipeline().addLast(LOGGING_HANDLER);<br>                ch.pipeline().addLast(MESSAGE_CODEC);<br>                ch.pipeline().addLast(RPC_HANDLER);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">try</span> &#123;<br>            channel = bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>).sync().channel();<br>            channel.closeFuture().addListener(future -&gt; &#123;<br>                group.shutdownGracefully();<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6）客户端-handler-第二版"><a href="#6）客户端-handler-第二版" class="headerlink" title="6）客户端 handler 第二版"></a>6）客户端 handler 第二版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcResponseMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;RpcResponseMessage&gt; &#123;<br><br>    <span class="hljs-comment">//                       序号      用来接收结果的 promise 对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Integer, Promise&lt;Object&gt;&gt; PROMISES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, RpcResponseMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, msg);<br>        <span class="hljs-comment">// 拿到空的 promise</span><br>        Promise&lt;Object&gt; promise = PROMISES.remove(msg.getSequenceId());<br>        <span class="hljs-keyword">if</span> (promise != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> msg.getReturnValue();<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">exceptionValue</span> <span class="hljs-operator">=</span> msg.getExceptionValue();<br>            <span class="hljs-keyword">if</span>(exceptionValue != <span class="hljs-literal">null</span>) &#123;<br>                promise.setFailure(exceptionValue);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                promise.setSuccess(returnValue);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2. 源码分析"></a>2. 源码分析</h2><h3 id="2-1-启动剖析"><a href="#2-1-启动剖析" class="headerlink" title="2.1 启动剖析"></a>2.1 启动剖析</h3><p>我们就来看看 netty 中对下面的代码是怎样进行处理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1 netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector</span><br><span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open(); <br><br><span class="hljs-comment">//2 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config</span><br><span class="hljs-type">NioServerSocketChannel</span> <span class="hljs-variable">attachment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioServerSocketChannel</span>();<br><br><span class="hljs-comment">//3 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel</span><br><span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">serverSocketChannel</span> <span class="hljs-operator">=</span> ServerSocketChannel.open(); <br>serverSocketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">//4 启动 nio boss 线程执行接下来的操作</span><br><br><span class="hljs-comment">//5 注册（仅关联 selector 和 NioServerSocketChannel），未关注事件</span><br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectionKey</span> <span class="hljs-operator">=</span> serverSocketChannel.register(selector, <span class="hljs-number">0</span>, attachment);<br><br><span class="hljs-comment">//6 head -&gt; 初始化器 -&gt; ServerBootstrapAcceptor -&gt; tail，初始化器是一次性的，只为添加 acceptor</span><br><br><span class="hljs-comment">//7 绑定端口</span><br>serverSocketChannel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br><br><span class="hljs-comment">//8 触发 channel active 事件，在 head 中关注 op_accept 事件</span><br>selectionKey.interestOps(SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure><p>入口 <code>io.netty.bootstrap.ServerBootstrap#bind</code></p><p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#doBind</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> ChannelFuture <span class="hljs-title function_">doBind</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SocketAddress localAddress)</span> &#123;<br><span class="hljs-comment">// 1. 执行初始化和注册 regFuture 会由 initAndRegister 设置其是否完成，从而回调 3.2 处代码</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">regFuture</span> <span class="hljs-operator">=</span> initAndRegister();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> regFuture.channel();<br>    <span class="hljs-keyword">if</span> (regFuture.cause() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> regFuture;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 因为是 initAndRegister 异步执行，需要分两种情况来看，调试时也需要通过 suspend 断点类型加以区分</span><br>    <span class="hljs-comment">// 2.1 如果已经完成</span><br>    <span class="hljs-keyword">if</span> (regFuture.isDone()) &#123;<br>        <span class="hljs-type">ChannelPromise</span> <span class="hljs-variable">promise</span> <span class="hljs-operator">=</span> channel.newPromise();<br>        <span class="hljs-comment">// 3.1 立刻调用 doBind0</span><br>        doBind0(regFuture, channel, localAddress, promise);<br>        <span class="hljs-keyword">return</span> promise;<br>    &#125; <br>    <span class="hljs-comment">// 2.2 还没有完成</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">PendingRegistrationPromise</span> <span class="hljs-variable">promise</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PendingRegistrationPromise</span>(channel);<br>        <span class="hljs-comment">// 3.2 回调 doBind0</span><br>        regFuture.addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelFutureListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationComplete</span><span class="hljs-params">(ChannelFuture future)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-type">Throwable</span> <span class="hljs-variable">cause</span> <span class="hljs-operator">=</span> future.cause();<br>                <span class="hljs-keyword">if</span> (cause != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 处理异常...</span><br>                    promise.setFailure(cause);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    promise.registered();<br><span class="hljs-comment">// 3. 由注册线程去执行 doBind0</span><br>                    doBind0(regFuture, channel, localAddress, promise);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> promise;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#initAndRegister</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> ChannelFuture <span class="hljs-title function_">initAndRegister</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        channel = channelFactory.newChannel();<br>        <span class="hljs-comment">// 1.1 初始化 - 做的事就是添加一个初始化器 ChannelInitializer</span><br>        init(channel);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-comment">// 处理异常...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultChannelPromise</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FailedChannel</span>(), GlobalEventExecutor.INSTANCE).setFailure(t);<br>    &#125;<br><br>    <span class="hljs-comment">// 1.2 注册 - 做的事就是将原生 channel 注册到 selector 上</span><br>    <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">regFuture</span> <span class="hljs-operator">=</span> config().group().register(channel);<br>    <span class="hljs-keyword">if</span> (regFuture.cause() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 处理异常...</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> regFuture;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键代码 <code>io.netty.bootstrap.ServerBootstrap#init</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这里 channel 实际上是 NioServerSocketChannel</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(Channel channel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">final</span> Map&lt;ChannelOption&lt;?&gt;, Object&gt; options = options0();<br>    <span class="hljs-keyword">synchronized</span> (options) &#123;<br>        setChannelOptions(channel, options, logger);<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> Map&lt;AttributeKey&lt;?&gt;, Object&gt; attrs = attrs0();<br>    <span class="hljs-keyword">synchronized</span> (attrs) &#123;<br>        <span class="hljs-keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: attrs.entrySet()) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            AttributeKey&lt;Object&gt; key = (AttributeKey&lt;Object&gt;) e.getKey();<br>            channel.attr(key).set(e.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> channel.pipeline();<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">EventLoopGroup</span> <span class="hljs-variable">currentChildGroup</span> <span class="hljs-operator">=</span> childGroup;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelHandler</span> <span class="hljs-variable">currentChildHandler</span> <span class="hljs-operator">=</span> childHandler;<br>    <span class="hljs-keyword">final</span> Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] currentChildOptions;<br>    <span class="hljs-keyword">final</span> Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] currentChildAttrs;<br>    <span class="hljs-keyword">synchronized</span> (childOptions) &#123;<br>        currentChildOptions = childOptions.entrySet().toArray(newOptionArray(<span class="hljs-number">0</span>));<br>    &#125;<br>    <span class="hljs-keyword">synchronized</span> (childAttrs) &#123;<br>        currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(<span class="hljs-number">0</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 为 NioServerSocketChannel 添加初始化器</span><br>    p.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Channel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> ch.pipeline();<br>            <span class="hljs-type">ChannelHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> config.handler();<br>            <span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br>                pipeline.addLast(handler);<br>            &#125;<br><br>            <span class="hljs-comment">// 初始化器的职责是将 ServerBootstrapAcceptor 加入至 NioServerSocketChannel</span><br>            ch.eventLoop().execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    pipeline.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrapAcceptor</span>(<br>                            ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>关键代码 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#register</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(EventLoop eventLoop, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> &#123;<br>    <span class="hljs-comment">// 一些检查，略...</span><br><br>    AbstractChannel.<span class="hljs-built_in">this</span>.eventLoop = eventLoop;<br><br>    <span class="hljs-keyword">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 首次执行 execute 方法时，会启动 nio 线程，之后注册等操作在 nio 线程上执行</span><br>            <span class="hljs-comment">// 因为只有一个 NioServerSocketChannel 因此，也只会有一个 boss nio 线程</span><br>            <span class="hljs-comment">// 这行代码完成的事实是 main -&gt; nio boss 线程的切换</span><br>            eventLoop.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            <span class="hljs-comment">// 日志记录...</span><br>            closeForcibly();<br>            closeFuture.setClosed();<br>            safeSetFailure(promise, t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register0</span><span class="hljs-params">(ChannelPromise promise)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">firstRegistration</span> <span class="hljs-operator">=</span> neverRegistered;<br>        <span class="hljs-comment">// 1.2.1 原生的 nio channel 绑定到 selector 上，注意此时没有注册 selector 关注事件，附件为 NioServerSocketChannel</span><br>        doRegister();<br>        neverRegistered = <span class="hljs-literal">false</span>;<br>        registered = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// 1.2.2 执行 NioServerSocketChannel 初始化器的 initChannel</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br><br>        <span class="hljs-comment">// 回调 3.2 io.netty.bootstrap.AbstractBootstrap#doBind0</span><br>        safeSetSuccess(promise);<br>        pipeline.fireChannelRegistered();<br>        <br>        <span class="hljs-comment">// 对应 server socket channel 还未绑定，isActive 为 false</span><br>        <span class="hljs-keyword">if</span> (isActive()) &#123;<br>            <span class="hljs-keyword">if</span> (firstRegistration) &#123;<br>                pipeline.fireChannelActive();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (config().isAutoRead()) &#123;<br>                beginRead();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-comment">// Close the channel directly to avoid FD leak.</span><br>        closeForcibly();<br>        closeFuture.setClosed();<br>        safeSetFailure(promise, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键代码 <code>io.netty.channel.ChannelInitializer#initChannel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (initMap.add(ctx)) &#123; <span class="hljs-comment">// Guard against re-entrance.</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1.2.2.1 执行初始化</span><br>            initChannel((C) ctx.channel());<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable cause) &#123;<br>            exceptionCaught(ctx, cause);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 1.2.2.2 移除初始化器</span><br>            <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> ctx.pipeline();<br>            <span class="hljs-keyword">if</span> (pipeline.context(<span class="hljs-built_in">this</span>) != <span class="hljs-literal">null</span>) &#123;<br>                pipeline.remove(<span class="hljs-built_in">this</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键代码 <code>io.netty.bootstrap.AbstractBootstrap#doBind0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3.1 或 3.2 执行 doBind0</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBind0</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-keyword">final</span> ChannelFuture regFuture, <span class="hljs-keyword">final</span> Channel channel,</span><br><span class="hljs-params">        <span class="hljs-keyword">final</span> SocketAddress localAddress, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> &#123;<br><br>    channel.eventLoop().execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (regFuture.isSuccess()) &#123;<br>                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                promise.setFailure(regFuture.cause());<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>关键代码 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#bind</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SocketAddress localAddress, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> &#123;<br>    assertEventLoop();<br><br>    <span class="hljs-keyword">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (Boolean.TRUE.equals(config().getOption(ChannelOption.SO_BROADCAST)) &amp;&amp;<br>        localAddress <span class="hljs-keyword">instanceof</span> InetSocketAddress &amp;&amp;<br>        !((InetSocketAddress) localAddress).getAddress().isAnyLocalAddress() &amp;&amp;<br>        !PlatformDependent.isWindows() &amp;&amp; !PlatformDependent.maybeSuperUser()) &#123;<br>        <span class="hljs-comment">// 记录日志...</span><br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">wasActive</span> <span class="hljs-operator">=</span> isActive();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 3.3 执行端口绑定</span><br>        doBind(localAddress);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        safeSetFailure(promise, t);<br>        closeIfClosed();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!wasActive &amp;&amp; isActive()) &#123;<br>        invokeLater(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">// 3.4 触发 active 事件</span><br>                pipeline.fireChannelActive();<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    safeSetSuccess(promise);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.3 关键代码 <code>io.netty.channel.socket.nio.NioServerSocketChannel#doBind</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBind</span><span class="hljs-params">(SocketAddress localAddress)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (PlatformDependent.javaVersion() &gt;= <span class="hljs-number">7</span>) &#123;<br>        javaChannel().bind(localAddress, config.getBacklog());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        javaChannel().socket().bind(localAddress, config.getBacklog());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.4 关键代码 <code>io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> &#123;<br>    ctx.fireChannelActive();<br><span class="hljs-comment">// 触发 read (NioServerSocketChannel 上的 read 不是读取数据，只是为了触发 channel 的事件注册)</span><br>    readIfIsAutoRead();<br>&#125;<br></code></pre></td></tr></table></figure><p>关键代码 <code>io.netty.channel.nio.AbstractNioChannel#doBeginRead</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBeginRead</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectionKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.selectionKey;<br>    <span class="hljs-keyword">if</span> (!selectionKey.isValid()) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    readPending = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">interestOps</span> <span class="hljs-operator">=</span> selectionKey.interestOps();<br>    <span class="hljs-comment">// readInterestOp 取值是 16，在 NioServerSocketChannel 创建时初始化好，代表关注 accept 事件</span><br>    <span class="hljs-keyword">if</span> ((interestOps &amp; readInterestOp) == <span class="hljs-number">0</span>) &#123;<br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-NioEventLoop-剖析"><a href="#2-2-NioEventLoop-剖析" class="headerlink" title="2.2 NioEventLoop 剖析"></a>2.2 NioEventLoop 剖析</h3><p>NioEventLoop 线程不仅要处理 IO 事件，还要处理 Task（包括普通任务和定时任务），</p><p>提交任务代码 <code>io.netty.util.concurrent.SingleThreadEventExecutor#execute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable task)</span> &#123;<br>    <span class="hljs-keyword">if</span> (task == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;task&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">inEventLoop</span> <span class="hljs-operator">=</span> inEventLoop();<br>    <span class="hljs-comment">// 添加任务，其中队列使用了 jctools 提供的 mpsc 无锁队列</span><br>    addTask(task);<br>    <span class="hljs-keyword">if</span> (!inEventLoop) &#123;<br>        <span class="hljs-comment">// inEventLoop 如果为 false 表示由其它线程来调用 execute，即首次调用，这时需要向 eventLoop 提交首个任务，启动死循环，会执行到下面的 doStartThread</span><br>        startThread();<br>        <span class="hljs-keyword">if</span> (isShutdown()) &#123;<br>            <span class="hljs-comment">// 如果已经 shutdown，做拒绝逻辑，代码略...</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!addTaskWakesUp &amp;&amp; wakesUpForTask(task)) &#123;<br>        <span class="hljs-comment">// 如果线程由于 IO select 阻塞了，添加的任务的线程需要负责唤醒 NioEventLoop 线程</span><br>        wakeup(inEventLoop);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>唤醒 select 阻塞线程<code>io.netty.channel.nio.NioEventLoop#wakeup</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wakeup</span><span class="hljs-params">(<span class="hljs-type">boolean</span> inEventLoop)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!inEventLoop &amp;&amp; wakenUp.compareAndSet(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) &#123;<br>        selector.wakeup();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动 EventLoop 主循环 <code>io.netty.util.concurrent.SingleThreadEventExecutor#doStartThread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doStartThread</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">assert</span> thread == <span class="hljs-literal">null</span>;<br>    executor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 将线程池的当前线程保存在成员变量中，以便后续使用</span><br>            thread = Thread.currentThread();<br>            <span class="hljs-keyword">if</span> (interrupted) &#123;<br>                thread.interrupt();<br>            &#125;<br><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            updateLastExecutionTime();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 调用外部类 SingleThreadEventExecutor 的 run 方法，进入死循环，run 方法见下</span><br>                SingleThreadEventExecutor.<span class="hljs-built_in">this</span>.run();<br>                success = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                logger.warn(<span class="hljs-string">&quot;Unexpected exception from an event executor: &quot;</span>, t);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 清理工作，代码略...</span><br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>io.netty.channel.nio.NioEventLoop#run</code> 主要任务是执行死循环，不断看有没有新任务，有没有 IO 事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// calculateStrategy 的逻辑如下：</span><br>                <span class="hljs-comment">// 有任务，会执行一次 selectNow，清除上一次的 wakeup 结果，无论有没有 IO 事件，都会跳过 switch</span><br>                <span class="hljs-comment">// 没有任务，会匹配 SelectStrategy.SELECT，看是否应当阻塞</span><br>                <span class="hljs-keyword">switch</span> (selectStrategy.calculateStrategy(selectNowSupplier, hasTasks())) &#123;<br>                    <span class="hljs-keyword">case</span> SelectStrategy.CONTINUE:<br>                        <span class="hljs-keyword">continue</span>;<br><br>                    <span class="hljs-keyword">case</span> SelectStrategy.BUSY_WAIT:<br><br>                    <span class="hljs-keyword">case</span> SelectStrategy.SELECT:<br>                        <span class="hljs-comment">// 因为 IO 线程和提交任务线程都有可能执行 wakeup，而 wakeup 属于比较昂贵的操作，因此使用了一个原子布尔对象 wakenUp，它取值为 true 时，表示该由当前线程唤醒</span><br>                        <span class="hljs-comment">// 进行 select 阻塞，并设置唤醒状态为 false</span><br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">oldWakenUp</span> <span class="hljs-operator">=</span> wakenUp.getAndSet(<span class="hljs-literal">false</span>);<br>                        <br>                        <span class="hljs-comment">// 如果在这个位置，非 EventLoop 线程抢先将 wakenUp 置为 true，并 wakeup</span><br>                        <span class="hljs-comment">// 下面的 select 方法不会阻塞</span><br>                        <span class="hljs-comment">// 等 runAllTasks 处理完成后，到再循环进来这个阶段新增的任务会不会及时执行呢?</span><br>                        <span class="hljs-comment">// 因为 oldWakenUp 为 true，因此下面的 select 方法就会阻塞，直到超时</span><br>                        <span class="hljs-comment">// 才能执行，让 select 方法无谓阻塞</span><br>                        select(oldWakenUp);<br><br>                        <span class="hljs-keyword">if</span> (wakenUp.get()) &#123;<br>                            selector.wakeup();<br>                        &#125;<br>                    <span class="hljs-keyword">default</span>:<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                rebuildSelector0();<br>                handleLoopException(e);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            cancelledKeys = <span class="hljs-number">0</span>;<br>            needsToSelectAgain = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// ioRatio 默认是 50</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ioRatio</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.ioRatio;<br>            <span class="hljs-keyword">if</span> (ioRatio == <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    processSelectedKeys();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// ioRatio 为 100 时，总是运行完所有非 IO 任务</span><br>                    runAllTasks();<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;                <br>                <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">ioStartTime</span> <span class="hljs-operator">=</span> System.nanoTime();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    processSelectedKeys();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 记录 io 事件处理耗时</span><br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">ioTime</span> <span class="hljs-operator">=</span> System.nanoTime() - ioStartTime;<br>                    <span class="hljs-comment">// 运行非 IO 任务，一旦超时会退出 runAllTasks</span><br>                    runAllTasks(ioTime * (<span class="hljs-number">100</span> - ioRatio) / ioRatio);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            handleLoopException(t);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (isShuttingDown()) &#123;<br>                closeAll();<br>                <span class="hljs-keyword">if</span> (confirmShutdown()) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            handleLoopException(t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="⚠️-注意"><a href="#⚠️-注意" class="headerlink" title="⚠️ 注意"></a>⚠️ 注意</h4><blockquote><p>这里有个费解的地方就是 wakeup，它既可以由提交任务的线程来调用（比较好理解），也可以由 EventLoop 线程来调用（比较费解），这里要知道 wakeup 方法的效果：</p><ul><li>由非 EventLoop 线程调用，会唤醒当前在执行 select 阻塞的 EventLoop 线程</li><li>由 EventLoop 自己调用，会本次的 wakeup 会取消下一次的 select 操作</li></ul></blockquote><p>参考下图</p><img src="../../../../../编程笔记/Java后端路线/Netty/Netty网络编程/Netty教程源码资料/讲义/img/0032.png"  /><p><code>io.netty.channel.nio.NioEventLoop#select</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-type">boolean</span> oldWakenUp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.selector;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">selectCnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">currentTimeNanos</span> <span class="hljs-operator">=</span> System.nanoTime();<br>        <span class="hljs-comment">// 计算等待时间</span><br>        <span class="hljs-comment">// * 没有 scheduledTask，超时时间为 1s</span><br>        <span class="hljs-comment">// * 有 scheduledTask，超时时间为 `下一个定时任务执行时间 - 当前时间`</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">selectDeadLineNanos</span> <span class="hljs-operator">=</span> currentTimeNanos + delayNanos(currentTimeNanos);<br><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">timeoutMillis</span> <span class="hljs-operator">=</span> (selectDeadLineNanos - currentTimeNanos + <span class="hljs-number">500000L</span>) / <span class="hljs-number">1000000L</span>;<br>            <span class="hljs-comment">// 如果超时，退出循环</span><br>            <span class="hljs-keyword">if</span> (timeoutMillis &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (selectCnt == <span class="hljs-number">0</span>) &#123;<br>                    selector.selectNow();<br>                    selectCnt = <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果期间又有 task 退出循环，如果没这个判断，那么任务就会等到下次 select 超时时才能被执行</span><br>            <span class="hljs-comment">// wakenUp.compareAndSet(false, true) 是让非 NioEventLoop 不必再执行 wakeup</span><br>            <span class="hljs-keyword">if</span> (hasTasks() &amp;&amp; wakenUp.compareAndSet(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) &#123;<br>                selector.selectNow();<br>                selectCnt = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// select 有限时阻塞</span><br>            <span class="hljs-comment">// 注意 nio 有 bug，当 bug 出现时，select 方法即使没有时间发生，也不会阻塞住，导致不断空轮询，cpu 占用 100%</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">selectedKeys</span> <span class="hljs-operator">=</span> selector.select(timeoutMillis);<br>            <span class="hljs-comment">// 计数加 1</span><br>            selectCnt ++;<br><br>            <span class="hljs-comment">// 醒来后，如果有 IO 事件、或是由非 EventLoop 线程唤醒，或者有任务，退出循环</span><br>            <span class="hljs-keyword">if</span> (selectedKeys != <span class="hljs-number">0</span> || oldWakenUp || wakenUp.get() || hasTasks() || hasScheduledTasks()) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted()) &#123;<br>               <span class="hljs-comment">// 线程被打断，退出循环</span><br>                <span class="hljs-comment">// 记录日志</span><br>                selectCnt = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.nanoTime();<br>            <span class="hljs-keyword">if</span> (time - TimeUnit.MILLISECONDS.toNanos(timeoutMillis) &gt;= currentTimeNanos) &#123;<br>                <span class="hljs-comment">// 如果超时，计数重置为 1，下次循环就会 break</span><br>                selectCnt = <span class="hljs-number">1</span>;<br>            &#125; <br>            <span class="hljs-comment">// 计数超过阈值，由 io.netty.selectorAutoRebuildThreshold 指定，默认 512</span><br>            <span class="hljs-comment">// 这是为了解决 nio 空轮询 bug</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; <span class="hljs-number">0</span> &amp;&amp;<br>                    selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;<br>                <span class="hljs-comment">// 重建 selector</span><br>                selector = selectRebuildSelector(selectCnt);<br>                selectCnt = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            currentTimeNanos = time;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (selectCnt &gt; MIN_PREMATURE_SELECTOR_RETURNS) &#123;<br>            <span class="hljs-comment">// 记录日志</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (CancelledKeyException e) &#123;<br>        <span class="hljs-comment">// 记录日志</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>处理 keys <code>io.netty.channel.nio.NioEventLoop#processSelectedKeys</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSelectedKeys</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (selectedKeys != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 通过反射将 Selector 实现类中的就绪事件集合替换为 SelectedSelectionKeySet </span><br>        <span class="hljs-comment">// SelectedSelectionKeySet 底层为数组实现，可以提高遍历性能（原本为 HashSet）</span><br>        processSelectedKeysOptimized();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        processSelectedKeysPlain(selector.selectedKeys());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>io.netty.channel.nio.NioEventLoop#processSelectedKey</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSelectedKey</span><span class="hljs-params">(SelectionKey k, AbstractNioChannel ch)</span> &#123;<br>    <span class="hljs-keyword">final</span> AbstractNioChannel.<span class="hljs-type">NioUnsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> ch.unsafe();<br>    <span class="hljs-comment">// 当 key 取消或关闭时会导致这个 key 无效</span><br>    <span class="hljs-keyword">if</span> (!k.isValid()) &#123;<br>        <span class="hljs-comment">// 无效时处理...</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readyOps</span> <span class="hljs-operator">=</span> k.readyOps();<br>        <span class="hljs-comment">// 连接事件</span><br>        <span class="hljs-keyword">if</span> ((readyOps &amp; SelectionKey.OP_CONNECT) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ops</span> <span class="hljs-operator">=</span> k.interestOps();<br>            ops &amp;= ~SelectionKey.OP_CONNECT;<br>            k.interestOps(ops);<br><br>            unsafe.finishConnect();<br>        &#125;<br><br>        <span class="hljs-comment">// 可写事件</span><br>        <span class="hljs-keyword">if</span> ((readyOps &amp; SelectionKey.OP_WRITE) != <span class="hljs-number">0</span>) &#123;<br>            ch.unsafe().forceFlush();<br>        &#125;<br><br>        <span class="hljs-comment">// 可读或可接入事件</span><br>        <span class="hljs-keyword">if</span> ((readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != <span class="hljs-number">0</span> || readyOps == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 如果是可接入 io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read</span><br>            <span class="hljs-comment">// 如果是可读 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read</span><br>            unsafe.read();<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (CancelledKeyException ignored) &#123;<br>        unsafe.close(unsafe.voidPromise());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-accept-剖析"><a href="#2-3-accept-剖析" class="headerlink" title="2.3 accept 剖析"></a>2.3 accept 剖析</h3><p>nio 中如下代码，在 netty 中的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1 阻塞直到事件发生</span><br>selector.select();<br><br>Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br><span class="hljs-keyword">while</span> (iter.hasNext()) &#123;    <br>    <span class="hljs-comment">//2 拿到一个事件</span><br>    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iter.next();<br>    <br>    <span class="hljs-comment">//3 如果是 accept 事件</span><br>    <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>        <br>        <span class="hljs-comment">//4 执行 accept</span><br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> serverSocketChannel.accept();<br>        channel.configureBlocking(<span class="hljs-literal">false</span>);<br>        <br>        <span class="hljs-comment">//5 关注 read 事件</span><br>        channel.register(selector, SelectionKey.OP_READ);<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>先来看可接入事件处理（accept）</p><p><code>io.netty.channel.nio.AbstractNioMessageChannel.NioMessageUnsafe#read</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">assert</span> <span class="hljs-title function_">eventLoop</span><span class="hljs-params">()</span>.inEventLoop();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> config();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> pipeline();    <br>    <span class="hljs-keyword">final</span> RecvByteBufAllocator.<span class="hljs-type">Handle</span> <span class="hljs-variable">allocHandle</span> <span class="hljs-operator">=</span> unsafe().recvBufAllocHandle();<br>    allocHandle.reset(config);<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">closed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">do</span> &#123;<br><span class="hljs-comment">// doReadMessages 中执行了 accept 并创建 NioSocketChannel 作为消息放入 readBuf</span><br>                <span class="hljs-comment">// readBuf 是一个 ArrayList 用来缓存消息</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">localRead</span> <span class="hljs-operator">=</span> doReadMessages(readBuf);<br>                <span class="hljs-keyword">if</span> (localRead == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (localRead &lt; <span class="hljs-number">0</span>) &#123;<br>                    closed = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><span class="hljs-comment">// localRead 为 1，就一条消息，即接收一个客户端连接</span><br>                allocHandle.incMessagesRead(localRead);<br>            &#125; <span class="hljs-keyword">while</span> (allocHandle.continueReading());<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            exception = t;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> readBuf.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i ++) &#123;<br>            readPending = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理</span><br>            <span class="hljs-comment">// io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</span><br>            pipeline.fireChannelRead(readBuf.get(i));<br>        &#125;<br>        readBuf.clear();<br>        allocHandle.readComplete();<br>        pipeline.fireChannelReadComplete();<br><br>        <span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br>            closed = closeOnReadError(exception);<br><br>            pipeline.fireExceptionCaught(exception);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (closed) &#123;<br>            inputShutdown = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (isOpen()) &#123;<br>                close(voidPromise());<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键代码 <code>io.netty.bootstrap.ServerBootstrap.ServerBootstrapAcceptor#channelRead</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>    <span class="hljs-comment">// 这时的 msg 是 NioSocketChannel</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Channel</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> (Channel) msg;<br><br>    <span class="hljs-comment">// NioSocketChannel 添加  childHandler 即初始化器</span><br>    child.pipeline().addLast(childHandler);<br><br>    <span class="hljs-comment">// 设置选项</span><br>    setChannelOptions(child, childOptions, logger);<br><br>    <span class="hljs-keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;<br>        child.attr((AttributeKey&lt;Object&gt;) e.getKey()).set(e.getValue());<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 注册 NioSocketChannel 到 nio worker 线程，接下来的处理也移交至 nio worker 线程</span><br>        childGroup.register(child).addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelFutureListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationComplete</span><span class="hljs-params">(ChannelFuture future)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-keyword">if</span> (!future.isSuccess()) &#123;<br>                    forceClose(child, future.cause());<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        forceClose(child, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>又回到了熟悉的 <code>io.netty.channel.AbstractChannel.AbstractUnsafe#register</code>  方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(EventLoop eventLoop, <span class="hljs-keyword">final</span> ChannelPromise promise)</span> &#123;<br>    <span class="hljs-comment">// 一些检查，略...</span><br><br>    AbstractChannel.<span class="hljs-built_in">this</span>.eventLoop = eventLoop;<br><br>    <span class="hljs-keyword">if</span> (eventLoop.inEventLoop()) &#123;<br>        register0(promise);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 这行代码完成的事实是 nio boss -&gt; nio worker 线程的切换</span><br>            eventLoop.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    register0(promise);<br>                &#125;<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            <span class="hljs-comment">// 日志记录...</span><br>            closeForcibly();<br>            closeFuture.setClosed();<br>            safeSetFailure(promise, t);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>io.netty.channel.AbstractChannel.AbstractUnsafe#register0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register0</span><span class="hljs-params">(ChannelPromise promise)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (!promise.setUncancellable() || !ensureOpen(promise)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">firstRegistration</span> <span class="hljs-operator">=</span> neverRegistered;<br>        doRegister();<br>        neverRegistered = <span class="hljs-literal">false</span>;<br>        registered = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">// 执行初始化器，执行前 pipeline 中只有 head -&gt; 初始化器 -&gt; tail</span><br>        pipeline.invokeHandlerAddedIfNeeded();<br>        <span class="hljs-comment">// 执行后就是 head -&gt; logging handler -&gt; my handler -&gt; tail</span><br><br>        safeSetSuccess(promise);<br>        pipeline.fireChannelRegistered();<br>        <br>        <span class="hljs-keyword">if</span> (isActive()) &#123;<br>            <span class="hljs-keyword">if</span> (firstRegistration) &#123;<br>                <span class="hljs-comment">// 触发 pipeline 上 active 事件</span><br>                pipeline.fireChannelActive();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (config().isAutoRead()) &#123;<br>                beginRead();<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        closeForcibly();<br>        closeFuture.setClosed();<br>        safeSetFailure(promise, t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到了熟悉的代码 <code>io.netty.channel.DefaultChannelPipeline.HeadContext#channelActive</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> &#123;<br>    ctx.fireChannelActive();<br><span class="hljs-comment">// 触发 read (NioSocketChannel 这里 read，只是为了触发 channel 的事件注册，还未涉及数据读取)</span><br>    readIfIsAutoRead();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>io.netty.channel.nio.AbstractNioChannel#doBeginRead</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doBeginRead</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// Channel.read() or ChannelHandlerContext.read() was called</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">selectionKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.selectionKey;<br>    <span class="hljs-keyword">if</span> (!selectionKey.isValid()) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    readPending = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 这时候 interestOps 是 0</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">interestOps</span> <span class="hljs-operator">=</span> selectionKey.interestOps();<br>    <span class="hljs-keyword">if</span> ((interestOps &amp; readInterestOp) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 关注 read 事件</span><br>        selectionKey.interestOps(interestOps | readInterestOp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-read-剖析"><a href="#2-4-read-剖析" class="headerlink" title="2.4 read 剖析"></a>2.4 read 剖析</h3><p>再来看可读事件 <code>io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read</code>，注意发送的数据未必能够一次读完，因此会触发多次 nio read 事件，一次事件内会触发多次 pipeline read，一次事件会触发一次 pipeline read complete</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> config();<br>    <span class="hljs-keyword">if</span> (shouldBreakReadReady(config)) &#123;<br>        clearReadPending();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ChannelPipeline</span> <span class="hljs-variable">pipeline</span> <span class="hljs-operator">=</span> pipeline();<br>    <span class="hljs-comment">// io.netty.allocator.type 决定 allocator 的实现</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ByteBufAllocator</span> <span class="hljs-variable">allocator</span> <span class="hljs-operator">=</span> config.getAllocator();<br>    <span class="hljs-comment">// 用来分配 byteBuf，确定单次读取大小</span><br>    <span class="hljs-keyword">final</span> RecvByteBufAllocator.<span class="hljs-type">Handle</span> <span class="hljs-variable">allocHandle</span> <span class="hljs-operator">=</span> recvBufAllocHandle();<br>    allocHandle.reset(config);<br><br>    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">close</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            byteBuf = allocHandle.allocate(allocator);<br>            <span class="hljs-comment">// 读取</span><br>            allocHandle.lastBytesRead(doReadBytes(byteBuf));<br>            <span class="hljs-keyword">if</span> (allocHandle.lastBytesRead() &lt;= <span class="hljs-number">0</span>) &#123;<br>                byteBuf.release();<br>                byteBuf = <span class="hljs-literal">null</span>;<br>                close = allocHandle.lastBytesRead() &lt; <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (close) &#123;<br>                    readPending = <span class="hljs-literal">false</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            allocHandle.incMessagesRead(<span class="hljs-number">1</span>);<br>            readPending = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// 触发 read 事件，让 pipeline 上的 handler 处理，这时是处理 NioSocketChannel 上的 handler</span><br>            pipeline.fireChannelRead(byteBuf);<br>            byteBuf = <span class="hljs-literal">null</span>;<br>        &#125; <br>        <span class="hljs-comment">// 是否要继续循环</span><br>        <span class="hljs-keyword">while</span> (allocHandle.continueReading());<br><br>        allocHandle.readComplete();<br>        <span class="hljs-comment">// 触发 read complete 事件</span><br>        pipeline.fireChannelReadComplete();<br><br>        <span class="hljs-keyword">if</span> (close) &#123;<br>            closeOnRead(pipeline);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        handleReadException(pipeline, byteBuf, t, close, allocHandle);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!readPending &amp;&amp; !config.isAutoRead()) &#123;<br>            removeReadOp();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>io.netty.channel.DefaultMaxMessagesRecvByteBufAllocator.MaxMessageHandle#continueReading(io.netty.util.UncheckedBooleanSupplier)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">continueReading</span><span class="hljs-params">(UncheckedBooleanSupplier maybeMoreDataSupplier)</span> &#123;<br>    <span class="hljs-keyword">return</span> <br>           <span class="hljs-comment">// 一般为 true</span><br>           config.isAutoRead() &amp;&amp;<br>           <span class="hljs-comment">// respectMaybeMoreData 默认为 true</span><br>           <span class="hljs-comment">// maybeMoreDataSupplier 的逻辑是如果预期读取字节与实际读取字节相等，返回 true</span><br>           (!respectMaybeMoreData || maybeMoreDataSupplier.get()) &amp;&amp;<br>           <span class="hljs-comment">// 小于最大次数，maxMessagePerRead 默认 16</span><br>           totalMessages &lt; maxMessagePerRead &amp;&amp;<br>           <span class="hljs-comment">// 实际读到了数据</span><br>           totalBytesRead &gt; <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty学习（三）</title>
    <link href="/2024/03/10/Netty%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2024/03/10/Netty%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="三-Netty-进阶"><a href="#三-Netty-进阶" class="headerlink" title="三. Netty 进阶"></a>三. Netty 进阶</h1><h2 id="1-粘包与半包"><a href="#1-粘包与半包" class="headerlink" title="1. 粘包与半包"></a>1. 粘包与半包</h2><h3 id="1-1-粘包现象"><a href="#1-1-粘包现象" class="headerlink" title="1.1 粘包现象"></a>1.1 粘包现象</h3><p>服务端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldServer</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldServer.class);<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.debug(<span class="hljs-string">&quot;connected &#123;&#125;&quot;</span>, ctx.channel());<br>                            <span class="hljs-built_in">super</span>.channelActive(ctx);<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.debug(<span class="hljs-string">&quot;disconnect &#123;&#125;&quot;</span>, ctx.channel());<br>                            <span class="hljs-built_in">super</span>.channelInactive(ctx);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-number">8080</span>);<br>            log.debug(<span class="hljs-string">&quot;&#123;&#125; binding...&quot;</span>, channelFuture.channel());<br>            channelFuture.sync();<br>            log.debug(<span class="hljs-string">&quot;&#123;&#125; bound...&quot;</span>, channelFuture.channel());<br>            channelFuture.channel().closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;server error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>            log.debug(<span class="hljs-string">&quot;stoped&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloWorldServer</span>().start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端代码希望发送 10 个消息，每个消息是 16 字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldClient</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    log.debug(<span class="hljs-string">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.debug(<span class="hljs-string">&quot;sending...&quot;</span>);<br>                            <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                                <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                                buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;);<br>                                ctx.writeAndFlush(buffer);<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器端的某次输出，可以看到一次就接收了 160 个字节，而非分 10 次接收</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tap">08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5] binding...<br>08:24:46 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x81e0fda5, L:/0:0:0:0:0:0:0:0:8080] bound...<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] REGISTERED<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] ACTIVE<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177]<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ: 160B<br>         +-------------------------------------------------+<br>         | <span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000010|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000020|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000030|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000040|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000050|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000060|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000070|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000080|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000090|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>+--------+-------------------------------------------------+----------------+<br>08:24:55 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x94132411, L:/127.0.0.1:8080 - R:/127.0.0.1:58177] READ COMPLETE<br></code></pre></td></tr></table></figure><h3 id="1-2-半包现象"><a href="#1-2-半包现象" class="headerlink" title="1.2 半包现象"></a>1.2 半包现象</h3><p>客户端代码希望发送 1 个消息，这个消息是 160 字节，代码改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;);<br>&#125;<br>ctx.writeAndFlush(buffer);<br></code></pre></td></tr></table></figure><p>为现象明显，服务端修改一下接收缓冲区，其它代码不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">serverBootstrap.option(ChannelOption.SO_RCVBUF, <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>服务器端的某次输出，可以看到接收的消息被分为两节，第一次 20 字节，第二次 140 字节</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs tap">08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84] binding...<br>08:43:49 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0x4d6c6a84, L:/0:0:0:0:0:0:0:0:8080] bound...<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] REGISTERED<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] ACTIVE<br>08:44:23 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221]<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 20B<br>         +-------------------------------------------------+<br>         | <span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f |................|<br>|00000010|<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03                                     |....            |<br>+--------+-------------------------------------------------+----------------+<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ: 140B<br>         +-------------------------------------------------+<br>         | <span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03 |................|<br>|00000010|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03 |................|<br>|00000020|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03 |................|<br>|00000030|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03 |................|<br>|00000040|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03 |................|<br>|00000050|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03 |................|<br>|00000060|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03 |................|<br>|00000070|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f<span class="hljs-number"> 00 </span>01<span class="hljs-number"> 02 </span>03 |................|<br>|00000080|<span class="hljs-number"> 04 </span>05<span class="hljs-number"> 06 </span>07<span class="hljs-number"> 08 </span>09 0a 0b 0c 0d 0e 0f             |............    |<br>+--------+-------------------------------------------------+----------------+<br>08:44:24 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x1719abf7, L:/127.0.0.1:8080 - R:/127.0.0.1:59221] READ COMPLETE<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>serverBootstrap.option(ChannelOption.SO_RCVBUF, 10) 影响的底层接收缓冲区（即滑动窗口）大小，仅决定了 netty 读取的最小单位，netty 实际每次读取的一般是它的整数倍</p></blockquote><h3 id="1-3-现象分析"><a href="#1-3-现象分析" class="headerlink" title="1.3 现象分析"></a>1.3 现象分析</h3><p>粘包</p><ul><li>现象，发送 abc def，接收 abcdef</li><li>原因<ul><li>应用层：接收方 ByteBuf 设置太大（Netty 默认 1024）</li><li>滑动窗口：假设发送方 256 bytes 表示一个完整报文，但由于接收方处理不及时且窗口大小足够大，这 256 bytes 字节就会缓冲在接收方的滑动窗口中，当滑动窗口中缓冲了多个报文就会粘包</li><li>Nagle 算法：会造成粘包</li></ul></li></ul><p>半包</p><ul><li>现象，发送 abcdef，接收 abc def</li><li>原因<ul><li>应用层：接收方 ByteBuf 小于实际发送数据量</li><li>滑动窗口：假设接收方的窗口只剩了 128 bytes，发送方的报文大小是 256 bytes，这时放不下了，只能先发送前 128 bytes，等待 ack 后才能发送剩余部分，这就造成了半包</li><li>MSS 限制：当发送的数据超过 MSS 限制后，会将数据切分发送，就会造成半包</li></ul></li></ul><p>本质是因为 TCP 是流式协议，消息无边界</p><blockquote><p>滑动窗口</p><ul><li><p>TCP 以一个段（segment）为单位，每发送一个段就需要进行一次确认应答（ack）处理，但如果这么做，缺点是包的往返时间越长性能就越差</p><p>  <img src="/../images/0049.png"></p></li></ul><ul><li><p>为了解决此问题，引入了窗口概念，窗口大小即决定了无需等待应答而可以继续发送的数据最大值</p><p>  <img src="/../images/0051.png"></p></li><li><p>窗口实际就起到一个缓冲区的作用，同时也能起到流量控制的作用</p><ul><li>图中深色的部分即要发送的数据，高亮的部分即窗口</li><li>窗口内的数据才允许被发送，当应答未到达前，窗口必须停止滑动</li><li>如果 1001~2000 这个段的数据 ack 回来了，窗口就可以向前滑动</li><li>接收方也会维护一个窗口，只有落在窗口内的数据才能允许接收</li></ul></li></ul></blockquote><blockquote><p> MSS 限制</p><ul><li><p>链路层对一次能够发送的最大数据有限制，这个限制称之为 MTU（maximum transmission unit），不同的链路设备的 MTU 值也有所不同，例如</p></li><li><p>以太网的 MTU 是 1500</p></li><li><p>FDDI（光纤分布式数据接口）的 MTU 是 4352</p></li><li><p>本地回环地址的 MTU 是 65535 - 本地测试不走网卡</p></li><li><p>MSS 是最大段长度（maximum segment size），它是 MTU 刨去 tcp 头和 ip 头后剩余能够作为数据传输的字节数</p></li><li><p>ipv4 tcp 头占用 20 bytes，ip 头占用 20 bytes，因此以太网 MSS 的值为 1500 - 40 = 1460</p></li><li><p>TCP 在传递大量数据时，会按照 MSS 大小将数据进行分割发送</p></li><li><p>MSS 的值在三次握手时通知对方自己 MSS 的值，然后在两者之间选择一个小值作为 MSS</p></li></ul>  <img src="../../../../../编程笔记/Java后端路线/Netty/Netty网络编程/Netty教程源码资料/讲义/img/0031.jpg" style="zoom:50%;" /></blockquote><blockquote><p>Nagle 算法</p><ul><li>即使发送一个字节，也需要加入 tcp 头和 ip 头，也就是总字节数会使用 41 bytes，非常不经济。因此为了提高网络利用率，tcp 希望尽可能发送足够大的数据，这就是 Nagle 算法产生的缘由</li><li>该算法是指发送端即使还有应该发送的数据，但如果这部分数据很少的话，则进行延迟发送<ul><li>如果 SO_SNDBUF 的数据达到 MSS，则需要发送</li><li>如果 SO_SNDBUF 中含有 FIN（表示需要连接关闭）这时将剩余数据发送，再关闭</li><li>如果 TCP_NODELAY = true，则需要发送</li><li>已发送的数据都收到 ack 时，则需要发送</li><li>上述条件不满足，但发生超时（一般为 200ms）则需要发送</li><li>除上述情况，延迟发送</li></ul></li></ul></blockquote><h3 id="1-4-解决方案"><a href="#1-4-解决方案" class="headerlink" title="1.4 解决方案"></a>1.4 解决方案</h3><ol><li>短链接，发一个包建立一次连接，这样连接建立到连接断开之间就是消息的边界，缺点效率太低</li><li>每一条消息采用固定长度，缺点浪费空间</li><li>每一条消息采用分隔符，例如 \n，缺点需要转义</li><li>每一条消息分为 head 和 body，head 中包含 body 的长度</li></ol><h4 id="方法1，短链接"><a href="#方法1，短链接" class="headerlink" title="方法1，短链接"></a>方法1，短链接</h4><p>以解决粘包为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldClient</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 分 10 次发送</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            send();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    log.debug(<span class="hljs-string">&quot;conneted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.debug(<span class="hljs-string">&quot;sending...&quot;</span>);<br>                            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                            buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>&#125;);<br>                            ctx.writeAndFlush(buffer);<br>                            <span class="hljs-comment">// 发完即关</span><br>                            ctx.close();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出，略</p><blockquote><p>半包用这种办法还是不好解决，因为接收方的缓冲区大小是有限的</p></blockquote><h4 id="方法2，固定长度"><a href="#方法2，固定长度" class="headerlink" title="方法2，固定长度"></a>方法2，固定长度</h4><p>让所有数据包长度固定（假设长度为 8 字节），服务器端加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedLengthFrameDecoder</span>(<span class="hljs-number">8</span>));<br></code></pre></td></tr></table></figure><p>客户端测试代码，注意, 采用这种方法后，客户端什么时候 flush 都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldClient</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    log.debug(<span class="hljs-string">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.debug(<span class="hljs-string">&quot;sending...&quot;</span>);<br>                            <span class="hljs-comment">// 发送内容随机的数据包</span><br>                            <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>                            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                                <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>                                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; r.nextInt(<span class="hljs-number">8</span>); j++) &#123;<br>                                    bytes[j] = (<span class="hljs-type">byte</span>) c;<br>                                &#125;<br>                                c++;<br>                                buffer.writeBytes(bytes);<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;192.168.0.103&quot;</span>, <span class="hljs-number">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端输出</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tap">12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] REGISTERED<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2] CONNECT: /192.168.0.103:9090<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] ACTIVE<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] WRITE: 80B<br>         +-------------------------------------------------+<br>         | <span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 62 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 |aaaa....b.......|<br>|00000010|<span class="hljs-number"> 63 </span>63<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 64 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 |cc......d.......|<br>|00000020|<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 |........ffff....|<br>|00000030|<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 68 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 |ggg.....h.......|<br>|00000040|<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>00<span class="hljs-number"> 00 </span>00 6a 6a 6a 6a<span class="hljs-number"> 00 </span>00<span class="hljs-number"> 00 </span>00 |iiiii...jjjj....|<br>+--------+-------------------------------------------------+----------------+<br>12:07:00 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x3c2ef3c2, L:/192.168.0.103:53155 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure><p>服务端输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f] binding...<br>12:06:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xe3d9713f, L:/192.168.0.103:9090] bound...<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] REGISTERED<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] ACTIVE<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155]<br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 61 61 61 61 00 00 00 00                         |aaaa....        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 62 00 00 00 00 00 00 00                         |b.......        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 63 63 00 00 00 00 00 00                         |cc......        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 64 00 00 00 00 00 00 00                         |d.......        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 00 00 00 00 00 00 00 00                         |........        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 66 66 66 66 00 00 00 00                         |ffff....        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 67 67 67 00 00 00 00 00                         |ggg.....        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 68 00 00 00 00 00 00 00                         |h.......        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 69 69 69 69 69 00 00 00                         |iiiii...        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 6a 6a 6a 6a 00 00 00 00                         |jjjj....        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>12:07:00 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0xd739f137, L:/192.168.0.103:9090 - R:/192.168.0.103:53155] READ COMPLETE<br></code></pre></td></tr></table></figure><p>缺点是，数据包的大小不好把握</p><ul><li>长度定的太大，浪费</li><li>长度定的太小，对某些数据包又显得不够</li></ul><h4 id="方法3，固定分隔符"><a href="#方法3，固定分隔符" class="headerlink" title="方法3，固定分隔符"></a>方法3，固定分隔符</h4><p>服务端加入，默认以 \n 或 \r\n 作为分隔符，如果超出指定长度仍未出现分隔符，则抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LineBasedFrameDecoder</span>(<span class="hljs-number">1024</span>));<br></code></pre></td></tr></table></figure><p>客户端在每条消息之后，加入 \n 分隔符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldClient</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    log.debug(<span class="hljs-string">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.debug(<span class="hljs-string">&quot;sending...&quot;</span>);<br>                            <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>                            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= r.nextInt(<span class="hljs-number">16</span>)+<span class="hljs-number">1</span>; j++) &#123;<br>                                    buffer.writeByte((<span class="hljs-type">byte</span>) c);<br>                                &#125;<br>                                buffer.writeByte(<span class="hljs-number">10</span>);<br>                                c++;<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;192.168.0.103&quot;</span>, <span class="hljs-number">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端输出</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap">14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] REGISTERED<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755] CONNECT: /192.168.0.103:9090<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] ACTIVE<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] WRITE: 60B<br>         +-------------------------------------------------+<br>         | <span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class="hljs-number"> 61 </span>0a<span class="hljs-number"> 62 </span>62<span class="hljs-number"> 62 </span>0a<span class="hljs-number"> 63 </span>63<span class="hljs-number"> 63 </span>0a<span class="hljs-number"> 64 </span>64 0a<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>|a.bbb.ccc.dd.eee|<br>|00000010|<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>0a<span class="hljs-number"> 66 </span>66 0a<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>67<span class="hljs-number"> 67 </span>|eeeeeee.ff.ggggg|<br>|00000020|<span class="hljs-number"> 67 </span>67 0a<span class="hljs-number"> 68 </span>68<span class="hljs-number"> 68 </span>68 0a<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>0a |gg.hhhh.iiiiiii.|<br>|00000030| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 0a             |jjjjjjjjjjj.    |<br>+--------+-------------------------------------------------+----------------+<br>14:08:18 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0x1282d755, L:/192.168.0.103:63641 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure><p>服务端输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">14:08:18 [DEBUG] [nioEventLoopGroup-3-5] c.i.n.HelloWorldServer - connected [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641]<br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 1B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 61                                              |a               |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 62 62 62                                        |bbb             |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 3B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 63 63 63                                        |ccc             |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 64 64                                           |dd              |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 10B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 65 65 65 65 65 65 65 65 65 65                   |eeeeeeeeee      |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 2B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 66 66                                           |ff              |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 67 67 67 67 67 67 67                            |ggggggg         |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 4B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 68 68 68 68                                     |hhhh            |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 7B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 69 69 69 69 69 69 69                            |iiiiiii         |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ: 11B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a 6a                |jjjjjjjjjjj     |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:08:18 [DEBUG] [nioEventLoopGroup-3-5] i.n.h.l.LoggingHandler - [id: 0xa4b3be43, L:/192.168.0.103:9090 - R:/192.168.0.103:63641] READ COMPLETE<br></code></pre></td></tr></table></figure><p>缺点，处理字符数据比较合适，但如果内容本身包含了分隔符（字节数据常常会有此情况），那么就会解析错误</p><h4 id="方法4，预设长度"><a href="#方法4，预设长度" class="headerlink" title="方法4，预设长度"></a>方法4，预设长度</h4><p>在发送消息前，先约定用定长字节表示接下来数据的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 最大长度，长度偏移，长度占用字节，长度调整，剥离字节数</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<span class="hljs-number">1024</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldClient</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(HelloWorldClient.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(worker);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    log.debug(<span class="hljs-string">&quot;connetted...&quot;</span>);<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.debug(<span class="hljs-string">&quot;sending...&quot;</span>);<br>                            <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>                            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>                            <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                                <span class="hljs-type">byte</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) (r.nextInt(<span class="hljs-number">16</span>) + <span class="hljs-number">1</span>);<br>                                <span class="hljs-comment">// 先写入长度</span><br>                                buffer.writeByte(length);<br>                                <span class="hljs-comment">// 再</span><br>                                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= length; j++) &#123;<br>                                    buffer.writeByte((<span class="hljs-type">byte</span>) c);<br>                                &#125;<br>                                c++;<br>                            &#125;<br>                            ctx.writeAndFlush(buffer);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;192.168.0.103&quot;</span>, <span class="hljs-number">9090</span>).sync();<br>            channelFuture.channel().closeFuture().sync();<br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端输出</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs tap">14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - connetted...<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] REGISTERED<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8] CONNECT: /192.168.0.103:9090<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] ACTIVE<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] c.i.n.HelloWorldClient - sending...<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] WRITE: 97B<br>         +-------------------------------------------------+<br>         | <span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span> a  b  c  d  e  f |<br>+--------+-------------------------------------------------+----------------+<br>|00000000|<span class="hljs-number"> 09 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 61 </span>61<span class="hljs-number"> 09 </span>62<span class="hljs-number"> 62 </span>62<span class="hljs-number"> 62 </span>62 |.aaaaaaaaa.bbbbb|<br>|00000010|<span class="hljs-number"> 62 </span>62<span class="hljs-number"> 62 </span>62<span class="hljs-number"> 06 </span>63<span class="hljs-number"> 63 </span>63<span class="hljs-number"> 63 </span>63<span class="hljs-number"> 63 </span>08<span class="hljs-number"> 64 </span>64<span class="hljs-number"> 64 </span>64 |bbbb.cccccc.dddd|<br>|00000020|<span class="hljs-number"> 64 </span>64<span class="hljs-number"> 64 </span>64 0f<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>|dddd.eeeeeeeeeee|<br>|00000030|<span class="hljs-number"> 65 </span>65<span class="hljs-number"> 65 </span>65 0d<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 66 </span>|eeee.fffffffffff|<br>|00000040|<span class="hljs-number"> 66 </span>66<span class="hljs-number"> 02 </span>67<span class="hljs-number"> 67 </span>02<span class="hljs-number"> 68 </span>68 0e<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>|ff.gg.hh.iiiiiii|<br>|00000050|<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>69<span class="hljs-number"> 69 </span>09 6a 6a 6a 6a 6a 6a 6a 6a |iiiiiii.jjjjjjjj|<br>|00000060| 6a                                              |j               |<br>+--------+-------------------------------------------------+----------------+<br>14:37:10 [DEBUG] [nioEventLoopGroup-2-1] i.n.h.l.LoggingHandler - [id: 0xf0f347b8, L:/192.168.0.103:49979 - R:/192.168.0.103:9090] FLUSH<br></code></pre></td></tr></table></figure><p>服务端输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">14:36:50 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3] binding...<br>14:36:51 [DEBUG] [main] c.i.n.HelloWorldServer - [id: 0xdff439d3, L:/192.168.0.103:9090] bound...<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] REGISTERED<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] ACTIVE<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] c.i.n.HelloWorldServer - connected [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979]<br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 61 61 61 61 61 61 61 61 61                      |aaaaaaaaa       |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 62 62 62 62 62 62 62 62 62                      |bbbbbbbbb       |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 6B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 63 63 63 63 63 63                               |cccccc          |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 64 64 64 64 64 64 64 64                         |dddddddd        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 15B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65    |eeeeeeeeeeeeeee |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 13B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 66 66 66 66 66 66 66 66 66 66 66 66 66          |fffffffffffff   |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 67 67                                           |gg              |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 2B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 68 68                                           |hh              |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 14B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 69 69 69 69 69 69 69 69 69 69 69 69 69 69       |iiiiiiiiiiiiii  |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ: 9B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 6a 6a 6a 6a 6a 6a 6a 6a 6a                      |jjjjjjjjj       |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>14:37:10 [DEBUG] [nioEventLoopGroup-3-1] i.n.h.l.LoggingHandler - [id: 0x744f2b47, L:/192.168.0.103:9090 - R:/192.168.0.103:49979] READ COMPLETE<br><br></code></pre></td></tr></table></figure><h2 id="2-协议设计与解析"><a href="#2-协议设计与解析" class="headerlink" title="2. 协议设计与解析"></a>2. 协议设计与解析</h2><h3 id="2-1-为什么需要协议？"><a href="#2-1-为什么需要协议？" class="headerlink" title="2.1 为什么需要协议？"></a>2.1 为什么需要协议？</h3><p>TCP/IP 中消息传输基于流的方式，没有边界。</p><p>协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则</p><p>例如：在网络上传输</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">下雨天留客天留我不留<br></code></pre></td></tr></table></figure><p>是中文一句著名的无标点符号句子，在没有标点符号情况下，这句话有数种拆解方式，而意思却是完全不同，所以常被用作讲述标点符号的重要性</p><p>一种解读</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">下雨天留客，天留，我不留<br></code></pre></td></tr></table></figure><p>另一种解读</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">下雨天，留客天，留我不？留<br></code></pre></td></tr></table></figure><p>如何设计协议呢？其实就是给网络传输的信息加上“标点符号”。但通过分隔符来断句不是很好，因为分隔符本身如果用于传输，那么必须加以区分。因此，下面一种协议较为常用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">定长字节表示内容长度 + 实际内容<br></code></pre></td></tr></table></figure><p>例如，假设一个中文字符长度为 3，按照上述协议的规则，发送信息方式如下，就不会被接收方弄错意思了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0f</span>下雨天留客<span class="hljs-number">06</span>天留<span class="hljs-number">09</span>我不留<br></code></pre></td></tr></table></figure><blockquote><p>小故事</p><p>很久很久以前，一位私塾先生到一家任教。双方签订了一纸协议：“无鸡鸭亦可无鱼肉亦可白菜豆腐不可少不得束修金”。此后，私塾先生虽然认真教课，但主人家则总是给私塾先生以白菜豆腐为菜，丝毫未见鸡鸭鱼肉的款待。私塾先生先是很不解，可是后来也就想通了：主人把鸡鸭鱼肉的钱都会换为束修金的，也罢。至此双方相安无事。</p><p>年关将至，一个学年段亦告结束。私塾先生临行时，也不见主人家为他交付束修金，遂与主家理论。然主家亦振振有词：“有协议为证——无鸡鸭亦可，无鱼肉亦可，白菜豆腐不可少，不得束修金。这白纸黑字明摆着的，你有什么要说的呢？”</p><p>私塾先生据理力争：“协议是这样的——无鸡，鸭亦可；无鱼，肉亦可；白菜豆腐不可，少不得束修金。”</p><p>双方唇枪舌战，你来我往，真个是不亦乐乎！</p><p>这里的束修金，也作“束脩”，应当是泛指教师应当得到的报酬</p></blockquote><h3 id="2-2-redis-协议举例"><a href="#2-2-redis-协议举例" class="headerlink" title="2.2 redis 协议举例"></a>2.2 redis 协议举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-type">byte</span>[] LINE = &#123;<span class="hljs-number">13</span>, <span class="hljs-number">10</span>&#125;;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>    bootstrap.channel(NioSocketChannel.class);<br>    bootstrap.group(worker);<br>    bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>());<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class="hljs-comment">// 会在连接 channel 建立成功后，会触发 active 事件</span><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> &#123;<br>                    set(ctx);<br>                    get(ctx);<br>                &#125;<br>                <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> &#123;<br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                    buf.writeBytes(<span class="hljs-string">&quot;*2&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;get&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;aaa&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    ctx.writeAndFlush(buf);<br>                &#125;<br>                <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> &#123;<br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                    buf.writeBytes(<span class="hljs-string">&quot;*3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;set&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;aaa&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;$3&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    buf.writeBytes(<span class="hljs-string">&quot;bbb&quot;</span>.getBytes());<br>                    buf.writeBytes(LINE);<br>                    ctx.writeAndFlush(buf);<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                    System.out.println(buf.toString(Charset.defaultCharset()));<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">6379</span>).sync();<br>    channelFuture.channel().closeFuture().sync();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    worker.shutdownGracefully();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-http-协议举例"><a href="#2-3-http-协议举例" class="headerlink" title="2.3 http 协议举例"></a>2.3 http 协议举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>    serverBootstrap.channel(NioServerSocketChannel.class);<br>    serverBootstrap.group(boss, worker);<br>    serverBootstrap.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpServerCodec</span>());<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;HttpRequest&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, HttpRequest msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    <span class="hljs-comment">// 获取请求</span><br>                    log.debug(msg.uri());<br><br>                    <span class="hljs-comment">// 返回响应</span><br>                    <span class="hljs-type">DefaultFullHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span><br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultFullHttpResponse</span>(msg.protocolVersion(), HttpResponseStatus.OK);<br><br>                    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;&lt;h1&gt;Hello, world!&lt;/h1&gt;&quot;</span>.getBytes();<br><br>                    response.headers().setInt(CONTENT_LENGTH, bytes.length);<br>                    response.content().writeBytes(bytes);<br><br>                    <span class="hljs-comment">// 写回响应</span><br>                    ctx.writeAndFlush(response);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">/*ch.pipeline().addLast(new ChannelInboundHandlerAdapter() &#123;</span><br><span class="hljs-comment">                @Override</span><br><span class="hljs-comment">                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123;</span><br><span class="hljs-comment">                    log.debug(&quot;&#123;&#125;&quot;, msg.getClass());</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    if (msg instanceof HttpRequest) &#123; // 请求行，请求头</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    &#125; else if (msg instanceof HttpContent) &#123; //请求体</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    &#125;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;);*/</span><br>        &#125;<br>    &#125;);<br>    <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-number">8080</span>).sync();<br>    channelFuture.channel().closeFuture().sync();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    log.error(<span class="hljs-string">&quot;server error&quot;</span>, e);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    boss.shutdownGracefully();<br>    worker.shutdownGracefully();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-自定义协议要素"><a href="#2-4-自定义协议要素" class="headerlink" title="2.4 自定义协议要素"></a>2.4 自定义协议要素</h3><ul><li>魔数，用来在第一时间判定是否是无效数据包</li><li>版本号，可以支持协议的升级</li><li>序列化算法，消息正文到底采用哪种序列化反序列化方式，可以由此扩展，例如：json、protobuf、hessian、jdk</li><li>指令类型，是登录、注册、单聊、群聊… 跟业务相关</li><li>请求序号，为了双工通信，提供异步能力</li><li>正文长度</li><li>消息正文</li></ul><h4 id="编解码器"><a href="#编解码器" class="headerlink" title="编解码器"></a>编解码器</h4><p>根据上面的要素，设计一个登录请求消息和登录响应消息，并使用 Netty 完成收发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageCodec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ByteToMessageCodec</span>&lt;Message&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext ctx, Message msg, ByteBuf out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;);<br>        <span class="hljs-comment">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class="hljs-comment">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class="hljs-comment">// 无意义，对齐填充</span><br>        out.writeByte(<span class="hljs-number">0xff</span>);<br>        <span class="hljs-comment">// 6. 获取内容的字节数组</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(msg);<br>        <span class="hljs-type">byte</span>[] bytes = bos.toByteArray();<br>        <span class="hljs-comment">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class="hljs-comment">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">magicNum</span> <span class="hljs-operator">=</span> in.readInt();<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> in.readByte();<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">serializerType</span> <span class="hljs-operator">=</span> in.readByte();<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">messageType</span> <span class="hljs-operator">=</span> in.readByte();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sequenceId</span> <span class="hljs-operator">=</span> in.readInt();<br>        in.readByte();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> in.readInt();<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>        in.readBytes(bytes, <span class="hljs-number">0</span>, length);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, magicNum, version, serializerType, messageType, sequenceId, length);<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, message);<br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">EmbeddedChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedChannel</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(<br>        <span class="hljs-number">1024</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodec</span>()<br>);<br><span class="hljs-comment">// encode</span><br><span class="hljs-type">LoginRequestMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginRequestMessage</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br><span class="hljs-comment">//        channel.writeOutbound(message);</span><br><span class="hljs-comment">// decode</span><br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodec</span>().encode(<span class="hljs-literal">null</span>, message, buf);<br><br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> buf.slice(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> buf.slice(<span class="hljs-number">100</span>, buf.readableBytes() - <span class="hljs-number">100</span>);<br>s1.retain(); <span class="hljs-comment">// 引用计数 2</span><br>channel.writeInbound(s1); <span class="hljs-comment">// release 1</span><br>channel.writeInbound(s2);<br></code></pre></td></tr></table></figure><p>解读</p><p><img src="/../images/0013.png"></p><h4 id="💡-什么时候可以加-Sharable"><a href="#💡-什么时候可以加-Sharable" class="headerlink" title="💡 什么时候可以加 @Sharable"></a>💡 什么时候可以加 @Sharable</h4><ul><li>当 handler 不保存状态时，就可以安全地在多线程下被共享</li><li>但要注意对于编解码器类，不能继承 ByteToMessageCodec 或 CombinedChannelDuplexHandler 父类，他们的构造方法对 @Sharable 有限制</li><li>如果能确保编解码器不会保存状态，可以继承 MessageToMessageCodec 父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 必须和 LengthFieldBasedFrameDecoder 一起使用，确保接到的 ByteBuf 消息是完整的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageCodecSharable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessageToMessageCodec</span>&lt;ByteBuf, Message&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">encode</span><span class="hljs-params">(ChannelHandlerContext ctx, Message msg, List&lt;Object&gt; outList)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>        <span class="hljs-comment">// 1. 4 字节的魔数</span><br>        out.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;);<br>        <span class="hljs-comment">// 2. 1 字节的版本,</span><br>        out.writeByte(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 3. 1 字节的序列化方式 jdk 0 , json 1</span><br>        out.writeByte(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 4. 1 字节的指令类型</span><br>        out.writeByte(msg.getMessageType());<br>        <span class="hljs-comment">// 5. 4 个字节</span><br>        out.writeInt(msg.getSequenceId());<br>        <span class="hljs-comment">// 无意义，对齐填充</span><br>        out.writeByte(<span class="hljs-number">0xff</span>);<br>        <span class="hljs-comment">// 6. 获取内容的字节数组</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(msg);<br>        <span class="hljs-type">byte</span>[] bytes = bos.toByteArray();<br>        <span class="hljs-comment">// 7. 长度</span><br>        out.writeInt(bytes.length);<br>        <span class="hljs-comment">// 8. 写入内容</span><br>        out.writeBytes(bytes);<br>        outList.add(out);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decode</span><span class="hljs-params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">magicNum</span> <span class="hljs-operator">=</span> in.readInt();<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> in.readByte();<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">serializerType</span> <span class="hljs-operator">=</span> in.readByte();<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">messageType</span> <span class="hljs-operator">=</span> in.readByte();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sequenceId</span> <span class="hljs-operator">=</span> in.readInt();<br>        in.readByte();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> in.readInt();<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>        in.readBytes(bytes, <span class="hljs-number">0</span>, length);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes));<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (Message) ois.readObject();<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, magicNum, version, serializerType, messageType, sequenceId, length);<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, message);<br>        out.add(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-聊天室案例"><a href="#3-聊天室案例" class="headerlink" title="3. 聊天室案例"></a>3. 聊天室案例</h2><h3 id="3-1-聊天室业务介绍"><a href="#3-1-聊天室业务介绍" class="headerlink" title="3.1 聊天室业务介绍"></a>3.1 聊天室业务介绍</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户管理接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 登录成功返回 true, 否则返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 会话管理接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Session</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定会话</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel 哪个 channel 要绑定会话</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 会话绑定用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(Channel channel, String username)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解绑会话</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel 哪个 channel 要解绑会话</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unbind</span><span class="hljs-params">(Channel channel)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取属性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel 哪个 channel</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 属性名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 属性值</span><br><span class="hljs-comment">     */</span><br>    Object <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(Channel channel, String name)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置属性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel 哪个 channel</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 属性名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 属性值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAttribute</span><span class="hljs-params">(Channel channel, String name, Object value)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名获取 channel</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> channel</span><br><span class="hljs-comment">     */</span><br>    Channel <span class="hljs-title function_">getChannel</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 聊天组会话管理接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GroupSession</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个聊天组, 如果不存在才能创建成功, 否则返回 null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 组名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> members 成员</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功时返回组对象, 失败返回 null</span><br><span class="hljs-comment">     */</span><br>    Group <span class="hljs-title function_">createGroup</span><span class="hljs-params">(String name, Set&lt;String&gt; members)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加入聊天组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 组名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> member 成员名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class="hljs-comment">     */</span><br>    Group <span class="hljs-title function_">joinMember</span><span class="hljs-params">(String name, String member)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除组成员</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 组名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> member 成员名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class="hljs-comment">     */</span><br>    Group <span class="hljs-title function_">removeMember</span><span class="hljs-params">(String name, String member)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除聊天组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 组名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果组不存在返回 null, 否则返回组对象</span><br><span class="hljs-comment">     */</span><br>    Group <span class="hljs-title function_">removeGroup</span><span class="hljs-params">(String name)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取组成员</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 组名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成员集合, 没有成员会返回 empty set</span><br><span class="hljs-comment">     */</span><br>    Set&lt;String&gt; <span class="hljs-title function_">getMembers</span><span class="hljs-params">(String name)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取组成员的 channel 集合, 只有在线的 channel 才会返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 组名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成员 channel 集合</span><br><span class="hljs-comment">     */</span><br>    List&lt;Channel&gt; <span class="hljs-title function_">getMembersChannel</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-聊天室业务-登录"><a href="#3-2-聊天室业务-登录" class="headerlink" title="3.2 聊天室业务-登录"></a>3.2 聊天室业务-登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">LoggingHandler</span> <span class="hljs-variable">LOGGING_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class="hljs-type">MessageCodecSharable</span> <span class="hljs-variable">MESSAGE_CODEC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodecSharable</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerBootstrap</span> <span class="hljs-variable">serverBootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            serverBootstrap.channel(NioServerSocketChannel.class);<br>            serverBootstrap.group(boss, worker);<br>            serverBootstrap.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcotolFrameDecoder</span>());<br>                    ch.pipeline().addLast(LOGGING_HANDLER);<br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;LoginRequestMessage&gt;() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, LoginRequestMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> msg.getUsername();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> msg.getPassword();<br>                            <span class="hljs-type">boolean</span> <span class="hljs-variable">login</span> <span class="hljs-operator">=</span> UserServiceFactory.getUserService().login(username, password);<br>                            LoginResponseMessage message;<br>                            <span class="hljs-keyword">if</span>(login) &#123;<br>                                message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginResponseMessage</span>(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginResponseMessage</span>(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;用户名或密码不正确&quot;</span>);<br>                            &#125;<br>                            ctx.writeAndFlush(message);<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> serverBootstrap.bind(<span class="hljs-number">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            log.error(<span class="hljs-string">&quot;server error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            boss.shutdownGracefully();<br>            worker.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">LoggingHandler</span> <span class="hljs-variable">LOGGING_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG);<br>        <span class="hljs-type">MessageCodecSharable</span> <span class="hljs-variable">MESSAGE_CODEC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageCodecSharable</span>();<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">WAIT_FOR_LOGIN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">AtomicBoolean</span> <span class="hljs-variable">LOGIN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicBoolean</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Bootstrap</span> <span class="hljs-variable">bootstrap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>();<br>            bootstrap.channel(NioSocketChannel.class);<br>            bootstrap.group(group);<br>            bootstrap.handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcotolFrameDecoder</span>());<br><span class="hljs-comment">//                    ch.pipeline().addLast(LOGGING_HANDLER);</span><br>                    ch.pipeline().addLast(MESSAGE_CODEC);<br>                    ch.pipeline().addLast(<span class="hljs-string">&quot;client handler&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                        <span class="hljs-comment">// 接收响应消息</span><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            log.debug(<span class="hljs-string">&quot;msg: &#123;&#125;&quot;</span>, msg);<br>                            <span class="hljs-keyword">if</span> ((msg <span class="hljs-keyword">instanceof</span> LoginResponseMessage)) &#123;<br>                                <span class="hljs-type">LoginResponseMessage</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (LoginResponseMessage) msg;<br>                                <span class="hljs-keyword">if</span> (response.isSuccess()) &#123;<br>                                    <span class="hljs-comment">// 如果登录成功</span><br>                                    LOGIN.set(<span class="hljs-literal">true</span>);<br>                                &#125;<br>                                <span class="hljs-comment">// 唤醒 system in 线程</span><br>                                WAIT_FOR_LOGIN.countDown();<br>                            &#125;<br>                        &#125;<br><br>                        <span class="hljs-comment">// 在连接建立后触发 active 事件</span><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                            <span class="hljs-comment">// 负责接收用户在控制台的输入，负责向服务器发送各种消息</span><br>                            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                                <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                                System.out.println(<span class="hljs-string">&quot;请输入用户名:&quot;</span>);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                                System.out.println(<span class="hljs-string">&quot;请输入密码:&quot;</span>);<br>                                <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                                <span class="hljs-comment">// 构造消息对象</span><br>                                <span class="hljs-type">LoginRequestMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginRequestMessage</span>(username, password);<br>                                <span class="hljs-comment">// 发送消息</span><br>                                ctx.writeAndFlush(message);<br>                                System.out.println(<span class="hljs-string">&quot;等待后续操作...&quot;</span>);<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                    WAIT_FOR_LOGIN.await();<br>                                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                                    e.printStackTrace();<br>                                &#125;<br>                                <span class="hljs-comment">// 如果登录失败</span><br>                                <span class="hljs-keyword">if</span> (!LOGIN.get()) &#123;<br>                                    ctx.channel().close();<br>                                    <span class="hljs-keyword">return</span>;<br>                                &#125;<br>                                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br>                                    System.out.println(<span class="hljs-string">&quot;send [username] [content]&quot;</span>);<br>                                    System.out.println(<span class="hljs-string">&quot;gsend [group name] [content]&quot;</span>);<br>                                    System.out.println(<span class="hljs-string">&quot;gcreate [group name] [m1,m2,m3...]&quot;</span>);<br>                                    System.out.println(<span class="hljs-string">&quot;gmembers [group name]&quot;</span>);<br>                                    System.out.println(<span class="hljs-string">&quot;gjoin [group name]&quot;</span>);<br>                                    System.out.println(<span class="hljs-string">&quot;gquit [group name]&quot;</span>);<br>                                    System.out.println(<span class="hljs-string">&quot;quit&quot;</span>);<br>                                    System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br>                                    <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                                    String[] s = command.split(<span class="hljs-string">&quot; &quot;</span>);<br>                                    <span class="hljs-keyword">switch</span> (s[<span class="hljs-number">0</span>])&#123;<br>                                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;send&quot;</span>:<br>                                            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatRequestMessage</span>(username, s[<span class="hljs-number">1</span>], s[<span class="hljs-number">2</span>]));<br>                                            <span class="hljs-keyword">break</span>;<br>                                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;gsend&quot;</span>:<br>                                            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupChatRequestMessage</span>(username, s[<span class="hljs-number">1</span>], s[<span class="hljs-number">2</span>]));<br>                                            <span class="hljs-keyword">break</span>;<br>                                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;gcreate&quot;</span>:<br>                                            Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(Arrays.asList(s[<span class="hljs-number">2</span>].split(<span class="hljs-string">&quot;,&quot;</span>)));<br>                                            set.add(username); <span class="hljs-comment">// 加入自己</span><br>                                            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupCreateRequestMessage</span>(s[<span class="hljs-number">1</span>], set));<br>                                            <span class="hljs-keyword">break</span>;<br>                                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;gmembers&quot;</span>:<br>                                            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupMembersRequestMessage</span>(s[<span class="hljs-number">1</span>]));<br>                                            <span class="hljs-keyword">break</span>;<br>                                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;gjoin&quot;</span>:<br>                                            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupJoinRequestMessage</span>(username, s[<span class="hljs-number">1</span>]));<br>                                            <span class="hljs-keyword">break</span>;<br>                                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;gquit&quot;</span>:<br>                                            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupQuitRequestMessage</span>(username, s[<span class="hljs-number">1</span>]));<br>                                            <span class="hljs-keyword">break</span>;<br>                                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;quit&quot;</span>:<br>                                            ctx.channel().close();<br>                                            <span class="hljs-keyword">return</span>;<br>                                    &#125;<br>                                &#125;<br>                            &#125;, <span class="hljs-string">&quot;system in&quot;</span>).start();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> bootstrap.connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>).sync().channel();<br>            channel.closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;client error&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            group.shutdownGracefully();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-聊天室业务-单聊"><a href="#3-3-聊天室业务-单聊" class="headerlink" title="3.3 聊天室业务-单聊"></a>3.3 聊天室业务-单聊</h3><p>服务器端将 handler 独立出来</p><p>登录 handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginRequestMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;LoginRequestMessage&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, LoginRequestMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> msg.getUsername();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> msg.getPassword();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">login</span> <span class="hljs-operator">=</span> UserServiceFactory.getUserService().login(username, password);<br>        LoginResponseMessage message;<br>        <span class="hljs-keyword">if</span>(login) &#123;<br>            SessionFactory.getSession().bind(ctx.channel(), username);<br>            message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginResponseMessage</span>(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginResponseMessage</span>(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;用户名或密码不正确&quot;</span>);<br>        &#125;<br>        ctx.writeAndFlush(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>单聊 handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatRequestMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;ChatRequestMessage&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, ChatRequestMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">to</span> <span class="hljs-operator">=</span> msg.getTo();<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> SessionFactory.getSession().getChannel(to);<br>        <span class="hljs-comment">// 在线</span><br>        <span class="hljs-keyword">if</span>(channel != <span class="hljs-literal">null</span>) &#123;<br>            channel.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatResponseMessage</span>(msg.getFrom(), msg.getContent()));<br>        &#125;<br>        <span class="hljs-comment">// 不在线</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatResponseMessage</span>(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;对方用户不存在或者不在线&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-聊天室业务-群聊"><a href="#3-4-聊天室业务-群聊" class="headerlink" title="3.4 聊天室业务-群聊"></a>3.4 聊天室业务-群聊</h3><p>创建群聊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupCreateRequestMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;GroupCreateRequestMessage&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, GroupCreateRequestMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">groupName</span> <span class="hljs-operator">=</span> msg.getGroupName();<br>        Set&lt;String&gt; members = msg.getMembers();<br>        <span class="hljs-comment">// 群管理器</span><br>        <span class="hljs-type">GroupSession</span> <span class="hljs-variable">groupSession</span> <span class="hljs-operator">=</span> GroupSessionFactory.getGroupSession();<br>        <span class="hljs-type">Group</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> groupSession.createGroup(groupName, members);<br>        <span class="hljs-keyword">if</span> (group == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 发生成功消息</span><br>            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupCreateResponseMessage</span>(<span class="hljs-literal">true</span>, groupName + <span class="hljs-string">&quot;创建成功&quot;</span>));<br>            <span class="hljs-comment">// 发送拉群消息</span><br>            List&lt;Channel&gt; channels = groupSession.getMembersChannel(groupName);<br>            <span class="hljs-keyword">for</span> (Channel channel : channels) &#123;<br>                channel.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupCreateResponseMessage</span>(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;您已被拉入&quot;</span> + groupName));<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupCreateResponseMessage</span>(<span class="hljs-literal">false</span>, groupName + <span class="hljs-string">&quot;已经存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>群聊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupChatRequestMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;GroupChatRequestMessage&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, GroupChatRequestMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        List&lt;Channel&gt; channels = GroupSessionFactory.getGroupSession()<br>                .getMembersChannel(msg.getGroupName());<br><br>        <span class="hljs-keyword">for</span> (Channel channel : channels) &#123;<br>            channel.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupChatResponseMessage</span>(msg.getFrom(), msg.getContent()));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加入群聊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupJoinRequestMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;GroupJoinRequestMessage&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, GroupJoinRequestMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Group</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> GroupSessionFactory.getGroupSession().joinMember(msg.getGroupName(), msg.getUsername());<br>        <span class="hljs-keyword">if</span> (group != <span class="hljs-literal">null</span>) &#123;<br>            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupJoinResponseMessage</span>(<span class="hljs-literal">true</span>, msg.getGroupName() + <span class="hljs-string">&quot;群加入成功&quot;</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupJoinResponseMessage</span>(<span class="hljs-literal">true</span>, msg.getGroupName() + <span class="hljs-string">&quot;群不存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>退出群聊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupQuitRequestMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;GroupQuitRequestMessage&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, GroupQuitRequestMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Group</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> GroupSessionFactory.getGroupSession().removeMember(msg.getGroupName(), msg.getUsername());<br>        <span class="hljs-keyword">if</span> (group != <span class="hljs-literal">null</span>) &#123;<br>            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupJoinResponseMessage</span>(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;已退出群&quot;</span> + msg.getGroupName()));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupJoinResponseMessage</span>(<span class="hljs-literal">true</span>, msg.getGroupName() + <span class="hljs-string">&quot;群不存在&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看成员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ChannelHandler</span>.Sharable<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GroupMembersRequestMessageHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;GroupMembersRequestMessage&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, GroupMembersRequestMessage msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Set&lt;String&gt; members = GroupSessionFactory.getGroupSession()<br>                .getMembers(msg.getGroupName());<br>        ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupMembersResponseMessage</span>(members));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-聊天室业务-退出"><a href="#3-5-聊天室业务-退出" class="headerlink" title="3.5 聊天室业务-退出"></a>3.5 聊天室业务-退出</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Slf4j</span><br><span class="hljs-variable">@ChannelHandler</span>.Sharable<br>public class QuitHandler extends ChannelInboundHandlerAdapter &#123;<br><br>    <span class="hljs-comment">// 当连接断开时触发 inactive 事件</span><br>    <span class="hljs-variable">@Override</span><br>    public void <span class="hljs-built_in">channelInactive</span>(ChannelHandlerContext ctx) throws Exception &#123;<br>        <span class="hljs-selector-tag">SessionFactory</span><span class="hljs-selector-class">.getSession</span>()<span class="hljs-selector-class">.unbind</span>(ctx.<span class="hljs-built_in">channel</span>());<br>        <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.debug</span>(<span class="hljs-string">&quot;&#123;&#125; 已经断开&quot;</span>, ctx.<span class="hljs-built_in">channel</span>());<br>    &#125;<br><br><span class="hljs-comment">// 当出现异常时触发</span><br>    @<span class="hljs-selector-tag">Override</span><br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">exceptionCaught</span>(ChannelHandlerContext ctx, Throwable cause) <span class="hljs-selector-tag">throws</span> <span class="hljs-selector-tag">Exception</span> &#123;<br>        <span class="hljs-selector-tag">SessionFactory</span><span class="hljs-selector-class">.getSession</span>()<span class="hljs-selector-class">.unbind</span>(ctx.<span class="hljs-built_in">channel</span>());<br>        <span class="hljs-selector-tag">log</span><span class="hljs-selector-class">.debug</span>(<span class="hljs-string">&quot;&#123;&#125; 已经异常断开 异常是&#123;&#125;&quot;</span>, ctx.<span class="hljs-built_in">channel</span>(), cause.<span class="hljs-built_in">getMessage</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-聊天室业务-空闲检测"><a href="#3-6-聊天室业务-空闲检测" class="headerlink" title="3.6 聊天室业务-空闲检测"></a>3.6 聊天室业务-空闲检测</h3><h4 id="连接假死"><a href="#连接假死" class="headerlink" title="连接假死"></a>连接假死</h4><p>原因</p><ul><li>网络设备出现故障，例如网卡，机房等，底层的 TCP 连接已经断开了，但应用程序没有感知到，仍然占用着资源。</li><li>公网网络不稳定，出现丢包。如果连续出现丢包，这时现象就是客户端数据发不出去，服务端也一直收不到数据，就这么一直耗着</li><li>应用程序线程阻塞，无法进行数据读写</li></ul><p>问题</p><ul><li>假死的连接占用的资源不能自动释放</li><li>向假死的连接发送数据，得到的反馈是发送超时</li></ul><p>服务器端解决</p><ul><li>怎么判断客户端连接是否假死呢？如果能收到客户端数据，说明没有假死。因此策略就可以定为，每隔一段时间就检查这段时间内是否接收到客户端数据，没有就可以判定为连接假死</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用来判断是不是 读空闲时间过长，或 写空闲时间过长</span><br><span class="hljs-comment">// 5s 内如果没有收到 channel 的数据，会触发一个 IdleState#READER_IDLE 事件</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IdleStateHandler</span>(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br><span class="hljs-comment">// ChannelDuplexHandler 可以同时作为入站和出站处理器</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelDuplexHandler</span>() &#123;<br>    <span class="hljs-comment">// 用来触发特殊事件</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userEventTriggered</span><span class="hljs-params">(ChannelHandlerContext ctx, Object evt)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">IdleStateEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> (IdleStateEvent) evt;<br>        <span class="hljs-comment">// 触发了读空闲事件</span><br>        <span class="hljs-keyword">if</span> (event.state() == IdleState.READER_IDLE) &#123;<br>            log.debug(<span class="hljs-string">&quot;已经 5s 没有读到数据了&quot;</span>);<br>            ctx.channel().close();<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>客户端定时心跳</p><ul><li>客户端可以定时向服务器端发送数据，只要这个时间间隔小于服务器定义的空闲检测的时间间隔，那么就能防止前面提到的误判，客户端可以定义如下心跳处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用来判断是不是 读空闲时间过长，或 写空闲时间过长</span><br><span class="hljs-comment">// 3s 内如果没有向服务器写数据，会触发一个 IdleState#WRITER_IDLE 事件</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IdleStateHandler</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>));<br><span class="hljs-comment">// ChannelDuplexHandler 可以同时作为入站和出站处理器</span><br>ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelDuplexHandler</span>() &#123;<br>    <span class="hljs-comment">// 用来触发特殊事件</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userEventTriggered</span><span class="hljs-params">(ChannelHandlerContext ctx, Object evt)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">IdleStateEvent</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> (IdleStateEvent) evt;<br>        <span class="hljs-comment">// 触发了写空闲事件</span><br>        <span class="hljs-keyword">if</span> (event.state() == IdleState.WRITER_IDLE) &#123;<br>            <span class="hljs-comment">//                                log.debug(&quot;3s 没有写数据了，发送一个心跳包&quot;);</span><br>            ctx.writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PingMessage</span>());<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty学习（二）</title>
    <link href="/2024/03/10/Netty%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2024/03/10/Netty%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="二-Netty-入门"><a href="#二-Netty-入门" class="headerlink" title="二. Netty 入门"></a>二. Netty 入门</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-Netty-是什么？"><a href="#1-1-Netty-是什么？" class="headerlink" title="1.1 Netty 是什么？"></a>1.1 Netty 是什么？</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Netty <span class="hljs-keyword">is</span> an asynchronous event-driven network <span class="hljs-built_in">application</span> framework<br><span class="hljs-keyword">for</span> rapid development <span class="hljs-keyword">of</span> maintainable high performance protocol servers &amp; clients.<br></code></pre></td></tr></table></figure><p>Netty 是一个异步的、基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端</p><h3 id="1-2-Netty-的作者"><a href="#1-2-Netty-的作者" class="headerlink" title="1.2 Netty 的作者"></a>1.2 Netty 的作者</h3><p><img src="/../images/0005.png"></p><p>他还是另一个著名网络应用框架 Mina 的重要贡献者</p><h3 id="1-3-Netty-的地位"><a href="#1-3-Netty-的地位" class="headerlink" title="1.3 Netty 的地位"></a>1.3 Netty 的地位</h3><p>Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位</p><p>以下的框架都使用了 Netty，因为它们有网络通信需求！</p><ul><li>Cassandra - nosql 数据库</li><li>Spark - 大数据分布式计算框架</li><li>Hadoop - 大数据分布式存储框架</li><li>RocketMQ - ali 开源的消息队列</li><li>ElasticSearch - 搜索引擎</li><li>gRPC - rpc 框架</li><li>Dubbo - rpc 框架</li><li>Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端</li><li>Zookeeper - 分布式协调框架</li></ul><h3 id="1-4-Netty-的优势"><a href="#1-4-Netty-的优势" class="headerlink" title="1.4 Netty 的优势"></a>1.4 Netty 的优势</h3><ul><li>Netty vs NIO，工作量大，bug 多<ul><li>需要自己构建协议</li><li>解决 TCP 传输问题，如粘包、半包</li><li>epoll 空轮询导致 CPU 100%</li><li>对 API 进行增强，使之更易用，如 FastThreadLocal =&gt; ThreadLocal，ByteBuf =&gt; ByteBuffer</li></ul></li><li>Netty vs 其它网络应用框架<ul><li>Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀</li><li>久经考验，16年，Netty 版本<ul><li>2.x 2004</li><li>3.x 2008</li><li>4.x 2013</li><li>5.x 已废弃（没有明显的性能提升，维护成本高）</li></ul></li></ul></li></ul><h2 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h2><h3 id="2-1-目标"><a href="#2-1-目标" class="headerlink" title="2.1 目标"></a>2.1 目标</h3><p>开发一个简单的服务器端和客户端</p><ul><li>客户端向服务器端发送 hello, world</li><li>服务器仅接收，不返回</li></ul><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.netty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>netty-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.39.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-服务器端"><a href="#2-2-服务器端" class="headerlink" title="2.2 服务器端"></a>2.2 服务器端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>()) <span class="hljs-comment">// 1</span><br>    .channel(NioServerSocketChannel.class) <span class="hljs-comment">// 2</span><br>    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123; <span class="hljs-comment">// 3</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>()); <span class="hljs-comment">// 5</span><br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;String&gt;() &#123; <span class="hljs-comment">// 6</span><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, String msg)</span> &#123;<br>                    System.out.println(msg);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>    .bind(<span class="hljs-number">8080</span>); <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>代码解读</p><ul><li><p>1 处，创建 NioEventLoopGroup，可以简单理解为 <code>线程池 + Selector</code> 后面会详细展开</p></li><li><p>2 处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有</p><p>  <img src="/../images/0006.png"></p></li><li><p>3 处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p></li><li><p>4 处，ServerSocketChannel 绑定的监听端口</p></li><li><p>5 处，SocketChannel 的处理器，解码 ByteBuf =&gt; String</p></li><li><p>6 处，SocketChannel 的业务处理器，使用上一个处理器的处理结果</p></li></ul><h3 id="2-3-客户端"><a href="#2-3-客户端" class="headerlink" title="2.3 客户端"></a>2.3 客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>()) <span class="hljs-comment">// 1</span><br>    .channel(NioSocketChannel.class) <span class="hljs-comment">// 2</span><br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123; <span class="hljs-comment">// 3</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>()); <span class="hljs-comment">// 8</span><br>        &#125;<br>    &#125;)<br>    .connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>) <span class="hljs-comment">// 4</span><br>    .sync() <span class="hljs-comment">// 5</span><br>    .channel() <span class="hljs-comment">// 6</span><br>    .writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot;: hello world!&quot;</span>); <span class="hljs-comment">// 7</span><br></code></pre></td></tr></table></figure><p>代码解读</p><ul><li><p>1 处，创建 NioEventLoopGroup，同 Server</p></li><li><p>2 处，选择客户 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有</p><p>  <img src="/../images/0007.png"></p></li><li><p>3 处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</p></li><li><p>4 处，指定要连接的服务器和端口</p></li><li><p>5 处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕</p></li><li><p>6 处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作</p></li><li><p>7 处，写入消息并清空缓冲区</p></li><li><p>8 处，消息会经过通道 handler 处理，这里是将 String =&gt; ByteBuf 发出</p></li><li><p>数据经过网络传输，到达服务器端，服务器端 5 和 6 处的 handler 先后被触发，走完一个流程</p></li></ul><h3 id="2-4-流程梳理"><a href="#2-4-流程梳理" class="headerlink" title="2.4 流程梳理"></a>2.4 流程梳理</h3><p><img src="/../images/0040.png"></p><h4 id="💡-提示"><a href="#💡-提示" class="headerlink" title="💡 提示"></a>💡 提示</h4><blockquote><p>一开始需要树立正确的观念</p><ul><li>把 channel 理解为数据的通道</li><li>把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf</li><li>把 handler 理解为数据的处理工序<ul><li>工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成…）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</li><li>handler 分 Inbound 和 Outbound 两类</li></ul></li><li>把 eventLoop 理解为处理数据的工人<ul><li>工人可以管理多个 channel 的 io 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定）</li><li>工人既可以执行 io 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务</li><li>工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人</li></ul></li></ul></blockquote><h2 id="3-组件"><a href="#3-组件" class="headerlink" title="3. 组件"></a>3. 组件</h2><h3 id="3-1-EventLoop"><a href="#3-1-EventLoop" class="headerlink" title="3.1 EventLoop"></a>3.1 EventLoop</h3><p>事件循环对象</p><p>EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。</p><p>它的继承关系比较复杂</p><ul><li>一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法</li><li>另一条线是继承自 netty 自己的 OrderedEventExecutor，<ul><li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li><li>提供了 parent 方法来看看自己属于哪个 EventLoopGroup</li></ul></li></ul><p>事件循环组</p><p>EventLoopGroup 是一组 EventLoop，Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 io 事件都由此 EventLoop 来处理（保证了 io 事件处理时的线程安全）</p><ul><li>继承自 netty 自己的 EventExecutorGroup<ul><li>实现了 Iterable 接口提供遍历 EventLoop 的能力</li><li>另有 next 方法获取集合中下一个 EventLoop</li></ul></li></ul><p>以一个简单的实现为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 内部创建了两个 EventLoop, 每个 EventLoop 维护一个线程</span><br><span class="hljs-type">DefaultEventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoopGroup</span>(<span class="hljs-number">2</span>);<br>System.out.println(group.next());<br>System.out.println(group.next());<br>System.out.println(group.next());<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.DefaultEventLoop@<span class="hljs-number">60</span>f82f98<br>io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.DefaultEventLoop@<span class="hljs-number">35</span>f983a6<br>io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.DefaultEventLoop@<span class="hljs-number">60</span>f82f98<br></code></pre></td></tr></table></figure><p>也可以使用 for 循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultEventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoopGroup</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (EventExecutor eventLoop : group) &#123;<br>    System.out.println(eventLoop);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.DefaultEventLoop@<span class="hljs-number">60</span>f82f98<br>io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span>.DefaultEventLoop@<span class="hljs-number">35</span>f983a6<br></code></pre></td></tr></table></figure><h4 id="💡-优雅关闭"><a href="#💡-优雅关闭" class="headerlink" title="💡 优雅关闭"></a>💡 优雅关闭</h4><p>优雅关闭 <code>shutdownGracefully</code> 方法。该方法会首先切换 <code>EventLoopGroup</code> 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的</p><h4 id="演示-NioEventLoop-处理-io-事件"><a href="#演示-NioEventLoop-处理-io-事件" class="headerlink" title="演示 NioEventLoop 处理 io 事件"></a>演示 NioEventLoop 处理 io 事件</h4><p>服务器端两个 nio worker 工人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>))<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> msg <span class="hljs-keyword">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">if</span> (byteBuf != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>                        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> byteBuf.readBytes(buf, <span class="hljs-number">0</span>, byteBuf.readableBytes());<br>                        log.debug(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf));<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class="hljs-number">8080</span>).sync();<br></code></pre></td></tr></table></figure><p>客户端，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>            .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>))<br>            .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                    System.out.println(<span class="hljs-string">&quot;init...&quot;</span>);<br>                    ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>                &#125;<br>            &#125;)<br>            .channel(NioSocketChannel.class).connect(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>)<br>            .sync()<br>            .channel();<br><br>    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class="hljs-string">&quot;wangwu&quot;</span>.getBytes()));<br>    Thread.sleep(<span class="hljs-number">2000</span>);<br>    channel.writeAndFlush(ByteBufAllocator.DEFAULT.buffer().writeBytes(<span class="hljs-string">&quot;wangwu&quot;</span>.getBytes()));<br></code></pre></td></tr></table></figure><p>最后输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">22</span>:<span class="hljs-number">03</span>:<span class="hljs-number">34</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-3-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest</span> - zhangsan       <br><span class="hljs-number">22</span>:<span class="hljs-number">03</span>:<span class="hljs-number">36</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-3-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest</span> - zhangsan       <br><span class="hljs-number">22</span>:<span class="hljs-number">05</span>:<span class="hljs-number">36</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-3-2]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest</span> - lisi           <br><span class="hljs-number">22</span>:<span class="hljs-number">05</span>:<span class="hljs-number">38</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-3-2]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest</span> - lisi           <br><span class="hljs-number">22</span>:<span class="hljs-number">06</span>:<span class="hljs-number">09</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-3-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest</span> - wangwu        <br><span class="hljs-number">22</span>:<span class="hljs-number">06</span>:<span class="hljs-number">11</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-3-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest</span> - wangwu         <br></code></pre></td></tr></table></figure><p>可以看到两个工人轮流处理 channel，但工人与 channel 之间进行了绑定</p><p><img src="/../images/0042.png"></p><p>再增加两个非 nio 工人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultEventLoopGroup</span> <span class="hljs-variable">normalWorkers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoopGroup</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">1</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>))<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span>  &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>            ch.pipeline().addLast(normalWorkers,<span class="hljs-string">&quot;myhandler&quot;</span>,<br>              <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">byteBuf</span> <span class="hljs-operator">=</span> msg <span class="hljs-keyword">instanceof</span> ByteBuf ? ((ByteBuf) msg) : <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">if</span> (byteBuf != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>                        <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> byteBuf.readBytes(buf, <span class="hljs-number">0</span>, byteBuf.readableBytes());<br>                        log.debug(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf));<br>                    &#125;<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class="hljs-number">8080</span>).sync();<br></code></pre></td></tr></table></figure><p>客户端代码不变，启动三次，分别修改发送字符串为 zhangsan（第一次），lisi（第二次），wangwu（第三次）</p><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] REGISTERED<br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] ACTIVE<br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>22:19:48 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE<br>22:19:48 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        <br>22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ: 8B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 7a 68 61 6e 67 73 61 6e                         |zhangsan        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>22:19:50 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x251562d5, L:/127.0.0.1:8080 - R:/127.0.0.1:52588] READ COMPLETE<br>22:19:50 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - zhangsan        <br>22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] REGISTERED<br>22:20:24 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] ACTIVE<br>22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 6c 69 73 69                                     |lisi            |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>22:20:25 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE<br>22:20:25 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            <br>22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ: 4B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 6c 69 73 69                                     |lisi            |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>22:20:27 [DEBUG] [nioEventLoopGroup-4-2] i.n.h.l.LoggingHandler - [id: 0x94b2a840, L:/127.0.0.1:8080 - R:/127.0.0.1:52612] READ COMPLETE<br>22:20:27 [DEBUG] [defaultEventLoopGroup-2-2] c.i.o.EventLoopTest - lisi            <br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] REGISTERED<br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] ACTIVE<br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 77 61 6e 67 77 75                               |wangwu          |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>22:20:38 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE<br>22:20:38 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          <br>22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ: 6B<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 77 61 6e 67 77 75                               |wangwu          |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>22:20:40 [DEBUG] [nioEventLoopGroup-4-1] i.n.h.l.LoggingHandler - [id: 0x79a26af9, L:/127.0.0.1:8080 - R:/127.0.0.1:52625] READ COMPLETE<br>22:20:40 [DEBUG] [defaultEventLoopGroup-2-1] c.i.o.EventLoopTest - wangwu          <br></code></pre></td></tr></table></figure><p>可以看到，nio 工人和 非 nio 工人也分别绑定了 channel（LoggingHandler 由 nio 工人执行，而我们自己的 handler 由非 nio 工人执行）</p><p><img src="/../images/0041.png"></p><h4 id="💡-handler-执行中如何换人？"><a href="#💡-handler-执行中如何换人？" class="headerlink" title="💡 handler 执行中如何换人？"></a>💡 handler 执行中如何换人？</h4><p>关键代码 <code>io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeChannelRead</span><span class="hljs-params">(<span class="hljs-keyword">final</span> AbstractChannelHandlerContext next, Object msg)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> next.pipeline.touch(ObjectUtil.checkNotNull(msg, <span class="hljs-string">&quot;msg&quot;</span>), next);<br>    <span class="hljs-comment">// 下一个 handler 的事件循环是否与当前的事件循环是同一个线程</span><br>    <span class="hljs-type">EventExecutor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> next.executor();<br>    <br>    <span class="hljs-comment">// 是，直接调用</span><br>    <span class="hljs-keyword">if</span> (executor.inEventLoop()) &#123;<br>        next.invokeChannelRead(m);<br>    &#125; <br>    <span class="hljs-comment">// 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        executor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                next.invokeChannelRead(m);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果两个 handler 绑定的是同一个线程，那么就直接调用</li><li>否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用</li></ul><h4 id="演示-NioEventLoop-处理普通任务"><a href="#演示-NioEventLoop-处理普通任务" class="headerlink" title="演示 NioEventLoop 处理普通任务"></a>演示 NioEventLoop 处理普通任务</h4><p>NioEventLoop 除了可以处理 io 事件，同样可以向它提交普通任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">nioWorkers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>);<br><br>log.debug(<span class="hljs-string">&quot;server start...&quot;</span>);<br>Thread.sleep(<span class="hljs-number">2000</span>);<br>nioWorkers.execute(()-&gt;&#123;<br>    log.debug(<span class="hljs-string">&quot;normal task...&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-number">22</span>:<span class="hljs-number">30</span>:<span class="hljs-number">36</span> [<span class="hljs-symbol">DEBUG</span>] [main] c.i.o.<span class="hljs-symbol">EventLoopTest2</span> - server start...<br><span class="hljs-number">22</span>:<span class="hljs-number">30</span>:<span class="hljs-number">38</span> [<span class="hljs-symbol">DEBUG</span>] [nioEventLoopGroup<span class="hljs-number">-2</span><span class="hljs-number">-1</span>] c.i.o.<span class="hljs-symbol">EventLoopTest2</span> - normal task...<br></code></pre></td></tr></table></figure><blockquote><p>可以用来执行耗时较长的任务</p></blockquote><h4 id="演示-NioEventLoop-处理定时任务"><a href="#演示-NioEventLoop-处理定时任务" class="headerlink" title="演示 NioEventLoop 处理定时任务"></a>演示 NioEventLoop 处理定时任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">nioWorkers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>(<span class="hljs-number">2</span>);<br><br>log.debug(<span class="hljs-string">&quot;server start...&quot;</span>);<br>Thread.sleep(<span class="hljs-number">2000</span>);<br>nioWorkers.scheduleAtFixedRate(() -&gt; &#123;<br>    log.debug(<span class="hljs-string">&quot;running...&quot;</span>);<br>&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">22</span>:<span class="hljs-number">35</span>:<span class="hljs-number">15</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest2</span> - server start...<br><span class="hljs-number">22</span>:<span class="hljs-number">35</span>:<span class="hljs-number">17</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-2-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest2</span> - running...<br><span class="hljs-number">22</span>:<span class="hljs-number">35</span>:<span class="hljs-number">18</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-2-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest2</span> - running...<br><span class="hljs-number">22</span>:<span class="hljs-number">35</span>:<span class="hljs-number">19</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-2-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest2</span> - running...<br><span class="hljs-number">22</span>:<span class="hljs-number">35</span>:<span class="hljs-number">20</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[nioEventLoopGroup-2-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.EventLoopTest2</span> - running...<br>...<br></code></pre></td></tr></table></figure><blockquote><p>可以用来执行定时任务</p></blockquote><h3 id="3-2-Channel"><a href="#3-2-Channel" class="headerlink" title="3.2 Channel"></a>3.2 Channel</h3><p>channel 的主要作用</p><ul><li>close() 可以用来关闭 channel</li><li>closeFuture() 用来处理 channel 的关闭<ul><li>sync 方法作用是同步等待 channel 关闭</li><li>而 addListener 方法是异步等待 channel 关闭</li></ul></li><li>pipeline() 方法添加处理器</li><li>write() 方法将数据写入</li><li>writeAndFlush() 方法将数据写入并刷出</li></ul><h4 id="ChannelFuture"><a href="#ChannelFuture" class="headerlink" title="ChannelFuture"></a>ChannelFuture</h4><p>这时刚才的客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>)<br>    .sync()<br>    .channel()<br>    .writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot;: hello world!&quot;</span>);<br></code></pre></td></tr></table></figure><p>现在把它拆开来看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>); <span class="hljs-comment">// 1</span><br><br>channelFuture.sync().channel().writeAndFlush(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot;: hello world!&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象</li></ul><p><strong>注意</strong> connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象</p><p>实验如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br><br>System.out.println(channelFuture.channel()); <span class="hljs-comment">// 1</span><br>channelFuture.sync(); <span class="hljs-comment">// 2</span><br>System.out.println(channelFuture.channel()); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><ul><li>执行到 1 时，连接未建立，打印 <code>[id: 0x2e1884dd]</code></li><li>执行到 2 时，sync 方法是同步等待连接建立完成</li><li>执行到 3 时，连接肯定建立了，打印 <code>[id: 0x2e1884dd, L:/127.0.0.1:57191 - R:/127.0.0.1:8080]</code></li></ul><p>除了用 sync 方法可以让异步操作同步以外，还可以使用回调的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>);<br>System.out.println(channelFuture.channel()); <span class="hljs-comment">// 1</span><br>channelFuture.addListener((ChannelFutureListener) future -&gt; &#123;<br>    System.out.println(future.channel()); <span class="hljs-comment">// 2</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>执行到 1 时，连接未建立，打印 <code>[id: 0x749124ba]</code></li><li>ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 <code>[id: 0x749124ba, L:/127.0.0.1:57351 - R:/127.0.0.1:8080]</code></li></ul><h4 id="CloseFuture"><a href="#CloseFuture" class="headerlink" title="CloseFuture"></a>CloseFuture</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CloseFutureClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        NioEventLoopGroup group <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">channelFuture</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>                .group(group)<br>                .channel(NioSocketChannel.class)<br>                .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// 在连接建立后被调用</span><br>                    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingHandler</span>(LogLevel.DEBUG));<br>                        ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>                    &#125;<br>                &#125;)<br>                .connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> channelFuture.sync().channel();<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, channel);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;q&quot;</span>.equals(line)) &#123;<br>                    channel.close(); <span class="hljs-comment">// close 异步操作 1s 之后</span><br><span class="hljs-comment">//                    log.debug(&quot;处理关闭之后的操作&quot;); // 不能在这里善后</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                channel.writeAndFlush(line);<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;input&quot;</span>).start();<br><br>        <span class="hljs-comment">// 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭</span><br>        <span class="hljs-type">ChannelFuture</span> <span class="hljs-variable">closeFuture</span> <span class="hljs-operator">=</span> channel.closeFuture();<br>        <span class="hljs-comment">/*log.debug(&quot;waiting close...&quot;);</span><br><span class="hljs-comment">        closeFuture.sync();</span><br><span class="hljs-comment">        log.debug(&quot;处理关闭之后的操作&quot;);*/</span><br>        closeFuture.addListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelFutureListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">operationComplete</span><span class="hljs-params">(ChannelFuture future)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                log.debug(<span class="hljs-string">&quot;处理关闭之后的操作&quot;</span>);<br>                group.shutdownGracefully();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="💡-异步提升的是什么"><a href="#💡-异步提升的是什么" class="headerlink" title="💡 异步提升的是什么"></a>💡 异步提升的是什么</h4><ul><li><p>有些同学看到这里会有疑问：为什么不在一个线程中去执行建立连接、去执行关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接</p></li><li><p>还有同学会笼统地回答，因为 netty 异步方式用了多线程、多线程就效率高。其实这些认识都比较片面，多线程和异步所提升的效率并不是所认为的</p></li></ul><p>思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是：<code>4 * 8 * 3 = 96</code></p><p><img src="/../images/0044.png"></p><p>经研究发现，看病可以细分为四个步骤，经拆分后每个步骤需要 5 分钟，如下</p><p><img src="/../images/0048.png"></p><p>因此可以做如下优化，只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了 <code>4 * 8 * 12</code> 效率几乎是原来的四倍</p><p><img src="/../images/0047.png"></p><p>要点</p><ul><li>单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势</li><li>异步并没有缩短响应时间，反而有所增加</li><li>合理进行任务拆分，也是利用异步的关键</li></ul><h3 id="3-3-Future-amp-Promise"><a href="#3-3-Future-amp-Promise" class="headerlink" title="3.3 Future &amp; Promise"></a>3.3 Future &amp; Promise</h3><p>在异步处理时，经常用到这两个接口</p><p>首先要说明 netty 中的 Future 与 jdk 中的 Future 同名，但是是两个接口，netty 的 Future 继承自 jdk 的 Future，而 Promise 又对 netty Future 进行了扩展</p><ul><li>jdk Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li><li>netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束</li><li>netty Promise 不仅有 netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器</li></ul><table><thead><tr><th>功能/名称</th><th>jdk Future</th><th>netty Future</th><th>Promise</th></tr></thead><tbody><tr><td>cancel</td><td>取消任务</td><td>-</td><td>-</td></tr><tr><td>isCanceled</td><td>任务是否取消</td><td>-</td><td>-</td></tr><tr><td>isDone</td><td>任务是否完成，不能区分成功失败</td><td>-</td><td>-</td></tr><tr><td>get</td><td>获取任务结果，阻塞等待</td><td>-</td><td>-</td></tr><tr><td>getNow</td><td>-</td><td>获取任务结果，非阻塞，还未产生结果时返回 null</td><td>-</td></tr><tr><td>await</td><td>-</td><td>等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断</td><td>-</td></tr><tr><td>sync</td><td>-</td><td>等待任务结束，如果任务失败，抛出异常</td><td>-</td></tr><tr><td>isSuccess</td><td>-</td><td>判断任务是否成功</td><td>-</td></tr><tr><td>cause</td><td>-</td><td>获取失败信息，非阻塞，如果没有失败，返回null</td><td>-</td></tr><tr><td>addLinstener</td><td>-</td><td>添加回调，异步接收结果</td><td>-</td></tr><tr><td>setSuccess</td><td>-</td><td>-</td><td>设置成功结果</td></tr><tr><td>setFailure</td><td>-</td><td>-</td><td>设置失败结果</td></tr></tbody></table><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><p>同步处理任务成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultEventLoop</span> <span class="hljs-variable">eventExecutors</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.execute(()-&gt;&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    log.debug(<span class="hljs-string">&quot;set success, &#123;&#125;&quot;</span>,<span class="hljs-number">10</span>);<br>    promise.setSuccess(<span class="hljs-number">10</span>);<br>&#125;);<br><br>log.debug(<span class="hljs-string">&quot;start...&quot;</span>);<br>log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,promise.getNow()); <span class="hljs-comment">// 还没有结果</span><br>log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,promise.get());<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">11</span>:<span class="hljs-number">51</span>:<span class="hljs-number">53</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - start...<br><span class="hljs-number">11</span>:<span class="hljs-number">51</span>:<span class="hljs-number">53</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - null<br><span class="hljs-number">11</span>:<span class="hljs-number">51</span>:<span class="hljs-number">54</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[defaultEventLoop-1-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - set success, <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">51</span>:<span class="hljs-number">54</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p>异步处理任务成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultEventLoop</span> <span class="hljs-variable">eventExecutors</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br><span class="hljs-comment">// 设置回调，异步接收结果</span><br>promise.addListener(future -&gt; &#123;<br>    <span class="hljs-comment">// 这里的 future 就是上面的 promise</span><br>    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,future.getNow());<br>&#125;);<br><br><span class="hljs-comment">// 等待 1000 后设置成功结果</span><br>eventExecutors.execute(()-&gt;&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    log.debug(<span class="hljs-string">&quot;set success, &#123;&#125;&quot;</span>,<span class="hljs-number">10</span>);<br>    promise.setSuccess(<span class="hljs-number">10</span>);<br>&#125;);<br><br>log.debug(<span class="hljs-string">&quot;start...&quot;</span>);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">30</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - start...<br><span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">31</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[defaultEventLoop-1-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - set success, <span class="hljs-number">10</span><br><span class="hljs-number">11</span>:<span class="hljs-number">49</span>:<span class="hljs-number">31</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[defaultEventLoop-1-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h4><p>同步处理任务失败 - sync &amp; get</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultEventLoop</span> <span class="hljs-variable">eventExecutors</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoop</span>();<br>        DefaultPromise&lt;Integer&gt; promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>        eventExecutors.execute(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-type">RuntimeException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;error...&quot;</span>);<br>            log.debug(<span class="hljs-string">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>            promise.setFailure(e);<br>        &#125;);<br><br>        log.debug(<span class="hljs-string">&quot;start...&quot;</span>);<br>        log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, promise.getNow());<br>        promise.get(); <span class="hljs-comment">// sync() 也会出现异常，只是 get 会再用 ExecutionException 包一层异常</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">12</span>:<span class="hljs-number">11</span>:<span class="hljs-number">07</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - start...<br><span class="hljs-number">12</span>:<span class="hljs-number">11</span>:<span class="hljs-number">07</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - null<br><span class="hljs-number">12</span>:<span class="hljs-number">11</span>:<span class="hljs-number">08</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[defaultEventLoop-1-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - set failure, java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: error...<br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.ExecutionException</span>: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: error...<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.AbstractFuture</span><span class="hljs-selector-class">.get</span>(AbstractFuture<span class="hljs-selector-class">.java</span>:<span class="hljs-number">41</span>)<br>at com<span class="hljs-selector-class">.itcast</span><span class="hljs-selector-class">.oio</span><span class="hljs-selector-class">.DefaultPromiseTest2</span><span class="hljs-selector-class">.main</span>(DefaultPromiseTest2<span class="hljs-selector-class">.java</span>:<span class="hljs-number">34</span>)<br>Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: error...<br>at com<span class="hljs-selector-class">.itcast</span><span class="hljs-selector-class">.oio</span><span class="hljs-selector-class">.DefaultPromiseTest2</span>.lambda<span class="hljs-variable">$main</span>$<span class="hljs-number">0</span>(DefaultPromiseTest2<span class="hljs-selector-class">.java</span>:<span class="hljs-number">27</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span><span class="hljs-selector-class">.DefaultEventLoop</span><span class="hljs-selector-class">.run</span>(DefaultEventLoop<span class="hljs-selector-class">.java</span>:<span class="hljs-number">54</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.SingleThreadEventExecutor$<span class="hljs-number">5</span><span class="hljs-selector-class">.run</span>(SingleThreadEventExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">918</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.internal</span>.ThreadExecutorMap$<span class="hljs-number">2</span><span class="hljs-selector-class">.run</span>(ThreadExecutorMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">74</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FastThreadLocalRunnable</span><span class="hljs-selector-class">.run</span>(FastThreadLocalRunnable<span class="hljs-selector-class">.java</span>:<span class="hljs-number">30</span>)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">745</span>)<br></code></pre></td></tr></table></figure><h4 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h4><p>同步处理任务失败 - await</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultEventLoop</span> <span class="hljs-variable">eventExecutors</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.execute(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-type">RuntimeException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;error...&quot;</span>);<br>    log.debug(<span class="hljs-string">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>    promise.setFailure(e);<br>&#125;);<br><br>log.debug(<span class="hljs-string">&quot;start...&quot;</span>);<br>log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, promise.getNow());<br>promise.await(); <span class="hljs-comment">// 与 sync 和 get 区别在于，不会抛异常</span><br>log.debug(<span class="hljs-string">&quot;result &#123;&#125;&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">12</span>:<span class="hljs-number">18</span>:<span class="hljs-number">53</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - start...<br><span class="hljs-number">12</span>:<span class="hljs-number">18</span>:<span class="hljs-number">53</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - null<br><span class="hljs-number">12</span>:<span class="hljs-number">18</span>:<span class="hljs-number">54</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[defaultEventLoop-1-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - set failure, java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: error...<br><span class="hljs-number">12</span>:<span class="hljs-number">18</span>:<span class="hljs-number">54</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - result java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: error...<br></code></pre></td></tr></table></figure><h4 id="例5"><a href="#例5" class="headerlink" title="例5"></a>例5</h4><p>异步处理任务失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultEventLoop</span> <span class="hljs-variable">eventExecutors</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>promise.addListener(future -&gt; &#123;<br>    log.debug(<span class="hljs-string">&quot;result &#123;&#125;&quot;</span>, (promise.isSuccess() ? promise.getNow() : promise.cause()).toString());<br>&#125;);<br><br>eventExecutors.execute(() -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-type">RuntimeException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;error...&quot;</span>);<br>    log.debug(<span class="hljs-string">&quot;set failure, &#123;&#125;&quot;</span>, e.toString());<br>    promise.setFailure(e);<br>&#125;);<br><br>log.debug(<span class="hljs-string">&quot;start...&quot;</span>);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">12</span>:<span class="hljs-number">04</span>:<span class="hljs-number">57</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - start...<br><span class="hljs-number">12</span>:<span class="hljs-number">04</span>:<span class="hljs-number">58</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[defaultEventLoop-1-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - set failure, java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: error...<br><span class="hljs-number">12</span>:<span class="hljs-number">04</span>:<span class="hljs-number">58</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[defaultEventLoop-1-1]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.o</span><span class="hljs-selector-class">.DefaultPromiseTest2</span> - result java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.RuntimeException</span>: error...<br></code></pre></td></tr></table></figure><h4 id="例6"><a href="#例6" class="headerlink" title="例6"></a>例6</h4><p>await 死锁检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultEventLoop</span> <span class="hljs-variable">eventExecutors</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventLoop</span>();<br>DefaultPromise&lt;Integer&gt; promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultPromise</span>&lt;&gt;(eventExecutors);<br><br>eventExecutors.submit(()-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        promise.await();<br>        <span class="hljs-comment">// 注意不能仅捕获 InterruptedException 异常</span><br>        <span class="hljs-comment">// 否则 死锁检查抛出的 BlockingOperationException 会继续向上传播</span><br>        <span class="hljs-comment">// 而提交的任务会被包装为 PromiseTask，它的 run 方法中会 catch 所有异常然后设置为 Promise 的失败结果而不会抛出</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123; <br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>&#125;);<br>eventExecutors.submit(()-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        promise.await();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;4&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br>io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.BlockingOperationException</span>: DefaultPromise@<span class="hljs-number">47499</span><span class="hljs-built_in">c2a</span>(incomplete)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.DefaultPromise</span><span class="hljs-selector-class">.checkDeadLock</span>(DefaultPromise<span class="hljs-selector-class">.java</span>:<span class="hljs-number">384</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.DefaultPromise</span><span class="hljs-selector-class">.await</span>(DefaultPromise<span class="hljs-selector-class">.java</span>:<span class="hljs-number">212</span>)<br>at com<span class="hljs-selector-class">.itcast</span><span class="hljs-selector-class">.oio</span><span class="hljs-selector-class">.DefaultPromiseTest</span>.lambda<span class="hljs-variable">$main</span>$<span class="hljs-number">0</span>(DefaultPromiseTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">27</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.PromiseTask<span class="hljs-variable">$RunnableAdapter</span><span class="hljs-selector-class">.call</span>(PromiseTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">38</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.PromiseTask</span><span class="hljs-selector-class">.run</span>(PromiseTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">73</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span><span class="hljs-selector-class">.DefaultEventLoop</span><span class="hljs-selector-class">.run</span>(DefaultEventLoop<span class="hljs-selector-class">.java</span>:<span class="hljs-number">54</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.SingleThreadEventExecutor$<span class="hljs-number">5</span><span class="hljs-selector-class">.run</span>(SingleThreadEventExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">918</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.internal</span>.ThreadExecutorMap$<span class="hljs-number">2</span><span class="hljs-selector-class">.run</span>(ThreadExecutorMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">74</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FastThreadLocalRunnable</span><span class="hljs-selector-class">.run</span>(FastThreadLocalRunnable<span class="hljs-selector-class">.java</span>:<span class="hljs-number">30</span>)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">745</span>)<br>io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.BlockingOperationException</span>: DefaultPromise@<span class="hljs-number">47499</span><span class="hljs-built_in">c2a</span>(incomplete)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.DefaultPromise</span><span class="hljs-selector-class">.checkDeadLock</span>(DefaultPromise<span class="hljs-selector-class">.java</span>:<span class="hljs-number">384</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.DefaultPromise</span><span class="hljs-selector-class">.await</span>(DefaultPromise<span class="hljs-selector-class">.java</span>:<span class="hljs-number">212</span>)<br>at com<span class="hljs-selector-class">.itcast</span><span class="hljs-selector-class">.oio</span><span class="hljs-selector-class">.DefaultPromiseTest</span>.lambda<span class="hljs-variable">$main</span>$<span class="hljs-number">1</span>(DefaultPromiseTest<span class="hljs-selector-class">.java</span>:<span class="hljs-number">36</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.PromiseTask<span class="hljs-variable">$RunnableAdapter</span><span class="hljs-selector-class">.call</span>(PromiseTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">38</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.PromiseTask</span><span class="hljs-selector-class">.run</span>(PromiseTask<span class="hljs-selector-class">.java</span>:<span class="hljs-number">73</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.channel</span><span class="hljs-selector-class">.DefaultEventLoop</span><span class="hljs-selector-class">.run</span>(DefaultEventLoop<span class="hljs-selector-class">.java</span>:<span class="hljs-number">54</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span>.SingleThreadEventExecutor$<span class="hljs-number">5</span><span class="hljs-selector-class">.run</span>(SingleThreadEventExecutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">918</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.internal</span>.ThreadExecutorMap$<span class="hljs-number">2</span><span class="hljs-selector-class">.run</span>(ThreadExecutorMap<span class="hljs-selector-class">.java</span>:<span class="hljs-number">74</span>)<br>at io<span class="hljs-selector-class">.netty</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.FastThreadLocalRunnable</span><span class="hljs-selector-class">.run</span>(FastThreadLocalRunnable<span class="hljs-selector-class">.java</span>:<span class="hljs-number">30</span>)<br>at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">745</span>)<br><br></code></pre></td></tr></table></figure><h3 id="3-4-Handler-amp-Pipeline"><a href="#3-4-Handler-amp-Pipeline" class="headerlink" title="3.4 Handler &amp; Pipeline"></a>3.4 Handler &amp; Pipeline</h3><p>ChannelHandler 用来处理 Channel 上的各种事件，分为入站、出站两种。所有 ChannelHandler 被连成一串，就是 Pipeline</p><ul><li>入站处理器通常是 ChannelInboundHandlerAdapter 的子类，主要用来读取客户端数据，写回结果</li><li>出站处理器通常是 ChannelOutboundHandlerAdapter 的子类，主要对写回结果进行加工</li></ul><p>打个比喻，每个 Channel 是一个产品的加工车间，Pipeline 是车间中的流水线，ChannelHandler 就是流水线上的各道工序，而后面要讲的 ByteBuf 是原材料，经过很多工序的加工：先经过一道道入站工序，再经过一道道出站工序最终变成产品</p><p>先搞清楚顺序，服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class="hljs-number">1</span>);<br>                    ctx.fireChannelRead(msg); <span class="hljs-comment">// 1</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class="hljs-number">2</span>);<br>                    ctx.fireChannelRead(msg); <span class="hljs-comment">// 2</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    System.out.println(<span class="hljs-number">3</span>);<br>                    ctx.channel().write(msg); <span class="hljs-comment">// 3</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, </span><br><span class="hljs-params">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class="hljs-number">4</span>);<br>                    ctx.write(msg, promise); <span class="hljs-comment">// 4</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, </span><br><span class="hljs-params">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class="hljs-number">5</span>);<br>                    ctx.write(msg, promise); <span class="hljs-comment">// 5</span><br>                &#125;<br>            &#125;);<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelOutboundHandlerAdapter</span>()&#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg, </span><br><span class="hljs-params">                                  ChannelPromise promise)</span> &#123;<br>                    System.out.println(<span class="hljs-number">6</span>);<br>                    ctx.write(msg, promise); <span class="hljs-comment">// 6</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;)<br>    .bind(<span class="hljs-number">8080</span>);<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(Channel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>        &#125;<br>    &#125;)<br>    .connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>)<br>    .addListener((ChannelFutureListener) future -&gt; &#123;<br>        future.channel().writeAndFlush(<span class="hljs-string">&quot;hello,world&quot;</span>);<br>    &#125;);<br></code></pre></td></tr></table></figure><p>服务器端打印：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br>3<br>6<br>5<br>4<br></code></pre></td></tr></table></figure><p>可以看到，ChannelInboundHandlerAdapter 是按照 addLast 的顺序执行的，而 ChannelOutboundHandlerAdapter 是按照 addLast 的逆序执行的。ChannelPipeline 的实现是一个 ChannelHandlerContext（包装了 ChannelHandler） 组成的双向链表</p><p><img src="/../images/0008.png"></p><ul><li>入站处理器中，ctx.fireChannelRead(msg) 是 <strong>调用下一个入站处理器</strong><ul><li>如果注释掉 1 处代码，则仅会打印 1</li><li>如果注释掉 2 处代码，则仅会打印 1 2</li></ul></li><li>3 处的 ctx.channel().write(msg) 会 <strong>从尾部开始触发</strong> 后续出站处理器的执行<ul><li>如果注释掉 3 处代码，则仅会打印 1 2 3</li></ul></li><li>类似的，出站处理器中，ctx.write(msg, promise) 的调用也会 <strong>触发上一个出站处理器</strong><ul><li>如果注释掉 6 处代码，则仅会打印 1 2 3 6</li></ul></li><li>ctx.channel().write(msg) vs ctx.write(msg)<ul><li>都是触发出站处理器的执行</li><li>ctx.channel().write(msg) 从尾部开始查找出站处理器</li><li>ctx.write(msg) 是从当前节点找上一个出站处理器</li><li>3 处的 ctx.channel().write(msg) 如果改为 ctx.write(msg) 仅会打印 1 2 3，因为节点3 之前没有其它出站处理器了</li><li>6 处的 ctx.write(msg, promise) 如果改为 ctx.channel().write(msg) 会打印 1 2 3 6 6 6… 因为 ctx.channel().write() 是从尾部开始查找，结果又是节点6 自己</li></ul></li></ul><p>图1 - 服务端 pipeline 触发的原始流程，图中数字代表了处理步骤的先后次序</p><p><img src="/../images/0009.png"></p><h3 id="3-5-ByteBuf"><a href="#3-5-ByteBuf" class="headerlink" title="3.5 ByteBuf"></a>3.5 ByteBuf</h3><p>是对字节数据的封装</p><h4 id="1）创建"><a href="#1）创建" class="headerlink" title="1）创建"></a>1）创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">10</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure><p>上面代码创建了一个默认的 ByteBuf（池化基于直接内存的 ByteBuf），初始容量是 10</p><p>输出</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">read</span> <span class="hljs-keyword">index</span>:<span class="hljs-number">0</span> <span class="hljs-keyword">write</span> <span class="hljs-keyword">index</span>:<span class="hljs-number">0</span> capacity:<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>其中 log 方法参考如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(ByteBuf buffer)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> buffer.readableBytes();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> length / <span class="hljs-number">16</span> + (length % <span class="hljs-number">15</span> == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>) + <span class="hljs-number">4</span>;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(rows * <span class="hljs-number">80</span> * <span class="hljs-number">2</span>)<br>        .append(<span class="hljs-string">&quot;read index:&quot;</span>).append(buffer.readerIndex())<br>        .append(<span class="hljs-string">&quot; write index:&quot;</span>).append(buffer.writerIndex())<br>        .append(<span class="hljs-string">&quot; capacity:&quot;</span>).append(buffer.capacity())<br>        .append(NEWLINE);<br>    appendPrettyHexDump(buf, buffer);<br>    System.out.println(buf.toString());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2）直接内存-vs-堆内存"><a href="#2）直接内存-vs-堆内存" class="headerlink" title="2）直接内存 vs 堆内存"></a>2）直接内存 vs 堆内存</h4><p>可以使用下面的代码来创建池化基于堆的 ByteBuf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.heapBuffer(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>也可以使用下面的代码来创建池化基于直接内存的 ByteBuf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.directBuffer(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><ul><li>直接内存创建和销毁的代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起用</li><li>直接内存对 GC 压力小，因为这部分内存不受 JVM 垃圾回收的管理，但也要注意及时主动释放</li></ul><h4 id="3）池化-vs-非池化"><a href="#3）池化-vs-非池化" class="headerlink" title="3）池化 vs 非池化"></a>3）池化 vs 非池化</h4><p>池化的最大意义在于可以重用 ByteBuf，优点有</p><ul><li>没有池化，则每次都得创建新的 ByteBuf 实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加 GC 压力</li><li>有了池化，则可以重用池中 ByteBuf 实例，并且采用了与 jemalloc 类似的内存分配算法提升分配效率</li><li>高并发时，池化功能更节约内存，减少内存溢出的可能</li></ul><p>池化功能是否开启，可以通过下面的系统环境变量来设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-Dio.netty.allocator.type=&#123;unpooled|pooled&#125;<br></code></pre></td></tr></table></figure><ul><li>4.1 以后，非 Android 平台默认启用池化实现，Android 平台启用非池化实现</li><li>4.1 之前，池化功能还不成熟，默认是非池化实现</li></ul><h4 id="4）组成"><a href="#4）组成" class="headerlink" title="4）组成"></a>4）组成</h4><p>ByteBuf 由四部分组成</p><p><img src="/../images/0010.png"></p><p>最开始读写指针都在 0 位置</p><h4 id="5）写入"><a href="#5）写入" class="headerlink" title="5）写入"></a>5）写入</h4><p>方法列表，省略一些不重要的方法</p><table><thead><tr><th>方法签名</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>writeBoolean(boolean value)</td><td>写入 boolean 值</td><td>用一字节 01|00 代表 true|false</td></tr><tr><td>writeByte(int value)</td><td>写入 byte 值</td><td></td></tr><tr><td>writeShort(int value)</td><td>写入 short 值</td><td></td></tr><tr><td>writeInt(int value)</td><td>写入 int 值</td><td>Big Endian，即 0x250，写入后 00 00 02 50</td></tr><tr><td>writeIntLE(int value)</td><td>写入 int 值</td><td>Little Endian，即 0x250，写入后 50 02 00 00</td></tr><tr><td>writeLong(long value)</td><td>写入 long 值</td><td></td></tr><tr><td>writeChar(int value)</td><td>写入 char 值</td><td></td></tr><tr><td>writeFloat(float value)</td><td>写入 float 值</td><td></td></tr><tr><td>writeDouble(double value)</td><td>写入 double 值</td><td></td></tr><tr><td>writeBytes(ByteBuf src)</td><td>写入 netty 的 ByteBuf</td><td></td></tr><tr><td>writeBytes(byte[] src)</td><td>写入 byte[]</td><td></td></tr><tr><td>writeBytes(ByteBuffer src)</td><td>写入 nio 的 ByteBuffer</td><td></td></tr><tr><td>int writeCharSequence(CharSequence sequence, Charset charset)</td><td>写入字符串</td><td></td></tr></tbody></table><blockquote><p>注意</p><ul><li>这些方法的未指明返回值的，其返回值都是 ByteBuf，意味着可以链式调用</li><li>网络传输，默认习惯是 Big Endian</li></ul></blockquote><p>先写入 4 个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">buffer.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;);<br>log(buffer);<br></code></pre></td></tr></table></figure><p>结果是</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">read index:0 write index:4 capacity:10<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 01 02 03 04                                     |....            |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>再写入一个 int 整数，也是 4 个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">buffer.writeInt(<span class="hljs-number">5</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure><p>结果是</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">read index:0 write index:8 capacity:10<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 01 02 03 04 00 00 00 05                         |........        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>还有一类方法是 set 开头的一系列方法，也可以写入数据，但不会改变写指针位置</p><h4 id="6）扩容"><a href="#6）扩容" class="headerlink" title="6）扩容"></a>6）扩容</h4><p>再写入一个 int 整数时，容量不够了（初始容量是 10），这时会引发扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">buffer.writeInt(<span class="hljs-number">6</span>);<br>log(buffer);<br></code></pre></td></tr></table></figure><p>扩容规则是</p><ul><li>如何写入后数据大小未超过 512，则选择下一个 16 的整数倍，例如写入后大小为 12 ，则扩容后 capacity 是 16</li><li>如果写入后数据大小超过 512，则选择下一个 2^n，例如写入后大小为 513，则扩容后 capacity 是 2^10=1024（2^9=512 已经不够了）</li><li>扩容不能超过 max capacity 会报错</li></ul><p>结果是</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">read index:0 write index:12 capacity:16<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 01 02 03 04 00 00 00 05 00 00 00 06             |............    |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><h4 id="7）读取"><a href="#7）读取" class="headerlink" title="7）读取"></a>7）读取</h4><p>例如读了 4 次，每次一个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>System.out.println(buffer.readByte());<br>log(buffer);<br></code></pre></td></tr></table></figure><p>读过的内容，就属于废弃部分了，再读只能读那些尚未读取的部分</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1<br>2<br>3<br>4<br>read index:4 write index:12 capacity:16<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 00 00 00 05 00 00 00 06                         |........        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>如果需要重复读取 int 整数 5，怎么办？</p><p>可以在 read 前先做个标记 mark</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">buffer.markReaderIndex();<br>System.out.println(buffer.readInt());<br>log(buffer);<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">5<br>read index:8 write index:12 capacity:16<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 00 00 00 06                                     |....            |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>这时要重复读取的话，重置到标记位置 reset</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">buffer.resetReaderIndex();<br>log(buffer);<br></code></pre></td></tr></table></figure><p>这时</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">read index:4 write index:12 capacity:16<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 00 00 00 05 00 00 00 06                         |........        |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>还有种办法是采用 get 开头的一系列方法，这些方法不会改变 read index</p><h4 id="8）retain-amp-release"><a href="#8）retain-amp-release" class="headerlink" title="8）retain &amp; release"></a>8）retain &amp; release</h4><p>由于 Netty 中有堆外内存的 ByteBuf 实现，堆外内存最好是手动来释放，而不是等 GC 垃圾回收。</p><ul><li>UnpooledHeapByteBuf 使用的是 JVM 内存，只需等 GC 回收内存即可</li><li>UnpooledDirectByteBuf 使用的就是直接内存了，需要特殊的方法来回收内存</li><li>PooledByteBuf 和它的子类使用了池化机制，需要更复杂的规则来回收内存</li></ul><blockquote><p>回收内存的源码实现，请关注下面方法的不同实现</p><p><code>protected abstract void deallocate()</code></p></blockquote><p>Netty 这里采用了引用计数法来控制回收内存，每个 ByteBuf 都实现了 ReferenceCounted 接口</p><ul><li>每个 ByteBuf 对象的初始计数为 1</li><li>调用 release 方法计数减 1，如果计数为 0，ByteBuf 内存被回收</li><li>调用 retain 方法计数加 1，表示调用者没用完之前，其它 handler 即使调用了 release 也不会造成回收</li><li>当计数为 0 时，底层内存会被回收，这时即使 ByteBuf 对象还在，其各个方法均无法正常使用</li></ul><p>谁来负责 release 呢？</p><p>不是我们想象的（一般情况下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ...<br><span class="hljs-keyword">try</span> &#123;<br>    ...<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    buf.release();<br>&#125;<br></code></pre></td></tr></table></figure><p>请思考，因为 pipeline 的存在，一般需要将 ByteBuf 传递给下一个 ChannelHandler，如果在 finally 中 release 了，就失去了传递性（当然，如果在这个 ChannelHandler 内这个 ByteBuf 已完成了它的使命，那么便无须再传递）</p><p>基本规则是，<strong>谁是最后使用者，谁负责 release</strong>，详细分析如下</p><ul><li>起点，对于 NIO 实现来讲，在 io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read 方法中首次创建 ByteBuf 放入 pipeline（line 163 pipeline.fireChannelRead(byteBuf)）</li><li>入站 ByteBuf 处理原则<ul><li>对原始 ByteBuf 不做处理，调用 ctx.fireChannelRead(msg) 向后传递，这时无须 release</li><li>将原始 ByteBuf 转换为其它类型的 Java 对象，这时 ByteBuf 就没用了，必须 release</li><li>如果不调用 ctx.fireChannelRead(msg) 向后传递，那么也必须 release</li><li>注意各种异常，如果 ByteBuf 没有成功传递到下一个 ChannelHandler，必须 release</li><li>假设消息一直向后传，那么 TailContext 会负责释放未处理消息（原始的 ByteBuf）</li></ul></li><li>出站 ByteBuf 处理原则<ul><li>出站消息最终都会转为 ByteBuf 输出，一直向前传，由 HeadContext flush 后 release</li></ul></li><li>异常处理原则<ul><li>有时候不清楚 ByteBuf 被引用了多少次，但又必须彻底释放，可以循环调用 release 直到返回 true</li></ul></li></ul><p>TailContext 释放未处理消息逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// io.netty.channel.DefaultChannelPipeline#onUnhandledInboundMessage(java.lang.Object)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onUnhandledInboundMessage</span><span class="hljs-params">(Object msg)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        logger.debug(<br>            <span class="hljs-string">&quot;Discarded inbound message &#123;&#125; that reached at the tail of the pipeline. &quot;</span> +<br>            <span class="hljs-string">&quot;Please check your pipeline configuration.&quot;</span>, msg);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ReferenceCountUtil.release(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// io.netty.util.ReferenceCountUtil#release(java.lang.Object)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(Object msg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (msg <span class="hljs-keyword">instanceof</span> ReferenceCounted) &#123;<br>        <span class="hljs-keyword">return</span> ((ReferenceCounted) msg).release();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9）slice"><a href="#9）slice" class="headerlink" title="9）slice"></a>9）slice</h4><p>【零拷贝】的体现之一，对原始 ByteBuf 进行切片成多个 ByteBuf，切片后的 ByteBuf 并没有发生内存复制，还是使用原始 ByteBuf 的内存，切片后的 ByteBuf 维护独立的 read，write 指针</p><p><img src="/../images/0011.png"></p><p>例，原始 ByteBuf 进行一些初始操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">10</span>);<br>origin.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;);<br>origin.readByte();<br>System.out.println(ByteBufUtil.prettyHexDump(origin));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 02 03 04                                        |...             |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>这时调用 slice 进行切片，无参 slice 是从原始 ByteBuf 的 read index 到 write index 之间的内容进行切片，切片后的 max capacity 被固定为这个区间的大小，因此不能追加 write</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">slice</span> <span class="hljs-operator">=</span> origin.slice();<br>System.out.println(ByteBufUtil.prettyHexDump(slice));<br><span class="hljs-comment">// slice.writeByte(5); 如果执行，会报 IndexOutOfBoundsException 异常</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 02 03 04                                        |...             |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>如果原始 ByteBuf 再次读操作（又读了一个字节）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">origin.readByte();<br>System.out.println(ByteBufUtil.prettyHexDump(origin));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 03 04                                           |..              |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>这时的 slice 不受影响，因为它有独立的读写指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(ByteBufUtil.prettyHexDump(slice));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 02 03 04                                        |...             |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>如果 slice 的内容发生了更改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">slice.setByte(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>System.out.println(ByteBufUtil.prettyHexDump(slice));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 02 03 05                                        |...             |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>这时，原始 ByteBuf 也会受影响，因为底层都是同一块内存</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ByteBufUtil</span>.</span></span>pretty<span class="hljs-constructor">HexDump(<span class="hljs-params">origin</span>)</span>);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 03 05                                           |..              |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><h4 id="10）duplicate"><a href="#10）duplicate" class="headerlink" title="10）duplicate"></a>10）duplicate</h4><p>【零拷贝】的体现之一，就好比截取了原始 ByteBuf 所有内容，并且没有 max capacity 的限制，也是与原始 ByteBuf 使用同一块底层内存，只是读写指针是独立的</p><p><img src="/../images/0012.png"></p><h4 id="11）copy"><a href="#11）copy" class="headerlink" title="11）copy"></a>11）copy</h4><p>会将底层内存数据进行深拷贝，因此无论读写，都与原始 ByteBuf 无关</p><h4 id="12）CompositeByteBuf"><a href="#12）CompositeByteBuf" class="headerlink" title="12）CompositeByteBuf"></a>12）CompositeByteBuf</h4><p>【零拷贝】的体现之一，可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免拷贝</p><p>有两个 ByteBuf 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf1</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">5</span>);<br>buf1.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;);<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf2</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">5</span>);<br>buf2.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;);<br>System.out.println(ByteBufUtil.prettyHexDump(buf1));<br>System.out.println(ByteBufUtil.prettyHexDump(buf2));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 01 02 03 04 05                                  |.....           |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 06 07 08 09 0a                                  |.....           |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>现在需要一个新的 ByteBuf，内容来自于刚才的 buf1 和 buf2，如何实现？</p><p>方法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf3</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT<br>    .buffer(buf1.readableBytes()+buf2.readableBytes());<br>buf3.writeBytes(buf1);<br>buf3.writeBytes(buf2);<br>System.out.println(ByteBufUtil.prettyHexDump(buf3));<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>这种方法好不好？回答是不太好，因为进行了数据的内存复制操作</p><p>方法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CompositeByteBuf</span> <span class="hljs-variable">buf3</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.compositeBuffer();<br><span class="hljs-comment">// true 表示增加新的 ByteBuf 自动递增 write index, 否则 write index 会始终为 0</span><br>buf3.addComponents(<span class="hljs-literal">true</span>, buf1, buf2);<br></code></pre></td></tr></table></figure><p>结果是一样的</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>CompositeByteBuf 是一个组合的 ByteBuf，它内部维护了一个 Component 数组，每个 Component 管理一个 ByteBuf，记录了这个 ByteBuf 相对于整体偏移量等信息，代表着整体中某一段的数据。</p><ul><li>优点，对外是一个虚拟视图，组合这些 ByteBuf 不会产生内存复制</li><li>缺点，复杂了很多，多次操作会带来性能的损耗</li></ul><h4 id="13）Unpooled"><a href="#13）Unpooled" class="headerlink" title="13）Unpooled"></a>13）Unpooled</h4><p>Unpooled 是一个工具类，类如其名，提供了非池化的 ByteBuf 创建、组合、复制等操作</p><p>这里仅介绍其跟【零拷贝】相关的 wrappedBuffer 方法，可以用来包装 ByteBuf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf1</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">5</span>);<br>buf1.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;);<br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf2</span> <span class="hljs-operator">=</span> ByteBufAllocator.DEFAULT.buffer(<span class="hljs-number">5</span>);<br>buf2.writeBytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;);<br><br><span class="hljs-comment">// 当包装 ByteBuf 个数超过一个时, 底层使用了 CompositeByteBuf</span><br><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf3</span> <span class="hljs-operator">=</span> Unpooled.wrappedBuffer(buf1, buf2);<br>System.out.println(ByteBufUtil.prettyHexDump(buf3));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 01 02 03 04 05 06 07 08 09 0a                   |..........      |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>也可以用来包装普通字节数组，底层也不会有拷贝操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf4</span> <span class="hljs-operator">=</span> Unpooled.wrappedBuffer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;);<br>System.out.println(buf4.getClass());<br>System.out.println(ByteBufUtil.prettyHexDump(buf4));<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">class io.netty.buffer.CompositeByteBuf<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 01 02 03 04 05 06                               |......          |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><h4 id="💡-ByteBuf-优势"><a href="#💡-ByteBuf-优势" class="headerlink" title="💡 ByteBuf 优势"></a>💡 ByteBuf 优势</h4><ul><li>池化 - 可以重用池中 ByteBuf 实例，更节约内存，减少内存溢出的可能</li><li>读写指针分离，不需要像 ByteBuffer 一样切换读写模式</li><li>可以自动扩容</li><li>支持链式调用，使用更流畅</li><li>很多地方体现零拷贝，例如 slice、duplicate、CompositeByteBuf</li></ul><h2 id="4-双向通信"><a href="#4-双向通信" class="headerlink" title="4. 双向通信"></a>4. 双向通信</h2><h3 id="4-1-练习"><a href="#4-1-练习" class="headerlink" title="4.1 练习"></a>4.1 练习</h3><p>实现一个 echo server</p><p>编写 server</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>()<br>    .group(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>())<br>    .channel(NioServerSocketChannel.class)<br>    .childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>()&#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                    System.out.println(buffer.toString(Charset.defaultCharset()));<br><br>                    <span class="hljs-comment">// 建议使用 ctx.alloc() 创建 ByteBuf</span><br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> ctx.alloc().buffer();<br>                    response.writeBytes(buffer);<br>                    ctx.writeAndFlush(response);<br><br>                    <span class="hljs-comment">// 思考：需要释放 buffer 吗</span><br>                    <span class="hljs-comment">// 思考：需要释放 response 吗</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).bind(<span class="hljs-number">8080</span>);<br></code></pre></td></tr></table></figure><p>编写 client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NioEventLoopGroup</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bootstrap</span>()<br>    .group(group)<br>    .channel(NioSocketChannel.class)<br>    .handler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(NioSocketChannel ch)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>());<br>            ch.pipeline().addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelInboundHandlerAdapter</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> &#123;<br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> (ByteBuf) msg;<br>                    System.out.println(buffer.toString(Charset.defaultCharset()));<br><br>                    <span class="hljs-comment">// 思考：需要释放 buffer 吗</span><br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8080</span>).sync().channel();<br><br>channel.closeFuture().addListener(future -&gt; &#123;<br>    group.shutdownGracefully();<br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;q&quot;</span>.equals(line)) &#123;<br>            channel.close();<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        channel.writeAndFlush(line);<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h3 id="💡-读和写的误解"><a href="#💡-读和写的误解" class="headerlink" title="💡 读和写的误解"></a>💡 读和写的误解</h3><p>我最初在认识上有这样的误区，认为只有在 netty，nio 这样的多路复用 IO 模型时，读写才不会相互阻塞，才可以实现高效的双向通信，但实际上，Java Socket 是全双工的：在任意时刻，线路上存在<code>A 到 B</code> 和 <code>B 到 A</code> 的双向信号传输。即使是阻塞 IO，读和写是可以同时进行的，只要分别采用读线程和写线程即可，读不会阻塞写、写也不会阻塞读</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ss.accept();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(s.getInputStream()));<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(reader.readLine());<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(s.getOutputStream()));<br>                <span class="hljs-comment">// 例如在这个位置加入 thread 级别断点，可以发现即使不写入数据，也不妨碍前面线程读取客户端数据</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    writer.write(String.valueOf(i));<br>                    writer.newLine();<br>                    writer.flush();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8888</span>);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(s.getInputStream()));<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(reader.readLine());<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(s.getOutputStream()));<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                    writer.write(String.valueOf(i));<br>                    writer.newLine();<br>                    writer.flush();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty学习（一）</title>
    <link href="/2024/03/10/Netty%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/03/10/Netty%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="一-NIO-基础"><a href="#一-NIO-基础" class="headerlink" title="一. NIO 基础"></a>一. NIO 基础</h1><p>non-blocking io 非阻塞 IO</p><h2 id="1-三大组件"><a href="#1-三大组件" class="headerlink" title="1. 三大组件"></a>1. 三大组件</h2><h3 id="1-1-Channel-amp-Buffer"><a href="#1-1-Channel-amp-Buffer" class="headerlink" title="1.1 Channel &amp; Buffer"></a>1.1 Channel &amp; Buffer</h3><p>channel 有一点类似于 stream，它就是读写数据的<strong>双向通道</strong>，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层</p><pre><code class=" mermaid">graph LRchannel --&gt; bufferbuffer --&gt; channel</code></pre><p>常见的 Channel 有</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>buffer 则用来缓冲读写数据，常见的 buffer 有</p><ul><li>ByteBuffer<ul><li>MappedByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul></li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li><li>CharBuffer</li></ul><h3 id="1-2-Selector"><a href="#1-2-Selector" class="headerlink" title="1.2 Selector"></a>1.2 Selector</h3><p>selector 单从字面意思不好理解，需要结合服务器的设计演化来理解它的用途</p><h4 id="多线程版设计"><a href="#多线程版设计" class="headerlink" title="多线程版设计"></a>多线程版设计</h4><pre><code class=" mermaid">graph TDsubgraph 多线程版t1(thread) --&gt; s1(socket1)t2(thread) --&gt; s2(socket2)t3(thread) --&gt; s3(socket3)end</code></pre><h4 id="⚠️-多线程版缺点"><a href="#⚠️-多线程版缺点" class="headerlink" title="⚠️ 多线程版缺点"></a>⚠️ 多线程版缺点</h4><ul><li>内存占用高</li><li>线程上下文切换成本高</li><li>只适合连接数少的场景</li></ul><h4 id="线程池版设计"><a href="#线程池版设计" class="headerlink" title="线程池版设计"></a>线程池版设计</h4><pre><code class=" mermaid">graph TDsubgraph 线程池版t4(thread) --&gt; s4(socket1)t5(thread) --&gt; s5(socket2)t4(thread) -.-&gt; s6(socket3)t5(thread) -.-&gt; s7(socket4)end</code></pre><h4 id="⚠️-线程池版缺点"><a href="#⚠️-线程池版缺点" class="headerlink" title="⚠️ 线程池版缺点"></a>⚠️ 线程池版缺点</h4><ul><li>阻塞模式下，线程仅能处理一个 socket 连接</li><li>仅适合短连接场景</li></ul><h4 id="selector-版设计"><a href="#selector-版设计" class="headerlink" title="selector 版设计"></a>selector 版设计</h4><p>selector 的作用就是配合一个线程来管理多个 channel，获取这些 channel 上发生的事件，这些 channel 工作在非阻塞模式下，不会让线程吊死在一个 channel 上。适合连接数特别多，但流量低的场景（low traffic）</p><pre><code class=" mermaid">graph TDsubgraph selector 版thread --&gt; selectorselector --&gt; c1(channel)selector --&gt; c2(channel)selector --&gt; c3(channel)end</code></pre><p>调用 selector 的 select() 会阻塞直到 channel 发生了读写就绪事件，这些事件发生，select 方法就会返回这些事件交给 thread 来处理</p><h2 id="2-ByteBuffer"><a href="#2-ByteBuffer" class="headerlink" title="2. ByteBuffer"></a>2. ByteBuffer</h2><p>有一普通文本文件 data.txt，内容为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1234567890abcd<br></code></pre></td></tr></table></figure><p>使用 FileChannel 来读取文件内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>)) &#123;<br>            <span class="hljs-type">FileChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> file.getChannel();<br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-comment">// 向 buffer 写入</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> channel.read(buffer);<br>                log.debug(<span class="hljs-string">&quot;读到字节数：&#123;&#125;&quot;</span>, len);<br>                <span class="hljs-keyword">if</span> (len == -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 切换 buffer 读模式</span><br>                buffer.flip();<br>                <span class="hljs-keyword">while</span>(buffer.hasRemaining()) &#123;<br>                    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, (<span class="hljs-type">char</span>)buffer.get());<br>                &#125;<br>                <span class="hljs-comment">// 切换 buffer 写模式</span><br>                buffer.clear();<br>            &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - 读到字节数：<span class="hljs-number">10</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">1</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">2</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">3</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">4</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">5</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">6</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">7</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">8</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">9</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-number">0</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - 读到字节数：<span class="hljs-number">4</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-selector-tag">a</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - <span class="hljs-selector-tag">b</span><br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - c<br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - d<br><span class="hljs-number">10</span>:<span class="hljs-number">39</span>:<span class="hljs-number">03</span> <span class="hljs-selector-attr">[DEBUG]</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.i</span><span class="hljs-selector-class">.n</span><span class="hljs-selector-class">.ChannelDemo1</span> - 读到字节数：-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="2-1-ByteBuffer-正确使用姿势"><a href="#2-1-ByteBuffer-正确使用姿势" class="headerlink" title="2.1  ByteBuffer 正确使用姿势"></a>2.1  ByteBuffer 正确使用姿势</h3><ol><li>向 buffer 写入数据，例如调用 channel.read(buffer)</li><li>调用 flip() 切换至<strong>读模式</strong></li><li>从 buffer 读取数据，例如调用 buffer.get()</li><li>调用 clear() 或 compact() 切换至<strong>写模式</strong></li><li>重复 1~4 步骤</li></ol><h3 id="2-2-ByteBuffer-结构"><a href="#2-2-ByteBuffer-结构" class="headerlink" title="2.2 ByteBuffer 结构"></a>2.2 ByteBuffer 结构</h3><p>ByteBuffer 有以下重要属性</p><ul><li>capacity</li><li>position</li><li>limit</li></ul><p>一开始</p><p><img src="/../images/0021-1710007673033.png"></p><p>写模式下，position 是写入位置，limit 等于容量，下图表示写入了 4 个字节后的状态</p><p><img src="/../images/0018.png"></p><p>flip 动作发生后，position 切换为读取位置，limit 切换为读取限制</p><p><img src="/../images/0019.png"></p><p>读取 4 个字节后，状态</p><p><img src="/../images/0020.png"></p><p>clear 动作发生后，状态</p><p><img src="/../images/0021.png"></p><p>compact 方法，是把未读完的部分向前压缩，然后切换至写模式</p><p><img src="/../images/0022.png"></p><h4 id="💡-调试工具类"><a href="#💡-调试工具类" class="headerlink" title="💡 调试工具类"></a>💡 调试工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ByteBufferUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] BYTE2CHAR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] HEXDUMP_TABLE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">256</span> * <span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] HEXPADDING = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">16</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] HEXDUMP_ROWPREFIXES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">65536</span> &gt;&gt;&gt; <span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] BYTE2HEX = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">256</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] BYTEPADDING = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">16</span>];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] DIGITS = <span class="hljs-string">&quot;0123456789abcdef&quot;</span>.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>            HEXDUMP_TABLE[i &lt;&lt; <span class="hljs-number">1</span>] = DIGITS[i &gt;&gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0x0F</span>];<br>            HEXDUMP_TABLE[(i &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>] = DIGITS[i &amp; <span class="hljs-number">0x0F</span>];<br>        &#125;<br><br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-comment">// Generate the lookup table for hex dump paddings</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; HEXPADDING.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">padding</span> <span class="hljs-operator">=</span> HEXPADDING.length - i;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(padding * <span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; padding; j++) &#123;<br>                buf.append(<span class="hljs-string">&quot;   &quot;</span>);<br>            &#125;<br>            HEXPADDING[i] = buf.toString();<br>        &#125;<br><br>        <span class="hljs-comment">// Generate the lookup table for the start-offset header in each row (up to 64KiB).</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; HEXDUMP_ROWPREFIXES.length; i++) &#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">12</span>);<br>            buf.append(NEWLINE);<br>            buf.append(Long.toHexString(i &lt;&lt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0xFFFFFFFFL</span> | <span class="hljs-number">0x100000000L</span>));<br>            buf.setCharAt(buf.length() - <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;|&#x27;</span>);<br>            buf.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>            HEXDUMP_ROWPREFIXES[i] = buf.toString();<br>        &#125;<br><br>        <span class="hljs-comment">// Generate the lookup table for byte-to-hex-dump conversion</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; BYTE2HEX.length; i++) &#123;<br>            BYTE2HEX[i] = <span class="hljs-string">&#x27; &#x27;</span> + StringUtil.byteToHexStringPadded(i);<br>        &#125;<br><br>        <span class="hljs-comment">// Generate the lookup table for byte dump paddings</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; BYTEPADDING.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">padding</span> <span class="hljs-operator">=</span> BYTEPADDING.length - i;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(padding);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; padding; j++) &#123;<br>                buf.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>            &#125;<br>            BYTEPADDING[i] = buf.toString();<br>        &#125;<br><br>        <span class="hljs-comment">// Generate the lookup table for byte-to-char conversion</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; BYTE2CHAR.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">0x1f</span> || i &gt;= <span class="hljs-number">0x7f</span>) &#123;<br>                BYTE2CHAR[i] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                BYTE2CHAR[i] = (<span class="hljs-type">char</span>) i;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打印所有内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> buffer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debugAll</span><span class="hljs-params">(ByteBuffer buffer)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldlimit</span> <span class="hljs-operator">=</span> buffer.limit();<br>        buffer.limit(buffer.capacity());<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">256</span>);<br>        appendPrettyHexDump(origin, buffer, <span class="hljs-number">0</span>, buffer.capacity());<br>        System.out.println(<span class="hljs-string">&quot;+--------+-------------------- all ------------------------+----------------+&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;position: [%d], limit: [%d]\n&quot;</span>, buffer.position(), oldlimit);<br>        System.out.println(origin);<br>        buffer.limit(oldlimit);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打印可读取内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> buffer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debugRead</span><span class="hljs-params">(ByteBuffer buffer)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">256</span>);<br>        appendPrettyHexDump(builder, buffer, buffer.position(), buffer.limit() - buffer.position());<br>        System.out.println(<span class="hljs-string">&quot;+--------+-------------------- read -----------------------+----------------+&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;position: [%d], limit: [%d]\n&quot;</span>, buffer.position(), buffer.limit());<br>        System.out.println(builder);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendPrettyHexDump</span><span class="hljs-params">(StringBuilder dump, ByteBuffer buf, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isOutOfBounds(offset, length, buf.capacity())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<br>                    <span class="hljs-string">&quot;expected: &quot;</span> + <span class="hljs-string">&quot;0 &lt;= offset(&quot;</span> + offset + <span class="hljs-string">&quot;) &lt;= offset + length(&quot;</span> + length<br>                            + <span class="hljs-string">&quot;) &lt;= &quot;</span> + <span class="hljs-string">&quot;buf.capacity(&quot;</span> + buf.capacity() + <span class="hljs-string">&#x27;)&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        dump.append(<br>                <span class="hljs-string">&quot;         +-------------------------------------------------+&quot;</span> +<br>                        NEWLINE + <span class="hljs-string">&quot;         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |&quot;</span> +<br>                        NEWLINE + <span class="hljs-string">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> offset;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">fullRows</span> <span class="hljs-operator">=</span> length &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">remainder</span> <span class="hljs-operator">=</span> length &amp; <span class="hljs-number">0xF</span>;<br><br>        <span class="hljs-comment">// Dump the rows which have 16 bytes.</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; row &lt; fullRows; row++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowStartIndex</span> <span class="hljs-operator">=</span> (row &lt;&lt; <span class="hljs-number">4</span>) + startIndex;<br><br>            <span class="hljs-comment">// Per-row prefix.</span><br>            appendHexDumpRowPrefix(dump, row, rowStartIndex);<br><br>            <span class="hljs-comment">// Hex dump</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowEndIndex</span> <span class="hljs-operator">=</span> rowStartIndex + <span class="hljs-number">16</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(<span class="hljs-string">&quot; |&quot;</span>);<br><br>            <span class="hljs-comment">// ASCII dump</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// Dump the last row which has less than 16 bytes.</span><br>        <span class="hljs-keyword">if</span> (remainder != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowStartIndex</span> <span class="hljs-operator">=</span> (fullRows &lt;&lt; <span class="hljs-number">4</span>) + startIndex;<br>            appendHexDumpRowPrefix(dump, fullRows, rowStartIndex);<br><br>            <span class="hljs-comment">// Hex dump</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">rowEndIndex</span> <span class="hljs-operator">=</span> rowStartIndex + remainder;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2HEX[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(HEXPADDING[remainder]);<br>            dump.append(<span class="hljs-string">&quot; |&quot;</span>);<br><br>            <span class="hljs-comment">// Ascii dump</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> rowStartIndex; j &lt; rowEndIndex; j++) &#123;<br>                dump.append(BYTE2CHAR[getUnsignedByte(buf, j)]);<br>            &#125;<br>            dump.append(BYTEPADDING[remainder]);<br>            dump.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>        &#125;<br><br>        dump.append(NEWLINE +<br>                <span class="hljs-string">&quot;+--------+-------------------------------------------------+----------------+&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendHexDumpRowPrefix</span><span class="hljs-params">(StringBuilder dump, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> rowStartIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (row &lt; HEXDUMP_ROWPREFIXES.length) &#123;<br>            dump.append(HEXDUMP_ROWPREFIXES[row]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dump.append(NEWLINE);<br>            dump.append(Long.toHexString(rowStartIndex &amp; <span class="hljs-number">0xFFFFFFFFL</span> | <span class="hljs-number">0x100000000L</span>));<br>            dump.setCharAt(dump.length() - <span class="hljs-number">9</span>, <span class="hljs-string">&#x27;|&#x27;</span>);<br>            dump.append(<span class="hljs-string">&#x27;|&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">short</span> <span class="hljs-title function_">getUnsignedByte</span><span class="hljs-params">(ByteBuffer buffer, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">short</span>) (buffer.get(index) &amp; <span class="hljs-number">0xFF</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-ByteBuffer-常见方法"><a href="#2-3-ByteBuffer-常见方法" class="headerlink" title="2.3 ByteBuffer 常见方法"></a>2.3 ByteBuffer 常见方法</h3><h4 id="分配空间"><a href="#分配空间" class="headerlink" title="分配空间"></a>分配空间</h4><p>可以使用 allocate 方法为 ByteBuffer 分配空间，其它 buffer 类也有该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Bytebuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br></code></pre></td></tr></table></figure><h4 id="向-buffer-写入数据"><a href="#向-buffer-写入数据" class="headerlink" title="向 buffer 写入数据"></a>向 buffer 写入数据</h4><p>有两种办法</p><ul><li>调用 channel 的 read 方法</li><li>调用 buffer 自己的 put 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">readBytes</span> <span class="hljs-operator">=</span> channel.read(buf);<br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">buf.put((<span class="hljs-type">byte</span>)<span class="hljs-number">127</span>);<br></code></pre></td></tr></table></figure><h4 id="从-buffer-读取数据"><a href="#从-buffer-读取数据" class="headerlink" title="从 buffer 读取数据"></a>从 buffer 读取数据</h4><p>同样有两种办法</p><ul><li>调用 channel 的 write 方法</li><li>调用 buffer 自己的 get 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">writeBytes</span> <span class="hljs-operator">=</span> channel.write(buf);<br></code></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> buf.get();<br></code></pre></td></tr></table></figure><p>get 方法会让 position 读指针向后走，如果想重复读取数据</p><ul><li>可以调用 rewind 方法将 position 重新置为 0</li><li>或者调用 get(int i) 方法获取索引 i 的内容，它不会移动读指针</li></ul><h4 id="mark-和-reset"><a href="#mark-和-reset" class="headerlink" title="mark 和 reset"></a>mark 和 reset</h4><p>mark 是在读取时，做一个标记，即使 position 改变，只要调用 reset 就能回到 mark 的位置</p><blockquote><p><strong>注意</strong></p><p>rewind 和 flip 都会清除 mark 位置</p></blockquote><h4 id="字符串与-ByteBuffer-互转"><a href="#字符串与-ByteBuffer-互转" class="headerlink" title="字符串与 ByteBuffer 互转"></a>字符串与 ByteBuffer 互转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer1</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8.encode(<span class="hljs-string">&quot;你好&quot;</span>);<br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer2</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;utf-8&quot;</span>).encode(<span class="hljs-string">&quot;你好&quot;</span>);<br><br>debug(buffer1);<br>debug(buffer2);<br><br><span class="hljs-type">CharBuffer</span> <span class="hljs-variable">buffer3</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8.decode(buffer1);<br>System.out.println(buffer3.getClass());<br>System.out.println(buffer3.toString());<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| e4 bd a0 e5 a5 bd                               |......          |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| e4 bd a0 e5 a5 bd                               |......          |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>class java.nio.HeapCharBuffer<br>你好<br></code></pre></td></tr></table></figure><h4 id="⚠️-Buffer-的线程安全"><a href="#⚠️-Buffer-的线程安全" class="headerlink" title="⚠️ Buffer 的线程安全"></a>⚠️ Buffer 的线程安全</h4><blockquote><p>Buffer 是<strong>非线程安全的</strong></p></blockquote><h3 id="2-4-Scattering-Reads"><a href="#2-4-Scattering-Reads" class="headerlink" title="2.4 Scattering Reads"></a>2.4 Scattering Reads</h3><p>分散读取，有一个文本文件 3parts.txt</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">onetwothree</span><br></code></pre></td></tr></table></figure><p>使用如下方式读取，可以将数据填充至多个 buffer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;helloword/3parts.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>)) &#123;<br>    <span class="hljs-type">FileChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> file.getChannel();<br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">3</span>);<br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">3</span>);<br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">5</span>);<br>    channel.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteBuffer</span>[]&#123;a, b, c&#125;);<br>    a.flip();<br>    b.flip();<br>    c.flip();<br>    debug(a);<br>    debug(b);<br>    debug(c);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 6f 6e 65                                        |one             |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 74 77 6f                                        |two             |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 74 68 72 65 65                                  |three           |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><h3 id="2-5-Gathering-Writes"><a href="#2-5-Gathering-Writes" class="headerlink" title="2.5 Gathering Writes"></a>2.5 Gathering Writes</h3><p>使用如下方式写入，可以将多个 buffer 的数据填充至 channel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;helloword/3parts.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>)) &#123;<br>    <span class="hljs-type">FileChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> file.getChannel();<br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">4</span>);<br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">4</span>);<br>    channel.position(<span class="hljs-number">11</span>);<br><br>    d.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>&#125;);<br>    e.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;);<br>    d.flip();<br>    e.flip();<br>    debug(d);<br>    debug(e);<br>    channel.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteBuffer</span>[]&#123;d, e&#125;);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 66 6f 75 72                                     |four            |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 66 69 76 65                                     |five            |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">onetwothreefourfive</span><br></code></pre></td></tr></table></figure><h3 id="2-6-练习"><a href="#2-6-练习" class="headerlink" title="2.6 练习"></a>2.6 练习</h3><p>网络上有多条数据发送给服务端，数据之间使用 \n 进行分隔<br>但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p><ul><li>Hello,world\n</li><li>I’m zhangsan\n</li><li>How are you?\n</li></ul><p>变成了下面的两个 byteBuffer (黏包，半包)</p><ul><li>Hello,world\nI’m zhangsan\nHo</li><li>w are you?\n</li></ul><p>现在要求你编写程序，将错乱的数据恢复成原始的按 \n 分隔的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">32</span>);<br>    <span class="hljs-comment">//                     11            24</span><br>    source.put(<span class="hljs-string">&quot;Hello,world\nI&#x27;m zhangsan\nHo&quot;</span>.getBytes());<br>    split(source);<br><br>    source.put(<span class="hljs-string">&quot;w are you?\nhaha!\n&quot;</span>.getBytes());<br>    split(source);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">split</span><span class="hljs-params">(ByteBuffer source)</span> &#123;<br>    source.flip();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldLimit</span> <span class="hljs-operator">=</span> source.limit();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; oldLimit; i++) &#123;<br>        <span class="hljs-keyword">if</span> (source.get(i) == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>            System.out.println(i);<br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(i + <span class="hljs-number">1</span> - source.position());<br>            <span class="hljs-comment">// 0 ~ limit</span><br>            source.limit(i + <span class="hljs-number">1</span>);<br>            target.put(source); <span class="hljs-comment">// 从source 读，向 target 写</span><br>            debugAll(target);<br>            source.limit(oldLimit);<br>        &#125;<br>    &#125;<br>    source.compact();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-文件编程"><a href="#3-文件编程" class="headerlink" title="3. 文件编程"></a>3. 文件编程</h2><h3 id="3-1-FileChannel"><a href="#3-1-FileChannel" class="headerlink" title="3.1 FileChannel"></a>3.1 FileChannel</h3><h4 id="⚠️-FileChannel-工作模式"><a href="#⚠️-FileChannel-工作模式" class="headerlink" title="⚠️ FileChannel 工作模式"></a>⚠️ FileChannel 工作模式</h4><blockquote><p>FileChannel 只能工作在阻塞模式下</p></blockquote><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p><ul><li>通过 FileInputStream 获取的 channel 只能读</li><li>通过 FileOutputStream 获取的 channel 只能写</li><li>通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定</li></ul><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><p>会从 channel 读取数据填充 ByteBuffer，返回值表示读到了多少字节，-1 表示到达了文件的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">readBytes</span> <span class="hljs-operator">=</span> channel.read(buffer);<br></code></pre></td></tr></table></figure><h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><p>写入的正确姿势如下， SocketChannel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ...;<br>buffer.put(...); <span class="hljs-comment">// 存入数据</span><br>buffer.flip();   <span class="hljs-comment">// 切换读模式</span><br><br><span class="hljs-keyword">while</span>(buffer.hasRemaining()) &#123;<br>    channel.write(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><p>在 while 中调用 channel.write 是因为 write 方法并不能保证一次将 buffer 中的内容全部写入 channel</p><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p>channel 必须关闭，不过调用了 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 close 方法会间接地调用 channel 的 close 方法</p><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>获取当前位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> channel.position();<br></code></pre></td></tr></table></figure><p>设置当前位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">newPos</span> <span class="hljs-operator">=</span> ...;<br>channel.position(newPos);<br></code></pre></td></tr></table></figure><p>设置当前位置时，如果设置为文件的末尾</p><ul><li>这时读取会返回 -1 </li><li>这时写入，会追加内容，但要注意如果 position 超过了文件末尾，再写入时在新内容和原末尾之间会有空洞（00）</li></ul><h4 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h4><p>使用 size 方法获取文件的大小</p><h4 id="强制写入"><a href="#强制写入" class="headerlink" title="强制写入"></a>强制写入</h4><p>操作系统出于性能的考虑，会将数据缓存，不是立刻写入磁盘。可以调用 force(true)  方法将文件内容和元数据（文件的权限等信息）立刻写入磁盘</p><h3 id="3-2-两个-Channel-传输数据"><a href="#3-2-两个-Channel-传输数据" class="headerlink" title="3.2 两个 Channel 传输数据"></a>3.2 两个 Channel 传输数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">FROM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloword/data.txt&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">TO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloword/to.txt&quot;</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.nanoTime();<br><span class="hljs-keyword">try</span> (<span class="hljs-type">FileChannel</span> <span class="hljs-variable">from</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FROM).getChannel();<br>     <span class="hljs-type">FileChannel</span> <span class="hljs-variable">to</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(TO).getChannel();<br>    ) &#123;<br>    from.transferTo(<span class="hljs-number">0</span>, from.size(), to);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.nanoTime();<br>System.out.println(<span class="hljs-string">&quot;transferTo 用时：&quot;</span> + (end - start) / <span class="hljs-number">1000_000.0</span>);<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">transferTo</span> 用时：<span class="hljs-number">8</span>.<span class="hljs-number">2011</span><br></code></pre></td></tr></table></figure><p>超过 2g 大小的文件传输</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFileChannelTransferTo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">FileChannel</span> <span class="hljs-variable">from</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;data.txt&quot;</span>).getChannel();<br>                <span class="hljs-type">FileChannel</span> <span class="hljs-variable">to</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;to.txt&quot;</span>).getChannel();<br>        ) &#123;<br>            <span class="hljs-comment">// 效率高，底层会利用操作系统的零拷贝进行优化</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> from.size();<br>            <span class="hljs-comment">// left 变量代表还剩余多少字节</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> size; left &gt; <span class="hljs-number">0</span>; ) &#123;<br>                System.out.println(<span class="hljs-string">&quot;position:&quot;</span> + (size - left) + <span class="hljs-string">&quot; left:&quot;</span> + left);<br>                left -= from.transferTo((size - left), left, to);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际传输一个超大文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">position</span>:<span class="hljs-number">0</span> left:<span class="hljs-number">7769948160</span><br><span class="hljs-attribute">position</span>:<span class="hljs-number">2147483647</span> left:<span class="hljs-number">5622464513</span><br><span class="hljs-attribute">position</span>:<span class="hljs-number">4294967294</span> left:<span class="hljs-number">3474980866</span><br><span class="hljs-attribute">position</span>:<span class="hljs-number">6442450941</span> left:<span class="hljs-number">1327497219</span><br></code></pre></td></tr></table></figure><h3 id="3-3-Path"><a href="#3-3-Path" class="headerlink" title="3.3 Path"></a>3.3 Path</h3><p>jdk7 引入了 Path 和 Paths 类</p><ul><li>Path 用来表示文件路径</li><li>Paths 是工具类，用来获取 Path 实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;1.txt&quot;</span>); <span class="hljs-comment">// 相对路径 使用 user.dir 环境变量来定位 1.txt</span><br><br><span class="hljs-type">Path</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;d:\\1.txt&quot;</span>); <span class="hljs-comment">// 绝对路径 代表了  d:\1.txt</span><br><br><span class="hljs-type">Path</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;d:/1.txt&quot;</span>); <span class="hljs-comment">// 绝对路径 同样代表了  d:\1.txt</span><br><br><span class="hljs-type">Path</span> <span class="hljs-variable">projects</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;d:\\data&quot;</span>, <span class="hljs-string">&quot;projects&quot;</span>); <span class="hljs-comment">// 代表了  d:\data\projects</span><br></code></pre></td></tr></table></figure><ul><li><code>.</code> 代表了当前路径</li><li><code>..</code> 代表了上一级路径</li></ul><p>例如目录结构如下</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">d:<br><span class="hljs-string">|- data</span><br><span class="hljs-string">|- projects</span><br><span class="hljs-string">|- a</span><br><span class="hljs-string">|- b</span><br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;d:\\data\\projects\\a\\..\\b&quot;</span>);<br>System.out.println(path);<br>System.out.println(path.normalize()); <span class="hljs-comment">// 正常化路径</span><br></code></pre></td></tr></table></figure><p>会输出</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">d</span>:\<span class="hljs-class"><span class="hljs-keyword">data</span>\projects\a\..\b</span><br><span class="hljs-title">d</span>:\<span class="hljs-class"><span class="hljs-keyword">data</span>\projects\b</span><br></code></pre></td></tr></table></figure><h3 id="3-4-Files"><a href="#3-4-Files" class="headerlink" title="3.4 Files"></a>3.4 Files</h3><p>检查文件是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>);<br>System.out.println(Files.exists(path));<br></code></pre></td></tr></table></figure><p>创建一级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/d1&quot;</span>);<br>Files.createDirectory(path);<br></code></pre></td></tr></table></figure><ul><li>如果目录已存在，会抛异常 FileAlreadyExistsException</li><li>不能一次创建多级目录，否则会抛异常 NoSuchFileException</li></ul><p>创建多级目录用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/d1/d2&quot;</span>);<br>Files.createDirectories(path);<br></code></pre></td></tr></table></figure><p>拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/target.txt&quot;</span>);<br><br>Files.copy(source, target);<br></code></pre></td></tr></table></figure><ul><li>如果文件已存在，会抛异常 FileAlreadyExistsException</li></ul><p>如果希望用 source 覆盖掉 target，需要用 StandardCopyOption 来控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Files.copy(source, target, StandardCopyOption.REPLACE_EXISTING);<br></code></pre></td></tr></table></figure><p>移动文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>);<br><br>Files.move(source, target, StandardCopyOption.ATOMIC_MOVE);<br></code></pre></td></tr></table></figure><ul><li>StandardCopyOption.ATOMIC_MOVE 保证文件移动的原子性</li></ul><p>删除文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/target.txt&quot;</span>);<br><br>Files.delete(target);<br></code></pre></td></tr></table></figure><ul><li>如果文件不存在，会抛异常 NoSuchFileException</li></ul><p>删除目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;helloword/d1&quot;</span>);<br><br>Files.delete(target);<br></code></pre></td></tr></table></figure><ul><li>如果目录还有内容，会抛异常 DirectoryNotEmptyException</li></ul><p>遍历目录文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;C:\\Program Files\\Java\\jdk1.8.0_91&quot;</span>);<br>    <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">dirCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>    <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">fileCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>    Files.walkFileTree(path, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> FileVisitResult <span class="hljs-title function_">preVisitDirectory</span><span class="hljs-params">(Path dir, BasicFileAttributes attrs)</span> <br>            <span class="hljs-keyword">throws</span> IOException &#123;<br>            System.out.println(dir);<br>            dirCount.incrementAndGet();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.preVisitDirectory(dir, attrs);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> FileVisitResult <span class="hljs-title function_">visitFile</span><span class="hljs-params">(Path file, BasicFileAttributes attrs)</span> <br>            <span class="hljs-keyword">throws</span> IOException &#123;<br>            System.out.println(file);<br>            fileCount.incrementAndGet();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.visitFile(file, attrs);<br>        &#125;<br>    &#125;);<br>    System.out.println(dirCount); <span class="hljs-comment">// 133</span><br>    System.out.println(fileCount); <span class="hljs-comment">// 1479</span><br>&#125;<br></code></pre></td></tr></table></figure><p>统计 jar 的数目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;C:\\Program Files\\Java\\jdk1.8.0_91&quot;</span>);<br><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">fileCount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>Files.walkFileTree(path, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> FileVisitResult <span class="hljs-title function_">visitFile</span><span class="hljs-params">(Path file, BasicFileAttributes attrs)</span> <br>        <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (file.toFile().getName().endsWith(<span class="hljs-string">&quot;.jar&quot;</span>)) &#123;<br>            fileCount.incrementAndGet();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.visitFile(file, attrs);<br>    &#125;<br>&#125;);<br>System.out.println(fileCount); <span class="hljs-comment">// 724</span><br></code></pre></td></tr></table></figure><p>删除多级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;d:\\a&quot;</span>);<br>Files.walkFileTree(path, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFileVisitor</span>&lt;Path&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> FileVisitResult <span class="hljs-title function_">visitFile</span><span class="hljs-params">(Path file, BasicFileAttributes attrs)</span> <br>        <span class="hljs-keyword">throws</span> IOException &#123;<br>        Files.delete(file);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.visitFile(file, attrs);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> FileVisitResult <span class="hljs-title function_">postVisitDirectory</span><span class="hljs-params">(Path dir, IOException exc)</span> <br>        <span class="hljs-keyword">throws</span> IOException &#123;<br>        Files.delete(dir);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.postVisitDirectory(dir, exc);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="⚠️-删除很危险"><a href="#⚠️-删除很危险" class="headerlink" title="⚠️ 删除很危险"></a>⚠️ 删除很危险</h4><blockquote><p>删除是危险操作，确保要递归删除的文件夹没有重要内容</p></blockquote><p>拷贝多级目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-type">String</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\Snipaste-1.16.2-x64&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\Snipaste-1.16.2-x64aaa&quot;</span>;<br><br>Files.walk(Paths.get(source)).forEach(path -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">targetName</span> <span class="hljs-operator">=</span> path.toString().replace(source, target);<br>        <span class="hljs-comment">// 是目录</span><br>        <span class="hljs-keyword">if</span> (Files.isDirectory(path)) &#123;<br>            Files.createDirectory(Paths.get(targetName));<br>        &#125;<br>        <span class="hljs-comment">// 是普通文件</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Files.isRegularFile(path)) &#123;<br>            Files.copy(path, Paths.get(targetName));<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;);<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(end - start);<br></code></pre></td></tr></table></figure><h2 id="4-网络编程"><a href="#4-网络编程" class="headerlink" title="4. 网络编程"></a>4. 网络编程</h2><h3 id="4-1-非阻塞-vs-阻塞"><a href="#4-1-非阻塞-vs-阻塞" class="headerlink" title="4.1 非阻塞 vs 阻塞"></a>4.1 非阻塞 vs 阻塞</h3><h4 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h4><ul><li>阻塞模式下，相关方法都会导致线程暂停<ul><li>ServerSocketChannel.accept 会在没有连接建立时让线程暂停</li><li>SocketChannel.read 会在没有数据可读时让线程暂停</li><li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li></ul></li><li>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</li><li>但多线程下，有新的问题，体现在以下方面<ul><li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li><li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li></ul></li></ul><p>服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 nio 来理解阻塞模式, 单线程</span><br><span class="hljs-comment">// 0. ByteBuffer</span><br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br><span class="hljs-comment">// 1. 创建了服务器</span><br><span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">ssc</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br><br><span class="hljs-comment">// 2. 绑定监听端口</span><br>ssc.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br><br><span class="hljs-comment">// 3. 连接集合</span><br>List&lt;SocketChannel&gt; channels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">// 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信</span><br>    log.debug(<span class="hljs-string">&quot;connecting...&quot;</span>);<br>    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> ssc.accept(); <span class="hljs-comment">// 阻塞方法，线程停止运行</span><br>    log.debug(<span class="hljs-string">&quot;connected... &#123;&#125;&quot;</span>, sc);<br>    channels.add(sc);<br>    <span class="hljs-keyword">for</span> (SocketChannel channel : channels) &#123;<br>        <span class="hljs-comment">// 5. 接收客户端发送的数据</span><br>        log.debug(<span class="hljs-string">&quot;before read... &#123;&#125;&quot;</span>, channel);<br>        channel.read(buffer); <span class="hljs-comment">// 阻塞方法，线程停止运行</span><br>        buffer.flip();<br>        debugRead(buffer);<br>        buffer.clear();<br>        log.debug(<span class="hljs-string">&quot;after read...&#123;&#125;&quot;</span>, channel);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> SocketChannel.open();<br>sc.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br>System.out.println(<span class="hljs-string">&quot;waiting...&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h4><ul><li>非阻塞模式下，相关方法都会不会让线程暂停<ul><li>在 ServerSocketChannel.accept 在没有连接建立时，会返回 null，继续运行</li><li>SocketChannel.read 在没有数据可读时，会返回 0，但线程不必阻塞，可以去执行其它 SocketChannel 的 read 或是去执行 ServerSocketChannel.accept </li><li>写数据时，线程只是等待数据写入 Channel 即可，无需等 Channel 通过网络把数据发送出去</li></ul></li><li>但非阻塞模式下，即使没有连接建立，和可读数据，线程仍然在不断运行，白白浪费了 cpu</li><li>数据复制过程中，线程实际还是阻塞的（AIO 改进的地方）</li></ul><p>服务器端，客户端代码不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 nio 来理解非阻塞模式, 单线程</span><br><span class="hljs-comment">// 0. ByteBuffer</span><br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br><span class="hljs-comment">// 1. 创建了服务器</span><br><span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">ssc</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br>ssc.configureBlocking(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 非阻塞模式</span><br><span class="hljs-comment">// 2. 绑定监听端口</span><br>ssc.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br><span class="hljs-comment">// 3. 连接集合</span><br>List&lt;SocketChannel&gt; channels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-comment">// 4. accept 建立与客户端连接， SocketChannel 用来与客户端之间通信</span><br>    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> ssc.accept(); <span class="hljs-comment">// 非阻塞，线程还会继续运行，如果没有连接建立，但sc是null</span><br>    <span class="hljs-keyword">if</span> (sc != <span class="hljs-literal">null</span>) &#123;<br>        log.debug(<span class="hljs-string">&quot;connected... &#123;&#125;&quot;</span>, sc);<br>        sc.configureBlocking(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 非阻塞模式</span><br>        channels.add(sc);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (SocketChannel channel : channels) &#123;<br>        <span class="hljs-comment">// 5. 接收客户端发送的数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> channel.read(buffer);<span class="hljs-comment">// 非阻塞，线程仍然会继续运行，如果没有读到数据，read 返回 0</span><br>        <span class="hljs-keyword">if</span> (read &gt; <span class="hljs-number">0</span>) &#123;<br>            buffer.flip();<br>            debugRead(buffer);<br>            buffer.clear();<br>            log.debug(<span class="hljs-string">&quot;after read...&#123;&#125;&quot;</span>, channel);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p><ul><li>多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用</li><li>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证<ul><li>有可连接事件时才去连接</li><li>有可读事件才去读取</li><li>有可写事件才去写入<ul><li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li></ul></li></ul></li></ul><h3 id="4-2-Selector"><a href="#4-2-Selector" class="headerlink" title="4.2 Selector"></a>4.2 Selector</h3><pre><code class=" mermaid">graph TDsubgraph selector 版thread --&gt; selectorselector --&gt; c1(channel)selector --&gt; c2(channel)selector --&gt; c3(channel)end</code></pre><p>好处</p><ul><li>一个线程配合 selector 就可以监控多个 channel 的事件，事件发生线程才去处理。避免非阻塞模式下所做无用功</li><li>让这个线程能够被充分利用</li><li>节约了线程的数量</li><li>减少了线程上下文切换</li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br></code></pre></td></tr></table></figure><h4 id="绑定-Channel-事件"><a href="#绑定-Channel-事件" class="headerlink" title="绑定 Channel 事件"></a>绑定 Channel 事件</h4><p>也称之为注册事件，绑定的事件 selector 才会关心 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">channel.configureBlocking(<span class="hljs-literal">false</span>);<br><span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> channel.register(selector, 绑定事件);<br></code></pre></td></tr></table></figure><ul><li>channel 必须工作在非阻塞模式</li><li>FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用</li><li>绑定的事件类型可以有<ul><li>connect - 客户端连接成功时触发</li><li>accept - 服务器端成功接受连接时触发</li><li>read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况</li><li>write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况</li></ul></li></ul><h4 id="监听-Channel-事件"><a href="#监听-Channel-事件" class="headerlink" title="监听 Channel 事件"></a>监听 Channel 事件</h4><p>可以通过下面三种方法来监听是否有事件发生，方法的返回值代表有多少 channel 发生了事件</p><p>方法1，阻塞直到绑定事件发生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select();<br></code></pre></td></tr></table></figure><p>方法2，阻塞直到绑定事件发生，或是超时（时间单位为 ms）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select(<span class="hljs-type">long</span> timeout);<br></code></pre></td></tr></table></figure><p>方法3，不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.selectNow();<br></code></pre></td></tr></table></figure><h4 id="💡-select-何时不阻塞"><a href="#💡-select-何时不阻塞" class="headerlink" title="💡 select 何时不阻塞"></a>💡 select 何时不阻塞</h4><blockquote><ul><li>事件发生时<ul><li>客户端发起连接请求，会触发 accept 事件</li><li>客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件</li><li>channel 可写，会触发 write 事件</li><li>在 linux 下 nio bug 发生时</li></ul></li><li>调用 selector.wakeup()</li><li>调用 selector.close()</li><li>selector 所在线程 interrupt</li></ul></blockquote><h3 id="4-3-处理-accept-事件"><a href="#4-3-处理-accept-事件" class="headerlink" title="4.3 处理 accept 事件"></a>4.3 处理 accept 事件</h3><p>客户端代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>)) &#123;<br>            System.out.println(socket);<br>            socket.getOutputStream().write(<span class="hljs-string">&quot;world&quot;</span>.getBytes());<br>            System.in.read();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器端代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            channel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            System.out.println(channel);<br>            <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>            channel.configureBlocking(<span class="hljs-literal">false</span>);<br>            channel.register(selector, SelectionKey.OP_ACCEPT);<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select();<br><span class="hljs-comment">//                int count = selector.selectNow();</span><br>                log.debug(<span class="hljs-string">&quot;select count: &#123;&#125;&quot;</span>, count);<br><span class="hljs-comment">//                if(count &lt;= 0) &#123;</span><br><span class="hljs-comment">//                    continue;</span><br><span class="hljs-comment">//                &#125;</span><br><br>                <span class="hljs-comment">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br><br>                <span class="hljs-comment">// 遍历所有事件，逐一处理</span><br>                Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iter.next();<br>                    <span class="hljs-comment">// 判断事件类型</span><br>                    <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>                        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br>                        <span class="hljs-comment">// 必须处理</span><br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> c.accept();<br>                        log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, sc);<br>                    &#125;<br>                    <span class="hljs-comment">// 处理完毕，必须将事件移除</span><br>                    iter.remove();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="💡-事件发生后能否不处理"><a href="#💡-事件发生后能否不处理" class="headerlink" title="💡 事件发生后能否不处理"></a>💡 事件发生后能否不处理</h4><blockquote><p>事件发生后，要么处理，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio 底层使用的是水平触发</p></blockquote><h3 id="4-4-处理-read-事件"><a href="#4-4-处理-read-事件" class="headerlink" title="4.4 处理 read 事件"></a>4.4 处理 read 事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            channel.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            System.out.println(channel);<br>            <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>            channel.configureBlocking(<span class="hljs-literal">false</span>);<br>            channel.register(selector, SelectionKey.OP_ACCEPT);<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select();<br><span class="hljs-comment">//                int count = selector.selectNow();</span><br>                log.debug(<span class="hljs-string">&quot;select count: &#123;&#125;&quot;</span>, count);<br><span class="hljs-comment">//                if(count &lt;= 0) &#123;</span><br><span class="hljs-comment">//                    continue;</span><br><span class="hljs-comment">//                &#125;</span><br><br>                <span class="hljs-comment">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();<br><br>                <span class="hljs-comment">// 遍历所有事件，逐一处理</span><br>                Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iter.next();<br>                    <span class="hljs-comment">// 判断事件类型</span><br>                    <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>                        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br>                        <span class="hljs-comment">// 必须处理</span><br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> c.accept();<br>                        sc.configureBlocking(<span class="hljs-literal">false</span>);<br>                        sc.register(selector, SelectionKey.OP_READ);<br>                        log.debug(<span class="hljs-string">&quot;连接已建立: &#123;&#125;&quot;</span>, sc);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> (SocketChannel) key.channel();<br>                        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">128</span>);<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> sc.read(buffer);<br>                        <span class="hljs-keyword">if</span>(read == -<span class="hljs-number">1</span>) &#123;<br>                            key.cancel();<br>                            sc.close();<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            buffer.flip();<br>                            debug(buffer);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-comment">// 处理完毕，必须将事件移除</span><br>                    iter.remove();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>开启两个客户端，修改一下发送文字，输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">sun.nio.ch.ServerSocketChannelImpl[/0:0:0:0:0:0:0:0:8080]<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60367]<br>21:16:39 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 68 65 6c 6c 6f                                  |hello           |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - 连接已建立: java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:60378]<br>21:16:59 [DEBUG] [main] c.i.n.ChannelDemo6 - select count: 1<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 77 6f 72 6c 64                                  |world           |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><h4 id="💡-为何要-iter-remove"><a href="#💡-为何要-iter-remove" class="headerlink" title="💡 为何要 iter.remove()"></a>💡 为何要 iter.remove()</h4><blockquote><p>因为 select 在事件发生后，就会将相关的 key 放入 selectedKeys 集合，但不会在处理完后从 selectedKeys 集合中移除，需要我们自己编码删除。例如</p><ul><li>第一次触发了 ssckey 上的 accept 事件，没有移除 ssckey </li><li>第二次触发了 sckey 上的 read 事件，但这时 selectedKeys 中还有上次的 ssckey ，在处理时因为没有真正的 serverSocket 连上了，就会导致空指针异常</li></ul></blockquote><h4 id="💡-cancel-的作用"><a href="#💡-cancel-的作用" class="headerlink" title="💡 cancel 的作用"></a>💡 cancel 的作用</h4><blockquote><p>cancel 会取消注册在 selector 上的 channel，并从 keys 集合中删除 key 后续不会再监听事件</p></blockquote><h4 id="⚠️-不处理边界的问题"><a href="#⚠️-不处理边界的问题" class="headerlink" title="⚠️  不处理边界的问题"></a>⚠️  不处理边界的问题</h4><p>以前有同学写过这样的代码，思考注释中两个问题，以 bio 为例，其实 nio 道理是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ServerSocket ss=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9000</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ss.accept();<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> s.getInputStream();<br>            <span class="hljs-comment">// 这里这么写，有没有问题</span><br>            <span class="hljs-type">byte</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> in.read(arr);<br>                <span class="hljs-comment">// 这里这么写，有没有问题</span><br>                <span class="hljs-keyword">if</span>(read == -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr, <span class="hljs-number">0</span>, read));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9000</span>);<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> max.getOutputStream();<br>        out.write(<span class="hljs-string">&quot;hello&quot;</span>.getBytes());<br>        out.write(<span class="hljs-string">&quot;world&quot;</span>.getBytes());<br>        out.write(<span class="hljs-string">&quot;你好&quot;</span>.getBytes());<br>        max.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">hell<br>owor<br><span class="hljs-keyword">ld</span>�<br>�好<br><br></code></pre></td></tr></table></figure><p>为什么？</p><h4 id="处理消息的边界"><a href="#处理消息的边界" class="headerlink" title="处理消息的边界"></a>处理消息的边界</h4><p><img src="/../images/0023.png"></p><ul><li>一种思路是固定消息长度，数据包大小一样，服务器按预定长度读取，缺点是浪费带宽</li><li>另一种思路是按分隔符拆分，缺点是效率低</li><li>TLV 格式，即 Type 类型、Length 长度、Value 数据，类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量<ul><li>Http 1.1 是 TLV 格式</li><li>Http 2.0 是 LTV 格式</li></ul></li></ul><pre><code class=" mermaid">sequenceDiagram participant c1 as 客户端1participant s as 服务器participant b1 as ByteBuffer1participant b2 as ByteBuffer2c1 -&gt;&gt; s: 发送 01234567890abcdef3333\rs -&gt;&gt; b1: 第一次 read 存入 01234567890abcdefs -&gt;&gt; b2: 扩容b1 -&gt;&gt; b2: 拷贝 01234567890abcdefs -&gt;&gt; b2: 第二次 read 存入 3333\rb2 -&gt;&gt; b2: 01234567890abcdef3333\r</code></pre><p>服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">split</span><span class="hljs-params">(ByteBuffer source)</span> &#123;<br>    source.flip();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; source.limit(); i++) &#123;<br>        <span class="hljs-comment">// 找到一条完整消息</span><br>        <span class="hljs-keyword">if</span> (source.get(i) == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span> - source.position();<br>            <span class="hljs-comment">// 把这条完整消息存入新的 ByteBuffer</span><br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(length);<br>            <span class="hljs-comment">// 从 source 读，向 target 写</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<br>                target.put(source.get());<br>            &#125;<br>            debugAll(target);<br>        &#125;<br>    &#125;<br>    source.compact(); <span class="hljs-comment">// 0123456789abcdef  position 16 limit 16</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 1. 创建 selector, 管理多个 channel</span><br>    <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>    <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">ssc</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br>    ssc.configureBlocking(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 2. 建立 selector 和 channel 的联系（注册）</span><br>    <span class="hljs-comment">// SelectionKey 就是将来事件发生后，通过它可以知道事件和哪个channel的事件</span><br>    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">sscKey</span> <span class="hljs-operator">=</span> ssc.register(selector, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// key 只关注 accept 事件</span><br>    sscKey.interestOps(SelectionKey.OP_ACCEPT);<br>    log.debug(<span class="hljs-string">&quot;sscKey:&#123;&#125;&quot;</span>, sscKey);<br>    ssc.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 3. select 方法, 没有事件发生，线程阻塞，有事件，线程才会恢复运行</span><br>        <span class="hljs-comment">// select 在事件未处理时，它不会阻塞, 事件发生后要么处理，要么取消，不能置之不理</span><br>        selector.select();<br>        <span class="hljs-comment">// 4. 处理事件, selectedKeys 内部包含了所有发生的事件</span><br>        Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator(); <span class="hljs-comment">// accept, read</span><br>        <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>            <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iter.next();<br>            <span class="hljs-comment">// 处理key 时，要从 selectedKeys 集合中删除，否则下次处理就会有问题</span><br>            iter.remove();<br>            log.debug(<span class="hljs-string">&quot;key: &#123;&#125;&quot;</span>, key);<br>            <span class="hljs-comment">// 5. 区分事件类型</span><br>            <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123; <span class="hljs-comment">// 如果是 accept</span><br>                <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br>                <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> channel.accept();<br>                sc.configureBlocking(<span class="hljs-literal">false</span>);<br>                <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>); <span class="hljs-comment">// attachment</span><br>                <span class="hljs-comment">// 将一个 byteBuffer 作为附件关联到 selectionKey 上</span><br>                <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">scKey</span> <span class="hljs-operator">=</span> sc.register(selector, <span class="hljs-number">0</span>, buffer);<br>                scKey.interestOps(SelectionKey.OP_READ);<br>                log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, sc);<br>                log.debug(<span class="hljs-string">&quot;scKey:&#123;&#125;&quot;</span>, scKey);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable()) &#123; <span class="hljs-comment">// 如果是 read</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (SocketChannel) key.channel(); <span class="hljs-comment">// 拿到触发事件的channel</span><br>                    <span class="hljs-comment">// 获取 selectionKey 上关联的附件</span><br>                    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> (ByteBuffer) key.attachment();<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> channel.read(buffer); <span class="hljs-comment">// 如果是正常断开，read 的方法的返回值是 -1</span><br>                    <span class="hljs-keyword">if</span>(read == -<span class="hljs-number">1</span>) &#123;<br>                        key.cancel();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        split(buffer);<br>                        <span class="hljs-comment">// 需要扩容</span><br>                        <span class="hljs-keyword">if</span> (buffer.position() == buffer.limit()) &#123;<br>                            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">newBuffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(buffer.capacity() * <span class="hljs-number">2</span>);<br>                            buffer.flip();<br>                            newBuffer.put(buffer); <span class="hljs-comment">// 0123456789abcdef3333\n</span><br>                            key.attach(newBuffer);<br>                        &#125;<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                    key.cancel();  <span class="hljs-comment">// 因为客户端断开了,因此需要将 key 取消（从 selector 的 keys 集合中真正删除 key）</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> SocketChannel.open();<br>sc.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br><span class="hljs-type">SocketAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> sc.getLocalAddress();<br><span class="hljs-comment">// sc.write(Charset.defaultCharset().encode(&quot;hello\nworld\n&quot;));</span><br>sc.write(Charset.defaultCharset().encode(<span class="hljs-string">&quot;0123\n456789abcdef&quot;</span>));<br>sc.write(Charset.defaultCharset().encode(<span class="hljs-string">&quot;0123456789abcdef3333\n&quot;</span>));<br>System.in.read();<br></code></pre></td></tr></table></figure><h4 id="ByteBuffer-大小分配"><a href="#ByteBuffer-大小分配" class="headerlink" title="ByteBuffer 大小分配"></a>ByteBuffer 大小分配</h4><ul><li>每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer</li><li>ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer<ul><li>一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 <a href="http://tutorials.jenkov.com/java-performance/resizable-array.html">http://tutorials.jenkov.com/java-performance/resizable-array.html</a></li><li>另一种思路是用多个数组组成 buffer，一个数组不够，把多出来的内容写入新的数组，与前面的区别是消息存储不连续解析复杂，优点是避免了拷贝引起的性能损耗</li></ul></li></ul><h3 id="4-5-处理-write-事件"><a href="#4-5-处理-write-事件" class="headerlink" title="4.5 处理 write 事件"></a>4.5 处理 write 事件</h3><h4 id="一次无法写完例子"><a href="#一次无法写完例子" class="headerlink" title="一次无法写完例子"></a>一次无法写完例子</h4><ul><li>非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）</li><li>用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略<ul><li>当消息处理器第一次写入消息时，才将 channel 注册到 selector 上</li><li>selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册</li><li>如果不取消，会每次可写均会触发 write 事件</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteServer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">ssc</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br>        ssc.configureBlocking(<span class="hljs-literal">false</span>);<br>        ssc.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br><br>        <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>        ssc.register(selector, SelectionKey.OP_ACCEPT);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            selector.select();<br><br>            Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br>            <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>                <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iter.next();<br>                iter.remove();<br>                <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>                    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> ssc.accept();<br>                    sc.configureBlocking(<span class="hljs-literal">false</span>);<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">sckey</span> <span class="hljs-operator">=</span> sc.register(selector, SelectionKey.OP_READ);<br>                    <span class="hljs-comment">// 1. 向客户端发送内容</span><br>                    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3000000</span>; i++) &#123;<br>                        sb.append(<span class="hljs-string">&quot;a&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> Charset.defaultCharset().encode(sb.toString());<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">write</span> <span class="hljs-operator">=</span> sc.write(buffer);<br>                    <span class="hljs-comment">// 3. write 表示实际写了多少字节</span><br>                    System.out.println(<span class="hljs-string">&quot;实际写入字节:&quot;</span> + write);<br>                    <span class="hljs-comment">// 4. 如果有剩余未读字节，才需要关注写事件</span><br>                    <span class="hljs-keyword">if</span> (buffer.hasRemaining()) &#123;<br>                        <span class="hljs-comment">// read 1  write 4</span><br>                        <span class="hljs-comment">// 在原有关注事件的基础上，多关注 写事件</span><br>                        sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE);<br>                        <span class="hljs-comment">// 把 buffer 作为附件加入 sckey</span><br>                        sckey.attach(buffer);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isWritable()) &#123;<br>                    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> (ByteBuffer) key.attachment();<br>                    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> (SocketChannel) key.channel();<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">write</span> <span class="hljs-operator">=</span> sc.write(buffer);<br>                    System.out.println(<span class="hljs-string">&quot;实际写入字节:&quot;</span> + write);<br>                    <span class="hljs-keyword">if</span> (!buffer.hasRemaining()) &#123; <span class="hljs-comment">// 写完了</span><br>                        key.interestOps(key.interestOps() - SelectionKey.OP_WRITE);<br>                        key.attach(<span class="hljs-literal">null</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> SocketChannel.open();<br>        sc.configureBlocking(<span class="hljs-literal">false</span>);<br>        sc.register(selector, SelectionKey.OP_CONNECT | SelectionKey.OP_READ);<br>        sc.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            selector.select();<br>            Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();<br>            <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>                <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iter.next();<br>                iter.remove();<br>                <span class="hljs-keyword">if</span> (key.isConnectable()) &#123;<br>                    System.out.println(sc.finishConnect());<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>                    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>                    count += sc.read(buffer);<br>                    buffer.clear();<br>                    System.out.println(count);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="💡-write-为何要取消"><a href="#💡-write-为何要取消" class="headerlink" title="💡 write 为何要取消"></a>💡 write 为何要取消</h4><p>只要向 channel 发送数据时，socket 缓冲可写，这个事件会频繁触发，因此应当只在 socket 缓冲区写不下时再关注可写事件，数据写完之后再取消关注</p><h3 id="4-6-更进一步"><a href="#4-6-更进一步" class="headerlink" title="4.6 更进一步"></a>4.6 更进一步</h3><h4 id="💡-利用多线程优化"><a href="#💡-利用多线程优化" class="headerlink" title="💡 利用多线程优化"></a>💡 利用多线程优化</h4><blockquote><p>现在都是多核 cpu，设计时要充分考虑别让 cpu 的力量被白白浪费</p></blockquote><p>前面的代码只有一个选择器，没有充分利用多核 cpu，如何改进呢？</p><p>分两组选择器</p><ul><li>单线程配一个选择器，专门处理 accept 事件</li><li>创建 cpu 核心数的线程，每个线程配一个选择器，轮流处理 read 事件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChannelDemo7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BossEventLoop</span>().register();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Slf4j</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BossEventLoop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-keyword">private</span> Selector boss;<br>        <span class="hljs-keyword">private</span> WorkerEventLoop[] workers;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">if</span> (!start) &#123;<br>                <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">ssc</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br>                ssc.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>                ssc.configureBlocking(<span class="hljs-literal">false</span>);<br>                boss = Selector.open();<br>                <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">ssckey</span> <span class="hljs-operator">=</span> ssc.register(boss, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br>                ssckey.interestOps(SelectionKey.OP_ACCEPT);<br>                workers = initEventLoops();<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;boss&quot;</span>).start();<br>                log.debug(<span class="hljs-string">&quot;boss start...&quot;</span>);<br>                start = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> WorkerEventLoop[] initEventLoops() &#123;<br><span class="hljs-comment">//        EventLoop[] eventLoops = new EventLoop[Runtime.getRuntime().availableProcessors()];</span><br>            WorkerEventLoop[] workerEventLoops = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkerEventLoop</span>[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; workerEventLoops.length; i++) &#123;<br>                workerEventLoops[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkerEventLoop</span>(i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> workerEventLoops;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    boss.select();<br>                    Iterator&lt;SelectionKey&gt; iter = boss.selectedKeys().iterator();<br>                    <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>                        <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iter.next();<br>                        iter.remove();<br>                        <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>                            <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br>                            <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> c.accept();<br>                            sc.configureBlocking(<span class="hljs-literal">false</span>);<br>                            log.debug(<span class="hljs-string">&quot;&#123;&#125; connected&quot;</span>, sc.getRemoteAddress());<br>                            workers[index.getAndIncrement() % workers.length].register(sc);<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Slf4j</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkerEventLoop</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-keyword">private</span> Selector worker;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> index;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentLinkedQueue&lt;Runnable&gt; tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentLinkedQueue</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">WorkerEventLoop</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>            <span class="hljs-built_in">this</span>.index = index;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(SocketChannel sc)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">if</span> (!start) &#123;<br>                worker = Selector.open();<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;worker-&quot;</span> + index).start();<br>                start = <span class="hljs-literal">true</span>;<br>            &#125;<br>            tasks.add(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">sckey</span> <span class="hljs-operator">=</span> sc.register(worker, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br>                    sckey.interestOps(SelectionKey.OP_READ);<br>                    worker.selectNow();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;);<br>            worker.wakeup();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    worker.select();<br>                    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> tasks.poll();<br>                    <span class="hljs-keyword">if</span> (task != <span class="hljs-literal">null</span>) &#123;<br>                        task.run();<br>                    &#125;<br>                    Set&lt;SelectionKey&gt; keys = worker.selectedKeys();<br>                    Iterator&lt;SelectionKey&gt; iter = keys.iterator();<br>                    <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>                        <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iter.next();<br>                        <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>                            <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> (SocketChannel) key.channel();<br>                            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">128</span>);<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> sc.read(buffer);<br>                                <span class="hljs-keyword">if</span> (read == -<span class="hljs-number">1</span>) &#123;<br>                                    key.cancel();<br>                                    sc.close();<br>                                &#125; <span class="hljs-keyword">else</span> &#123;<br>                                    buffer.flip();<br>                                    log.debug(<span class="hljs-string">&quot;&#123;&#125; message:&quot;</span>, sc.getRemoteAddress());<br>                                    debugAll(buffer);<br>                                &#125;<br>                            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                                e.printStackTrace();<br>                                key.cancel();<br>                                sc.close();<br>                            &#125;<br>                        &#125;<br>                        iter.remove();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="💡-如何拿到-cpu-个数"><a href="#💡-如何拿到-cpu-个数" class="headerlink" title="💡 如何拿到 cpu 个数"></a>💡 如何拿到 cpu 个数</h4><blockquote><ul><li>Runtime.getRuntime().availableProcessors() 如果工作在 docker 容器下，因为容器不是物理隔离的，会拿到物理 cpu 个数，而不是容器申请时的个数</li><li>这个问题直到 jdk 10 才修复，使用 jvm 参数 UseContainerSupport 配置， 默认开启</li></ul></blockquote><h3 id="4-7-UDP"><a href="#4-7-UDP" class="headerlink" title="4.7 UDP"></a>4.7 UDP</h3><ul><li>UDP 是无连接的，client 发送数据不会管 server 是否开启</li><li>server 这边的 receive 方法会将接收到的数据存入 byte buffer，但如果数据报文超过 buffer 大小，多出来的数据会被默默抛弃</li></ul><p>首先启动服务器端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DatagramChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> DatagramChannel.open()) &#123;<br>            channel.socket().bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">9999</span>));<br>            System.out.println(<span class="hljs-string">&quot;waiting...&quot;</span>);<br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">32</span>);<br>            channel.receive(buffer);<br>            buffer.flip();<br>            debug(buffer);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">waiting</span></span>...<br></code></pre></td></tr></table></figure><p>运行客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DatagramChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> DatagramChannel.open()) &#123;<br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8.encode(<span class="hljs-string">&quot;hello&quot;</span>);<br>            <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9999</span>);<br>            channel.send(buffer, address);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来服务器端输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 68 65 6c 6c 6f                                  |hello           |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><h2 id="5-NIO-vs-BIO"><a href="#5-NIO-vs-BIO" class="headerlink" title="5. NIO vs BIO"></a>5. NIO vs BIO</h2><h3 id="5-1-stream-vs-channel"><a href="#5-1-stream-vs-channel" class="headerlink" title="5.1 stream vs channel"></a>5.1 stream vs channel</h3><ul><li>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</li><li>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用</li><li>二者均为全双工，即读写可以同时进行</li></ul><h3 id="5-2-IO-模型"><a href="#5-2-IO-模型" class="headerlink" title="5.2 IO 模型"></a>5.2 IO 模型</h3><p>同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞</p><ul><li>同步：线程自己去获取结果（一个线程）</li><li>异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）</li></ul><p>当调用一次 channel.read 或 stream.read 后，会切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p><ul><li>等待数据阶段</li><li>复制数据阶段</li></ul><p><img src="/../images/0033.png"></p><ul><li><p>阻塞 IO</p><p>  <img src="/../images/0039.png"></p></li><li><p>非阻塞  IO</p><p>  <img src="/../images/0035.png"></p></li><li><p>多路复用</p><p>  <img src="/../images/0038.png"></p></li><li><p>信号驱动</p></li><li><p>异步 IO</p><p>  <img src="/../images/0037.png"></p></li><li><p>阻塞 IO vs 多路复用</p><p>  <img src="/../images/0034.png"></p><p>  <img src="/../images/0036.png"></p></li></ul><h4 id="🔖-参考"><a href="#🔖-参考" class="headerlink" title="🔖 参考"></a>🔖 参考</h4><p>UNIX 网络编程 - 卷 I</p><h3 id="5-3-零拷贝"><a href="#5-3-零拷贝" class="headerlink" title="5.3 零拷贝"></a>5.3 零拷贝</h3><h4 id="传统-IO-问题"><a href="#传统-IO-问题" class="headerlink" title="传统 IO 问题"></a>传统 IO 问题</h4><p>传统的 IO 将一个文件通过 socket 写出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>);<br><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;r&quot;</span>);<br><br><span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)f.length()];<br>file.read(buf);<br><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ...;<br>socket.getOutputStream().write(buf);<br></code></pre></td></tr></table></figure><p>内部工作流程是这样的：</p><p><img src="/../images/0024.png"></p><ol><li><p>java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu</p><blockquote><p>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</p></blockquote></li><li><p>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA</p></li><li><p>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</p></li><li><p>接下来要向网卡写数据，这项能力 java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</p></li></ol><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><h4 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a>NIO 优化</h4><p>通过 DirectByteBuf </p><ul><li>ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存</li><li>ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存</li></ul><p><img src="/../images/0025.png"></p><p>大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用</p><ul><li>这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</li><li>java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步<ul><li>DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列</li><li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li></ul></li><li>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</li></ul><p>进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据</p><p><img src="/../images/0026.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>可以看到</p><ul><li>只发生了一次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><p>进一步优化（linux 2.4）</p><p><img src="/../images/0027.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul><h3 id="5-3-AIO"><a href="#5-3-AIO" class="headerlink" title="5.3 AIO"></a>5.3 AIO</h3><p>AIO 用来解决数据复制阶段的阻塞问题</p><ul><li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li><li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li></ul><blockquote><p>异步模型需要底层操作系统（Kernel）提供支持</p><ul><li>Windows 系统通过 IOCP 实现了真正的异步 IO</li><li>Linux 系统异步 IO 在 2.6 版本引入，但其底层实现还是用多路复用模拟了异步 IO，性能没有优势</li></ul></blockquote><h4 id="文件-AIO"><a href="#文件-AIO" class="headerlink" title="文件 AIO"></a>文件 AIO</h4><p>先来看看 AsynchronousFileChannel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AioDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">AsynchronousFileChannel</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <br>                AsynchronousFileChannel.open(<br>                Paths.get(<span class="hljs-string">&quot;1.txt&quot;</span>), StandardOpenOption.READ);<br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">2</span>);<br>            log.debug(<span class="hljs-string">&quot;begin...&quot;</span>);<br>            s.read(buffer, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(Integer result, ByteBuffer attachment)</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;read completed...&#123;&#125;&quot;</span>, result);<br>                    buffer.flip();<br>                    debug(buffer);<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>                    log.debug(<span class="hljs-string">&quot;read failed...&quot;</span>);<br>                &#125;<br>            &#125;);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        log.debug(<span class="hljs-string">&quot;do other things...&quot;</span>);<br>        System.in.read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - begin...<br>13:44:56 [DEBUG] [main] c.i.aio.AioDemo1 - do other things...<br>13:44:56 [DEBUG] [Thread-5] c.i.aio.AioDemo1 - read completed...2<br><span class="hljs-code">         +-------------------------------------------------+</span><br><span class="hljs-section">         |  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br><span class="hljs-section">|00000000| 61 0d                                           |a.              |</span><br><span class="hljs-section">+--------+-------------------------------------------------+----------------+</span><br></code></pre></td></tr></table></figure><p>可以看到</p><ul><li>响应文件读取成功的是另一个线程 Thread-5</li><li>主线程并没有 IO 操作阻塞</li></ul><h4 id="💡-守护线程"><a href="#💡-守护线程" class="headerlink" title="💡 守护线程"></a>💡 守护线程</h4><p>默认文件 AIO 使用的线程都是守护线程，所以最后要执行 <code>System.in.read()</code> 以避免守护线程意外结束</p><h4 id="网络-AIO"><a href="#网络-AIO" class="headerlink" title="网络 AIO"></a>网络 AIO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AioServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">AsynchronousServerSocketChannel</span> <span class="hljs-variable">ssc</span> <span class="hljs-operator">=</span> AsynchronousServerSocketChannel.open();<br>        ssc.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>        ssc.accept(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">AcceptHandler</span>(ssc));<br>        System.in.read();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeChannel</span><span class="hljs-params">(AsynchronousSocketChannel sc)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;[%s] %s close\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>            sc.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AsynchronousSocketChannel sc;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReadHandler</span><span class="hljs-params">(AsynchronousSocketChannel sc)</span> &#123;<br>            <span class="hljs-built_in">this</span>.sc = sc;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(Integer result, ByteBuffer attachment)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (result == -<span class="hljs-number">1</span>) &#123;<br>                    closeChannel(sc);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                System.out.printf(<span class="hljs-string">&quot;[%s] %s read\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>                attachment.flip();<br>                System.out.println(Charset.defaultCharset().decode(attachment));<br>                attachment.clear();<br>                <span class="hljs-comment">// 处理完第一个 read 时，需要再次调用 read 方法来处理下一个 read 事件</span><br>                sc.read(attachment, attachment, <span class="hljs-built_in">this</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>            closeChannel(sc);<br>            exc.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt; &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AsynchronousSocketChannel sc;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">WriteHandler</span><span class="hljs-params">(AsynchronousSocketChannel sc)</span> &#123;<br>            <span class="hljs-built_in">this</span>.sc = sc;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(Integer result, ByteBuffer attachment)</span> &#123;<br>            <span class="hljs-comment">// 如果作为附件的 buffer 还有内容，需要再次 write 写出剩余内容</span><br>            <span class="hljs-keyword">if</span> (attachment.hasRemaining()) &#123;<br>                sc.write(attachment);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>            exc.printStackTrace();<br>            closeChannel(sc);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AcceptHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CompletionHandler</span>&lt;AsynchronousSocketChannel, Object&gt; &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AsynchronousServerSocketChannel ssc;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">AcceptHandler</span><span class="hljs-params">(AsynchronousServerSocketChannel ssc)</span> &#123;<br>            <span class="hljs-built_in">this</span>.ssc = ssc;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(AsynchronousSocketChannel sc, Object attachment)</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.printf(<span class="hljs-string">&quot;[%s] %s connected\n&quot;</span>, Thread.currentThread().getName(), sc.getRemoteAddress());<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>            <span class="hljs-comment">// 读事件由 ReadHandler 处理</span><br>            sc.read(buffer, buffer, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadHandler</span>(sc));<br>            <span class="hljs-comment">// 写事件由 WriteHandler 处理</span><br>            sc.write(Charset.defaultCharset().encode(<span class="hljs-string">&quot;server hello!&quot;</span>), ByteBuffer.allocate(<span class="hljs-number">16</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteHandler</span>(sc));<br>            <span class="hljs-comment">// 处理完第一个 accpet 时，需要再次调用 accept 方法来处理下一个 accept 事件</span><br>            ssc.accept(<span class="hljs-literal">null</span>, <span class="hljs-built_in">this</span>);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, Object attachment)</span> &#123;<br>            exc.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
      <category>资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringAOP</title>
    <link href="/2024/03/08/SpringAOP/"/>
    <url>/2024/03/08/SpringAOP/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><p>AOP核心是利用代理模式在不改变原有代码的前提下增强代码。</p><h2 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h2><ul><li>  日志记录</li><li>  事务管理</li><li>  权限验证</li><li>  性能监测</li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p><strong><img src="/../images/image-20240308151019234-1709881826882.png" alt="image-20240308151019234"></strong></p><p><img src="/../images/image-20240308151226930.png" alt="image-20240308151226930"></p><p><img src="/../images/image-20240308151311499.png" alt="image-20240308151311499"></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>1、定义普通业务组件</p><p>2、定义切入点，一个切入点可能横切多个业务组件</p><p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>  JDK动态代理：Spring AOP的首选方法。 每当目标对象实现一个接口时，就会使用JDK动态代理。目标对象必须实现接口</li><li>  CGLIB代理：如果目标对象没有实现接口，则可以使用CGLIB代理。</li></ul><h2 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h2><p><strong>1.切面类 @Aspect： 定义切面类，加上@Aspect、@Component注解</strong></p><p><strong>2.切点 @Pointcut</strong></p><pre><code class="hljs">@Before  在切点方法之前执行@After  在切点方法之后执行@AfterReturning 切点方法返回后执行@AfterThrowing 切点方法抛异常执行@Around 属于环绕增强，能控制切点执行前，执行后</code></pre><p>   <strong>4.JoinPoint ：方法中的参数JoinPoint为连接点对象，它可以获取当前切入的方法的参数、代理类等信息，因此可以记录一些信息，验证一些信息等；</strong></p><p><strong>5.使用&amp;&amp;、||、!、三种运算符来组合切点表达式，表示与或非的关系；</strong></p><p><strong>6.@annotation(annotationType) 匹配指定注解为切入点的方法；</strong></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>1.AopController，用于校验aop是否生效:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;aop&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AopController</span> &#123;<br> <br>    <span class="hljs-meta">@RequestMapping(&quot;test&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">aopTest</span><span class="hljs-params">(User user)</span> &#123;<br>       <span class="hljs-comment">// System.out.println(user);</span><br>        System.out.println(<span class="hljs-string">&quot;aop测试&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br> <br>    &#125;<br> <br>    <span class="hljs-meta">@TestAnnotation(flag = false)</span><br>    <span class="hljs-meta">@RequestMapping(&quot;aopAnnotationTest&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">aopAnnotationTest</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(user);</span><br>        System.out.println(<span class="hljs-string">&quot;aopAnnotationTest&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br> <br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.AspectTest，具体的切面类，用于添加横切逻辑,切点使用*<em>execution表达式进行匹配*</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//设置注解执行的顺序</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AspectTest</span> &#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义切点,切点为对应controller</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(public * com.example.zcs.Aop.controller.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">aopPointCut</span><span class="hljs-params">()</span>&#123;<br> <br>    &#125;<br> <br>    <span class="hljs-meta">@Before(&quot;aopPointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testbefor</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        illegalParam(joinPoint);<br>        System.out.println(<span class="hljs-string">&quot;执行方法之前执行。。。。。&quot;</span>);<br>    &#125;<br>    <br> <br>    <span class="hljs-meta">@After(&quot;aopPointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAfter</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">//illegalParam(joinPoint);</span><br>        System.out.println(<span class="hljs-string">&quot;执行方法之后执行。。。。。&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *获取请求参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">illegalParam</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-keyword">if</span>(joinPoint == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// 参数值</span><br>            Object[] args = joinPoint.getArgs();<br>            <span class="hljs-keyword">if</span> (args != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">for</span> (Object o : args) &#123;<br>                    System.out.println(o);<br> <br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> TestAnnotation &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">flag</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>拦截器和过滤器的区别和使用</title>
    <link href="/2024/03/08/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/03/08/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>代理模式</title>
    <link href="/2024/03/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/03/07/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>在进入详细的代理模式前我们需要知道的是什么叫做代理，其中我们用生活中的例子就非常的贴切：比如两个人通过媒婆介绍认识，一开始两个人并不认识，不了解对方，导致双方都不好意思开口说话，这时候媒婆就充当了代理人的身份，假如这个媒婆就是女方的代理人，也就是什么消息先经过媒婆然后再到女方那，这时候媒婆就可以对男方的话进行一定的润色，因为男的说不定是个直男（不会说话），媒婆将润色好的话再传到女方那提高两个人的交往可能性。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>在静态代理中，我们对目标对象的每个方法的增强都是手动的，也就是一旦增加方法，我们需要同时修改目标对象和代理对象的，JVM角度，静态代理是在遍历时生成了对应的Class文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;send message:&quot;</span> + message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SmsService smsService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SmsProxy</span><span class="hljs-params">(SmsService smsService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.smsService = smsService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-comment">//调用方法之前，我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method send()&quot;</span>);<br>        smsService.send(message);<br>        <span class="hljs-comment">//调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method send()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SmsService</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>();<br>        <span class="hljs-type">SmsProxy</span> <span class="hljs-variable">smsProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsProxy</span>(smsService);<br>        smsProxy.send(<span class="hljs-string">&quot;java&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上面的例子：代理对象通过实现目标对象，对目标对象进行了增强，但是如果目标对象添加了一个方法，代理对象也需要进行修改，这样是非常不方便的。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>相比于静态代理来说，动态代理更加灵活。<strong>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</strong>Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p><strong>在 Java 动态代理机制中 <code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</strong><code>Proxy</code> 类中使用频率最高的方法是：<code>newProxyInstance()</code> ，这个方法主要用来生成一个代理对象。</p><p>这个方法一共有 3 个参数：</p><ol><li> <strong>loader</strong> :类加载器，用于加载代理对象。</li><li> <strong>interfaces</strong> : 被代理类实现的一些接口；</li><li> <strong>h</strong> : 实现了 <code>InvocationHandler</code> 接口的对象；</li></ol><p>要实现动态代理的话，还必须需要实现<code>InvocationHandler</code> 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code> 接口类的 <code>invoke</code> 方法来调用。</p><p><code>invoke()</code> 方法有下面三个参数：</p><ol><li> <strong>proxy</strong> :动态生成的代理类</li><li> <strong>method</strong> : 与代理类对象调用的方法相对应</li><li> <strong>args</strong> : 当前 method 方法的参数</li></ol><p><strong>你通过<code>Proxy</code> 类的 <code>newProxyInstance()</code> 创建的代理对象在调用方法的时候，实际会调用到实现<code>InvocationHandler</code> 接口的类的 <code>invoke()</code>方法。</strong> 你可以在 <code>invoke()</code> 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p><h3 id="JDK动态代理的使用步骤"><a href="#JDK动态代理的使用步骤" class="headerlink" title="JDK动态代理的使用步骤"></a>JDK动态代理的使用步骤</h3><ul><li>  定义一个接口及其实现类；</li><li>  自定义 <code>InvocationHandler</code> 并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li><li>  通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DebugInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代理类中的真实对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DebugInvocationHandler</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//调用方法之前，我们可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;before method &quot;</span> + method.getName());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>        <span class="hljs-comment">//调用方法之后，我们同样可以添加自己的操作</span><br>        System.out.println(<span class="hljs-string">&quot;after method &quot;</span> + method.getName());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdkProxyFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>                target.getClass().getClassLoader(), <span class="hljs-comment">// 目标类的类加载器</span><br>                target.getClass().getInterfaces(),  <span class="hljs-comment">// 代理需要实现的接口，可指定多个</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugInvocationHandler</span>(target)   <span class="hljs-comment">// 代理对象对应的自定义 InvocationHandler</span><br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//getProxy()：主要通过Proxy.newProxyInstance（）方法获取某个类的代理对象</span><br><span class="hljs-type">SmsService</span> <span class="hljs-variable">smsService</span> <span class="hljs-operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmsServiceImpl</span>());<br>smsService.send(<span class="hljs-string">&quot;java&quot;</span>);<br></code></pre></td></tr></table></figure><p>用了动态代理以后，我们可以看到如何被代理对象加了一个新的方法，不需要改代理对象。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图神经网络学习笔记</title>
    <link href="/2024/03/02/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/03/02/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="图神经网络"><a href="#图神经网络" class="headerlink" title="图神经网络"></a>图神经网络</h1><p><strong>图神经网络要做啥：</strong></p><p>无论多么复杂，我们利用图神经网络的目的就是整合特征。</p><p><img src="/../images/image-20240303004650566.png" alt="image-20240303004650566"></p><p><img src="/../images/image-20240303005934732.png" alt="image-20240303005934732"> </p><p><img src="/../images/image-20240303010435016.png" alt="image-20240303010435016"></p><p><img src="/../images/image-20240303134114690.png" alt="image-20240303134114690"></p><p><img src="/../images/image-20240303134919286.png" alt="image-20240303134919286"></p><p><img src="/../images/image-20240303135043923.png" alt="image-20240303135043923"></p><p><img src="/../images/image-20240303135201520.png" alt="image-20240303135201520"></p><p><img src="/../images/image-20240303135225855.png" alt="image-20240303135225855"></p><p><img src="/../images/image-20240303135602893.png" alt="image-20240303135602893"></p><p><img src="/../images/image-20240303135729665.png" alt="image-20240303135729665"></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
      <category>GNN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷题笔记</title>
    <link href="/2024/02/28/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/28/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ul><li>  成员变量有初值，局部变量没有赋初值编译报错。</li><li>  编译看左边，运行看右边。父类不能调用子类的方法，但是可以调用父类和子类共同有的方法。</li><li>  方法调用完成后，程序自动出栈，而不是GC回收。</li><li>  导致线程中断的情况：wait、interpret、park</li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>List接口下的集合们</title>
    <link href="/2024/02/27/List%E6%8E%A5%E5%8F%A3%E4%B8%8B%E7%9A%84%E9%9B%86%E5%90%88%E4%BB%AC/"/>
    <url>/2024/02/27/List%E6%8E%A5%E5%8F%A3%E4%B8%8B%E7%9A%84%E9%9B%86%E5%90%88%E4%BB%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>List下面有ArrayList、Vector、LinkedList</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="ArrayList和Array有什么区别-？"><a href="#ArrayList和Array有什么区别-？" class="headerlink" title="==ArrayList和Array有什么区别==？"></a>==ArrayList和Array有什么区别==？</h3><p><code>ArrayList</code> 内部基于动态数组实现，比 <code>Array</code>（静态数组） 使用起来更加灵活：</p><ul><li>  <code>ArrayList</code>会根据实际存储的元素动态地扩容或缩容，而 <code>Array</code> 被创建之后就不能改变它的长度了。</li><li>  <code>ArrayList</code> 允许你使用泛型来确保类型安全，<code>Array</code> 则不可以。</li><li>  <code>ArrayList</code> 中只能存储对象。对于基本类型数据，需要使用其对应的包装类（如 Integer、Double 等）。<code>Array</code> 可以直接存储基本类型数据，也可以存储对象。</li><li>  <code>ArrayList</code> 支持插入、删除、遍历等常见操作，并且提供了丰富的 API 操作方法，比如 <code>add()</code>、<code>remove()</code>等。<code>Array</code> 只是一个固定长度的数组，只能按照下标访问其中的元素，不具备动态添加、删除元素的能力。</li><li>  <code>ArrayList</code>创建时不需要指定大小，而<code>Array</code>创建时必须指定大小。</li></ul><h3 id="ArrayList和Vector的区别？"><a href="#ArrayList和Vector的区别？" class="headerlink" title="==ArrayList和Vector的区别？=="></a>==ArrayList和Vector的区别？==</h3><p>ArrayList线程不安全，适合频繁的查找工作。Vector线程安全。</p><h3 id="Vector和Stack区别？"><a href="#Vector和Stack区别？" class="headerlink" title="==Vector和Stack区别？=="></a>==Vector和Stack区别？==</h3><ul><li>  <code>Vector</code> 和 <code>Stack</code> 两者都是线程安全的，都是使用 <code>synchronized</code> 关键字进行同步处理。</li><li>  <code>Stack</code> 继承自 <code>Vector</code>，是一个后进先出的栈，而 <code>Vector</code> 是一个列表。</li><li>  <code>Vector</code> 和 <code>Stack</code> 已经被淘汰，推荐使用并发集合类（例如 <code>ConcurrentHashMap</code>、<code>CopyOnWriteArrayList</code> 等</li></ul><h3 id="LinkedList-插入和删除元素的时间复杂度"><a href="#LinkedList-插入和删除元素的时间复杂度" class="headerlink" title="==LinkedList 插入和删除元素的时间复杂度=="></a>==LinkedList 插入和删除元素的时间复杂度==</h3><p>由于其底层是使用双链表实现</p><h3 id="LinkedList-为什么不能实现-RandomAccess-接口？"><a href="#LinkedList-为什么不能实现-RandomAccess-接口？" class="headerlink" title="==LinkedList 为什么不能实现 RandomAccess 接口？=="></a>==LinkedList 为什么不能实现 RandomAccess 接口？==</h3><p><code>RandomAccess</code> 是一个标记接口，用来表明实现该接口的类支持随机访问（即可以通过索引快速访问元素）。由于 <code>LinkedList</code> 底层数据结构是链表，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现 <code>RandomAccess</code> 接口。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合概况</title>
    <link href="/2024/02/27/Java%E9%9B%86%E5%90%88%E6%A6%82%E5%86%B5/"/>
    <url>/2024/02/27/Java%E9%9B%86%E5%90%88%E6%A6%82%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Java集合概况"><a href="#Java集合概况" class="headerlink" title="Java集合概况"></a>Java集合概况</h1><p>Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 <code>Collection</code>接口，主要用于存放单一元素；另一个是 <code>Map</code> 接口，主要用于存放键值对。对于<code>Collection</code> 接口，下面又有三个主要的子接口：<code>List</code>、<code>Set</code> 和 <code>Queue</code>。</p><p><img src="/../images/java-collection-hierarchy.png" alt="Java 集合框架概览"></p><h2 id="集合框架底层数据结构"><a href="#集合框架底层数据结构" class="headerlink" title="集合框架底层数据结构"></a>集合框架底层数据结构</h2><p><strong>List:</strong></p><ul><li>  ArrayList和Vector都是Object[]数组<a href="https://javaguide.cn/java/collection/arraylist-source-code.html">ArrayList 源码分析</a></li><li>  LinkedList：双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)。<a href="https://javaguide.cn/java/collection/linkedlist-source-code.html">LinkedList 源码分析</a></li></ul><p><strong>Set:</strong></p><ul><li>  HashSet(无序，唯一): 基于 <code>HashMap</code> 实现的，底层采用 <code>HashMap</code> 来保存元素。</li><li>  LinkedHashSet是 <code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code> 来实现的。</li><li>  TreeSet（有序、唯一） 红黑树(自平衡的排序二叉树)。</li></ul><p><strong>Queue</strong>:</p><ul><li>  PriorityQueue：<code>Object[]</code> 数组来实现小顶堆。<a href="https://javaguide.cn/java/collection/priorityqueue-source-code.html">PriorityQueue 源码分析</a></li><li>  DelayQueue：PriorityQueue<a href="https://javaguide.cn/java/collection/delayqueue-source-code.html">DelayQueue 源码分析</a></li><li>  ArrayDeque：可扩容动态双向数组。</li></ul><p><strong>Map</strong></p><ul><li>  HashMap：JDK1.8 之前 <code>HashMap</code> 由数组+链表组成的，数组是 <code>HashMap</code> 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。</li><li>  LinkedHashMap：<code>LinkedHashMap</code> 在上面结构的基础上，增加了一条双向链表</li><li>  Hashtable</li><li>  TreeMap</li></ul><h2 id="如何选用集合"><a href="#如何选用集合" class="headerlink" title="如何选用集合"></a>如何选用集合</h2><p>我们需要根据键值获取到元素值时就选用 <code>Map</code> 接口下的集合，需要排序时选择 <code>TreeMap</code>,不需要排序时就选择 <code>HashMap</code>,需要保证线程安全就选用 <code>ConcurrentHashMap</code>。</p><p>我们只需要存放元素值时，就选择实现<code>Collection</code> 接口的集合，需要保证元素唯一时选择实现 <code>Set</code> 接口的集合比如 <code>TreeSet</code> 或 <code>HashSet</code>，不需要就选择实现 <code>List</code> 接口的比如 <code>ArrayList</code> 或 <code>LinkedList</code>，然后再根据实现这些接口的集合的特点来选用。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《黑马头条》微服务项目手册</title>
    <link href="/2024/02/27/%E3%80%8A%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E3%80%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E6%89%8B%E5%86%8C/"/>
    <url>/2024/02/27/%E3%80%8A%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E3%80%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="1-环境搭建、SpringCloud微服务-注册发现、服务调用、网关"><a href="#1-环境搭建、SpringCloud微服务-注册发现、服务调用、网关" class="headerlink" title="1 环境搭建、SpringCloud微服务(注册发现、服务调用、网关)"></a>1 环境搭建、SpringCloud微服务(注册发现、服务调用、网关)</h1><h2 id="1-课程对比"><a href="#1-课程对比" class="headerlink" title="1)课程对比"></a>1)课程对比</h2><p><img src="/../images/image-20210407203818808.png" alt="image-20210407203818808"></p><h2 id="2-项目概述"><a href="#2-项目概述" class="headerlink" title="2)项目概述"></a>2)项目概述</h2><h3 id="2-1-能让你收获什么"><a href="#2-1-能让你收获什么" class="headerlink" title="2.1)能让你收获什么"></a>2.1)能让你收获什么</h3><p><img src="/../images/image-20210407203902473.png" alt="image-20210407203902473"></p><h3 id="2-2-项目课程大纲"><a href="#2-2-项目课程大纲" class="headerlink" title="2.2)项目课程大纲"></a>2.2)项目课程大纲</h3><p><img src="/../images/image-20210407203935383.png" alt="image-20210407203935383"></p><h3 id="2-3-项目概述"><a href="#2-3-项目概述" class="headerlink" title="2.3)项目概述"></a>2.3)项目概述</h3><p>随着智能手机的普及，人们更加习惯于通过手机来看新闻。由于生活节奏的加快，很多人只能利用碎片时间来获取信息，因此，对于移动资讯客户端的需求也越来越高。黑马头条项目正是在这样背景下开发出来。黑马头条项目采用当下火热的微服务+大数据技术架构实现。本项目主要着手于获取最新最热新闻资讯，通过大数据分析用户喜好精确推送咨询新闻</p><p><img src="/../images/image-20210407204320559.png" alt="image-20210407204320559"></p><h3 id="2-4-项目术语"><a href="#2-4-项目术语" class="headerlink" title="2.4)项目术语"></a>2.4)项目术语</h3><p><img src="/../images/image-20210407204345614.png" alt="image-20210407204345614"></p><h3 id="2-5-业务说明"><a href="#2-5-业务说明" class="headerlink" title="2.5)业务说明"></a>2.5)业务说明</h3><p><img src="/../images/image-20210407204405774.png" alt="image-20210407204405774"></p><p>项目演示地址：</p><ul><li><p>平台管理：<a href="http://heima-admin-java.research.itcast.cn/">http://heima-admin-java.research.itcast.cn</a> </p></li><li><p>自媒体：<a href="http://heime-media-java.research.itcast.cn/">http://heime-media-java.research.itcast.cn</a> </p></li><li><p>app端：<a href="http://heima-app-java.research.itcast.cn/">http://heima-app-java.research.itcast.cn</a> </p></li></ul><p>平台管理与自媒体为PC端，用电脑浏览器打开即可。</p><p>其中app端为移动端，打开方式有两种：                                                 </p><ul><li><p>谷歌浏览器打开，调成移动端模式                      </p></li><li><p>手机浏览器打开或扫描右侧二维码</p><p>  <img src="/../images/image-20210407204213963.png" alt="image-20210407204213963"></p></li></ul><h2 id="3-技术栈"><a href="#3-技术栈" class="headerlink" title="3)技术栈"></a>3)技术栈</h2><p><img src="/../images/f3accd2ba01c41b0a9ac98370241eba3.png" alt="img"></p><ul><li>Spring-Cloud-Gateway : 微服务之前架设的网关服务，实现服务注册中的API请求路由，以及控制流速控制和熔断处理都是常用的架构手段，而这些功能Gateway天然支持</li><li>运用Spring Boot快速开发框架，构建项目工程；并结合Spring Cloud全家桶技术，实现后端个人中心、自媒体、管理中心等微服务。</li><li>运用Spring Cloud Alibaba Nacos作为项目中的注册中心和配置中心</li><li>运用mybatis-plus作为持久层提升开发效率</li><li>运用Kafka完成内部系统消息通知；与客户端系统消息通知；以及实时数据计算</li><li>运用Redis缓存技术，实现热数据的计算，提升系统性能指标</li><li>使用Mysql存储用户数据，以保证上层数据查询的高性能</li><li>使用Mongo存储用户热数据，以保证用户热数据高扩展和高性能指标</li><li>使用FastDFS作为静态资源存储器，在其上实现热静态资源缓存、淘汰等功能</li><li>运用Hbase技术，存储系统中的冷数据，保证系统数据的可靠性</li><li>运用ES搜索技术，对冷数据、文章数据建立索引，以保证冷数据、文章查询性能</li><li>运用AI技术，来完成系统自动化功能，以提升效率及节省成本。比如实名认证自动化</li><li>PMD&amp;P3C : 静态代码扫描工具，在项目中扫描项目代码，检查异常点、优化点、代码规范等，为开发团队提供规范统一，提升项目代码质量</li></ul><h2 id="4-nacos环境搭建"><a href="#4-nacos环境搭建" class="headerlink" title="4)nacos环境搭建"></a>4)nacos环境搭建</h2><h3 id="4-1-虚拟机镜像准备"><a href="#4-1-虚拟机镜像准备" class="headerlink" title="4.1)虚拟机镜像准备"></a>4.1)虚拟机镜像准备</h3><p>1)打开当天资料文件中的镜像，拷贝到一个地方，然后解压</p><p>2)解压后，双击ContOS7-hmtt.vmx文件，前提是电脑上已经安装了VMware</p><p><img src="/../images/image-20210407205305080.png" alt="image-20210407205305080"></p><ol start="3"><li>修改虚拟网络地址（NAT）</li></ol><p><img src="/../images/image-20210407205325182.png" alt="image-20210407205325182"></p><p>​                                                                ①，选中VMware中的编辑</p><p>​                                                                ②，选择虚拟网络编辑器</p><p>​                                                                ③，找到NAT网卡，把网段改为200（当前挂载的虚拟机已固定ip地址）</p><p>4)修改虚拟机的网络模式为NAT</p><p><img src="/../images/image-20210407205431849.png" alt="image-20210407205431849"></p><p>5)启动虚拟机，<strong>用户名：root  密码：itcast</strong>，当前虚拟机的ip已手动固定（静态IP）, 地址为：<strong>192.168.200.130</strong></p><p>6)使用FinalShell客户端链接</p><p><img src="/../images/image-20210407205502305.png" alt="image-20210407205502305"></p><h3 id="4-2-nacos安装"><a href="#4-2-nacos安装" class="headerlink" title="4.2)nacos安装"></a>4.2)nacos安装</h3><p>①：docker拉取镜像 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nacos/nacos-server:1.2.0<br></code></pre></td></tr></table></figure><p>②：创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --env MODE=standalone --name nacos --restart=always  -d -p 8848:8848 nacos/nacos-server:1.2.0<br></code></pre></td></tr></table></figure><ul><li><p>MODE=standalone 单机版</p></li><li><p>–restart=always 开机启动</p></li><li><p>-p 8848:8848  映射端口</p></li><li><p>-d 创建一个守护式容器在后台运行</p></li></ul><p>③：访问地址：<a href="http://192.168.200.130:8848/nacos">http://192.168.200.130:8848/nacos</a> </p><p><img src="/../images/image-20210412141353694.png" alt="image-20210412141353694"></p><h2 id="5-初始工程搭建"><a href="#5-初始工程搭建" class="headerlink" title="5)初始工程搭建"></a>5)初始工程搭建</h2><h3 id="5-1-环境准备"><a href="#5-1-环境准备" class="headerlink" title="5.1)环境准备"></a>5.1)环境准备</h3><p>①：项目依赖环境（需提前安装好）</p><ul><li><p>JDK1.8</p></li><li><p>Intellij Idea</p></li><li><p>maven-3.6.1</p></li><li><p>Git</p></li></ul><p>②：在当天资料中解压heima-leadnews.zip文件，拷贝到一个没有中文和空格的目录，使用idea打开即可</p><p><img src="/../images/image-20210412141517519.png" alt="image-20210412141517519"></p><p>③：IDEA开发工具配置</p><p><img src="/../images/image-20210412141601018.png" alt="image-20210412141601018"></p><p>设置本地仓库，建议使用资料中提供好的仓库</p><p>④：设置项目编码格式</p><p><img src="/../images/image-20210412141631441.png" alt="image-20210412141631441"></p><h3 id="5-2-主体结构"><a href="#5-2-主体结构" class="headerlink" title="5.2)主体结构"></a>5.2)主体结构</h3><p><img src="/../images/image-20210412141711919.png" alt="image-20210412141711919"></p><h2 id="6-登录"><a href="#6-登录" class="headerlink" title="6)登录"></a>6)登录</h2><h3 id="6-1-需求分析"><a href="#6-1-需求分析" class="headerlink" title="6.1)需求分析"></a>6.1)需求分析</h3><p><img src="/../images/image-20210412141809919.png" alt="image-20210412141809919"></p><ul><li><p>用户点击<strong>开始使用</strong></p><p>  登录后的用户权限较大，可以查看，也可以操作（点赞，关注，评论）</p></li><li><p>用户点击<strong>不登录，先看看</strong></p></li></ul><p>​       游客只有查看的权限</p><h3 id="6-2-表结构分析"><a href="#6-2-表结构分析" class="headerlink" title="6.2)表结构分析"></a>6.2)表结构分析</h3><p>关于app端用户相关的内容较多，可以单独设置一个库leadnews_user</p><table><thead><tr><th><strong>表名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>ap_user</td><td>APP用户信息表</td></tr><tr><td>ap_user_fan</td><td>APP用户粉丝信息表</td></tr><tr><td>ap_user_follow</td><td>APP用户关注信息表</td></tr><tr><td>ap_user_realname</td><td>APP实名认证信息表</td></tr></tbody></table><p>从当前资料中找到对应数据库并导入到mysql中</p><p>登录需要用到的是ap_user表，表结构如下：</p><p><img src="/../images/image-20210412142006558.png" alt="image-20210412142006558"></p><p><img src="/../images/image-20210412142055047.png" alt="image-20210412142055047"></p><p>项目中的持久层使用的mybatis-plus，一般都使用mybais-plus逆向生成对应的实体类</p><p>app_user表对应的实体类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.user.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * APP用户信息表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;ap_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码、通信等加密盐</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;salt&quot;)</span><br>    <span class="hljs-keyword">private</span> String salt;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码,md5加密</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;password&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;phone&quot;)</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 头像</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;image&quot;)</span><br>    <span class="hljs-keyword">private</span> String image;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 0 男</span><br><span class="hljs-comment">            1 女</span><br><span class="hljs-comment">            2 未知</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;sex&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean sex;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 0 未</span><br><span class="hljs-comment">            1 是</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_certification&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean certification;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否身份认证</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_identity_authentication&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean identityAuthentication;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 0正常</span><br><span class="hljs-comment">            1锁定</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;status&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 0 普通用户</span><br><span class="hljs-comment">            1 自媒体人</span><br><span class="hljs-comment">            2 大V</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;flag&quot;)</span><br>    <span class="hljs-keyword">private</span> Short flag;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;created_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>手动加密（md5+随机字符串）</p><p>md5是不可逆加密，md5相同的密码每次加密都一样，不太安全。在md5的基础上手动加盐（salt）处理</p><p>注册-&gt;生成盐</p><p><img src="/../images/image-20210412142315248.png" alt="image-20210412142315248"></p><p>登录-&gt;使用盐来配合验证</p><p><img src="/../images/image-20210412142428499.png" alt="image-20210412142428499"></p><h3 id="6-3-思路分析"><a href="#6-3-思路分析" class="headerlink" title="6.3)思路分析"></a>6.3)思路分析</h3><p><img src="/../images/image-20210412142536782.png" alt="image-20210412142536782"></p><p>1，用户输入了用户名和密码进行登录，校验成功后返回jwt(基于当前用户的id生成)</p><p>2，用户游客登录，生成jwt返回(基于默认值0生成)‘</p><h3 id="6-4-运营端微服务搭建"><a href="#6-4-运营端微服务搭建" class="headerlink" title="6.4)运营端微服务搭建"></a>6.4)<strong>运营端微服务搭建</strong></h3><p>在heima-leadnews-service下创建工程heima-leadnews-user</p><p><img src="/../images/image-20210412142706443.png" alt="image-20210412142706443"></p><p>引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.user;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@MapperScan(&quot;com.heima.user.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(UserApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">51801</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">leadnews-user</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br></code></pre></td></tr></table></figure><p>在nacos中创建配置文件</p><p><img src="/../images/image-20210412143121648.png" alt="image-20210412143121648"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/leadnews_user?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-comment"># 设置Mapper接口所对应的XML文件位置，如果你在Mapper接口中有自定义方法，需要进行该配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/*.xml</span><br>  <span class="hljs-comment"># 设置别名包扫描路径，通过该属性可以给包中的类注册别名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.heima.model.user.pojos</span><br></code></pre></td></tr></table></figure><p>logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--定义日志文件的存储地址,使用绝对路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;e:/logs&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Console 输出设置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 按照每天生成日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件输出的文件名--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/leadnews.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 异步输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNC&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis.cache.decorators.LoggingCache&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.boot&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;ASYNC&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-4-登录功能实现"><a href="#6-4-登录功能实现" class="headerlink" title="6.4)登录功能实现"></a>6.4)登录功能实现</h3><p>①：接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserLoginController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login_auth&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>②：持久层mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.user.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.user.pojos.ApUser;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApUserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;ApUser&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>③：业务层service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.user.service;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.user.dtos.LoginDto;<br><span class="hljs-keyword">import</span> com.heima.model.user.pojos.ApUser;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApUserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;ApUser&gt;&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * app端登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(LoginDto dto)</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.user.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.user.dtos.LoginDto;<br><span class="hljs-keyword">import</span> com.heima.model.user.pojos.ApUser;<br><span class="hljs-keyword">import</span> com.heima.user.mapper.ApUserMapper;<br><span class="hljs-keyword">import</span> com.heima.user.service.ApUserService;<br><span class="hljs-keyword">import</span> com.heima.utils.common.AppJwtUtil;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.util.DigestUtils;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ApUserMapper, ApUser&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApUserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(LoginDto dto)</span> &#123;<br><br>        <span class="hljs-comment">//1.正常登录（手机号+密码登录）</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isBlank(dto.getPhone()) &amp;&amp; !StringUtils.isBlank(dto.getPassword())) &#123;<br>            <span class="hljs-comment">//1.1查询用户</span><br>            <span class="hljs-type">ApUser</span> <span class="hljs-variable">apUser</span> <span class="hljs-operator">=</span> getOne(Wrappers.&lt;ApUser&gt;lambdaQuery().eq(ApUser::getPhone, dto.getPhone()));<br>            <span class="hljs-keyword">if</span> (apUser == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.DATA_NOT_EXIST,<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//1.2 比对密码</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> apUser.getSalt();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">pswd</span> <span class="hljs-operator">=</span> dto.getPassword();<br>            pswd = DigestUtils.md5DigestAsHex((pswd + salt).getBytes());<br>            <span class="hljs-keyword">if</span> (!pswd.equals(apUser.getPassword())) &#123;<br>                <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_PASSWORD_ERROR);<br>            &#125;<br>            <span class="hljs-comment">//1.3 返回数据  jwt</span><br>            Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            map.put(<span class="hljs-string">&quot;token&quot;</span>, AppJwtUtil.getToken(apUser.getId().longValue()));<br>            apUser.setSalt(<span class="hljs-string">&quot;&quot;</span>);<br>            apUser.setPassword(<span class="hljs-string">&quot;&quot;</span>);<br>            map.put(<span class="hljs-string">&quot;user&quot;</span>, apUser);<br>            <span class="hljs-keyword">return</span> ResponseResult.okResult(map);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//2.游客  同样返回token  id = 0</span><br>            Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            map.put(<span class="hljs-string">&quot;token&quot;</span>, AppJwtUtil.getToken(<span class="hljs-number">0l</span>));<br>            <span class="hljs-keyword">return</span> ResponseResult.okResult(map);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>④：控制层controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.user.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.user.dtos.LoginDto;<br><span class="hljs-keyword">import</span> com.heima.user.service.ApUserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserLoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApUserService apUserService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login_auth&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> apUserService.login(dto);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-接口工具postman、swagger、knife4j"><a href="#7-接口工具postman、swagger、knife4j" class="headerlink" title="7)接口工具postman、swagger、knife4j"></a>7)接口工具postman、swagger、knife4j</h2><h3 id="7-1-postman"><a href="#7-1-postman" class="headerlink" title="7.1)postman"></a>7.1)postman</h3><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。postman被500万开发者和超100,000家公司用于每月访问1.3亿个API。</p><p>官方网址：<a href="https://www.postman.com/">https://www.postman.com/</a></p><p>解压资料文件夹中的软件，安装即可</p><p><img src="/../images/image-20210413162511873-1708967437164.png" alt="image-20210413162511873"></p><p>通常的接口测试查看请求和响应，下面是登录请求的测试</p><p><img src="/../images/image-20210413162558657-1708967437164.png" alt="image-20210413162558657"></p><h3 id="7-2-swagger"><a href="#7-2-swagger" class="headerlink" title="7.2)swagger"></a>7.2)swagger</h3><p>(1)简介</p><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务(<a href="https://swagger.io/">https://swagger.io/</a>)。 它的主要作用是：</p><ol><li><p>使得前后端分离开发更加方便，有利于团队协作</p></li><li><p>接口的文档在线自动生成，降低后端开发人员编写接口文档的负担</p></li><li><p>功能测试 </p><p> Spring已经将Swagger纳入自身的标准，建立了Spring-swagger项目，现在叫Springfox。通过在项目中引入Springfox ，即可非常简单快捷的使用Swagger。</p></li></ol><p>(2)SpringBoot集成Swagger</p><ul><li><p>引入依赖,在heima-leadnews-model和heima-leadnews-common模块中引入该依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>只需要在heima-leadnews-common中进行配置即可，因为其他微服务工程都直接或间接依赖即可。</p><ul><li>在heima-leadnews-common工程中添加一个配置类</li></ul><p>新增：com.heima.common.swagger.SwaggerConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.swagger;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfiguration</span> &#123;<br><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">buildDocket</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>              .apiInfo(buildApiInfo())<br>              .select()<br>              <span class="hljs-comment">// 要扫描的API(Controller)基础包</span><br>              .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.heima&quot;</span>))<br>              .paths(PathSelectors.any())<br>              .build();<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">buildApiInfo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;黑马程序员&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>              .title(<span class="hljs-string">&quot;黑马头条-平台管理API文档&quot;</span>)<br>              .description(<span class="hljs-string">&quot;黑马头条后台api&quot;</span>)<br>              .contact(contact)<br>              .version(<span class="hljs-string">&quot;1.0.0&quot;</span>).build();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在heima-leadnews-common模块中的resources目录中新增以下目录和文件</p><p>文件：resources/META-INF/Spring.factories</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>  com.heima.common.swagger.SwaggerConfiguration<br></code></pre></td></tr></table></figure><p>（3）Swagger常用注解</p><p>在Java类中添加Swagger的注解即可生成Swagger接口文档，常用Swagger注解如下：</p><p>@Api：修饰整个类，描述Controller的作用  </p><p>@ApiOperation：描述一个类的一个方法，或者说一个接口  </p><p>@ApiParam：单个参数的描述信息  </p><p>@ApiModel：用对象来接收参数  </p><p>@ApiModelProperty：用对象接收参数时，描述对象的一个字段  </p><p>@ApiResponse：HTTP响应其中1个描述  </p><p>@ApiResponses：HTTP响应整体描述  </p><p>@ApiIgnore：使用该注解忽略这个API  </p><p>@ApiError ：发生错误返回的信息  </p><p>@ApiImplicitParam：一个请求参数  </p><p>@ApiImplicitParams：多个请求参数的描述信息</p><p> @ApiImplicitParam属性：</p><table><thead><tr><th>属性</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>paramType</td><td></td><td>查询参数类型</td></tr><tr><td></td><td>path</td><td>以地址的形式提交数据</td></tr><tr><td></td><td>query</td><td>直接跟参数完成自动映射赋值</td></tr><tr><td></td><td>body</td><td>以流的形式提交 仅支持POST</td></tr><tr><td></td><td>header</td><td>参数在request headers 里边提交</td></tr><tr><td></td><td>form</td><td>以form表单的形式提交 仅支持POST</td></tr><tr><td>dataType</td><td></td><td>参数的数据类型 只作为标志说明，并没有实际验证</td></tr><tr><td></td><td>Long</td><td></td></tr><tr><td></td><td>String</td><td></td></tr><tr><td>name</td><td></td><td>接收参数名</td></tr><tr><td>value</td><td></td><td>接收参数的意义描述</td></tr><tr><td>required</td><td></td><td>参数是否必填</td></tr><tr><td></td><td>true</td><td>必填</td></tr><tr><td></td><td>false</td><td>非必填</td></tr><tr><td>defaultValue</td><td></td><td>默认值</td></tr></tbody></table><p>我们在ApUserLoginController中添加Swagger注解，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/login&quot;)</span><br><span class="hljs-meta">@Api(value = &quot;app端用户登录&quot;, tags = &quot;ap_user&quot;, description = &quot;app端用户登录API&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserLoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApUserService apUserService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login_auth&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;用户登录&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginDto dto)</span>&#123;<br>        <span class="hljs-keyword">return</span> apUserService.login(dto);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>LoginDto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginDto</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;手机号&quot;,required = true)</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;密码&quot;,required = true)</span><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动user微服务，访问地址：<a href="http://localhost:51801/swagger-ui.html">http://localhost:51801/swagger-ui.html</a></p><h3 id="7-3-knife4j"><a href="#7-3-knife4j" class="headerlink" title="7.3)knife4j"></a>7.3)knife4j</h3><p>(1)简介</p><p>knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望它能像一把匕首一样小巧,轻量,并且功能强悍!</p><p>gitee地址：<a href="https://gitee.com/xiaoym/knife4j">https://gitee.com/xiaoym/knife4j</a></p><p>官方文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a></p><p>效果演示：<a href="http://knife4j.xiaominfo.com/doc.html">http://knife4j.xiaominfo.com/doc.html</a></p><p>(2)核心功能</p><p>该UI增强包主要包括两大核心功能：文档说明 和 在线调试</p><ul><li>文档说明：根据Swagger的规范说明，详细列出接口文档的说明，包括接口地址、类型、请求示例、请求参数、响应示例、响应参数、响应码等信息，使用swagger-bootstrap-ui能根据该文档说明，对该接口的使用情况一目了然。</li><li>在线调试：提供在线接口联调的强大功能，自动解析当前接口参数,同时包含表单验证，调用参数可返回接口响应内容、headers、Curl请求命令实例、响应时间、响应状态码等信息，帮助开发者在线调试，而不必通过其他测试工具测试接口是否正确,简介、强大。</li><li>个性化配置：通过个性化ui配置项，可自定义UI的相关显示信息</li><li>离线文档：根据标准规范，生成的在线markdown离线文档，开发者可以进行拷贝生成markdown接口文档，通过其他第三方markdown转换工具转换成html或pdf，这样也可以放弃swagger2markdown组件</li><li>接口排序：自1.8.5后，ui支持了接口排序功能，例如一个注册功能主要包含了多个步骤,可以根据swagger-bootstrap-ui提供的接口排序规则实现接口的排序，step化接口操作，方便其他开发者进行接口对接</li></ul><p>(3)快速集成</p><ul><li>在heima-leadnews-common模块中的<code>pom.xml</code>文件中引入<code>knife4j</code>的依赖,如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建Swagger配置文件</li></ul><p>在heima-leadnews-common模块中新建配置类</p><p>新建Swagger的配置文件<code>SwaggerConfiguration.java</code>文件,创建springfox提供的Docket分组对象,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.knife4j;<br><br><span class="hljs-keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><span class="hljs-keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@EnableKnife4j</span><br><span class="hljs-meta">@Import(BeanValidatorPluginsConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Configuration</span> &#123;<br><br>    <span class="hljs-meta">@Bean(value = &quot;defaultApi2&quot;)</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">defaultApi2</span><span class="hljs-params">()</span> &#123;<br>        Docket docket=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                <span class="hljs-comment">//分组名称</span><br>                .groupName(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .select()<br>                <span class="hljs-comment">//这里指定Controller扫描包路径</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.heima&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>        <span class="hljs-keyword">return</span> docket;<br>    &#125;<br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;黑马头条API文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;黑马头条API文档&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上有两个注解需要特别说明，如下表：</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@EnableSwagger2</code></td><td>该注解是Springfox-swagger框架提供的使用Swagger注解，该注解必须加</td></tr><tr><td><code>@EnableKnife4j</code></td><td>该注解是<code>knife4j</code>提供的增强注解,Ui提供了例如动态参数、参数过滤、接口排序等增强功能,如果你想使用这些增强功能就必须加该注解，否则可以不用加</td></tr></tbody></table><ul><li>添加配置</li></ul><p>在Spring.factories中新增配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>  com.heima.common.swagger.Swagger2Configuration, \<br>  com.heima.common.swagger.SwaggerConfiguration<br></code></pre></td></tr></table></figure><ul><li>访问</li></ul><p>在浏览器输入地址：<code>http://host:port/doc.html</code></p><h2 id="8-网关"><a href="#8-网关" class="headerlink" title="8)网关"></a>8)网关</h2><p>（1）在heima-leadnews-gateway导入以下依赖</p><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）在heima-leadnews-gateway下创建heima-leadnews-app-gateway微服务</p><p>引导类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.app.gateway;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span>  <span class="hljs-comment">//开启注册中心</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppGatewayApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(AppGatewayApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">51601</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">leadnews-app-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br></code></pre></td></tr></table></figure><p>在nacos的配置中心创建dataid为leadnews-app-gateway的yml配置</p><p><img src="/../images/image-20210728140447647.png" alt="image-20210728140447647"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">globalcors:</span><br>        <span class="hljs-attr">add-to-simple-url-handler-mapping:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">corsConfigurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span><br>            <span class="hljs-attr">allowedHeaders:</span> <span class="hljs-string">&quot;*&quot;</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-string">&quot;*&quot;</span><br>            <span class="hljs-attr">allowedMethods:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">GET</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">POST</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">DELETE</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">PUT</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">OPTION</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-comment"># 平台管理</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://leadnews-user</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>环境搭建完成以后，启动项目网关和用户两个服务，使用postman进行测试</p><p>请求地址：<a href="http://localhost:51601/user/api/v1/login/login_auth">http://localhost:51601/user/api/v1/login/login_auth</a>   </p><h3 id="1-3-全局过滤器实现jwt校验"><a href="#1-3-全局过滤器实现jwt校验" class="headerlink" title="1.3 全局过滤器实现jwt校验"></a>1.3 全局过滤器实现jwt校验</h3><p><img src="/../images/image-20210705110434492.png" alt="image-20210705110434492"></p><p>思路分析：</p><ol><li>用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录</li><li>用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户</li><li>用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN </li><li>网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误</li></ol><p>具体实现：</p><p>第一：</p><p>​    在认证过滤器中需要用到jwt的解析，所以需要把工具类拷贝一份到网关微服务</p><p>第二：</p><p>在网关微服务中新建全局过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.app.gateway.filter;<br><br><br><span class="hljs-keyword">import</span> com.heima.app.gateway.util.AppJwtUtil;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Ordered</span>, GlobalFilter &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">//1.获取request和response对象</span><br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br><br>        <span class="hljs-comment">//2.判断是否是登录</span><br>        <span class="hljs-keyword">if</span>(request.getURI().getPath().contains(<span class="hljs-string">&quot;/login&quot;</span>))&#123;<br>            <span class="hljs-comment">//放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br><br><br>        <span class="hljs-comment">//3.获取token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeaders().getFirst(<span class="hljs-string">&quot;token&quot;</span>);<br><br>        <span class="hljs-comment">//4.判断token是否存在</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isBlank(token))&#123;<br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//5.判断token是否有效</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Claims</span> <span class="hljs-variable">claimsBody</span> <span class="hljs-operator">=</span> AppJwtUtil.getClaimsBody(token);<br>            <span class="hljs-comment">//是否是过期</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> AppJwtUtil.verifyToken(claimsBody);<br>            <span class="hljs-keyword">if</span>(result == <span class="hljs-number">1</span> || result  == <span class="hljs-number">2</span>)&#123;<br>                response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>                <span class="hljs-keyword">return</span> response.setComplete();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//6.放行</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 优先级设置  值越小  优先级越高</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p>启动user服务，继续访问其他微服务，会提示需要认证才能访问，这个时候需要在heads中设置设置token才能正常访问。</p><h2 id="9-前端集成"><a href="#9-前端集成" class="headerlink" title="9)前端集成"></a>9)前端集成</h2><h3 id="9-1-前端项目部署思路"><a href="#9-1-前端项目部署思路" class="headerlink" title="9.1)前端项目部署思路"></a>9.1)前端项目部署思路</h3><p><img src="/../images/image-20210416095950485.png" alt="image-20210416095950485"></p><p>通过nginx来进行配置，功能如下</p><ul><li>通过nginx的反向代理功能访问后台的网关资源</li><li>通过nginx的静态服务器功能访问前端静态页面</li></ul><h3 id="9-2-配置nginx"><a href="#9-2-配置nginx" class="headerlink" title="9.2)配置nginx"></a>9.2)配置nginx</h3><p>①：解压资料文件夹中的压缩包nginx-1.18.0.zip</p><p>②：解压资料文件夹中的前端项目app-web.zip</p><p>③：配置nginx.conf文件</p><p>在nginx安装的conf目录下新建一个文件夹<code>leadnews.conf</code>,在当前文件夹中新建<code>heima-leadnews-app.conf</code>文件</p><p>heima-leadnews-app.conf配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">upstream  heima-app-gateway&#123;<br>    server <span class="hljs-attr">localhost</span>:<span class="hljs-number">51601</span>;<br>&#125;<br><br>server &#123;<br>listen <span class="hljs-number">8801</span>;<br>location / &#123;<br>root <span class="hljs-attr">D</span>:<span class="hljs-regexp">/workspace/</span>app-web/;<br>index index.<span class="hljs-property">html</span>;<br>&#125;<br><br>location ~<span class="hljs-regexp">/app/</span>(.*) &#123;<br>proxy_pass <span class="hljs-attr">http</span>:<span class="hljs-comment">//heima-app-gateway/$1;</span><br>proxy_set_header <span class="hljs-variable constant_">HOST</span> $host;  # 不改变源请求头的值<br>proxy_pass_request_body on;  #开启获取请求体<br>proxy_pass_request_headers on;  #开启获取请求头<br>proxy_set_header X-<span class="hljs-title class_">Real</span>-<span class="hljs-variable constant_">IP</span> $remote_addr;   # 记录真实发出请求的客户端<span class="hljs-variable constant_">IP</span><br>proxy_set_header X-<span class="hljs-title class_">Forwarded</span>-<span class="hljs-title class_">For</span> $proxy_add_x_forwarded_for;  #记录代理信息<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>nginx.conf   把里面注释的内容和静态资源配置相关删除，引入heima-leadnews-app.conf文件加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#user  nobody;<br>worker_processes  <span class="hljs-number">1</span>;<br><br>events &#123;<br>    worker_connections  <span class="hljs-number">1024</span>;<br>&#125;<br>http &#123;<br>    include       mime.<span class="hljs-property">types</span>;<br>    default_type  application/octet-stream;<br>    sendfile        on;<br>    keepalive_timeout  <span class="hljs-number">65</span>;<br># 引入自定义配置文件<br>include leadnews.<span class="hljs-property">conf</span><span class="hljs-comment">/*.conf;</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>④ ：启动nginx</p><p>​    在nginx安装包中使用命令提示符打开，输入命令nginx启动项目</p><p>​    可查看进程，检查nginx是否启动</p><p>​    重新加载配置文件：<code>nginx -s reload</code></p><p>⑤：打开前端项目进行测试  – &gt;  <a href="http://localhost:8801/">http://localhost:8801</a></p><p>​     用谷歌浏览器打开，调试移动端模式进行访问</p><h1 id="2-app端文章查看，静态化freemarker-分布式文件系统minIO"><a href="#2-app端文章查看，静态化freemarker-分布式文件系统minIO" class="headerlink" title="2 app端文章查看，静态化freemarker,分布式文件系统minIO"></a>2 app端文章查看，静态化freemarker,分布式文件系统minIO</h1><h2 id="1-文章列表加载"><a href="#1-文章列表加载" class="headerlink" title="1)文章列表加载"></a>1)文章列表加载</h2><h3 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1)需求分析"></a>1.1)需求分析</h3><p>文章布局展示</p><p><img src="/../images/image-20210419151801252.png" alt="image-20210419151801252"></p><h3 id="1-2-表结构分析"><a href="#1-2-表结构分析" class="headerlink" title="1.2)表结构分析"></a>1.2)表结构分析</h3><p>ap_article  文章基本信息表</p><p><img src="/../images/image-20210419151839634.png" alt="image-20210419151839634"></p><p>ap_article_config  文章配置表</p><p><img src="/../images/image-20210419151854868.png" alt="image-20210419151854868"></p><p>ap_article_content 文章内容表</p><p><img src="/../images/image-20210419151912063.png" alt="image-20210419151912063"></p><p>三张表关系分析</p><p><img src="/../images/image-20210419151938103.png" alt="image-20210419151938103"></p><h3 id="1-3-导入文章数据库"><a href="#1-3-导入文章数据库" class="headerlink" title="1.3)导入文章数据库"></a>1.3)导入文章数据库</h3><h4 id="1-3-1-导入数据库"><a href="#1-3-1-导入数据库" class="headerlink" title="1.3.1)导入数据库"></a>1.3.1)导入数据库</h4><p>查看当天资料文件夹，在数据库连接工具中执行leadnews_article.sql</p><h4 id="1-3-2-导入对应的实体类"><a href="#1-3-2-导入对应的实体类" class="headerlink" title="1.3.2)导入对应的实体类"></a>1.3.2)导入对应的实体类</h4><p>ap_article文章表对应实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.article.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 文章信息表，存储已发布的文章</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;ap_article&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApArticle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;,type = IdType.ID_WORKER)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 作者id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;author_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long authorId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 作者名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;author_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String authorName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 频道id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;channel_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer channelId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 频道名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;channel_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String channelName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章布局  0 无图文章   1 单图文章    2 多图文章</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short layout;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章标记  0 普通文章   1 热点文章   2 置顶文章   3 精品文章   4 大V 文章</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Byte flag;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章封面图片 多张逗号分隔</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String images;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标签</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String labels;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 点赞数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer likes;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收藏数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer collection;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 评论数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer comment;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阅读数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer views;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 省市</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;province_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer provinceId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 市区</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;city_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer cityId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 区县</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;county_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer countyId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;created_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发布时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;publish_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date publishTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 同步状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;sync_status&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean syncStatus;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 来源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Boolean origin;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 静态页面地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;static_url&quot;)</span><br>    <span class="hljs-keyword">private</span> String staticUrl;<br>&#125;<br></code></pre></td></tr></table></figure><p>ap_article_config文章配置对应实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.article.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * APP已发布文章配置表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;ap_article_config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApArticleConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;,type = IdType.ID_WORKER)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;article_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long articleId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否可评论</span><br><span class="hljs-comment">     * true: 可以评论   1</span><br><span class="hljs-comment">     * false: 不可评论  0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_comment&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isComment;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否转发</span><br><span class="hljs-comment">     * true: 可以转发   1</span><br><span class="hljs-comment">     * false: 不可转发  0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_forward&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isForward;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否下架</span><br><span class="hljs-comment">     * true: 下架   1</span><br><span class="hljs-comment">     * false: 没有下架  0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_down&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isDown;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否已删除</span><br><span class="hljs-comment">     * true: 删除   1</span><br><span class="hljs-comment">     * false: 没有删除  0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_delete&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isDelete;<br>&#125;<br></code></pre></td></tr></table></figure><p>ap_article_content 文章内容对应的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.article.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;ap_article_content&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApArticleContent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;,type = IdType.ID_WORKER)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;article_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long articleId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String content;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-实现思路"><a href="#1-4-实现思路" class="headerlink" title="1.4)实现思路"></a>1.4)实现思路</h3><p><img src="/../images/image-20210419152011931.png" alt="image-20210419152011931"></p><p>1,在默认频道展示10条文章信息</p><p>2,可以切换频道查看不同种类文章</p><p>3,当用户下拉可以加载最新的文章（分页）本页文章列表中发布时间为最大的时间为依据</p><p>4,当用户上拉可以加载更多的文章信息（按照发布时间）本页文章列表中发布时间最小的时间为依据</p><p>5，如果是当前频道的首页，前端传递默认参数：</p><ul><li><p>maxBehotTime：0（毫秒）</p></li><li><p>minBehotTime：20000000000000（毫秒）—&gt;2063年</p></li></ul><h3 id="1-5-接口定义"><a href="#1-5-接口定义" class="headerlink" title="1.5)接口定义"></a>1.5)接口定义</h3><table><thead><tr><th></th><th><strong>加载首页</strong></th><th><strong>加载更多</strong></th><th><strong>加载最新</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/article/load</td><td>/api/v1/article/loadmore</td><td>/api/v1/article/loadnew</td></tr><tr><td>请求方式</td><td>POST</td><td>POST</td><td>POST</td></tr><tr><td>参数</td><td>ArticleHomeDto</td><td>ArticleHomeDto</td><td>ArticleHomeDto</td></tr><tr><td>响应结果</td><td>ResponseResult</td><td>ResponseResult</td><td>ResponseResult</td></tr></tbody></table><p>ArticleHomeDto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.article.dtos;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleHomeDto</span> &#123;<br><br>    <span class="hljs-comment">// 最大时间</span><br>    Date maxBehotTime;<br>    <span class="hljs-comment">// 最小时间</span><br>    Date minBehotTime;<br>    <span class="hljs-comment">// 分页size</span><br>    Integer size;<br>    <span class="hljs-comment">// 频道ID</span><br>    String tag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-功能实现"><a href="#1-6-功能实现" class="headerlink" title="1.6)功能实现"></a>1.6)功能实现</h3><h4 id="1-6-1-：导入heima-leadnews-article微服务，资料在当天的文件夹中"><a href="#1-6-1-：导入heima-leadnews-article微服务，资料在当天的文件夹中" class="headerlink" title="1.6.1)：导入heima-leadnews-article微服务，资料在当天的文件夹中"></a>1.6.1)：导入heima-leadnews-article微服务，资料在当天的文件夹中</h4><p><img src="/../images/image-20210420000326669.png" alt="image-20210420000326669"></p><p><font color='red'>注意：需要在heima-leadnews-service的pom文件夹中添加子模块信息，如下：</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>heima-leadnews-user<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>heima-leadnews-article<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在idea中的maven中更新一下，如果工程还是灰色的，需要在重新添加文章微服务的pom文件，操作步骤如下：</p><p><img src="/../images/image-20210420001037992.png" alt="image-20210420001037992"></p><p>需要在nacos中添加对应的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/leadnews_article?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-comment"># 设置Mapper接口所对应的XML文件位置，如果你在Mapper接口中有自定义方法，需要进行该配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/*.xml</span><br>  <span class="hljs-comment"># 设置别名包扫描路径，通过该属性可以给包中的类注册别名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.heima.model.article.pojos</span><br></code></pre></td></tr></table></figure><h4 id="1-6-2-：定义接口"><a href="#1-6-2-：定义接口" class="headerlink" title="1.6.2)：定义接口"></a>1.6.2)：定义接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleHomeDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/article&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleHomeController</span> &#123;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/load&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/loadmore&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">loadMore</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/loadnew&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">loadNew</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-6-3-：编写mapper文件"><a href="#1-6-3-：编写mapper文件" class="headerlink" title="1.6.3)：编写mapper文件"></a>1.6.3)：编写mapper文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleHomeDto;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApArticleMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;ApArticle&gt; &#123;<br><br>    <span class="hljs-keyword">public</span> List&lt;ApArticle&gt; <span class="hljs-title function_">loadArticleList</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;dto&quot;)</span> ArticleHomeDto dto, <span class="hljs-meta">@Param(&quot;type&quot;)</span> Short type)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>对应的映射文件</p><p>在resources中新建mapper/ApArticleMapper.xml     如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.heima.article.mapper.ApArticleMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.heima.model.article.pojos.ApArticle&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;title&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;authorId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;author_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;authorName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;channel_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;channelId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;channel_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;channelName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;layout&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;layout&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;flag&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;images&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;images&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;labels&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;labels&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;likes&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;likes&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;collection&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;collection&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comment&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;comment&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;views&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;views&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;province_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;provinceId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;city_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cityId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;county_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;countyId&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;publish_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;publishTime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sync_status&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;syncStatus&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;static_url&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;staticUrl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loadArticleList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap&quot;</span>&gt;</span><br>        SELECT<br>        aa.*<br>        FROM<br>        `ap_article` aa<br>        LEFT JOIN ap_article_config aac ON aa.id = aac.article_id<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            and aac.is_delete != 1<br>            and aac.is_down != 1<br>            <span class="hljs-comment">&lt;!-- loadmore --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null and type == 1&quot;</span>&gt;</span><br>                and aa.publish_time &lt;![CDATA[&lt;]]&gt; #&#123;dto.minBehotTime&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;type != null and type == 2&quot;</span>&gt;</span><br>                and aa.publish_time &lt;![CDATA[&gt;]]&gt; #&#123;dto.maxBehotTime&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dto.tag != &#x27;__all__&#x27;&quot;</span>&gt;</span><br>                and aa.channel_id = #&#123;dto.tag&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        order by aa.publish_time desc<br>        limit #&#123;dto.size&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-6-4-：编写业务层代码"><a href="#1-6-4-：编写业务层代码" class="headerlink" title="1.6.4)：编写业务层代码"></a>1.6.4)：编写业务层代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleHomeDto;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApArticleService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;ApArticle&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据参数加载文章列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loadtype 1为加载更多  2为加载最新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    ResponseResult <span class="hljs-title function_">load</span><span class="hljs-params">(Short loadtype, ArticleHomeDto dto)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.heima.article.mapper.ApArticleMapper;<br><span class="hljs-keyword">import</span> com.heima.article.service.ApArticleService;<br><span class="hljs-keyword">import</span> com.heima.common.constants.ArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleHomeDto;<br><br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApArticleServiceImpl</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ApArticleMapper, ApArticle&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApArticleService</span> &#123;<br><br>    <span class="hljs-comment">// 单页最大加载的数字</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">short</span> <span class="hljs-variable">MAX_PAGE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleMapper apArticleMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据参数加载文章列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loadtype 1为加载更多  2为加载最新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">load</span><span class="hljs-params">(Short loadtype, ArticleHomeDto dto)</span> &#123;<br>        <span class="hljs-comment">//1.校验参数</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> dto.getSize();<br>        <span class="hljs-keyword">if</span>(size == <span class="hljs-literal">null</span> || size == <span class="hljs-number">0</span>)&#123;<br>            size = <span class="hljs-number">10</span>;<br>        &#125;<br>        size = Math.min(size,MAX_PAGE_SIZE);<br>        dto.setSize(size);<br><br>        <span class="hljs-comment">//类型参数检验</span><br>        <span class="hljs-keyword">if</span>(!loadtype.equals(ArticleConstants.LOADTYPE_LOAD_MORE)&amp;&amp;!loadtype.equals(ArticleConstants.LOADTYPE_LOAD_NEW))&#123;<br>            loadtype = ArticleConstants.LOADTYPE_LOAD_MORE;<br>        &#125;<br>        <span class="hljs-comment">//文章频道校验</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(dto.getTag()))&#123;<br>            dto.setTag(ArticleConstants.DEFAULT_TAG);<br>        &#125;<br><br>        <span class="hljs-comment">//时间校验</span><br>        <span class="hljs-keyword">if</span>(dto.getMaxBehotTime() == <span class="hljs-literal">null</span>) dto.setMaxBehotTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-keyword">if</span>(dto.getMinBehotTime() == <span class="hljs-literal">null</span>) dto.setMinBehotTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-comment">//2.查询数据</span><br>        List&lt;ApArticle&gt; apArticles = apArticleMapper.loadArticleList(dto, loadtype);<br><br>        <span class="hljs-comment">//3.结果封装</span><br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> ResponseResult.okResult(apArticles);<br>        <span class="hljs-keyword">return</span> responseResult;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>定义常量类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.constants;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">LOADTYPE_LOAD_MORE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">LOADTYPE_LOAD_NEW</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;__all__&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-6-5-：编写控制器代码"><a href="#1-6-5-：编写控制器代码" class="headerlink" title="1.6.5)：编写控制器代码"></a>1.6.5)：编写控制器代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.article.service.ApArticleService;<br><span class="hljs-keyword">import</span> com.heima.common.constants.ArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleHomeDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/article&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleHomeController</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleService apArticleService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/load&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> apArticleService.load(ArticleConstants.LOADTYPE_LOAD_MORE,dto);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/loadmore&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">loadMore</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> apArticleService.load(ArticleConstants.LOADTYPE_LOAD_MORE,dto);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/loadnew&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">loadNew</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleHomeDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> apArticleService.load(ArticleConstants.LOADTYPE_LOAD_NEW,dto);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-6-6-：swagger测试或前后端联调测试"><a href="#1-6-6-：swagger测试或前后端联调测试" class="headerlink" title="1.6.6)：swagger测试或前后端联调测试"></a>1.6.6)：swagger测试或前后端联调测试</h4><p>第一：在app网关的微服务的nacos的配置中心添加文章微服务的路由，完整配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">globalcors:</span><br>        <span class="hljs-attr">cors-configurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span> <span class="hljs-comment"># 匹配所有请求</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment">#跨域处理 允许所有的域</span><br>            <span class="hljs-attr">allowedMethods:</span> <span class="hljs-comment"># 支持的方法</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">GET</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">POST</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">PUT</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">DELETE</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-comment"># 用户微服务</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://leadnews-user</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=</span> <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 文章微服务</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">article</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://leadnews-article</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/article/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>第二：启动nginx，直接使用前端项目测试，启动文章微服务，用户微服务、app网关微服务</p><h2 id="2-freemarker"><a href="#2-freemarker" class="headerlink" title="2)freemarker"></a>2)freemarker</h2><h3 id="2-1-freemarker-介绍"><a href="#2-1-freemarker-介绍" class="headerlink" title="2.1) freemarker 介绍"></a>2.1) freemarker 介绍</h3><p>​    FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p><p>​    模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， <em>不是</em> 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。 </p><p><img src="/../images/1528820943975.png" alt="1528820943975"></p><p>常用的java模板引擎还有哪些？</p><p>Jsp、Freemarker、Thymeleaf 、Velocity 等。</p><p>1.Jsp 为 Servlet 专用，不能单独进行使用。</p><p>2.Thymeleaf 为新技术，功能较为强大，但是执行的效率比较低。</p><p>3.Velocity从2010年更新完 2.0 版本后，便没有在更新。Spring Boot 官方在 1.4 版本后对此也不在支持，虽然 Velocity 在 2017 年版本得到迭代，但为时已晚。 </p><h3 id="2-2-环境搭建-amp-amp-快速入门"><a href="#2-2-环境搭建-amp-amp-快速入门" class="headerlink" title="2.2) 环境搭建&amp;&amp;快速入门"></a>2.2) 环境搭建&amp;&amp;快速入门</h3><p>freemarker作为springmvc一种视图格式，默认情况下SpringMVC支持freemarker视图格式。</p><p>需要创建Spring Boot+Freemarker工程用于测试模板。</p><h4 id="2-2-1-创建测试工程"><a href="#2-2-1-创建测试工程" class="headerlink" title="2.2.1) 创建测试工程"></a>2.2.1) 创建测试工程</h4><p>创建一个freemarker-demo 的测试工程专门用于freemarker的功能测试与模板的测试。</p><p>pom.xml如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>heima-leadnews-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.heima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- lombok --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- apache 对 java io 的封装工具库 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-配置文件"><a href="#2-2-2-配置文件" class="headerlink" title="2.2.2) 配置文件"></a>2.2.2) 配置文件</h4><p>配置application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8881</span> <span class="hljs-comment">#服务端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">freemarker-demo</span> <span class="hljs-comment">#指定服务名</span><br>  <span class="hljs-attr">freemarker:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#关闭模板缓存，方便测试</span><br>    <span class="hljs-attr">settings:</span><br>      <span class="hljs-attr">template_update_delay:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.ftl</span>               <span class="hljs-comment">#指定Freemarker模板文件的后缀名</span><br></code></pre></td></tr></table></figure><h4 id="2-2-3-创建模型类"><a href="#2-2-3-创建模型类" class="headerlink" title="2.2.3) 创建模型类"></a>2.2.3) 创建模型类</h4><p>在freemarker的测试工程下创建模型类型用于测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.freemarker.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">private</span> Date birthday;<span class="hljs-comment">//生日</span><br>    <span class="hljs-keyword">private</span> Float money;<span class="hljs-comment">//钱包</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-4-创建模板"><a href="#2-2-4-创建模板" class="headerlink" title="2.2.4) 创建模板"></a>2.2.4) 创建模板</h4><p>在resources下创建templates，此目录为freemarker的默认模板存放目录。</p><p>在templates下创建模板文件 01-basic.ftl ，模板中的插值表达式最终会被freemarker替换成具体的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>普通文本 String 展示：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>Hello $&#123;name&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>对象Student中的数据展示：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>姓名：$&#123;stu.name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>年龄：$&#123;stu.age&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-5-创建controller"><a href="#2-2-5-创建controller" class="headerlink" title="2.2.5) 创建controller"></a>2.2.5) 创建controller</h4><p>创建Controller类，向Map中添加name，最后返回模板文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.test.freemarker.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/basic&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">(Model model)</span> &#123;<br><br><br>        <span class="hljs-comment">//1.纯文本形式的参数</span><br>        model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;freemarker&quot;</span>);<br>        <span class="hljs-comment">//2.实体类相关的参数</span><br>        <br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;小明&quot;</span>);<br>        student.setAge(<span class="hljs-number">18</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;stu&quot;</span>, student);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;01-basic&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>01-basic.ftl，使用插值表达式填充数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>普通文本 String 展示：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>Hello $&#123;name&#125; <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>对象Student中的数据展示：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>姓名：$&#123;stu.name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>年龄：$&#123;stu.age&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-6-创建启动类"><a href="#2-2-6-创建启动类" class="headerlink" title="2.2.6) 创建启动类"></a>2.2.6) 创建启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.freemarker;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FreemarkerDemotApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(FreemarkerDemotApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-7-测试"><a href="#2-2-7-测试" class="headerlink" title="2.2.7) 测试"></a>2.2.7) 测试</h4><p>请求：<a href="http://localhost:8881/basic">http://localhost:8881/basic</a></p><p><img src="/../images/1576129529361.png" alt="1576129529361"></p><h3 id="2-3-freemarker基础"><a href="#2-3-freemarker基础" class="headerlink" title="2.3) freemarker基础"></a>2.3) freemarker基础</h3><h4 id="2-3-1-基础语法种类"><a href="#2-3-1-基础语法种类" class="headerlink" title="2.3.1) 基础语法种类"></a>2.3.1) 基础语法种类</h4><p>  1、注释，即&lt;#–  –&gt;，介于其之间的内容会被freemarker忽略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;#--我是一个freemarker注释--&gt;<br></code></pre></td></tr></table></figure><p>  2、插值（Interpolation）：即 <strong><code>$&#123;..&#125;</code></strong> 部分,freemarker会用真实的值代替**<code>$&#123;..&#125;</code>**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs velocity">Hello $&#123;name&#125;<br></code></pre></td></tr></table></figure><p>  3、FTL指令：和HTML标记类似，名字前加#予以区分，Freemarker会解析标签中的表达式或逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;# &gt;FTL指令&lt;/#&gt; <br></code></pre></td></tr></table></figure><p>  4、文本，仅文本信息，这些不是freemarker的注释、插值、FTL指令的内容会被freemarker忽略解析，直接输出内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;#--freemarker中的普通文本--&gt;<br>我是一个普通的文本<br></code></pre></td></tr></table></figure><h4 id="2-3-2-集合指令（List和Map）"><a href="#2-3-2-集合指令（List和Map）" class="headerlink" title="2.3.2) 集合指令（List和Map）"></a>2.3.2) 集合指令（List和Map）</h4><p>1、数据模型：</p><p>在HelloController中新增如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">list</span><span class="hljs-params">(Model model)</span>&#123;<br><br>    <span class="hljs-comment">//------------------------------------</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    stu1.setName(<span class="hljs-string">&quot;小强&quot;</span>);<br>    stu1.setAge(<span class="hljs-number">18</span>);<br>    stu1.setMoney(<span class="hljs-number">1000.86f</span>);<br>    stu1.setBirthday(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>    <span class="hljs-comment">//小红对象模型数据</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    stu2.setName(<span class="hljs-string">&quot;小红&quot;</span>);<br>    stu2.setMoney(<span class="hljs-number">200.1f</span>);<br>    stu2.setAge(<span class="hljs-number">19</span>);<br><br>    <span class="hljs-comment">//将两个对象模型数据存放到List集合中</span><br>    List&lt;Student&gt; stus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    stus.add(stu1);<br>    stus.add(stu2);<br><br>    <span class="hljs-comment">//向model中存放List集合数据</span><br>    model.addAttribute(<span class="hljs-string">&quot;stus&quot;</span>,stus);<br><br>    <span class="hljs-comment">//------------------------------------</span><br><br>    <span class="hljs-comment">//创建Map数据</span><br>    HashMap&lt;String,Student&gt; stuMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    stuMap.put(<span class="hljs-string">&quot;stu1&quot;</span>,stu1);<br>    stuMap.put(<span class="hljs-string">&quot;stu2&quot;</span>,stu2);<br>    <span class="hljs-comment">// 3.1 向model中存放Map数据</span><br>    model.addAttribute(<span class="hljs-string">&quot;stuMap&quot;</span>, stuMap);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;02-list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、模板：</p><p>在templates中新增<code>02-list.ftl</code>文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>&lt;#-- list 数据的展示 --&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>展示list中的stu数据:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>钱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <br>&lt;#-- Map 数据的展示 --&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>map数据的展示：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;###&quot;</span>&gt;</span>方式一：通过map[&#x27;keyname&#x27;].property<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>输出stu1的学生信息：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>姓名：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>年龄：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;###&quot;</span>&gt;</span>方式二：通过map.keyname.property<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>输出stu2的学生信息：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>姓名：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>年龄：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;###&quot;</span>&gt;</span>遍历map中两个学生信息：<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>钱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>&lt;#-- list 数据的展示 --&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>展示list中的stu数据:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>钱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &lt;#list stus as stu&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu_index+1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &lt;/#list&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <br>&lt;#-- Map 数据的展示 --&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>map数据的展示：<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;###&quot;</span>&gt;</span>方式一：通过map[&#x27;keyname&#x27;].property<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>输出stu1的学生信息：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>姓名：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>年龄：$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;###&quot;</span>&gt;</span>方式二：通过map.keyname.property<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>输出stu2的学生信息：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>姓名：$&#123;stuMap.stu2.name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>年龄：$&#123;stuMap.stu2.age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;###&quot;</span>&gt;</span>遍历map中两个学生信息：<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>钱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &lt;#list stuMap?keys as key &gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;key_index&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stuMap[key].name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stuMap[key].age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stuMap[key].money&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &lt;/#list&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>👆上面代码解释：</p><p>${k_index}：<br>    index：得到循环的下标，使用方法是在stu后边加”_index”，它的值是从0开始</p><h4 id="2-3-3-if指令"><a href="#2-3-3-if指令" class="headerlink" title="2.3.3) if指令"></a>2.3.3) if指令</h4><p>​     if 指令即判断指令，是常用的FTL指令，freemarker在解析时遇到if会进行判断，条件为真则输出if中间的内容，否则跳过内容不再输出。</p><ul><li>指令格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#if &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1、数据模型：</p><p>使用list指令中测试数据模型，判断名称为小红的数据字体显示为红色。</p><p>2、模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;table&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;姓名&lt;/td&gt;<br>        &lt;td&gt;年龄&lt;/td&gt;<br>        &lt;td&gt;钱包&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;#list stus as stu&gt;<br>        &lt;tr&gt;<br>            &lt;td &gt;$&#123;stu.name&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;<br>            &lt;td &gt;$&#123;stu.mondy&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/#list&gt;<br><br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;table&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;姓名&lt;/td&gt;<br>        &lt;td&gt;年龄&lt;/td&gt;<br>        &lt;td&gt;钱包&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;#list stus as stu &gt;<br>        &lt;#if stu.name=&#x27;小红&#x27;&gt;<br>            &lt;tr style=&quot;color: red&quot;&gt;<br>                &lt;td&gt;$&#123;stu_index&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;stu.name&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;stu.money&#125;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;#else &gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;$&#123;stu_index&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;stu.name&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;<br>                &lt;td&gt;$&#123;stu.money&#125;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/#if&gt;<br>    &lt;/#list&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><p>3、输出：</p><p>姓名为“小强”则字体颜色显示为红色。</p><p><img src="/../images/1539947776259.png" alt="1539947776259"></p><h4 id="2-3-4-运算符"><a href="#2-3-4-运算符" class="headerlink" title="2.3.4)  运算符"></a>2.3.4)  运算符</h4><p><strong>1、算数运算符</strong></p><p>FreeMarker表达式中完全支持算术运算,FreeMarker支持的算术运算符包括:</p><ul><li>加法： <code>+</code></li><li>减法： <code>-</code></li><li>乘法： <code>*</code></li><li>除法： <code>/</code></li><li>求模 (求余)： <code>%</code></li></ul><p>模板代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>算数运算符<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    100+5 运算：  $&#123;100 + 5 &#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    100 - 5 * 5运算：$&#123;100 - 5 * 5&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    5 / 2运算：$&#123;5 / 2&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    12 % 10运算：$&#123;12 % 10&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>除了 + 运算以外，其他的运算只能和 number 数字类型的计算。</p><p><strong>2、比较运算符</strong></p><ul><li><strong><code>=</code><strong>或者</strong><code>==</code></strong>:判断两个值是否相等. </li><li><strong><code>!=</code></strong>:判断两个值是否不等. </li><li><strong><code>&gt;</code><strong>或者</strong><code>gt</code></strong>:判断左边值是否大于右边值 </li><li><strong><code>&gt;=</code><strong>或者</strong><code>gte</code></strong>:判断左边值是否大于等于右边值 </li><li><strong><code>&lt;</code><strong>或者</strong><code>lt</code></strong>:判断左边值是否小于右边值 </li><li><strong><code>&lt;=</code><strong>或者</strong><code>lte</code></strong>:判断左边值是否小于等于右边值 </li></ul><p>= 和 == 模板代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>比较运算符<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span> =/== 和 != 比较：<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br>            &lt;#if &quot;xiaoming&quot; == &quot;xiaoming&quot;&gt;<br>                字符串的比较 &quot;xiaoming&quot; == &quot;xiaoming&quot;<br>            &lt;/#if&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br>            &lt;#if 10 != 100&gt;<br>                数值的比较 10 != 100<br>            &lt;/#if&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>其他比较<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br>            &lt;#if 10 gt 5 &gt;<br>                形式一：使用特殊字符比较数值 10 gt 5<br>            &lt;/#if&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br>            &lt;#-- 日期的比较需要通过?date将属性转为data类型才能进行比较 --&gt;<br>            &lt;#if (date1?date &gt;= date2?date)&gt;<br>                形式二：使用括号形式比较时间 date1?date &gt;= date2?date<br>            &lt;/#if&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Controller 的 数据模型代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;operation&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testOperation</span><span class="hljs-params">(Model model)</span> &#123;<br>    <span class="hljs-comment">//构建 Date 数据</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    model.addAttribute(<span class="hljs-string">&quot;date1&quot;</span>, now);<br>    model.addAttribute(<span class="hljs-string">&quot;date2&quot;</span>, now);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;03-operation&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>比较运算符注意</strong></p><ul><li>**<code>=</code><strong>和</strong><code>!=</code>**可以用于字符串、数值和日期来比较是否相等</li><li>**<code>=</code><strong>和</strong><code>!=</code>**两边必须是相同类型的值,否则会产生错误</li><li>字符串 <strong><code>&quot;x&quot;</code></strong> 、**<code>&quot;x &quot;</code>** 、**<code>&quot;X&quot;</code>**比较是不等的.因为FreeMarker是精确比较</li><li>其它的运行符可以作用于数字和日期,但不能作用于字符串</li><li>使用**<code>gt</code><strong>等字母运算符代替</strong><code>&gt;</code><strong>会有更好的效果,因为 FreeMarker会把</strong><code>&gt;</code>**解释成FTL标签的结束字符</li><li>可以使用括号来避免这种情况,如:<strong><code>&lt;#if (x&gt;y)&gt;</code></strong></li></ul><p><strong>3、逻辑运算符</strong></p><ul><li>逻辑与:&amp;&amp; </li><li>逻辑或:|| </li><li>逻辑非:! </li></ul><p>逻辑运算符只能作用于布尔值,否则将产生错误 。</p><p>模板代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>逻辑运算符<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    &lt;#if (10 lt 12 )&amp;&amp;( 10  gt  5 )  &gt;<br>        (10 lt 12 )&amp;&amp;( 10  gt  5 )  显示为 true<br>    &lt;/#if&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    &lt;#if !false&gt;<br>        false 取反为true<br>    &lt;/#if&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-5-空值处理"><a href="#2-3-5-空值处理" class="headerlink" title="2.3.5) 空值处理"></a>2.3.5) 空值处理</h4><p><strong>1、判断某变量是否存在使用 “??”</strong></p><p>用法为:variable??,如果该变量存在,返回true,否则返回false </p><p>例：为防止stus为空报错可以加上判断如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;#if stus??&gt;<br>&lt;#list stus as stu&gt;<br>......<br>&lt;/#list&gt;<br>&lt;/#if&gt;<br></code></pre></td></tr></table></figure><p><strong>2、缺失变量默认值使用 “!”</strong></p><ul><li><p>使用!要以指定一个默认值，当变量为空时显示默认值</p><p>  例：  ${name!’’}表示如果name为空显示空字符串。</p></li></ul><ul><li><p>如果是嵌套对象则建议使用（）括起来</p><p>  例： ${(stu.bestFriend.name)!’’}表示，如果stu或bestFriend或name为空默认显示空字符串。</p></li></ul><h4 id="2-3-6-内建函数"><a href="#2-3-6-内建函数" class="headerlink" title="2.3.6) 内建函数"></a>2.3.6) 内建函数</h4><p>内建函数语法格式： <strong><code>变量+?+函数名称</code></strong>  </p><p><strong>1、和到某个集合的大小</strong></p><p><strong><code>$&#123;集合名?size&#125;</code></strong></p><p><strong>2、日期格式化</strong></p><p>显示年月日: <strong><code>$&#123;today?date&#125;</code></strong><br>显示时分秒：**<code>$&#123;today?time&#125;</code>**<br>显示日期+时间：**<code>$&#123;today?datetime&#125;</code>**<br>自定义格式化：  <strong><code>$&#123;today?string(&quot;yyyy年MM月&quot;)&#125;</code></strong></p><p><strong>3、内建函数<code>c</code></strong></p><p>model.addAttribute(“point”, 102920122);</p><p>point是数字型，使用${point}会显示这个数字的值，每三位使用逗号分隔。</p><p>如果不想显示为每三位分隔的数字，可以使用c函数将数字型转成字符串输出</p><p><strong><code>$&#123;point?c&#125;</code></strong></p><p><strong>4、将json字符串转成对象</strong></p><p>一个例子：</p><p>其中用到了 assign标签，assign的作用是定义一个变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;#assign text=&quot;&#123;&#x27;bank&#x27;:&#x27;工商银行&#x27;,&#x27;account&#x27;:&#x27;10101920201920212&#x27;&#125;&quot; /&gt;<br>&lt;#assign data=text?eval /&gt;<br>开户行：$&#123;data.bank&#125;  账号：$&#123;data.account&#125;<br></code></pre></td></tr></table></figure><p>模板代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>inner Function<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>获得集合大小<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    集合大小：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>获得日期<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    显示年月日:      <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    显示时分秒：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    显示日期+时间：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    自定义格式化：  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>内建函数C<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    没有C函数显示的数值： <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    有C函数显示的数值：<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>声明变量assign<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>内建函数模板页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs velocity">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>    &lt;title&gt;inner Function&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>    &lt;b&gt;获得集合大小&lt;/b&gt;&lt;br&gt;<br><br>    集合大小：$&#123;stus?size&#125;<br>    &lt;hr&gt;<br><br><br>    &lt;b&gt;获得日期&lt;/b&gt;&lt;br&gt;<br><br>    显示年月日: $&#123;today?date&#125;       &lt;br&gt;<br><br>    显示时分秒：$&#123;today?time&#125;&lt;br&gt;<br><br>    显示日期+时间：$&#123;today?datetime&#125;&lt;br&gt;<br><br>    自定义格式化：  $&#123;today?string(&quot;yyyy年MM月&quot;)&#125;&lt;br&gt;<br><br>    &lt;hr&gt;<br><br>    &lt;b&gt;内建函数C&lt;/b&gt;&lt;br&gt;<br>    没有C函数显示的数值：$&#123;point&#125; &lt;br&gt;<br><br>    有C函数显示的数值：$&#123;point?c&#125;<br><br>    &lt;hr&gt;<br><br>    &lt;b&gt;声明变量assign&lt;/b&gt;&lt;br&gt;<br>    &lt;#assign text=&quot;&#123;&#x27;bank&#x27;:&#x27;工商银行&#x27;,&#x27;account&#x27;:&#x27;10101920201920212&#x27;&#125;&quot; /&gt;<br>    &lt;#assign data=text?eval /&gt;<br>    开户行：$&#123;data.bank&#125;  账号：$&#123;data.account&#125;<br><br>&lt;hr&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>内建函数Controller数据模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;innerFunc&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testInnerFunc</span><span class="hljs-params">(Model model)</span> &#123;<br>    <span class="hljs-comment">//1.1 小强对象模型数据</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    stu1.setName(<span class="hljs-string">&quot;小强&quot;</span>);<br>    stu1.setAge(<span class="hljs-number">18</span>);<br>    stu1.setMoney(<span class="hljs-number">1000.86f</span>);<br>    stu1.setBirthday(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-comment">//1.2 小红对象模型数据</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    stu2.setName(<span class="hljs-string">&quot;小红&quot;</span>);<br>    stu2.setMoney(<span class="hljs-number">200.1f</span>);<br>    stu2.setAge(<span class="hljs-number">19</span>);<br>    <span class="hljs-comment">//1.3 将两个对象模型数据存放到List集合中</span><br>    List&lt;Student&gt; stus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    stus.add(stu1);<br>    stus.add(stu2);<br>    model.addAttribute(<span class="hljs-string">&quot;stus&quot;</span>, stus);<br>    <span class="hljs-comment">// 2.1 添加日期</span><br>    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    model.addAttribute(<span class="hljs-string">&quot;today&quot;</span>, date);<br>    <span class="hljs-comment">// 3.1 添加数值</span><br>    model.addAttribute(<span class="hljs-string">&quot;point&quot;</span>, <span class="hljs-number">102920122</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;04-innerFunc&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-静态化测试"><a href="#2-4-静态化测试" class="headerlink" title="2.4) 静态化测试"></a>2.4) 静态化测试</h3><p>之前的测试都是SpringMVC将Freemarker作为视图解析器（ViewReporter）来集成到项目中，工作中，有的时候需要使用Freemarker原生Api来生成静态内容，下面一起来学习下原生Api生成文本文件。</p><h4 id="2-4-1-需求分析"><a href="#2-4-1-需求分析" class="headerlink" title="2.4.1) 需求分析"></a>2.4.1) 需求分析</h4><p>使用freemarker原生Api将页面生成html文件，本节测试html文件生成的方法：</p><p><img src="/../images/image-20210422163843108.png" alt="image-20210422163843108"></p><h4 id="2-4-2-静态化测试"><a href="#2-4-2-静态化测试" class="headerlink" title="2.4.2) 静态化测试"></a>2.4.2) 静态化测试</h4><p>根据模板文件生成html文件</p><p>①：修改application.yml文件，添加以下模板存放位置的配置信息，完整配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8881</span> <span class="hljs-comment">#服务端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">freemarker-demo</span> <span class="hljs-comment">#指定服务名</span><br>  <span class="hljs-attr">freemarker:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">#关闭模板缓存，方便测试</span><br>    <span class="hljs-attr">settings:</span><br>      <span class="hljs-attr">template_update_delay:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.ftl</span>               <span class="hljs-comment">#指定Freemarker模板文件的后缀名</span><br>    <span class="hljs-attr">template-loader-path:</span> <span class="hljs-string">classpath:/templates</span>   <span class="hljs-comment">#模板存放位置</span><br></code></pre></td></tr></table></figure><p>②：在test下创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.freemarker.test;<br><br><br><span class="hljs-keyword">import</span> com.heima.freemarker.FreemarkerDemoApplication;<br><span class="hljs-keyword">import</span> com.heima.freemarker.entity.Student;<br><span class="hljs-keyword">import</span> freemarker.template.Configuration;<br><span class="hljs-keyword">import</span> freemarker.template.Template;<br><span class="hljs-keyword">import</span> freemarker.template.TemplateException;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@SpringBootTest(classes = FreemarkerDemoApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FreemarkerTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TemplateException &#123;<br>        <span class="hljs-comment">//freemarker的模板对象，获取模板</span><br>        <span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> configuration.getTemplate(<span class="hljs-string">&quot;02-list.ftl&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> getData();<br>        <span class="hljs-comment">//合成</span><br>        <span class="hljs-comment">//第一个参数 数据模型</span><br>        <span class="hljs-comment">//第二个参数  输出流</span><br>        template.process(params, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;d:/list.html&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Map <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//小强对象模型数据</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        stu1.setName(<span class="hljs-string">&quot;小强&quot;</span>);<br>        stu1.setAge(<span class="hljs-number">18</span>);<br>        stu1.setMoney(<span class="hljs-number">1000.86f</span>);<br>        stu1.setBirthday(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        <span class="hljs-comment">//小红对象模型数据</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        stu2.setName(<span class="hljs-string">&quot;小红&quot;</span>);<br>        stu2.setMoney(<span class="hljs-number">200.1f</span>);<br>        stu2.setAge(<span class="hljs-number">19</span>);<br><br>        <span class="hljs-comment">//将两个对象模型数据存放到List集合中</span><br>        List&lt;Student&gt; stus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        stus.add(stu1);<br>        stus.add(stu2);<br><br>        <span class="hljs-comment">//向map中存放List集合数据</span><br>        map.put(<span class="hljs-string">&quot;stus&quot;</span>, stus);<br><br><br>        <span class="hljs-comment">//创建Map数据</span><br>        HashMap&lt;String, Student&gt; stuMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        stuMap.put(<span class="hljs-string">&quot;stu1&quot;</span>, stu1);<br>        stuMap.put(<span class="hljs-string">&quot;stu2&quot;</span>, stu2);<br>        <span class="hljs-comment">//向map中存放Map数据</span><br>        map.put(<span class="hljs-string">&quot;stuMap&quot;</span>, stuMap);<br><br>        <span class="hljs-comment">//返回Map</span><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-对象存储服务MinIO"><a href="#3-对象存储服务MinIO" class="headerlink" title="3) 对象存储服务MinIO"></a>3) 对象存储服务MinIO</h2><h3 id="3-1-MinIO简介"><a href="#3-1-MinIO简介" class="headerlink" title="3.1 MinIO简介"></a>3.1 MinIO简介</h3><p>MinIO基于Apache License v2.0开源协议的对象存储服务，可以做为云存储的解决方案用来保存海量的图片，视频，文档。由于采用Golang实现，服务端可以工作在Windows,Linux, OS X和FreeBSD上。配置简单，基本是复制可执行程序，单行命令可以运行起来。</p><p>MinIO兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p><p><strong>S3 （ Simple Storage Service简单存储服务）</strong></p><p>基本概念</p><ul><li>bucket – 类比于文件系统的目录</li><li>Object – 类比文件系统的文件</li><li>Keys – 类比文件名</li></ul><p>官网文档：<a href="http://docs.minio.org.cn/docs/">http://docs.minio.org.cn/docs/</a></p><h3 id="3-2-MinIO特点"><a href="#3-2-MinIO特点" class="headerlink" title="3.2 MinIO特点"></a>3.2 MinIO特点</h3><ul><li><p>数据保护</p><p>  Minio使用Minio Erasure Code（纠删码）来防止硬件故障。即便损坏一半以上的driver，但是仍然可以从中恢复。</p></li><li><p>高性能</p><p>  作为高性能对象存储，在标准硬件条件下它能达到55GB/s的读、35GB/s的写速率</p></li><li><p>可扩容</p><p>  不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并跨越多个数据中心</p></li><li><p>SDK支持</p><p>  基于Minio轻量的特点，它得到类似Java、Python或Go等语言的sdk支持</p></li><li><p>有操作页面</p><p>  面向用户友好的简单操作界面，非常方便的管理Bucket及里面的文件资源</p></li><li><p>功能简单</p><p>  这一设计原则让MinIO不容易出错、更快启动</p></li><li><p>丰富的API</p><p>  支持文件资源的分享连接及分享链接的过期策略、存储桶操作、文件列表访问及文件上传下载的基本功能等。</p></li><li><p>文件变化主动通知</p><p>  存储桶（Bucket）如果发生改变,比如上传对象和删除对象，可以使用存储桶事件通知机制进行监控，并通过以下方式发布出去:AMQP、MQTT、Elasticsearch、Redis、NATS、MySQL、Kafka、Webhooks等。</p></li></ul><h3 id="3-3-开箱使用"><a href="#3-3-开箱使用" class="headerlink" title="3.3 开箱使用"></a>3.3 开箱使用</h3><h4 id="3-3-1-安装启动"><a href="#3-3-1-安装启动" class="headerlink" title="3.3.1 安装启动"></a>3.3.1 安装启动</h4><p>我们提供的镜像中已经有minio的环境</p><p>我们可以使用docker进行环境部署和启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">docker</span> <span class="hljs-string">run</span> <span class="hljs-string">-p</span> <span class="hljs-number">9000</span><span class="hljs-string">:9000</span> <span class="hljs-string">--name</span> <span class="hljs-string">minio</span> <span class="hljs-string">-d</span> <span class="hljs-string">--restart=always</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;MINIO_ACCESS_KEY=minio&quot;</span> <span class="hljs-string">-e</span> <span class="hljs-string">&quot;MINIO_SECRET_KEY=minio123&quot;</span> <span class="hljs-string">-v</span> <span class="hljs-string">/home/data:/data</span> <span class="hljs-string">-v</span> <span class="hljs-string">/home/config:/root/.minio</span> <span class="hljs-string">minio/minio</span> <span class="hljs-string">server</span> <span class="hljs-string">/data</span><br></code></pre></td></tr></table></figure><h4 id="3-3-2-管理控制台"><a href="#3-3-2-管理控制台" class="headerlink" title="3.3.2 管理控制台"></a>3.3.2 管理控制台</h4><p>假设我们的服务器地址为<a href="http://192.168.200.130:9000，我们在地址栏输入：http://http://192.168.200.130:9000/">http://192.168.200.130:9000，我们在地址栏输入：http://http://192.168.200.130:9000/</a> 即可进入登录界面。</p><p><img src="/../images/image-20210417102204739.png" alt="image-20210417102204739"></p><p>Access Key为minio   Secret_key 为minio123    进入系统后可以看到主界面</p><p><img src="/../images/image-20210417102356582.png" alt="image-20210417102356582"></p><p>点击右下角的“+”号 ，点击下面的图标，创建一个桶</p><p><img src="/../images/image-20210417102435088.png" alt="image-20210417102435088"></p><h3 id="3-4-快速入门"><a href="#3-4-快速入门" class="headerlink" title="3.4 快速入门"></a>3.4 快速入门</h3><h4 id="3-4-1-创建工程，导入pom依赖"><a href="#3-4-1-创建工程，导入pom依赖" class="headerlink" title="3.4.1 创建工程，导入pom依赖"></a>3.4.1 创建工程，导入pom依赖</h4><p>创建minio-demo,对应pom如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>heima-leadnews-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.heima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.minio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引导类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.minio;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MinIOApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建测试类，上传html文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.minio.test;<br><br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> io.minio.PutObjectArgs;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOTest</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            fileInputStream =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\list.html&quot;</span>);;<br><br>            <span class="hljs-comment">//1.创建minio链接客户端</span><br>            <span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span> MinioClient.builder().credentials(<span class="hljs-string">&quot;minio&quot;</span>, <span class="hljs-string">&quot;minio123&quot;</span>).endpoint(<span class="hljs-string">&quot;http://192.168.200.130:9000&quot;</span>).build();<br>            <span class="hljs-comment">//2.上传</span><br>            <span class="hljs-type">PutObjectArgs</span> <span class="hljs-variable">putObjectArgs</span> <span class="hljs-operator">=</span> PutObjectArgs.builder()<br>                    .object(<span class="hljs-string">&quot;list.html&quot;</span>)<span class="hljs-comment">//文件名</span><br>                    .contentType(<span class="hljs-string">&quot;text/html&quot;</span>)<span class="hljs-comment">//文件类型</span><br>                    .bucket(<span class="hljs-string">&quot;leadnews&quot;</span>)<span class="hljs-comment">//桶名词  与minio创建的名词一致</span><br>                    .stream(fileInputStream, fileInputStream.available(), -<span class="hljs-number">1</span>) <span class="hljs-comment">//文件流</span><br>                    .build();<br>            minioClient.putObject(putObjectArgs);<br><br>            System.out.println(<span class="hljs-string">&quot;http://192.168.200.130:9000/leadnews/ak47.jpg&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            ex.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-封装MinIO为starter"><a href="#3-5-封装MinIO为starter" class="headerlink" title="3.5 封装MinIO为starter"></a>3.5 封装MinIO为starter</h3><h4 id="3-5-1-创建模块heima-file-starter"><a href="#3-5-1-创建模块heima-file-starter" class="headerlink" title="3.5.1 创建模块heima-file-starter"></a>3.5.1 创建模块heima-file-starter</h4><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.minio<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>minio<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-5-2-配置类"><a href="#3-5-2-配置类" class="headerlink" title="3.5.2 配置类"></a>3.5.2 配置类</h4><p>MinIOConfigProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.file.config;<br><br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span>  <span class="hljs-comment">// 文件上传 配置前缀file.oss</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOConfigProperties</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String accessKey;<br>    <span class="hljs-keyword">private</span> String secretKey;<br>    <span class="hljs-keyword">private</span> String bucket;<br>    <span class="hljs-keyword">private</span> String endpoint;<br>    <span class="hljs-keyword">private</span> String readPath;<br>&#125;<br></code></pre></td></tr></table></figure><p>MinIOConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.file.config;<br><br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;MinIOConfigProperties.class&#125;)</span><br><span class="hljs-comment">//当引入FileStorageService接口时</span><br><span class="hljs-meta">@ConditionalOnClass(FileStorageService.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOConfig</span> &#123;<br><br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> MinIOConfigProperties minIOConfigProperties;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MinioClient <span class="hljs-title function_">buildMinioClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> MinioClient<br>                .builder()<br>                .credentials(minIOConfigProperties.getAccessKey(), minIOConfigProperties.getSecretKey())<br>                .endpoint(minIOConfigProperties.getEndpoint())<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-3-封装操作minIO类"><a href="#3-5-3-封装操作minIO类" class="headerlink" title="3.5.3 封装操作minIO类"></a>3.5.3 封装操作minIO类</h4><p>FileStorageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.file.service;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FileStorageService</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  上传图片文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prefix  文件前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename  文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream 文件流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  文件全路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadImgFile</span><span class="hljs-params">(String prefix, String filename,InputStream inputStream)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  上传html文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prefix  文件前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename   文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream  文件流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  文件全路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadHtmlFile</span><span class="hljs-params">(String prefix, String filename,InputStream inputStream)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pathUrl  文件全路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String pathUrl)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下载文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pathUrl  文件全路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[]  downLoadFile(String pathUrl);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>MinIOFileStorageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.file.service.impl;<br><br><br><span class="hljs-keyword">import</span> com.heima.file.config.MinIOConfig;<br><span class="hljs-keyword">import</span> com.heima.file.config.MinIOConfigProperties;<br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> io.minio.GetObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> io.minio.PutObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.RemoveObjectArgs;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@EnableConfigurationProperties(MinIOConfigProperties.class)</span><br><span class="hljs-meta">@Import(MinIOConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOFileStorageService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileStorageService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MinioClient minioClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MinIOConfigProperties minIOConfigProperties;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">separator</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dirPath</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename  yyyy/mm/dd/file.jpg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">builderFilePath</span><span class="hljs-params">(String dirPath,String filename)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">50</span>);<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(dirPath))&#123;<br>            stringBuilder.append(dirPath).append(separator);<br>        &#125;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">todayStr</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        stringBuilder.append(todayStr).append(separator);<br>        stringBuilder.append(filename);<br>        <span class="hljs-keyword">return</span> stringBuilder.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  上传图片文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prefix  文件前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename  文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream 文件流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  文件全路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadImgFile</span><span class="hljs-params">(String prefix, String filename,InputStream inputStream)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> builderFilePath(prefix, filename);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">PutObjectArgs</span> <span class="hljs-variable">putObjectArgs</span> <span class="hljs-operator">=</span> PutObjectArgs.builder()<br>                    .object(filePath)<br>                    .contentType(<span class="hljs-string">&quot;image/jpg&quot;</span>)<br>                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-<span class="hljs-number">1</span>)<br>                    .build();<br>            minioClient.putObject(putObjectArgs);<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">urlPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(minIOConfigProperties.getReadPath());<br>            urlPath.append(separator+minIOConfigProperties.getBucket());<br>            urlPath.append(separator);<br>            urlPath.append(filePath);<br>            <span class="hljs-keyword">return</span> urlPath.toString();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>            log.error(<span class="hljs-string">&quot;minio put file error.&quot;</span>,ex);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;上传文件失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  上传html文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prefix  文件前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filename   文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream  文件流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  文件全路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadHtmlFile</span><span class="hljs-params">(String prefix, String filename,InputStream inputStream)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> builderFilePath(prefix, filename);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">PutObjectArgs</span> <span class="hljs-variable">putObjectArgs</span> <span class="hljs-operator">=</span> PutObjectArgs.builder()<br>                    .object(filePath)<br>                    .contentType(<span class="hljs-string">&quot;text/html&quot;</span>)<br>                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-<span class="hljs-number">1</span>)<br>                    .build();<br>            minioClient.putObject(putObjectArgs);<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">urlPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(minIOConfigProperties.getReadPath());<br>            urlPath.append(separator+minIOConfigProperties.getBucket());<br>            urlPath.append(separator);<br>            urlPath.append(filePath);<br>            <span class="hljs-keyword">return</span> urlPath.toString();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception ex)&#123;<br>            log.error(<span class="hljs-string">&quot;minio put file error.&quot;</span>,ex);<br>            ex.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;上传文件失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pathUrl  文件全路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String pathUrl)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> pathUrl.replace(minIOConfigProperties.getEndpoint()+<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> key.indexOf(separator);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> key.substring(<span class="hljs-number">0</span>,index);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> key.substring(index+<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 删除Objects</span><br>        <span class="hljs-type">RemoveObjectArgs</span> <span class="hljs-variable">removeObjectArgs</span> <span class="hljs-operator">=</span> RemoveObjectArgs.builder().bucket(bucket).object(filePath).build();<br>        <span class="hljs-keyword">try</span> &#123;<br>            minioClient.removeObject(removeObjectArgs);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;minio remove file error.  pathUrl:&#123;&#125;&quot;</span>,pathUrl);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 下载文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pathUrl  文件全路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  文件流</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] downLoadFile(String pathUrl)  &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> pathUrl.replace(minIOConfigProperties.getEndpoint()+<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> key.indexOf(separator);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> key.substring(<span class="hljs-number">0</span>,index);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> key.substring(index+<span class="hljs-number">1</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = minioClient.getObject(GetObjectArgs.builder().bucket(minIOConfigProperties.getBucket()).object(filePath).build());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;minio down file error.  pathUrl:&#123;&#125;&quot;</span>,pathUrl);<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rc</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (!((rc = inputStream.read(buff, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>)) &gt; <span class="hljs-number">0</span>)) <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            byteArrayOutputStream.write(buff, <span class="hljs-number">0</span>, rc);<br>        &#125;<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-4-对外加入自动配置"><a href="#3-5-4-对外加入自动配置" class="headerlink" title="3.5.4 对外加入自动配置"></a>3.5.4 对外加入自动配置</h4><p>在resources中新建<code>META-INF/spring.factories</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>  com.heima.file.service.impl.MinIOFileStorageService<br></code></pre></td></tr></table></figure><h4 id="3-5-5-其他微服务使用"><a href="#3-5-5-其他微服务使用" class="headerlink" title="3.5.5 其他微服务使用"></a>3.5.5 其他微服务使用</h4><p>第一，导入heima-file-starter的依赖</p><p>第二，在微服务中添加minio所需要的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">minio:</span><br>  <span class="hljs-attr">accessKey:</span> <span class="hljs-string">minio</span><br>  <span class="hljs-attr">secretKey:</span> <span class="hljs-string">minio123</span><br>  <span class="hljs-attr">bucket:</span> <span class="hljs-string">leadnews</span><br>  <span class="hljs-attr">endpoint:</span> <span class="hljs-string">http://192.168.200.130:9000</span><br>  <span class="hljs-attr">readPath:</span> <span class="hljs-string">http://192.168.200.130:9000</span><br></code></pre></td></tr></table></figure><p>第三，在对应使用的业务类中注入FileStorageService，样例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.minio.test;<br><br><br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> com.heima.minio.MinioApplication;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-meta">@SpringBootTest(classes = MinioApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileStorageService fileStorageService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateImgFile</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;E:\\tmp\\ak47.jpg&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> fileStorageService.uploadImgFile(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;ak47.jpg&quot;</span>, fileInputStream);<br>            System.out.println(filePath);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-文章详情"><a href="#4-文章详情" class="headerlink" title="4)文章详情"></a>4)文章详情</h2><h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1)需求分析"></a>4.1)需求分析</h3><p><img src="/../images/image-20210602180753705.png" alt="image-20210602180753705"></p><h3 id="4-2-实现方案"><a href="#4-2-实现方案" class="headerlink" title="4.2)实现方案"></a>4.2)实现方案</h3><p>方案一</p><p>用户某一条文章，根据文章的id去查询文章内容表，返回渲染页面</p><p><img src="/../images/image-20210602180824202.png" alt="image-20210602180824202"></p><p>方案二</p><p><img src="/../images/image-20210602180856833.png" alt="image-20210602180856833"></p><h3 id="4-3-实现步骤"><a href="#4-3-实现步骤" class="headerlink" title="4.3)实现步骤"></a>4.3)实现步骤</h3><p>1.在artile微服务中添加MinIO和freemarker的支持，参考测试项目</p><p>2.资料中找到模板文件（article.ftl）拷贝到article微服务下</p><p><img src="/../images/image-20210602180931839.png" alt="image-20210602180931839"></p><p>3.资料中找到index.js和index.css两个文件手动上传到MinIO中</p><p><img src="/../images/image-20210602180957787.png" alt="image-20210602180957787"></p><p>4.在文章微服务中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.heima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>heima-file-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.新建ApArticleContentMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticleContent;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApArticleContentMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;ApArticleContent&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.在artile微服务中新增测试类（后期新增文章的时候创建详情静态页，目前暂时手动生成）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.test;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.heima.article.ArticleApplication;<br><span class="hljs-keyword">import</span> com.heima.article.mapper.ApArticleContentMapper;<br><span class="hljs-keyword">import</span> com.heima.article.mapper.ApArticleMapper;<br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticleContent;<br><span class="hljs-keyword">import</span> freemarker.template.Configuration;<br><span class="hljs-keyword">import</span> freemarker.template.Template;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest(classes = ArticleApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleFreemarkerTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileStorageService fileStorageService;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleMapper apArticleMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleContentMapper apArticleContentMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createStaticUrlTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.获取文章内容</span><br>        <span class="hljs-type">ApArticleContent</span> <span class="hljs-variable">apArticleContent</span> <span class="hljs-operator">=</span> apArticleContentMapper.selectOne(Wrappers.&lt;ApArticleContent&gt;lambdaQuery().eq(ApArticleContent::getArticleId, <span class="hljs-number">1390536764510310401L</span>));<br>        <span class="hljs-keyword">if</span>(apArticleContent != <span class="hljs-literal">null</span> &amp;&amp; StringUtils.isNotBlank(apArticleContent.getContent()))&#123;<br>            <span class="hljs-comment">//2.文章内容通过freemarker生成html文件</span><br>            <span class="hljs-type">StringWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>            <span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> configuration.getTemplate(<span class="hljs-string">&quot;article.ftl&quot;</span>);<br><br>            Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            params.put(<span class="hljs-string">&quot;content&quot;</span>, JSONArray.parseArray(apArticleContent.getContent()));<br><br>            template.process(params, out);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(out.toString().getBytes());<br><br>            <span class="hljs-comment">//3.把html文件上传到minio中</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> fileStorageService.uploadHtmlFile(<span class="hljs-string">&quot;&quot;</span>, apArticleContent.getArticleId() + <span class="hljs-string">&quot;.html&quot;</span>, is);<br><br>            <span class="hljs-comment">//4.修改ap_article表，保存static_url字段</span><br>            <span class="hljs-type">ApArticle</span> <span class="hljs-variable">article</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApArticle</span>();<br>            article.setId(apArticleContent.getArticleId());<br>            article.setStaticUrl(path);<br>            apArticleMapper.updateById(article);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-自媒体文章发布"><a href="#3-自媒体文章发布" class="headerlink" title="3 自媒体文章发布"></a>3 自媒体文章发布</h1><h3 id="1-自媒体前后端搭建"><a href="#1-自媒体前后端搭建" class="headerlink" title="1)自媒体前后端搭建"></a>1)自媒体前后端搭建</h3><h4 id="1-1-后台搭建"><a href="#1-1-后台搭建" class="headerlink" title="1.1)后台搭建"></a>1.1)后台搭建</h4><p><img src="/../images/image-20210426110728659.png" alt="image-20210426110728659"></p><p>①：资料中找到heima-leadnews-wemedia.zip解压</p><p> 拷贝到heima-leadnews-service工程下，并指定子模块</p><p> 执行leadnews-wemedia.sql脚本</p><p> 添加对应的nacos配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/leadnews_wemedia?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-comment"># 设置Mapper接口所对应的XML文件位置，如果你在Mapper接口中有自定义方法，需要进行该配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/*.xml</span><br>  <span class="hljs-comment"># 设置别名包扫描路径，通过该属性可以给包中的类注册别名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.heima.model.media.pojos</span><br></code></pre></td></tr></table></figure><p>②：资料中找到heima-leadnews-wemedia-gateway.zip解压</p><p> 拷贝到heima-leadnews-gateway工程下，并指定子模块</p><p> 添加对应的nacos配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">globalcors:</span><br>        <span class="hljs-attr">cors-configurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span> <span class="hljs-comment"># 匹配所有请求</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment">#跨域处理 允许所有的域</span><br>            <span class="hljs-attr">allowedMethods:</span> <span class="hljs-comment"># 支持的方法</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">GET</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">POST</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">PUT</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">DELETE</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-comment"># 平台管理</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">wemedia</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://leadnews-wemedia</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/wemedia/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>③：在资料中找到类文件夹</p><p> 拷贝wemedia文件夹到heima-leadnews-model模块下的com.heima.model</p><h4 id="1-2-前台搭建"><a href="#1-2-前台搭建" class="headerlink" title="1.2)前台搭建"></a>1.2)前台搭建</h4><p><img src="/../images/image-20210426110913007.png" alt="image-20210426110913007"></p><p>通过nginx的虚拟主机功能，使用同一个nginx访问多个项目</p><p>搭建步骤：</p><p>①：资料中找到wemedia-web.zip解压</p><p>②：在nginx中leadnews.conf目录中新增heima-leadnews-wemedia.conf文件</p><ul><li><p>网关地址修改（localhost:51602）</p></li><li><p>前端项目目录修改（wemedia-web解压的目录）</p></li><li><p>访问端口修改(8802)</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">upstream  heima-wemedia-gateway&#123;<br>    server <span class="hljs-attr">localhost</span>:<span class="hljs-number">51602</span>;<br>&#125;<br><br>server &#123;<br>listen <span class="hljs-number">8802</span>;<br>location / &#123;<br>root <span class="hljs-attr">D</span>:<span class="hljs-regexp">/workspace/</span>wemedia-web/;<br>index index.<span class="hljs-property">html</span>;<br>&#125;<br><br>location ~<span class="hljs-regexp">/wemedia/</span><span class="hljs-variable constant_">MEDIA</span>/(.*) &#123;<br>proxy_pass <span class="hljs-attr">http</span>:<span class="hljs-comment">//heima-wemedia-gateway/$1;</span><br>proxy_set_header <span class="hljs-variable constant_">HOST</span> $host;  # 不改变源请求头的值<br>proxy_pass_request_body on;  #开启获取请求体<br>proxy_pass_request_headers on;  #开启获取请求头<br>proxy_set_header X-<span class="hljs-title class_">Real</span>-<span class="hljs-variable constant_">IP</span> $remote_addr;   # 记录真实发出请求的客户端<span class="hljs-variable constant_">IP</span><br>proxy_set_header X-<span class="hljs-title class_">Forwarded</span>-<span class="hljs-title class_">For</span> $proxy_add_x_forwarded_for;  #记录代理信息<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③：启动nginx，启动自媒体微服务和对应网关</p><p>④：联调测试登录功能</p><p><img src="/../images/image-20210426111329136.png" alt="image-20210426111329136"></p><h3 id="2-自媒体素材管理"><a href="#2-自媒体素材管理" class="headerlink" title="2)自媒体素材管理"></a>2)自媒体素材管理</h3><h4 id="2-1-素材上传"><a href="#2-1-素材上传" class="headerlink" title="2.1)素材上传"></a>2.1)素材上传</h4><h5 id="2-2-1-需求分析"><a href="#2-2-1-需求分析" class="headerlink" title="2.2.1)需求分析"></a>2.2.1)需求分析</h5><p><img src="/../images/image-20210426144327206.png" alt="image-20210426144327206"></p><p>图片上传的页面，首先是展示素材信息，可以点击图片上传，弹窗后可以上传图片</p><h5 id="2-2-2-素材管理-图片上传-表结构"><a href="#2-2-2-素材管理-图片上传-表结构" class="headerlink" title="2.2.2)素材管理-图片上传-表结构"></a>2.2.2)素材管理-图片上传-表结构</h5><p>媒体图文素材信息表wm_material</p><p><img src="/../images/image-20210426144500239.png" alt="image-20210426144500239"></p><p>对应实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 自媒体图文素材信息表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;wm_material&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmMaterial</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自媒体用户ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;user_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer userId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;url&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 素材类型</span><br><span class="hljs-comment">            0 图片</span><br><span class="hljs-comment">            1 视频</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> Short type;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否收藏</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_collection&quot;)</span><br>    <span class="hljs-keyword">private</span> Short isCollection;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;created_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-3-实现思路"><a href="#2-2-3-实现思路" class="headerlink" title="2.2.3)实现思路"></a>2.2.3)实现思路</h5><p><img src="/../images/image-20210426144603541.png" alt="image-20210426144603541"></p><p>①：前端发送上传图片请求，类型为MultipartFile</p><p>②：网关进行token解析后，把解析后的用户信息存储到header中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获得token解析后中的用户信息</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> claimsBody.get(<span class="hljs-string">&quot;id&quot;</span>);<br><span class="hljs-comment">//在header中添加新的信息</span><br><span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">serverHttpRequest</span> <span class="hljs-operator">=</span> request.mutate().headers(httpHeaders -&gt; &#123;<br>    httpHeaders.add(<span class="hljs-string">&quot;userId&quot;</span>, userId + <span class="hljs-string">&quot;&quot;</span>);<br>&#125;).build();<br><span class="hljs-comment">//重置header</span><br>exchange.mutate().request(serverHttpRequest).build();<br></code></pre></td></tr></table></figure><p>③：自媒体微服务使用拦截器获取到header中的的用户信息，并放入到threadlocal中</p><p>在heima-leadnews-utils中新增工具类</p><p>注意：需要从资料中找出WmUser实体类拷贝到model工程下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.utils.thread;<br><br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmUser;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmThreadLocalUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;WmUser&gt; WM_USER_THREAD_LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmUser</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">setUser</span><span class="hljs-params">(WmUser wmUser)</span>&#123;<br>        WM_USER_THREAD_LOCAL.set(wmUser);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WmUser <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> WM_USER_THREAD_LOCAL.get();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清理用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>&#123;<br>        WM_USER_THREAD_LOCAL.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在heima-leadnews-wemedia中新增拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.interceptor;<br><br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmUser;<br><span class="hljs-keyword">import</span> com.heima.utils.thread.WmThreadLocalUtils;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//得到header中的信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;userId&quot;</span>);<br>        Optional&lt;String&gt; optional = Optional.ofNullable(userId);<br>        <span class="hljs-keyword">if</span>(optional.isPresent())&#123;<br>            <span class="hljs-comment">//把用户id存入threadloacl中</span><br>            <span class="hljs-type">WmUser</span> <span class="hljs-variable">wmUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WmUser</span>();<br>            wmUser.setId(Integer.valueOf(userId));<br>            WmThreadLocalUtils.setUser(wmUser);<br>            log.info(<span class="hljs-string">&quot;wmTokenFilter设置用户信息到threadlocal中...&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.info(<span class="hljs-string">&quot;清理threadlocal...&quot;</span>);<br>        WmThreadLocalUtils.clear();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置使拦截器生效，拦截所有的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.config;<br><br><span class="hljs-keyword">import</span> com.heima.wemedia.interceptor.WmTokenInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WmTokenInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>④：先把图片上传到minIO中，获取到图片请求的路径——（2.2.5查看具体功能实现）</p><p>⑤：把用户id和图片上的路径保存到素材表中——（2.2.5查看具体功能实现）</p><h5 id="2-2-4-接口定义"><a href="#2-2-4-接口定义" class="headerlink" title="2.2.4)接口定义"></a>2.2.4)接口定义</h5><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/material/upload_picture</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>MultipartFile</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><p>MultipartFile  ：Springmvc指定的文件接收类型</p><p>ResponseResult  ：</p><p>成功需要回显图片，返回素材对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;errorMessage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">52</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1102</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;http://192.168.200.130:9000/leadnews/2021/04/26/a73f5b60c0d84c32bfe175055aaaac40.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;isCollection&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;createdTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2021-01-20T16:49:48.443+0000&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>失败：</p><ul><li>参数失效</li><li>文章上传失败</li></ul><h5 id="2-2-5-自媒体微服务集成heima-file-starter"><a href="#2-2-5-自媒体微服务集成heima-file-starter" class="headerlink" title="2.2.5)自媒体微服务集成heima-file-starter"></a>2.2.5)自媒体微服务集成heima-file-starter</h5><p>①：导入heima-file-starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.heima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>heima-file-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>②：在自媒体微服务的配置中心添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">minio:</span><br>  <span class="hljs-attr">accessKey:</span> <span class="hljs-string">minio</span><br>  <span class="hljs-attr">secretKey:</span> <span class="hljs-string">minio123</span><br>  <span class="hljs-attr">bucket:</span> <span class="hljs-string">leadnews</span><br>  <span class="hljs-attr">endpoint:</span> <span class="hljs-string">http://192.168.200.130:9000</span><br>  <span class="hljs-attr">readPath:</span> <span class="hljs-string">http://192.168.200.130:9000</span><br></code></pre></td></tr></table></figure><h5 id="2-2-6-具体实现"><a href="#2-2-6-具体实现" class="headerlink" title="2.2.6)具体实现"></a>2.2.6)具体实现</h5><p>①：创建WmMaterialController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/material&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmMaterialController</span> &#123;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload_picture&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">uploadPicture</span><span class="hljs-params">(MultipartFile multipartFile)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>②：mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmMaterial;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmMaterialMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;WmMaterial&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>③：业务层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmMaterialService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;WmMaterial&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> multipartFile</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">uploadPicture</span><span class="hljs-params">(MultipartFile multipartFile)</span>;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>业务层实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service.impl;<br><br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmMaterial;<br><span class="hljs-keyword">import</span> com.heima.utils.thread.WmThreadLocalUtil;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmMaterialMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmMaterialService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmMaterialServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;WmMaterialMapper, WmMaterial&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WmMaterialService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileStorageService fileStorageService;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图片上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> multipartFile</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">uploadPicture</span><span class="hljs-params">(MultipartFile multipartFile)</span> &#123;<br><br>        <span class="hljs-comment">//1.检查参数</span><br>        <span class="hljs-keyword">if</span>(multipartFile == <span class="hljs-literal">null</span> || multipartFile.getSize() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>        &#125;<br><br>        <span class="hljs-comment">//2.上传图片到minIO中</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//aa.jpg</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">postfix</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileId = fileStorageService.uploadImgFile(<span class="hljs-string">&quot;&quot;</span>, fileName + postfix, multipartFile.getInputStream());<br>            log.info(<span class="hljs-string">&quot;上传图片到MinIO中，fileId:&#123;&#125;&quot;</span>,fileId);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;WmMaterialServiceImpl-上传文件失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//3.保存到数据库中</span><br>        <span class="hljs-type">WmMaterial</span> <span class="hljs-variable">wmMaterial</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WmMaterial</span>();<br>        wmMaterial.setUserId(WmThreadLocalUtil.getUser().getId());<br>        wmMaterial.setUrl(fileId);<br>        wmMaterial.setIsCollection((<span class="hljs-type">short</span>)<span class="hljs-number">0</span>);<br>        wmMaterial.setType((<span class="hljs-type">short</span>)<span class="hljs-number">0</span>);<br>        wmMaterial.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        save(wmMaterial);<br><br>        <span class="hljs-comment">//4.返回结果</span><br><br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(wmMaterial);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>④：控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/material&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmMaterialController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmMaterialService wmMaterialService;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload_picture&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">uploadPicture</span><span class="hljs-params">(MultipartFile multipartFile)</span>&#123;<br>        <span class="hljs-keyword">return</span> wmMaterialService.uploadPicture(multipartFile);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>⑤：测试</p><p>启动自媒体微服务和自媒体网关，使用前端项目进行测试</p><h4 id="2-2-素材列表查询"><a href="#2-2-素材列表查询" class="headerlink" title="2.2)素材列表查询"></a>2.2)素材列表查询</h4><h5 id="2-2-1-接口定义"><a href="#2-2-1-接口定义" class="headerlink" title="2.2.1)接口定义"></a>2.2.1)接口定义</h5><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/material/list</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>WmMaterialDto</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><p>WmMaterialDto  ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmMaterialDto</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageRequestDto</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1 收藏</span><br><span class="hljs-comment">     * 0 未收藏</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short isCollection;<br>&#125;<br></code></pre></td></tr></table></figure><p>ResponseResult  :</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;errorMessage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">52</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1102</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;http://192.168.200.130:9000/leadnews/2021/04/26/ec893175f18c4261af14df14b83cb25f.jpg&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;isCollection&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createdTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2021-01-20T16:49:48.000+0000&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    ....<br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;currentPage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="2-2-2-功能实现"><a href="#2-2-2-功能实现" class="headerlink" title="2.2.2)功能实现"></a>2.2.2)功能实现</h5><p>①：在WmMaterialController类中新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> WmMaterialDto dto)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>②：mapper已定义</p><p>③：业务层</p><p>在WmMaterialService中新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 素材列表查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findList</span><span class="hljs-params">( WmMaterialDto dto)</span>;<br></code></pre></td></tr></table></figure><p>实现方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 素材列表查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findList</span><span class="hljs-params">(WmMaterialDto dto)</span> &#123;<br><br>    <span class="hljs-comment">//1.检查参数</span><br>    dto.checkParam();<br><br>    <span class="hljs-comment">//2.分页查询</span><br>    <span class="hljs-type">IPage</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(dto.getPage(),dto.getSize());<br>    LambdaQueryWrapper&lt;WmMaterial&gt; lambdaQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-comment">//是否收藏</span><br>    <span class="hljs-keyword">if</span>(dto.getIsCollection() != <span class="hljs-literal">null</span> &amp;&amp; dto.getIsCollection() == <span class="hljs-number">1</span>)&#123;<br>        lambdaQueryWrapper.eq(WmMaterial::getIsCollection,dto.getIsCollection());<br>    &#125;<br><br>    <span class="hljs-comment">//按照用户查询</span><br>    lambdaQueryWrapper.eq(WmMaterial::getUserId,WmThreadLocalUtil.getUser().getId());<br><br>    <span class="hljs-comment">//按照时间倒序</span><br>    lambdaQueryWrapper.orderByDesc(WmMaterial::getCreatedTime);<br><br><br>    page = page(page,lambdaQueryWrapper);<br><br>    <span class="hljs-comment">//3.结果返回</span><br>    <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResponseResult</span>(dto.getPage(),dto.getSize(),(<span class="hljs-type">int</span>)page.getTotal());<br>    responseResult.setData(page.getRecords());<br>    <span class="hljs-keyword">return</span> responseResult;<br>&#125;<br></code></pre></td></tr></table></figure><p>④：控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> WmMaterialDto dto)</span>&#123;<br>    <span class="hljs-keyword">return</span> wmMaterialService.findList(dto);<br>&#125;<br></code></pre></td></tr></table></figure><p>⑤：在自媒体引导类中天mybatis-plus的分页拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>    interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>    <span class="hljs-keyword">return</span> interceptor;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-自媒体文章管理"><a href="#3-自媒体文章管理" class="headerlink" title="3)自媒体文章管理"></a>3)自媒体文章管理</h3><h4 id="3-1-查询所有频道"><a href="#3-1-查询所有频道" class="headerlink" title="3.1)查询所有频道"></a>3.1)查询所有频道</h4><h5 id="3-1-1-需求分析"><a href="#3-1-1-需求分析" class="headerlink" title="3.1.1)需求分析"></a>3.1.1)需求分析</h5><p><img src="/../images/image-20210426205631708.png" alt="image-20210426205631708"></p><h5 id="3-1-2-表结构"><a href="#3-1-2-表结构" class="headerlink" title="3.1.2)表结构"></a>3.1.2)表结构</h5><p>wm_channel 频道信息表</p><p><img src="/../images/image-20210426210148580.png" alt="image-20210426210148580"></p><p>对应实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 频道信息表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;wm_channel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmChannel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 频道名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 频道描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;description&quot;)</span><br>    <span class="hljs-keyword">private</span> String description;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否默认频道</span><br><span class="hljs-comment">     * 1：默认     true</span><br><span class="hljs-comment">     * 0：非默认   false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_default&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isDefault;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否启用</span><br><span class="hljs-comment">     * 1：启用   true</span><br><span class="hljs-comment">     * 0：禁用   false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;status&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认排序</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;ord&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer ord;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;created_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-3-接口定义"><a href="#3-1-3-接口定义" class="headerlink" title="3.1.3)接口定义"></a>3.1.3)接口定义</h5><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/channel/channels</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>无</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><p>ResponseResult  ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;null&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;errorMessage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ord&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;createdTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2019-08-16T10:55:41.000+0000&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    Object <span class="hljs-punctuation">&#123;</span>  ... <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    Object <span class="hljs-punctuation">&#123;</span>  ... <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="3-1-4-功能实现"><a href="#3-1-4-功能实现" class="headerlink" title="3.1.4)功能实现"></a>3.1.4)功能实现</h5><p>接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/channel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmchannelController</span> &#123;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/channels&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmChannel;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmChannelMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;WmChannel&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmChannelService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;WmChannel&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有频道</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmChannel;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmChannelMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmChannelService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmChannelServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;WmChannelMapper, WmChannel&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WmChannelService</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有频道</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(list());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmChannelService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/channel&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmchannelController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmChannelService wmChannelService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/channels&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> wmChannelService.findAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-5-测试"><a href="#3-1-5-测试" class="headerlink" title="3.1.5)测试"></a>3.1.5)测试</h5><h4 id="3-2-查询自媒体文章"><a href="#3-2-查询自媒体文章" class="headerlink" title="3.2)查询自媒体文章"></a>3.2)查询自媒体文章</h4><h5 id="3-2-1-需求说明"><a href="#3-2-1-需求说明" class="headerlink" title="3.2.1)需求说明"></a>3.2.1)需求说明</h5><p><img src="/../images/image-20210426210402672.png" alt="image-20210426210402672"></p><h5 id="3-2-2-表结构分析"><a href="#3-2-2-表结构分析" class="headerlink" title="3.2.2)表结构分析"></a>3.2.2)表结构分析</h5><p>wm_news 自媒体文章表</p><p><img src="/../images/image-20210426210434861.png" alt="image-20210426210434861"></p><p>对应实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.Alias;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 自媒体图文内容信息表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;wm_news&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNews</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自媒体用户ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;user_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer userId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;title&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图文内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;content&quot;)</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章布局</span><br><span class="hljs-comment">            0 无图文章</span><br><span class="hljs-comment">            1 单图文章</span><br><span class="hljs-comment">            3 多图文章</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> Short type;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图文频道ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;channel_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer channelId;<br><br>    <span class="hljs-meta">@TableField(&quot;labels&quot;)</span><br>    <span class="hljs-keyword">private</span> String labels;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;created_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提交时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;submited_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date submitedTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前状态</span><br><span class="hljs-comment">            0 草稿</span><br><span class="hljs-comment">            1 提交（待审核）</span><br><span class="hljs-comment">            2 审核失败</span><br><span class="hljs-comment">            3 人工审核</span><br><span class="hljs-comment">            4 人工审核通过</span><br><span class="hljs-comment">            8 审核通过（待发布）</span><br><span class="hljs-comment">            9 已发布</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;status&quot;)</span><br>    <span class="hljs-keyword">private</span> Short status;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时发布时间，不定时则为空</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;publish_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date publishTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 拒绝理由</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;reason&quot;)</span><br>    <span class="hljs-keyword">private</span> String reason;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发布库文章ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;article_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long articleId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * //图片用逗号分隔</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;images&quot;)</span><br>    <span class="hljs-keyword">private</span> String images;<br><br>    <span class="hljs-meta">@TableField(&quot;enable&quot;)</span><br>    <span class="hljs-keyword">private</span> Short enable;<br>    <br>     <span class="hljs-comment">//状态枚举类</span><br>    <span class="hljs-meta">@Alias(&quot;WmNewsStatus&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Status</span>&#123;<br>        NORMAL((<span class="hljs-type">short</span>)<span class="hljs-number">0</span>),SUBMIT((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>),FAIL((<span class="hljs-type">short</span>)<span class="hljs-number">2</span>),ADMIN_AUTH((<span class="hljs-type">short</span>)<span class="hljs-number">3</span>),ADMIN_SUCCESS((<span class="hljs-type">short</span>)<span class="hljs-number">4</span>),SUCCESS((<span class="hljs-type">short</span>)<span class="hljs-number">8</span>),PUBLISHED((<span class="hljs-type">short</span>)<span class="hljs-number">9</span>);<br>        <span class="hljs-type">short</span> code;<br>        Status(<span class="hljs-type">short</span> code)&#123;<br>            <span class="hljs-built_in">this</span>.code = code;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">short</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-3-接口定义"><a href="#3-2-3-接口定义" class="headerlink" title="3.2.3)接口定义"></a>3.2.3)接口定义</h5><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/news/list</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>WmNewsPageReqDto</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><p>WmNewsPageReqDto  :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.dtos;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.PageRequestDto;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsPageReqDto</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageRequestDto</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short status;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开始时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date beginPubDate;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 结束时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date endPubDate;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所属频道ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer channelId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关键字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String keyword;<br>&#125;<br></code></pre></td></tr></table></figure><p>ResponseResult  :</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;null&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;errorMessage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    Object <span class="hljs-punctuation">&#123;</span> ... <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    Object <span class="hljs-punctuation">&#123;</span> ... <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    Object <span class="hljs-punctuation">&#123;</span> ... <span class="hljs-punctuation">&#125;</span><br>    <br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;currentPage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">21</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="3-2-4-功能实现"><a href="#3-2-4-功能实现" class="headerlink" title="3.2.4)功能实现"></a>3.2.4)功能实现</h5><p>①：新增WmNewsController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.dtos.WmNewsPageReqDto;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/news&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsController</span> &#123;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> WmNewsPageReqDto dto)</span>&#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>②：新增WmNewsMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmNews;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmNewsMapper</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;WmNews&gt; &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>③：新增WmNewsService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service;<br><br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.dtos.WmNewsPageReqDto;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmNews;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmNewsService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;WmNews&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询文章</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAll</span><span class="hljs-params">(WmNewsPageReqDto dto)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.PageResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.dtos.WmNewsPageReqDto;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmNews;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmUser;<br><span class="hljs-keyword">import</span> com.heima.utils.thread.WmThreadLocalUtil;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmNewsMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmNewsService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsServiceImpl</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;WmNewsMapper, WmNews&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WmNewsService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询文章</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAll</span><span class="hljs-params">(WmNewsPageReqDto dto)</span> &#123;<br><br>        <span class="hljs-comment">//1.检查参数</span><br>        <span class="hljs-keyword">if</span>(dto == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>        &#125;<br>        <span class="hljs-comment">//分页参数检查</span><br>        dto.checkParam();<br>        <span class="hljs-comment">//获取当前登录人的信息</span><br>        <span class="hljs-type">WmUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> WmThreadLocalUtil.getUser();<br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);<br>        &#125;<br><br>        <span class="hljs-comment">//2.分页条件查询</span><br>        <span class="hljs-type">IPage</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(dto.getPage(),dto.getSize());<br>        LambdaQueryWrapper&lt;WmNews&gt; lambdaQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        <span class="hljs-comment">//状态精确查询</span><br>        <span class="hljs-keyword">if</span>(dto.getStatus() != <span class="hljs-literal">null</span>)&#123;<br>            lambdaQueryWrapper.eq(WmNews::getStatus,dto.getStatus());<br>        &#125;<br><br>        <span class="hljs-comment">//频道精确查询</span><br>        <span class="hljs-keyword">if</span>(dto.getChannelId() != <span class="hljs-literal">null</span>)&#123;<br>            lambdaQueryWrapper.eq(WmNews::getChannelId,dto.getChannelId());<br>        &#125;<br><br>        <span class="hljs-comment">//时间范围查询</span><br>        <span class="hljs-keyword">if</span>(dto.getBeginPubDate()!=<span class="hljs-literal">null</span> &amp;&amp; dto.getEndPubDate()!=<span class="hljs-literal">null</span>)&#123;<br>            lambdaQueryWrapper.between(WmNews::getPublishTime,dto.getBeginPubDate(),dto.getEndPubDate());<br>        &#125;<br><br>        <span class="hljs-comment">//关键字模糊查询</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(dto.getKeyword()))&#123;<br>            lambdaQueryWrapper.like(WmNews::getTitle,dto.getKeyword());<br>        &#125;<br><br>        <span class="hljs-comment">//查询当前登录用户的文章</span><br>        lambdaQueryWrapper.eq(WmNews::getUserId,user.getId());<br><br>        <span class="hljs-comment">//发布时间倒序查询</span><br>        lambdaQueryWrapper.orderByDesc(WmNews::getCreatedTime);<br><br>        page = page(page,lambdaQueryWrapper);<br><br>        <span class="hljs-comment">//3.结果返回</span><br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResponseResult</span>(dto.getPage(),dto.getSize(),(<span class="hljs-type">int</span>)page.getTotal());<br>        responseResult.setData(page.getRecords());<br><br>        <span class="hljs-keyword">return</span> responseResult;<br>    &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>④：控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.dtos.WmNewsPageReqDto;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmNewsService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/news&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsController</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmNewsService wmNewsService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> WmNewsPageReqDto dto)</span>&#123;<br>        <span class="hljs-keyword">return</span>  wmNewsService.findAll(dto);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-5-测试"><a href="#3-2-5-测试" class="headerlink" title="3.2.5)测试"></a>3.2.5)测试</h5><p>启动后端自媒体微服务和自媒体网关微服务，测试文章列表查询</p><h4 id="3-3-文章发布"><a href="#3-3-文章发布" class="headerlink" title="3.3)文章发布"></a>3.3)文章发布</h4><h5 id="3-3-1-需求分析"><a href="#3-3-1-需求分析" class="headerlink" title="3.3.1)需求分析"></a>3.3.1)需求分析</h5><p><img src="/../images/image-20210427014931255.png" alt="image-20210427014931255"></p><h5 id="3-3-2-表结构分析"><a href="#3-3-2-表结构分析" class="headerlink" title="3.3.2)表结构分析"></a>3.3.2)表结构分析</h5><p>保存文章，除了需要wm_news表以外，还需要另外两张表</p><p>wm_material 素材表</p><p><img src="/../images/image-20210427015037964.png" alt="image-20210427015037964"></p><p>wm_news_material 文章素材关系表</p><p><img src="/../images/image-20210427015054428.png" alt="image-20210427015054428"></p><p><img src="/../images/image-20210427015114994.png" alt="image-20210427015114994"></p><p>其中wm_material和wm_news表的实体类已经导入到了项目中，下面是wm_news_material表对应的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 自媒体图文引用素材信息表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;wm_news_material&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsMaterial</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 素材ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;material_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer materialId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 图文ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;news_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer newsId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 引用类型</span><br><span class="hljs-comment">            0 内容引用</span><br><span class="hljs-comment">            1 主图引用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> Short type;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 引用排序</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;ord&quot;)</span><br>    <span class="hljs-keyword">private</span> Short ord;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-3-实现思路分析"><a href="#3-3-3-实现思路分析" class="headerlink" title="3.3.3)实现思路分析"></a>3.3.3)实现思路分析</h5><p><img src="/../images/image-20210427015326728.png" alt="image-20210427015326728"></p><p>1.前端提交发布或保存为草稿</p><p>2.后台判断请求中是否包含了文章id</p><p>3.如果不包含id,则为新增</p><p>​    3.1 执行新增文章的操作</p><p>​    3.2 关联文章内容图片与素材的关系</p><p>​    3.3 关联文章封面图片与素材的关系</p><p>4.如果包含了id，则为修改请求</p><p>​    4.1 删除该文章与素材的所有关系</p><p>​    4.2 执行修改操作</p><p>​    4.3 关联文章内容图片与素材的关系</p><p>​    4.4 关联文章封面图片与素材的关系</p><h5 id="3-3-4-接口定义"><a href="#3-3-4-接口定义" class="headerlink" title="3.3.4)接口定义"></a>3.3.4)接口定义</h5><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/channel/submit</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>WmNewsDto</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><p>WmNewsDto  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.dtos;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsDto</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> Integer id;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String title;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 频道id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer channelId;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标签</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String labels;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发布时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date publishTime;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String content;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章封面类型  0 无图 1 单图 3 多图 -1 自动</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short type;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提交时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date submitedTime; <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态 提交为1  草稿为0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short status;<br>     <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 封面图片列表 多张图以逗号隔开</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; images;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端给传递过来的json数据格式为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;黑马头条项目背景&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//这个 0 是无图  1 是单图  3 是多图  -1 是自动</span><br>    <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;黑马头条&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;publishTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2020-03-14T11:35:49.000Z&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;channelId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;http://192.168.200.130/group1/M00/00/00/wKjIgl5swbGATaSAAAEPfZfx6Iw790.png&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;[</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">        &quot;</span>type<span class="hljs-string">&quot;:&quot;</span>text<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>value<span class="hljs-string">&quot;:&quot;</span>随着智能手机的普及，人们更加习惯于通过手机来看新闻。由于生活节奏的加快，很多人只能利用碎片时间来获取信息，因此，对于移动资讯客户端的需求也越来越高。黑马头条项目正是在这样背景下开发出来。黑马头条项目采用当下火热的微服务+大数据技术架构实现。本项目主要着手于获取最新最热新闻资讯，通过大数据分析用户喜好精确推送咨询新闻<span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">        &quot;</span>type<span class="hljs-string">&quot;:&quot;</span>image<span class="hljs-string">&quot;,</span><br><span class="hljs-string">        &quot;</span>value<span class="hljs-string">&quot;:&quot;</span>http<span class="hljs-punctuation">:</span><span class="hljs-comment">//192.168.200.130/group1/M00/00/00/wKjIgl5swbGATaSAAAEPfZfx6Iw790.png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>ResponseResult:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    “code”<span class="hljs-punctuation">:</span><span class="hljs-number">501</span><span class="hljs-punctuation">,</span><br>    “errorMessage”<span class="hljs-punctuation">:</span>“参数失效<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    “code”:200,</span><br><span class="hljs-string">    “errorMessage”:“操作成功&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><br>    “code”<span class="hljs-punctuation">:</span><span class="hljs-number">501</span><span class="hljs-punctuation">,</span><br>    “errorMessage”<span class="hljs-punctuation">:</span>“素材引用失效<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="3-3-5-功能实现"><a href="#3-3-5-功能实现" class="headerlink" title="3.3.5)功能实现"></a>3.3.5)功能实现</h5><p>①：在新增WmNewsController中新增方法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">@PostMapping(<span class="hljs-string">&quot;/submit&quot;</span>)<br>public ResponseResult submitNews(@RequestBody WmNewsDto dto)<span class="hljs-punctuation">&#123;</span><br>    return <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>②：新增WmNewsMaterialMapper类，文章与素材的关联关系需要批量保存，索引需要定义mapper文件和对应的映射文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmNewsMaterial;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmNewsMaterialMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;WmNewsMaterial&gt; &#123;<br><br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveRelations</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;materialIds&quot;)</span> List&lt;Integer&gt; materialIds,<span class="hljs-meta">@Param(&quot;newsId&quot;)</span> Integer newsId, <span class="hljs-meta">@Param(&quot;type&quot;)</span>Short type)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>WmNewsMaterialMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.heima.wemedia.mapper.WmNewsMaterialMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveRelations&quot;</span>&gt;</span><br>        insert into wm_news_material (material_id,news_id,type,ord)<br>        values<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;materialIds&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;ord&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;mid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            (#&#123;mid&#125;,#&#123;newsId&#125;,#&#123;type&#125;,#&#123;ord&#125;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>③：常量类准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.constants;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WemediaConstants</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">COLLECT_MATERIAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//收藏</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">CANCEL_COLLECT_MATERIAL</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//取消收藏</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WM_NEWS_TYPE_IMAGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;image&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">WM_NEWS_NONE_IMAGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">WM_NEWS_SINGLE_IMAGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">WM_NEWS_MANY_IMAGE</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">WM_NEWS_TYPE_AUTO</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">WM_CONTENT_REFERENCE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">WM_COVER_REFERENCE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>④：在WmNewsService中新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  发布文章或保存草稿</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">submitNews</span><span class="hljs-params">(WmNewsDto dto)</span>;<br></code></pre></td></tr></table></figure><p>实现方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发布修改文章或保存为草稿</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">submitNews</span><span class="hljs-params">(WmNewsDto dto)</span> &#123;<br><br>    <span class="hljs-comment">//0.条件判断</span><br>    <span class="hljs-keyword">if</span>(dto == <span class="hljs-literal">null</span> || dto.getContent() == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>    &#125;<br><br>    <span class="hljs-comment">//1.保存或修改文章</span><br><br>    <span class="hljs-type">WmNews</span> <span class="hljs-variable">wmNews</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WmNews</span>();<br>    <span class="hljs-comment">//属性拷贝 属性名词和类型相同才能拷贝</span><br>    BeanUtils.copyProperties(dto,wmNews);<br>    <span class="hljs-comment">//封面图片  list---&gt; string</span><br>    <span class="hljs-keyword">if</span>(dto.getImages() != <span class="hljs-literal">null</span> &amp;&amp; dto.getImages().size() &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//[1dddfsd.jpg,sdlfjldk.jpg]--&gt;   1dddfsd.jpg,sdlfjldk.jpg</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">imageStr</span> <span class="hljs-operator">=</span> StringUtils.join(dto.getImages(), <span class="hljs-string">&quot;,&quot;</span>);<br>        wmNews.setImages(imageStr);<br>    &#125;<br>    <span class="hljs-comment">//如果当前封面类型为自动 -1</span><br>    <span class="hljs-keyword">if</span>(dto.getType().equals(WemediaConstants.WM_NEWS_TYPE_AUTO))&#123;<br>        wmNews.setType(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    saveOrUpdateWmNews(wmNews);<br><br>    <span class="hljs-comment">//2.判断是否为草稿  如果为草稿结束当前方法</span><br>    <span class="hljs-keyword">if</span>(dto.getStatus().equals(WmNews.Status.NORMAL.getCode()))&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br>    &#125;<br><br>    <span class="hljs-comment">//3.不是草稿，保存文章内容图片与素材的关系</span><br>    <span class="hljs-comment">//获取到文章内容中的图片信息</span><br>    List&lt;String&gt; materials =  ectractUrlInfo(dto.getContent());<br>    saveRelativeInfoForContent(materials,wmNews.getId());<br><br>    <span class="hljs-comment">//4.不是草稿，保存文章封面图片与素材的关系，如果当前布局是自动，需要匹配封面图片</span><br>    saveRelativeInfoForCover(dto,wmNews,materials);<br><br>    <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第一个功能：如果当前封面类型为自动，则设置封面类型的数据</span><br><span class="hljs-comment">     * 匹配规则：</span><br><span class="hljs-comment">     * 1，如果内容图片大于等于1，小于3  单图  type 1</span><br><span class="hljs-comment">     * 2，如果内容图片大于等于3  多图  type 3</span><br><span class="hljs-comment">     * 3，如果内容没有图片，无图  type 0</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 第二个功能：保存封面图片与素材的关系</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> materials</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveRelativeInfoForCover</span><span class="hljs-params">(WmNewsDto dto, WmNews wmNews, List&lt;String&gt; materials)</span> &#123;<br><br>    List&lt;String&gt; images = dto.getImages();<br><br>    <span class="hljs-comment">//如果当前封面类型为自动，则设置封面类型的数据</span><br>    <span class="hljs-keyword">if</span>(dto.getType().equals(WemediaConstants.WM_NEWS_TYPE_AUTO))&#123;<br>        <span class="hljs-comment">//多图</span><br>        <span class="hljs-keyword">if</span>(materials.size() &gt;= <span class="hljs-number">3</span>)&#123;<br>            wmNews.setType(WemediaConstants.WM_NEWS_MANY_IMAGE);<br>            images = materials.stream().limit(<span class="hljs-number">3</span>).collect(Collectors.toList());<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(materials.size() &gt;= <span class="hljs-number">1</span> &amp;&amp; materials.size() &lt; <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-comment">//单图</span><br>            wmNews.setType(WemediaConstants.WM_NEWS_SINGLE_IMAGE);<br>            images = materials.stream().limit(<span class="hljs-number">1</span>).collect(Collectors.toList());<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//无图</span><br>            wmNews.setType(WemediaConstants.WM_NEWS_NONE_IMAGE);<br>        &#125;<br><br>        <span class="hljs-comment">//修改文章</span><br>        <span class="hljs-keyword">if</span>(images != <span class="hljs-literal">null</span> &amp;&amp; images.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            wmNews.setImages(StringUtils.join(images,<span class="hljs-string">&quot;,&quot;</span>));<br>        &#125;<br>        updateById(wmNews);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(images != <span class="hljs-literal">null</span> &amp;&amp; images.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        saveRelativeInfo(images,wmNews.getId(),WemediaConstants.WM_COVER_REFERENCE);<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理文章内容图片与素材的关系</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> materials</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> newsId</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveRelativeInfoForContent</span><span class="hljs-params">(List&lt;String&gt; materials, Integer newsId)</span> &#123;<br>    saveRelativeInfo(materials,newsId,WemediaConstants.WM_CONTENT_REFERENCE);<br>&#125;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WmMaterialMapper wmMaterialMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存文章图片与素材的关系到数据库中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> materials</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> newsId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveRelativeInfo</span><span class="hljs-params">(List&lt;String&gt; materials, Integer newsId, Short type)</span> &#123;<br>    <span class="hljs-keyword">if</span>(materials!=<span class="hljs-literal">null</span> &amp;&amp; !materials.isEmpty())&#123;<br>        <span class="hljs-comment">//通过图片的url查询素材的id</span><br>        List&lt;WmMaterial&gt; dbMaterials = wmMaterialMapper.selectList(Wrappers.&lt;WmMaterial&gt;lambdaQuery().in(WmMaterial::getUrl, materials));<br><br>        <span class="hljs-comment">//判断素材是否有效</span><br>        <span class="hljs-keyword">if</span>(dbMaterials==<span class="hljs-literal">null</span> || dbMaterials.size() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//手动抛出异常   第一个功能：能够提示调用者素材失效了，第二个功能，进行数据的回滚</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(AppHttpCodeEnum.MATERIASL_REFERENCE_FAIL);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(materials.size() != dbMaterials.size())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(AppHttpCodeEnum.MATERIASL_REFERENCE_FAIL);<br>        &#125;<br><br>        List&lt;Integer&gt; idList = dbMaterials.stream().map(WmMaterial::getId).collect(Collectors.toList());<br><br>        <span class="hljs-comment">//批量保存</span><br>        wmNewsMaterialMapper.saveRelations(idList,newsId,type);<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提取文章内容中的图片信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">ectractUrlInfo</span><span class="hljs-params">(String content)</span> &#123;<br>    List&lt;String&gt; materials = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    List&lt;Map&gt; maps = JSON.parseArray(content, Map.class);<br>    <span class="hljs-keyword">for</span> (Map map : maps) &#123;<br>        <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;type&quot;</span>).equals(<span class="hljs-string">&quot;image&quot;</span>))&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">imgUrl</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;value&quot;</span>);<br>            materials.add(imgUrl);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> materials;<br>&#125;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WmNewsMaterialMapper wmNewsMaterialMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存或修改文章</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOrUpdateWmNews</span><span class="hljs-params">(WmNews wmNews)</span> &#123;<br>    <span class="hljs-comment">//补全属性</span><br>    wmNews.setUserId(WmThreadLocalUtil.getUser().getId());<br>    wmNews.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    wmNews.setSubmitedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    wmNews.setEnable((<span class="hljs-type">short</span>)<span class="hljs-number">1</span>);<span class="hljs-comment">//默认上架</span><br><br>    <span class="hljs-keyword">if</span>(wmNews.getId() == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//保存</span><br>        save(wmNews);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//修改</span><br>        <span class="hljs-comment">//删除文章图片与素材的关系</span><br>        wmNewsMaterialMapper.delete(Wrappers.&lt;WmNewsMaterial&gt;lambdaQuery().eq(WmNewsMaterial::getNewsId,wmNews.getId()));<br>        updateById(wmNews);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>④：控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/submit&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">submitNews</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> WmNewsDto dto)</span>&#123;<br>    <span class="hljs-keyword">return</span>  wmNewsService.submitNews(dto);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-3-6-测试"><a href="#3-3-6-测试" class="headerlink" title="3.3.6)测试"></a>3.3.6)测试</h5><h1 id="4-自媒体文章-自动审核"><a href="#4-自媒体文章-自动审核" class="headerlink" title="4 自媒体文章-自动审核"></a>4 自媒体文章-自动审核</h1><h3 id="1-自媒体文章自动审核流程"><a href="#1-自媒体文章自动审核流程" class="headerlink" title="1)自媒体文章自动审核流程"></a>1)自媒体文章自动审核流程</h3><p><img src="/../images/image-20210504211635199.png" alt="image-20210504211635199"></p><blockquote><p>1 自媒体端发布文章后，开始审核文章</p><p>2 审核的主要是审核文章的内容（文本内容和图片）</p><p>3 借助第三方提供的接口审核文本</p><p>4 借助第三方提供的接口审核图片，由于图片存储到minIO中，需要先下载才能审核</p><p>5 如果审核失败，则需要修改自媒体文章的状态，status:2  审核失败    status:3  转到人工审核</p><p>6 如果审核成功，则需要在文章微服务中创建app端需要的文章</p></blockquote><h3 id="2-内容安全第三方接口"><a href="#2-内容安全第三方接口" class="headerlink" title="2)内容安全第三方接口"></a>2)内容安全第三方接口</h3><h4 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1)概述"></a>2.1)概述</h4><p>内容安全是识别服务，支持对图片、视频、文本、语音等对象进行多样化场景检测，有效降低内容违规风险。</p><p>目前很多平台都支持内容检测，如阿里云、腾讯云、百度AI、网易云等国内大型互联网公司都对外提供了API。</p><p>按照性能和收费来看，黑马头条项目使用的就是阿里云的内容安全接口，使用到了图片和文本的审核。</p><p>阿里云收费标准：<a href="https://www.aliyun.com/price/product/?spm=a2c4g.11186623.2.10.4146401eg5oeu8">https://www.aliyun.com/price/product/?spm=a2c4g.11186623.2.10.4146401eg5oeu8#/lvwang/detail</a> </p><h4 id="2-2-准备工作"><a href="#2-2-准备工作" class="headerlink" title="2.2)准备工作"></a>2.2)准备工作</h4><p>您在使用内容检测API之前，需要先注册阿里云账号，添加Access Key并签约云盾内容安全。</p><p><strong>操作步骤</strong></p><ol><li><p>前往<a href="https://www.aliyun.com/">阿里云官网</a>注册账号。如果已有注册账号，请跳过此步骤。</p><p> 进入阿里云首页后，如果没有阿里云的账户需要先进行注册，才可以进行登录。由于注册较为简单，课程和讲义不在进行体现（注册可以使用多种方式，如淘宝账号、支付宝账号、微博账号等…）。</p><p> 需要实名认证和活体认证。</p></li><li><p>打开<a href="https://promotion.aliyun.com/ntms/act/lvwangdemo.html">云盾内容安全产品试用页面</a>，单击<strong>立即开通</strong>，正式开通服务。</p><p> <img src="/../images/image-20210504213452171.png" alt="image-20210504213452171"></p><p> 内容安全控制台</p><p> <img src="/../images/image-20210504213510896.png" alt="image-20210504213510896"></p></li><li><p>在<a href="https://ak-console.aliyun.com/#/accesskey">AccessKey管理页面</a>管理您的AccessKeyID和AccessKeySecret。</p><p> <img src="/../images/image-20210504213530641.png" alt="image-20210504213530641"></p><p> 管理自己的AccessKey,可以新建和删除AccessKey</p><p> <img src="/../images/image-20210504213547219.png" alt="image-20210504213547219"></p><p> 查看自己的AccessKey，</p><p> AccessKey默认是隐藏的，第一次申请的时候可以保存AccessKey，点击显示，通过验证手机号后也可以查看</p><p> <img src="/../images/image-20210504213605004.png" alt="image-20210504213605004"></p></li></ol><h4 id="2-3-文本内容审核接口"><a href="#2-3-文本内容审核接口" class="headerlink" title="2.3)文本内容审核接口"></a>2.3)文本内容审核接口</h4><p>文本垃圾内容检测：<a href="https://help.aliyun.com/document_detail/70439.html?spm=a2c4g.11186623.6.659.35ac3db3l0wV5k">https://help.aliyun.com/document_detail/70439.html?spm=a2c4g.11186623.6.659.35ac3db3l0wV5k</a> </p><p><img src="/../images/image-20210504213640667.png" alt="image-20210504213640667"></p><p>文本垃圾内容Java SDK: <a href="https://help.aliyun.com/document_detail/53427.html?spm=a2c4g.11186623.6.717.466d7544QbU8Lr">https://help.aliyun.com/document_detail/53427.html?spm=a2c4g.11186623.6.717.466d7544QbU8Lr</a> </p><h4 id="2-4-图片审核接口"><a href="#2-4-图片审核接口" class="headerlink" title="2.4)图片审核接口"></a>2.4)图片审核接口</h4><p>图片垃圾内容检测：<a href="https://help.aliyun.com/document_detail/70292.html?spm=a2c4g.11186623.6.616.5d7d1e7f9vDRz4">https://help.aliyun.com/document_detail/70292.html?spm=a2c4g.11186623.6.616.5d7d1e7f9vDRz4</a> </p><p><img src="/../images/image-20210504213719323.png" alt="image-20210504213719323"></p><p>图片垃圾内容Java SDK: <a href="https://help.aliyun.com/document_detail/53424.html?spm=a2c4g.11186623.6.715.c8f69b12ey35j4">https://help.aliyun.com/document_detail/53424.html?spm=a2c4g.11186623.6.715.c8f69b12ey35j4</a> </p><h4 id="2-5-项目集成"><a href="#2-5-项目集成" class="headerlink" title="2.5)项目集成"></a>2.5)项目集成</h4><p>①：拷贝资料文件夹中的类到common模块下面，并添加到自动配置</p><p> 包括了GreenImageScan和GreenTextScan及对应的工具类</p><p><img src="/../images/image-20210504213812303.png" alt="image-20210504213812303"></p><p>添加到自动配置中</p><p><img src="/../images/image-20210504214013276.png" alt="image-20210504214013276"></p><p>②： accessKeyId和secret（需自己申请）</p><p>在heima-leadnews-wemedia中的nacos配置中心添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">aliyun:</span><br> <span class="hljs-attr">accessKeyId:</span> <span class="hljs-string">LTAI5tCWHCcfvqQzu8k2oKmX</span><br> <span class="hljs-attr">secret:</span> <span class="hljs-string">auoKUFsghimbfVQHpy7gtRyBkoR4vc</span><br><span class="hljs-comment">#aliyun.scenes=porn,terrorism,ad,qrcode,live,logo</span><br> <span class="hljs-attr">scenes:</span> <span class="hljs-string">terrorism</span><br></code></pre></td></tr></table></figure><p>③：在自媒体微服务中测试类中注入审核文本和图片的bean进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia;<br><br><span class="hljs-keyword">import</span> com.heima.common.aliyun.GreenImageScan;<br><span class="hljs-keyword">import</span> com.heima.common.aliyun.GreenTextScan;<br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@SpringBootTest(classes = WemediaApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AliyunTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GreenTextScan greenTextScan;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GreenImageScan greenImageScan;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileStorageService fileStorageService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testScanText</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> greenTextScan.greeTextScan(<span class="hljs-string">&quot;我是一个好人,冰毒&quot;</span>);<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testScanImage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] bytes = fileStorageService.downLoadFile(<span class="hljs-string">&quot;http://192.168.200.130:9000/leadnews/2021/04/26/ef3cbe458db249f7bd6fb4339e593e55.jpg&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> greenImageScan.imageScan(Arrays.asList(bytes));<br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-app端文章保存接口"><a href="#3-app端文章保存接口" class="headerlink" title="3)app端文章保存接口"></a>3)app端文章保存接口</h3><h4 id="3-1-表结构说明"><a href="#3-1-表结构说明" class="headerlink" title="3.1)表结构说明"></a>3.1)表结构说明</h4><p>ap_article 文章信息表</p><p><img src="/../images/image-20210505005300287.png" alt="image-20210505005300287"></p><p>ap_article_config  文章配置表</p><p><img src="/../images/image-20210505005353286.png" alt="image-20210505005353286"></p><p>ap_article_content 文章内容表</p><p><img src="/../images/image-20210505005407987.png" alt="image-20210505005407987"></p><h4 id="3-2-分布式id"><a href="#3-2-分布式id" class="headerlink" title="3.2)分布式id"></a>3.2)分布式id</h4><p>随着业务的增长，文章表可能要占用很大的物理存储空间，为了解决该问题，后期使用数据库分片技术。将一个数据库进行拆分，通过数据库中间件连接。如果数据库中该表选用ID自增策略，则可能产生重复的ID，此时应该使用分布式ID生成策略来生成ID。</p><p><img src="/../images/image-20210505005448995.png" alt="image-20210505005448995"></p><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0</p><p><img src="/../images/image-20210505005509258.png" alt="image-20210505005509258"></p><p>文章端相关的表都使用雪花算法生成id,包括ap_article、 ap_article_config、 ap_article_content</p><p>mybatis-plus已经集成了雪花算法，完成以下两步即可在项目中集成雪花算法</p><p>第一：在实体类中的id上加入如下配置，指定类型为id_worker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(value = &quot;id&quot;,type = IdType.ID_WORKER)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>第二：在application.yml文件中配置数据中心id和机器id</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/*.xml</span><br>  <span class="hljs-comment"># 设置别名包扫描路径，通过该属性可以给包中的类注册别名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.heima.model.article.pojos</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">datacenter-id:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">workerId:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>datacenter-id:数据中心id(取值范围：0-31)</p><p>workerId:机器id(取值范围：0-31)</p><h4 id="3-3-思路分析"><a href="#3-3-思路分析" class="headerlink" title="3.3)思路分析"></a>3.3)思路分析</h4><p>在文章审核成功以后需要在app的article库中新增文章数据</p><p>1.保存文章信息 ap_article</p><p>2.保存文章配置信息 ap_article_config</p><p>3.保存文章内容 ap_article_content</p><p>实现思路：</p><p><img src="/../images/image-20210505005733405.png" alt="image-20210505005733405"></p><h4 id="3-4-feign接口"><a href="#3-4-feign接口" class="headerlink" title="3.4)feign接口"></a>3.4)feign接口</h4><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/article/save</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>ArticleDto</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><p>ArticleDto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.article.dtos;<br><br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleDto</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApArticle</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String content;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;errorMessage&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1302864436297442242&quot;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>失败：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">501</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;errorMessage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;参数失效&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">501</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;errorMessage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;文章没有找到&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>功能实现：</p><p>①：在heima-leadnews-feign-api中新增接口</p><p>第一：线导入feign的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二：定义文章端的接口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.heima.apis.article;<br><br>import com.heima.model.article.dtos.ArticleDto;<br>import com.heima.model.common.dtos.ResponseResult;<br>import org.springframework.cloud.openfeign.FeignClient;<br>import org.springframework.web.bind.annotation.PostMapping;<br>import org.springframework.web.bind.annotation.RequestBody;<br><br>import java.io.IOException;<br><br><br>@FeignClient(value = <span class="hljs-string">&quot;leadnews-article&quot;</span>)<br>public interface IArticleClient <span class="hljs-punctuation">&#123;</span><br><br>    @PostMapping(<span class="hljs-string">&quot;/api/v1/article/save&quot;</span>)<br>    public ResponseResult saveArticle(@RequestBody ArticleDto dto) ;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>②：在heima-leadnews-article中实现该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.feign;<br><br><span class="hljs-keyword">import</span> com.heima.apis.article.IArticleClient;<br><span class="hljs-keyword">import</span> com.heima.article.service.ApArticleService;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleClient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IArticleClient</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleService apArticleService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@PostMapping(&quot;/api/v1/article/save&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">saveArticle</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleDto dto)</span> &#123;<br>        <span class="hljs-keyword">return</span> apArticleService.saveArticle(dto);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>③：拷贝mapper</p><p>在资料文件夹中拷贝ApArticleConfigMapper类到mapper文件夹中</p><p>同时，修改ApArticleConfig类，添加如下构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.article.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * APP已发布文章配置表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@TableName(&quot;ap_article_config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApArticleConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ApArticleConfig</span><span class="hljs-params">(Long articleId)</span>&#123;<br>        <span class="hljs-built_in">this</span>.articleId = articleId;<br>        <span class="hljs-built_in">this</span>.isComment = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">this</span>.isForward = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">this</span>.isDelete = <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">this</span>.isDown = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;,type = IdType.ID_WORKER)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;article_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long articleId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否可评论</span><br><span class="hljs-comment">     * true: 可以评论   1</span><br><span class="hljs-comment">     * false: 不可评论  0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_comment&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isComment;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否转发</span><br><span class="hljs-comment">     * true: 可以转发   1</span><br><span class="hljs-comment">     * false: 不可转发  0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_forward&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isForward;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否下架</span><br><span class="hljs-comment">     * true: 下架   1</span><br><span class="hljs-comment">     * false: 没有下架  0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_down&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isDown;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否已删除</span><br><span class="hljs-comment">     * true: 删除   1</span><br><span class="hljs-comment">     * false: 没有删除  0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;is_delete&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isDelete;<br>&#125;<br></code></pre></td></tr></table></figure><p>④：在ApArticleService中新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存app端相关文章</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>ResponseResult <span class="hljs-title function_">saveArticle</span><span class="hljs-params">(ArticleDto dto)</span> ;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ApArticleConfigMapper apArticleConfigMapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ApArticleContentMapper apArticleContentMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存app端相关文章</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">saveArticle</span><span class="hljs-params">(ArticleDto dto)</span> &#123;<br>    <span class="hljs-comment">//1.检查参数</span><br>    <span class="hljs-keyword">if</span>(dto == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>    &#125;<br><br>    <span class="hljs-type">ApArticle</span> <span class="hljs-variable">apArticle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApArticle</span>();<br>    BeanUtils.copyProperties(dto,apArticle);<br><br>    <span class="hljs-comment">//2.判断是否存在id</span><br>    <span class="hljs-keyword">if</span>(dto.getId() == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//2.1 不存在id  保存  文章  文章配置  文章内容</span><br><br>        <span class="hljs-comment">//保存文章</span><br>        save(apArticle);<br><br>        <span class="hljs-comment">//保存配置</span><br>        <span class="hljs-type">ApArticleConfig</span> <span class="hljs-variable">apArticleConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApArticleConfig</span>(apArticle.getId());<br>        apArticleConfigMapper.insert(apArticleConfig);<br><br>        <span class="hljs-comment">//保存 文章内容</span><br>        <span class="hljs-type">ApArticleContent</span> <span class="hljs-variable">apArticleContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApArticleContent</span>();<br>        apArticleContent.setArticleId(apArticle.getId());<br>        apArticleContent.setContent(dto.getContent());<br>        apArticleContentMapper.insert(apArticleContent);<br><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//2.2 存在id   修改  文章  文章内容</span><br><br>        <span class="hljs-comment">//修改  文章</span><br>        updateById(apArticle);<br><br>        <span class="hljs-comment">//修改文章内容</span><br>        <span class="hljs-type">ApArticleContent</span> <span class="hljs-variable">apArticleContent</span> <span class="hljs-operator">=</span> apArticleContentMapper.selectOne(Wrappers.&lt;ApArticleContent&gt;lambdaQuery().eq(ApArticleContent::getArticleId, dto.getId()));<br>        apArticleContent.setContent(dto.getContent());<br>        apArticleContentMapper.updateById(apArticleContent);<br>    &#125;<br><br><br>    <span class="hljs-comment">//3.结果返回  文章的id</span><br>    <span class="hljs-keyword">return</span> ResponseResult.okResult(apArticle.getId());<br>&#125;<br></code></pre></td></tr></table></figure><p>⑤：测试</p><p>编写junit单元测试，或使用postman进行测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1390209114747047938</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;黑马头条项目背景22222222222222&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;authoId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1102</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;layout&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;黑马头条&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;publishTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2028-03-14T11:35:49.000Z&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://192.168.200.130:9000/leadnews/2021/04/26/5ddbdb5c68094ce393b08a47860da275.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;22222222222222222黑马头条项目背景,黑马头条项目背景,黑马头条项目背景,黑马头条项目背景，黑马头条项目背景&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-自媒体文章自动审核功能实现"><a href="#4-自媒体文章自动审核功能实现" class="headerlink" title="4)自媒体文章自动审核功能实现"></a>4)自媒体文章自动审核功能实现</h3><h4 id="4-1-表结构说明"><a href="#4-1-表结构说明" class="headerlink" title="4.1)表结构说明"></a>4.1)表结构说明</h4><p>wm_news 自媒体文章表</p><p><img src="/../images/image-20210505010728156.png" alt="image-20210505010728156"></p><p>status字段：0 草稿  1 待审核  2 审核失败  3 人工审核  4 人工审核通过  8 审核通过（待发布） 9 已发布</p><h4 id="4-2-实现"><a href="#4-2-实现" class="headerlink" title="4.2)实现"></a>4.2)实现</h4><p><img src="/../images/image-20210505010755954.png" alt="image-20210505010755954"></p><p>在heima-leadnews-wemedia中的service新增接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmNewsAutoScanService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自媒体文章审核</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id  自媒体文章id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoScanWmNews</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.heima.apis.article.IArticleClient;<br><span class="hljs-keyword">import</span> com.heima.common.aliyun.GreenImageScan;<br><span class="hljs-keyword">import</span> com.heima.common.aliyun.GreenTextScan;<br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmChannel;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmNews;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmUser;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmChannelMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmNewsMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmUserMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmNewsAutoScanService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsAutoScanServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WmNewsAutoScanService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmNewsMapper wmNewsMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自媒体文章审核</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 自媒体文章id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoScanWmNews</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-comment">//1.查询自媒体文章</span><br>        <span class="hljs-type">WmNews</span> <span class="hljs-variable">wmNews</span> <span class="hljs-operator">=</span> wmNewsMapper.selectById(id);<br>        <span class="hljs-keyword">if</span>(wmNews == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;WmNewsAutoScanServiceImpl-文章不存在&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(wmNews.getStatus().equals(WmNews.Status.SUBMIT.getCode()))&#123;<br>            <span class="hljs-comment">//从内容中提取纯文本内容和图片</span><br>            Map&lt;String,Object&gt; textAndImages = handleTextAndImages(wmNews);<br><br>            <span class="hljs-comment">//2.审核文本内容  阿里云接口</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isTextScan</span> <span class="hljs-operator">=</span> handleTextScan((String) textAndImages.get(<span class="hljs-string">&quot;content&quot;</span>),wmNews);<br>            <span class="hljs-keyword">if</span>(!isTextScan)<span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">//3.审核图片  阿里云接口</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isImageScan</span> <span class="hljs-operator">=</span>  handleImageScan((List&lt;String&gt;) textAndImages.get(<span class="hljs-string">&quot;images&quot;</span>),wmNews);<br>            <span class="hljs-keyword">if</span>(!isImageScan)<span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">//4.审核成功，保存app端的相关的文章数据</span><br>            <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> saveAppArticle(wmNews);<br>            <span class="hljs-keyword">if</span>(!responseResult.getCode().equals(<span class="hljs-number">200</span>))&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;WmNewsAutoScanServiceImpl-文章审核，保存app端相关文章数据失败&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//回填article_id</span><br>            wmNews.setArticleId((Long) responseResult.getData());<br>            updateWmNews(wmNews,(<span class="hljs-type">short</span>) <span class="hljs-number">9</span>,<span class="hljs-string">&quot;审核成功&quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IArticleClient articleClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmChannelMapper wmChannelMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmUserMapper wmUserMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存app端相关的文章数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ResponseResult <span class="hljs-title function_">saveAppArticle</span><span class="hljs-params">(WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-type">ArticleDto</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArticleDto</span>();<br>        <span class="hljs-comment">//属性的拷贝</span><br>        BeanUtils.copyProperties(wmNews,dto);<br>        <span class="hljs-comment">//文章的布局</span><br>        dto.setLayout(wmNews.getType());<br>        <span class="hljs-comment">//频道</span><br>        <span class="hljs-type">WmChannel</span> <span class="hljs-variable">wmChannel</span> <span class="hljs-operator">=</span> wmChannelMapper.selectById(wmNews.getChannelId());<br>        <span class="hljs-keyword">if</span>(wmChannel != <span class="hljs-literal">null</span>)&#123;<br>            dto.setChannelName(wmChannel.getName());<br>        &#125;<br><br>        <span class="hljs-comment">//作者</span><br>        dto.setAuthorId(wmNews.getUserId().longValue());<br>        <span class="hljs-type">WmUser</span> <span class="hljs-variable">wmUser</span> <span class="hljs-operator">=</span> wmUserMapper.selectById(wmNews.getUserId());<br>        <span class="hljs-keyword">if</span>(wmUser != <span class="hljs-literal">null</span>)&#123;<br>            dto.setAuthorName(wmUser.getName());<br>        &#125;<br><br>        <span class="hljs-comment">//设置文章id</span><br>        <span class="hljs-keyword">if</span>(wmNews.getArticleId() != <span class="hljs-literal">null</span>)&#123;<br>            dto.setId(wmNews.getArticleId());<br>        &#125;<br>        dto.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> articleClient.saveArticle(dto);<br>        <span class="hljs-keyword">return</span> responseResult;<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileStorageService fileStorageService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GreenImageScan greenImageScan;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 审核图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> images</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleImageScan</span><span class="hljs-params">(List&lt;String&gt; images, WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span>(images == <span class="hljs-literal">null</span> || images.size() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> flag;<br>        &#125;<br><br>        <span class="hljs-comment">//下载图片 minIO</span><br>        <span class="hljs-comment">//图片去重</span><br>        images = images.stream().distinct().collect(Collectors.toList());<br><br>        List&lt;<span class="hljs-type">byte</span>[]&gt; imageList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (String image : images) &#123;<br>            <span class="hljs-type">byte</span>[] bytes = fileStorageService.downLoadFile(image);<br>            imageList.add(bytes);<br>        &#125;<br><br><br>        <span class="hljs-comment">//审核图片</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> greenImageScan.imageScan(imageList);<br>            <span class="hljs-keyword">if</span>(map != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//审核失败</span><br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;suggestion&quot;</span>).equals(<span class="hljs-string">&quot;block&quot;</span>))&#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">2</span>, <span class="hljs-string">&quot;当前文章中存在违规内容&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-comment">//不确定信息  需要人工审核</span><br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;suggestion&quot;</span>).equals(<span class="hljs-string">&quot;review&quot;</span>))&#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">3</span>, <span class="hljs-string">&quot;当前文章中存在不确定内容&quot;</span>);<br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GreenTextScan greenTextScan;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 审核纯文本内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleTextScan</span><span class="hljs-params">(String content, WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span>((wmNews.getTitle()+<span class="hljs-string">&quot;-&quot;</span>+content).length() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> flag;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> greenTextScan.greeTextScan((wmNews.getTitle()+<span class="hljs-string">&quot;-&quot;</span>+content));<br>            <span class="hljs-keyword">if</span>(map != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//审核失败</span><br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;suggestion&quot;</span>).equals(<span class="hljs-string">&quot;block&quot;</span>))&#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">2</span>, <span class="hljs-string">&quot;当前文章中存在违规内容&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-comment">//不确定信息  需要人工审核</span><br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;suggestion&quot;</span>).equals(<span class="hljs-string">&quot;review&quot;</span>))&#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">3</span>, <span class="hljs-string">&quot;当前文章中存在不确定内容&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> flag;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改文章内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> reason</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateWmNews</span><span class="hljs-params">(WmNews wmNews, <span class="hljs-type">short</span> status, String reason)</span> &#123;<br>        wmNews.setStatus(status);<br>        wmNews.setReason(reason);<br>        wmNewsMapper.updateById(wmNews);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1。从自媒体文章的内容中提取文本和图片</span><br><span class="hljs-comment">     * 2.提取文章的封面图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">handleTextAndImages</span><span class="hljs-params">(WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-comment">//存储纯文本内容</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        List&lt;String&gt; images = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//1。从自媒体文章的内容中提取文本和图片</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(wmNews.getContent()))&#123;<br>            List&lt;Map&gt; maps = JSONArray.parseArray(wmNews.getContent(), Map.class);<br>            <span class="hljs-keyword">for</span> (Map map : maps) &#123;<br>                <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;type&quot;</span>).equals(<span class="hljs-string">&quot;text&quot;</span>))&#123;<br>                    stringBuilder.append(map.get(<span class="hljs-string">&quot;value&quot;</span>));<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;type&quot;</span>).equals(<span class="hljs-string">&quot;image&quot;</span>))&#123;<br>                    images.add((String) map.get(<span class="hljs-string">&quot;value&quot;</span>));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//2.提取文章的封面图片</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(wmNews.getImages()))&#123;<br>            String[] split = wmNews.getImages().split(<span class="hljs-string">&quot;,&quot;</span>);<br>            images.addAll(Arrays.asList(split));<br>        &#125;<br><br>        Map&lt;String, Object&gt; resultMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        resultMap.put(<span class="hljs-string">&quot;content&quot;</span>,stringBuilder.toString());<br>        resultMap.put(<span class="hljs-string">&quot;images&quot;</span>,images);<br>        <span class="hljs-keyword">return</span> resultMap;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-单元测试"><a href="#4-3-单元测试" class="headerlink" title="4.3)单元测试"></a>4.3)单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service;<br><br><span class="hljs-keyword">import</span> com.heima.wemedia.WemediaApplication;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><br><span class="hljs-meta">@SpringBootTest(classes = WemediaApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsAutoScanServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmNewsAutoScanService wmNewsAutoScanService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoScanWmNews</span><span class="hljs-params">()</span> &#123;<br><br>        wmNewsAutoScanService.autoScanWmNews(<span class="hljs-number">6238</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-feign远程接口调用方式"><a href="#4-4-feign远程接口调用方式" class="headerlink" title="4.4)feign远程接口调用方式"></a>4.4)feign远程接口调用方式</h4><p><img src="/../images/image-20210505010938575.png" alt="image-20210505010938575"></p><p>在heima-leadnews-wemedia服务中已经依赖了heima-leadnews-feign-apis工程，只需要在自媒体的引导类中开启feign的远程调用即可</p><p>注解为：<code>@EnableFeignClients(basePackages = &quot;com.heima.apis&quot;)</code> 需要指向apis这个包</p><p><img src="/../images/image-20210507160209926.png" alt="image-20210507160209926"></p><h4 id="4-5-服务降级处理"><a href="#4-5-服务降级处理" class="headerlink" title="4.5)服务降级处理"></a>4.5)服务降级处理</h4><p><img src="/../images/image-20210507160329016.png" alt="image-20210507160329016"></p><ul><li><p>服务降级是服务自我保护的一种方式，或者保护下游服务的一种方式，用于确保服务不会受请求突增影响变得不可用，确保服务不会崩溃</p></li><li><p>服务降级虽然会导致请求失败，但是不会导致阻塞。</p></li></ul><p>实现步骤：</p><p>①：在heima-leadnews-feign-api编写降级逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.apis.article.fallback;<br><br><span class="hljs-keyword">import</span> com.heima.apis.article.IArticleClient;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * feign失败配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IArticleClientFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IArticleClient</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">saveArticle</span><span class="hljs-params">(ArticleDto dto)</span>  &#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.SERVER_ERROR,<span class="hljs-string">&quot;获取数据失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在自媒体微服务中添加类，扫描降级代码类的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.heima.apis.article.fallback&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>②：远程接口中指向降级代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.apis.article;<br><br><span class="hljs-keyword">import</span> com.heima.apis.article.fallback.IArticleClientFallback;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><br><span class="hljs-meta">@FeignClient(value = &quot;leadnews-article&quot;,fallback = IArticleClientFallback.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IArticleClient</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/api/v1/article/save&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">saveArticle</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleDto dto)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>③：客户端开启降级heima-leadnews-wemedia</p><p>在wemedia的nacos配置中心里添加如下内容，开启服务降级，也可以指定服务响应的超时的时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-comment"># 开启feign对hystrix熔断降级的支持</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 修改调用超时时间</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">2000</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><p>④：测试</p><p>在ApArticleServiceImpl类中saveArticle方法添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>在自媒体端进行审核测试，会出现服务降级的现象</p><h3 id="5-发布文章提交审核集成"><a href="#5-发布文章提交审核集成" class="headerlink" title="5)发布文章提交审核集成"></a>5)发布文章提交审核集成</h3><h4 id="5-1-同步调用与异步调用"><a href="#5-1-同步调用与异步调用" class="headerlink" title="5.1)同步调用与异步调用"></a>5.1)同步调用与异步调用</h4><p>同步：就是在发出一个调用时，在没有得到结果之前， 该调用就不返回（实时处理）</p><p>异步：调用在发出之后，这个调用就直接返回了，没有返回结果（分时处理）</p><p><img src="/../images/image-20210507160912993.png" alt="image-20210507160912993"></p><p>异步线程的方式审核文章</p><h4 id="5-2-Springboot集成异步线程调用"><a href="#5-2-Springboot集成异步线程调用" class="headerlink" title="5.2)Springboot集成异步线程调用"></a>5.2)Springboot集成异步线程调用</h4><p>①：在自动审核的方法上加上@Async注解（标明要异步调用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Async</span>  <span class="hljs-comment">//标明当前方法是一个异步方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoScanWmNews</span><span class="hljs-params">(Integer id)</span> &#123;<br><span class="hljs-comment">//代码略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>②：在文章发布成功后调用审核的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WmNewsAutoScanService wmNewsAutoScanService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发布修改文章或保存为草稿</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">submitNews</span><span class="hljs-params">(WmNewsDto dto)</span> &#123;<br><br>    <span class="hljs-comment">//代码略</span><br><br>    <span class="hljs-comment">//审核文章</span><br>    wmNewsAutoScanService.autoScanWmNews(wmNews.getId());<br><br>    <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>③：在自媒体引导类中使用@EnableAsync注解开启异步调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@MapperScan(&quot;com.heima.wemedia.mapper&quot;)</span><br><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.heima.apis&quot;)</span><br><span class="hljs-meta">@EnableAsync</span>  <span class="hljs-comment">//开启异步调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WemediaApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(WemediaApplication.class,args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-文章审核功能-综合测试"><a href="#6-文章审核功能-综合测试" class="headerlink" title="6)文章审核功能-综合测试"></a>6)文章审核功能-综合测试</h3><h4 id="6-1-服务启动列表"><a href="#6-1-服务启动列表" class="headerlink" title="6.1)服务启动列表"></a>6.1)服务启动列表</h4><p>1，nacos服务端</p><p>2，article微服务</p><p>3，wemedia微服务</p><p>4，启动wemedia网关微服务</p><p>5，启动前端系统wemedia</p><h4 id="6-2-测试情况列表"><a href="#6-2-测试情况列表" class="headerlink" title="6.2)测试情况列表"></a>6.2)测试情况列表</h4><p>1，自媒体前端发布一篇正常的文章</p><p>   审核成功后，app端的article相关数据是否可以正常保存，自媒体文章状态和app端文章id是否回显</p><p>2，自媒体前端发布一篇包含敏感词的文章</p><p>   正常是审核失败， wm_news表中的状态是否改变，成功和失败原因正常保存</p><p>3，自媒体前端发布一篇包含敏感图片的文章</p><p>   正常是审核失败， wm_news表中的状态是否改变，成功和失败原因正常保存</p><h3 id="7-新需求-自管理敏感词"><a href="#7-新需求-自管理敏感词" class="headerlink" title="7)新需求-自管理敏感词"></a>7)新需求-自管理敏感词</h3><h4 id="7-1-需求分析"><a href="#7-1-需求分析" class="headerlink" title="7.1)需求分析"></a>7.1)需求分析</h4><p>文章审核功能已经交付了，文章也能正常发布审核。突然，产品经理过来说要开会。</p><p>会议的内容核心有以下内容：</p><ul><li><p>文章审核不能过滤一些敏感词：</p><p>  私人侦探、针孔摄象、信用卡提现、广告代理、代开发票、刻章办、出售答案、小额贷款…</p></li></ul><p>需要完成的功能：</p><p>需要自己维护一套敏感词，在文章审核的时候，需要验证文章是否包含这些敏感词</p><h4 id="7-2-敏感词-过滤"><a href="#7-2-敏感词-过滤" class="headerlink" title="7.2)敏感词-过滤"></a>7.2)敏感词-过滤</h4><p>技术选型</p><table><thead><tr><th><strong>方案</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>数据库模糊查询</td><td>效率太低</td></tr><tr><td>String.indexOf(“”)查找</td><td>数据库量大的话也是比较慢</td></tr><tr><td>全文检索</td><td>分词再匹配</td></tr><tr><td>DFA算法</td><td>确定有穷自动机(一种数据结构)</td></tr></tbody></table><h4 id="7-3-DFA实现原理"><a href="#7-3-DFA实现原理" class="headerlink" title="7.3)DFA实现原理"></a>7.3)DFA实现原理</h4><p>DFA全称为：Deterministic Finite Automaton,即确定有穷自动机。</p><p>存储：一次性的把所有的敏感词存储到了多个map中，就是下图表示这种结构</p><p>敏感词：冰毒、大麻、大坏蛋</p><p><img src="/../images/image-20210524160517744.png" alt="image-20210524160517744"></p><p>检索的过程</p><p><img src="/../images/image-20210524160549596.png" alt="image-20210524160549596"></p><h4 id="7-4-自管理敏感词集成到文章审核中"><a href="#7-4-自管理敏感词集成到文章审核中" class="headerlink" title="7.4)自管理敏感词集成到文章审核中"></a>7.4)自管理敏感词集成到文章审核中</h4><p>①：创建敏感词表，导入资料中wm_sensitive到leadnews_wemedia库中</p><p><img src="/../images/image-20210524160611338.png" alt="image-20210524160611338"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 敏感词信息表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;wm_sensitive&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmSensitive</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 敏感词</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;sensitives&quot;)</span><br>    <span class="hljs-keyword">private</span> String sensitives;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;created_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>②：拷贝对应的wm_sensitive的mapper到项目中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmSensitive;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmSensitiveMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;WmSensitive&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>③：在文章审核的代码中添加自管理敏感词审核</p><p>第一：在WmNewsAutoScanServiceImpl中的autoScanWmNews方法上添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从内容中提取纯文本内容和图片</span><br><span class="hljs-comment">//.....省略</span><br><br><span class="hljs-comment">//自管理的敏感词过滤</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isSensitive</span> <span class="hljs-operator">=</span> handleSensitiveScan((String) textAndImages.get(<span class="hljs-string">&quot;content&quot;</span>), wmNews);<br><span class="hljs-keyword">if</span>(!isSensitive) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-comment">//2.审核文本内容  阿里云接口</span><br><span class="hljs-comment">//.....省略</span><br></code></pre></td></tr></table></figure><p>新增自管理敏感词审核代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WmSensitiveMapper wmSensitiveMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自管理的敏感词审核</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleSensitiveScan</span><span class="hljs-params">(String content, WmNews wmNews)</span> &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">//获取所有的敏感词</span><br>    List&lt;WmSensitive&gt; wmSensitives = wmSensitiveMapper.selectList(Wrappers.&lt;WmSensitive&gt;lambdaQuery().select(WmSensitive::getSensitives));<br>    List&lt;String&gt; sensitiveList = wmSensitives.stream().map(WmSensitive::getSensitives).collect(Collectors.toList());<br><br>    <span class="hljs-comment">//初始化敏感词库</span><br>    SensitiveWordUtil.initMap(sensitiveList);<br><br>    <span class="hljs-comment">//查看文章中是否包含敏感词</span><br>    Map&lt;String, Integer&gt; map = SensitiveWordUtil.matchWords(content);<br>    <span class="hljs-keyword">if</span>(map.size() &gt;<span class="hljs-number">0</span>)&#123;<br>        updateWmNews(wmNews,(<span class="hljs-type">short</span>) <span class="hljs-number">2</span>,<span class="hljs-string">&quot;当前文章中存在违规内容&quot;</span>+map);<br>        flag = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-新需求-图片识别文字审核敏感词"><a href="#8-新需求-图片识别文字审核敏感词" class="headerlink" title="8)新需求-图片识别文字审核敏感词"></a>8)新需求-图片识别文字审核敏感词</h3><h4 id="8-1-需求分析"><a href="#8-1-需求分析" class="headerlink" title="8.1)需求分析"></a>8.1)需求分析</h4><p>产品经理召集开会，文章审核功能已经交付了，文章也能正常发布审核。对于上次提出的自管理敏感词也很满意，这次会议核心的内容如下：</p><ul><li>文章中包含的图片要识别文字，过滤掉图片文字的敏感词</li></ul><p><img src="/../images/image-20210524161243572.png" alt="image-20210524161243572"></p><h4 id="8-2-图片文字识别"><a href="#8-2-图片文字识别" class="headerlink" title="8.2)图片文字识别"></a>8.2)图片文字识别</h4><p>什么是OCR?</p><p>OCR （Optical Character Recognition，光学字符识别）是指电子设备（例如扫描仪或数码相机）检查纸上打印的字符，通过检测暗、亮的模式确定其形状，然后用字符识别方法将形状翻译成计算机文字的过程</p><table><thead><tr><th><strong>方案</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>百度OCR</td><td>收费</td></tr><tr><td>Tesseract-OCR</td><td>Google维护的开源OCR引擎，支持Java，Python等语言调用</td></tr><tr><td>Tess4J</td><td>封装了Tesseract-OCR  ，支持Java调用</td></tr></tbody></table><h4 id="8-3-Tess4j案例"><a href="#8-3-Tess4j案例" class="headerlink" title="8.3)Tess4j案例"></a>8.3)Tess4j案例</h4><p>①：创建项目导入tess4j对应的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sourceforge.tess4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tess4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>②：导入中文字体库， 把资料中的tessdata文件夹拷贝到自己的工作空间下</p><p><img src="/../images/image-20210524161406081.png" alt="image-20210524161406081"></p><p>③：编写测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.tess4j;<br><br><span class="hljs-keyword">import</span> net.sourceforge.tess4j.ITesseract;<br><span class="hljs-keyword">import</span> net.sourceforge.tess4j.Tesseract;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取本地图片</span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\26.png&quot;</span>);<br>            <span class="hljs-comment">//创建Tesseract对象</span><br>            <span class="hljs-type">ITesseract</span> <span class="hljs-variable">tesseract</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tesseract</span>();<br>            <span class="hljs-comment">//设置字体库路径</span><br>            tesseract.setDatapath(<span class="hljs-string">&quot;D:\\workspace\\tessdata&quot;</span>);<br>            <span class="hljs-comment">//中文识别</span><br>            tesseract.setLanguage(<span class="hljs-string">&quot;chi_sim&quot;</span>);<br>            <span class="hljs-comment">//执行ocr识别</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> tesseract.doOCR(file);<br>            <span class="hljs-comment">//替换回车和tal键  使结果为一行</span><br>            result = result.replaceAll(<span class="hljs-string">&quot;\\r|\\n&quot;</span>,<span class="hljs-string">&quot;-&quot;</span>).replaceAll(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;识别的结果为：&quot;</span>+result);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-4-管理敏感词和图片文字识别集成到文章审核"><a href="#8-4-管理敏感词和图片文字识别集成到文章审核" class="headerlink" title="8.4)管理敏感词和图片文字识别集成到文章审核"></a>8.4)管理敏感词和图片文字识别集成到文章审核</h4><p>①：在heima-leadnews-common中创建工具类，简单封装一下tess4j</p><p>需要先导入pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sourceforge.tess4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tess4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.tess4j;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> net.sourceforge.tess4j.ITesseract;<br><span class="hljs-keyword">import</span> net.sourceforge.tess4j.Tesseract;<br><span class="hljs-keyword">import</span> net.sourceforge.tess4j.TesseractException;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;tess4j&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tess4jClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String dataPath;<br>    <span class="hljs-keyword">private</span> String language;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doOCR</span><span class="hljs-params">(BufferedImage image)</span> <span class="hljs-keyword">throws</span> TesseractException &#123;<br>        <span class="hljs-comment">//创建Tesseract对象</span><br>        <span class="hljs-type">ITesseract</span> <span class="hljs-variable">tesseract</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tesseract</span>();<br>        <span class="hljs-comment">//设置字体库路径</span><br>        tesseract.setDatapath(dataPath);<br>        <span class="hljs-comment">//中文识别</span><br>        tesseract.setLanguage(language);<br>        <span class="hljs-comment">//执行ocr识别</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> tesseract.doOCR(image);<br>        <span class="hljs-comment">//替换回车和tal键  使结果为一行</span><br>        result = result.replaceAll(<span class="hljs-string">&quot;\\r|\\n&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>).replaceAll(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在spring.factories配置中添加该类,完整如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>  com.heima.common.exception.ExceptionCatch,\<br>  com.heima.common.swagger.SwaggerConfiguration,\<br>  com.heima.common.swagger.Swagger2Configuration,\<br>  com.heima.common.aliyun.GreenTextScan,\<br>  com.heima.common.aliyun.GreenImageScan,\<br>  com.heima.common.tess4j.Tess4jClient<br></code></pre></td></tr></table></figure><p>②：在heima-leadnews-wemedia中的配置中添加两个属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tess4j:</span><br>  <span class="hljs-attr">data-path:</span> <span class="hljs-string">D:\workspace\tessdata</span><br>  <span class="hljs-attr">language:</span> <span class="hljs-string">chi_sim</span><br></code></pre></td></tr></table></figure><p>③：在WmNewsAutoScanServiceImpl中的handleImageScan方法上添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">for</span> (String image : images) &#123;<br>        <span class="hljs-type">byte</span>[] bytes = fileStorageService.downLoadFile(image);<br><br>        <span class="hljs-comment">//图片识别文字审核---begin-----</span><br><br>        <span class="hljs-comment">//从byte[]转换为butteredImage</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">imageFile</span> <span class="hljs-operator">=</span> ImageIO.read(in);<br>        <span class="hljs-comment">//识别图片的文字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> tess4jClient.doOCR(imageFile);<br><br>        <span class="hljs-comment">//审核是否包含自管理的敏感词</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSensitive</span> <span class="hljs-operator">=</span> handleSensitiveScan(result, wmNews);<br>        <span class="hljs-keyword">if</span>(!isSensitive)&#123;<br>            <span class="hljs-keyword">return</span> isSensitive;<br>        &#125;<br><br>        <span class="hljs-comment">//图片识别文字审核---end-----</span><br><br><br>        imageList.add(bytes);<br><br>    &#125; <br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>最后附上文章审核的完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.heima.apis.article.IArticleClient;<br><span class="hljs-keyword">import</span> com.heima.common.aliyun.GreenImageScan;<br><span class="hljs-keyword">import</span> com.heima.common.aliyun.GreenTextScan;<br><span class="hljs-keyword">import</span> com.heima.common.tess4j.Tess4jClient;<br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmChannel;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmNews;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmSensitive;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmUser;<br><span class="hljs-keyword">import</span> com.heima.utils.common.SensitiveWordUtil;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmChannelMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmNewsMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmSensitiveMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.mapper.WmUserMapper;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmNewsAutoScanService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsAutoScanServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WmNewsAutoScanService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmNewsMapper wmNewsMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自媒体文章审核</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id 自媒体文章id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Async</span>  <span class="hljs-comment">//标明当前方法是一个异步方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoScanWmNews</span><span class="hljs-params">(Integer id)</span> &#123;<br><br><span class="hljs-comment">//        int a = 1/0;</span><br><br>        <span class="hljs-comment">//1.查询自媒体文章</span><br>        <span class="hljs-type">WmNews</span> <span class="hljs-variable">wmNews</span> <span class="hljs-operator">=</span> wmNewsMapper.selectById(id);<br>        <span class="hljs-keyword">if</span> (wmNews == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;WmNewsAutoScanServiceImpl-文章不存在&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (wmNews.getStatus().equals(WmNews.Status.SUBMIT.getCode())) &#123;<br>            <span class="hljs-comment">//从内容中提取纯文本内容和图片</span><br>            Map&lt;String, Object&gt; textAndImages = handleTextAndImages(wmNews);<br><br>            <span class="hljs-comment">//自管理的敏感词过滤</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSensitive</span> <span class="hljs-operator">=</span> handleSensitiveScan((String) textAndImages.get(<span class="hljs-string">&quot;content&quot;</span>), wmNews);<br>            <span class="hljs-keyword">if</span>(!isSensitive) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">//2.审核文本内容  阿里云接口</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isTextScan</span> <span class="hljs-operator">=</span> handleTextScan((String) textAndImages.get(<span class="hljs-string">&quot;content&quot;</span>), wmNews);<br>            <span class="hljs-keyword">if</span> (!isTextScan) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">//3.审核图片  阿里云接口</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isImageScan</span> <span class="hljs-operator">=</span> handleImageScan((List&lt;String&gt;) textAndImages.get(<span class="hljs-string">&quot;images&quot;</span>), wmNews);<br>            <span class="hljs-keyword">if</span> (!isImageScan) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">//4.审核成功，保存app端的相关的文章数据</span><br>            <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> saveAppArticle(wmNews);<br>            <span class="hljs-keyword">if</span> (!responseResult.getCode().equals(<span class="hljs-number">200</span>)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;WmNewsAutoScanServiceImpl-文章审核，保存app端相关文章数据失败&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//回填article_id</span><br>            wmNews.setArticleId((Long) responseResult.getData());<br>            updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">9</span>, <span class="hljs-string">&quot;审核成功&quot;</span>);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmSensitiveMapper wmSensitiveMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自管理的敏感词审核</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleSensitiveScan</span><span class="hljs-params">(String content, WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">//获取所有的敏感词</span><br>        List&lt;WmSensitive&gt; wmSensitives = wmSensitiveMapper.selectList(Wrappers.&lt;WmSensitive&gt;lambdaQuery().select(WmSensitive::getSensitives));<br>        List&lt;String&gt; sensitiveList = wmSensitives.stream().map(WmSensitive::getSensitives).collect(Collectors.toList());<br><br>        <span class="hljs-comment">//初始化敏感词库</span><br>        SensitiveWordUtil.initMap(sensitiveList);<br><br>        <span class="hljs-comment">//查看文章中是否包含敏感词</span><br>        Map&lt;String, Integer&gt; map = SensitiveWordUtil.matchWords(content);<br>        <span class="hljs-keyword">if</span>(map.size() &gt;<span class="hljs-number">0</span>)&#123;<br>            updateWmNews(wmNews,(<span class="hljs-type">short</span>) <span class="hljs-number">2</span>,<span class="hljs-string">&quot;当前文章中存在违规内容&quot;</span>+map);<br>            flag = <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IArticleClient articleClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmChannelMapper wmChannelMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmUserMapper wmUserMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存app端相关的文章数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ResponseResult <span class="hljs-title function_">saveAppArticle</span><span class="hljs-params">(WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-type">ArticleDto</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArticleDto</span>();<br>        <span class="hljs-comment">//属性的拷贝</span><br>        BeanUtils.copyProperties(wmNews, dto);<br>        <span class="hljs-comment">//文章的布局</span><br>        dto.setLayout(wmNews.getType());<br>        <span class="hljs-comment">//频道</span><br>        <span class="hljs-type">WmChannel</span> <span class="hljs-variable">wmChannel</span> <span class="hljs-operator">=</span> wmChannelMapper.selectById(wmNews.getChannelId());<br>        <span class="hljs-keyword">if</span> (wmChannel != <span class="hljs-literal">null</span>) &#123;<br>            dto.setChannelName(wmChannel.getName());<br>        &#125;<br><br>        <span class="hljs-comment">//作者</span><br>        dto.setAuthorId(wmNews.getUserId().longValue());<br>        <span class="hljs-type">WmUser</span> <span class="hljs-variable">wmUser</span> <span class="hljs-operator">=</span> wmUserMapper.selectById(wmNews.getUserId());<br>        <span class="hljs-keyword">if</span> (wmUser != <span class="hljs-literal">null</span>) &#123;<br>            dto.setAuthorName(wmUser.getName());<br>        &#125;<br><br>        <span class="hljs-comment">//设置文章id</span><br>        <span class="hljs-keyword">if</span> (wmNews.getArticleId() != <span class="hljs-literal">null</span>) &#123;<br>            dto.setId(wmNews.getArticleId());<br>        &#125;<br>        dto.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> articleClient.saveArticle(dto);<br>        <span class="hljs-keyword">return</span> responseResult;<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileStorageService fileStorageService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GreenImageScan greenImageScan;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Tess4jClient tess4jClient;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 审核图片</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> images</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleImageScan</span><span class="hljs-params">(List&lt;String&gt; images, WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> (images == <span class="hljs-literal">null</span> || images.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> flag;<br>        &#125;<br><br>        <span class="hljs-comment">//下载图片 minIO</span><br>        <span class="hljs-comment">//图片去重</span><br>        images = images.stream().distinct().collect(Collectors.toList());<br><br>        List&lt;<span class="hljs-type">byte</span>[]&gt; imageList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (String image : images) &#123;<br>                <span class="hljs-type">byte</span>[] bytes = fileStorageService.downLoadFile(image);<br><br>                <span class="hljs-comment">//图片识别文字审核---begin-----</span><br><br>                <span class="hljs-comment">//从byte[]转换为butteredImage</span><br>                <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>                <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">imageFile</span> <span class="hljs-operator">=</span> ImageIO.read(in);<br>                <span class="hljs-comment">//识别图片的文字</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> tess4jClient.doOCR(imageFile);<br><br>                <span class="hljs-comment">//审核是否包含自管理的敏感词</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">isSensitive</span> <span class="hljs-operator">=</span> handleSensitiveScan(result, wmNews);<br>                <span class="hljs-keyword">if</span>(!isSensitive)&#123;<br>                    <span class="hljs-keyword">return</span> isSensitive;<br>                &#125;<br><br>                <span class="hljs-comment">//图片识别文字审核---end-----</span><br><br><br>                imageList.add(bytes);<br><br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>        <span class="hljs-comment">//审核图片</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> greenImageScan.imageScan(imageList);<br>            <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//审核失败</span><br>                <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;suggestion&quot;</span>).equals(<span class="hljs-string">&quot;block&quot;</span>)) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">2</span>, <span class="hljs-string">&quot;当前文章中存在违规内容&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-comment">//不确定信息  需要人工审核</span><br>                <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;suggestion&quot;</span>).equals(<span class="hljs-string">&quot;review&quot;</span>)) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">3</span>, <span class="hljs-string">&quot;当前文章中存在不确定内容&quot;</span>);<br>                &#125;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GreenTextScan greenTextScan;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 审核纯文本内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleTextScan</span><span class="hljs-params">(String content, WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> ((wmNews.getTitle() + <span class="hljs-string">&quot;-&quot;</span> + content).length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> flag;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> greenTextScan.greeTextScan((wmNews.getTitle() + <span class="hljs-string">&quot;-&quot;</span> + content));<br>            <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//审核失败</span><br>                <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;suggestion&quot;</span>).equals(<span class="hljs-string">&quot;block&quot;</span>)) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">2</span>, <span class="hljs-string">&quot;当前文章中存在违规内容&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-comment">//不确定信息  需要人工审核</span><br>                <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;suggestion&quot;</span>).equals(<span class="hljs-string">&quot;review&quot;</span>)) &#123;<br>                    flag = <span class="hljs-literal">false</span>;<br>                    updateWmNews(wmNews, (<span class="hljs-type">short</span>) <span class="hljs-number">3</span>, <span class="hljs-string">&quot;当前文章中存在不确定内容&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> flag;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改文章内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> reason</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateWmNews</span><span class="hljs-params">(WmNews wmNews, <span class="hljs-type">short</span> status, String reason)</span> &#123;<br>        wmNews.setStatus(status);<br>        wmNews.setReason(reason);<br>        wmNewsMapper.updateById(wmNews);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1。从自媒体文章的内容中提取文本和图片</span><br><span class="hljs-comment">     * 2.提取文章的封面图片</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> wmNews</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title function_">handleTextAndImages</span><span class="hljs-params">(WmNews wmNews)</span> &#123;<br><br>        <span class="hljs-comment">//存储纯文本内容</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        List&lt;String&gt; images = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//1。从自媒体文章的内容中提取文本和图片</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(wmNews.getContent())) &#123;<br>            List&lt;Map&gt; maps = JSONArray.parseArray(wmNews.getContent(), Map.class);<br>            <span class="hljs-keyword">for</span> (Map map : maps) &#123;<br>                <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;type&quot;</span>).equals(<span class="hljs-string">&quot;text&quot;</span>)) &#123;<br>                    stringBuilder.append(map.get(<span class="hljs-string">&quot;value&quot;</span>));<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;type&quot;</span>).equals(<span class="hljs-string">&quot;image&quot;</span>)) &#123;<br>                    images.add((String) map.get(<span class="hljs-string">&quot;value&quot;</span>));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//2.提取文章的封面图片</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(wmNews.getImages())) &#123;<br>            String[] split = wmNews.getImages().split(<span class="hljs-string">&quot;,&quot;</span>);<br>            images.addAll(Arrays.asList(split));<br>        &#125;<br><br>        Map&lt;String, Object&gt; resultMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        resultMap.put(<span class="hljs-string">&quot;content&quot;</span>, stringBuilder.toString());<br>        resultMap.put(<span class="hljs-string">&quot;images&quot;</span>, images);<br>        <span class="hljs-keyword">return</span> resultMap;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-文章详情-静态文件生成"><a href="#9-文章详情-静态文件生成" class="headerlink" title="9)文章详情-静态文件生成"></a>9)文章详情-静态文件生成</h3><h4 id="9-1-思路分析"><a href="#9-1-思路分析" class="headerlink" title="9.1)思路分析"></a><strong>9.1)思路分析</strong></h4><p>文章端创建app相关文章时，生成文章详情静态页上传到MinIO中</p><p><img src="/../images/image-20210709110852966.png" alt="image-20210709110852966"></p><h4 id="9-2-实现步骤"><a href="#9-2-实现步骤" class="headerlink" title="9.2)实现步骤"></a>9.2)实现步骤</h4><p>1.新建ArticleFreemarkerService创建静态文件并上传到minIO中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service;<br><br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArticleFreemarkerService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成静态文件上传到minIO中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apArticle</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildArticleToMinIO</span><span class="hljs-params">(ApArticle apArticle,String content)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.heima.article.mapper.ApArticleContentMapper;<br><span class="hljs-keyword">import</span> com.heima.article.service.ApArticleService;<br><span class="hljs-keyword">import</span> com.heima.article.service.ArticleFreemarkerService;<br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> freemarker.template.Configuration;<br><span class="hljs-keyword">import</span> freemarker.template.Template;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleFreemarkerServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArticleFreemarkerService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleContentMapper apArticleContentMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileStorageService fileStorageService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleService apArticleService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成静态文件上传到minIO中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apArticle</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildArticleToMinIO</span><span class="hljs-params">(ApArticle apArticle, String content)</span> &#123;<br>        <span class="hljs-comment">//已知文章的id</span><br>        <span class="hljs-comment">//4.1 获取文章内容</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(content))&#123;<br>            <span class="hljs-comment">//4.2 文章内容通过freemarker生成html文件</span><br>            <span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">StringWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>            <span class="hljs-keyword">try</span> &#123;<br>                template = configuration.getTemplate(<span class="hljs-string">&quot;article.ftl&quot;</span>);<br>                <span class="hljs-comment">//数据模型</span><br>                Map&lt;String,Object&gt; contentDataModel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>                contentDataModel.put(<span class="hljs-string">&quot;content&quot;</span>, JSONArray.parseArray(content));<br>                <span class="hljs-comment">//合成</span><br>                template.process(contentDataModel,out);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-comment">//4.3 把html文件上传到minio中</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(out.toString().getBytes());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> fileStorageService.uploadHtmlFile(<span class="hljs-string">&quot;&quot;</span>, apArticle.getId() + <span class="hljs-string">&quot;.html&quot;</span>, in);<br><br><br>            <span class="hljs-comment">//4.4 修改ap_article表，保存static_url字段</span><br>            apArticleService.update(Wrappers.&lt;ApArticle&gt;lambdaUpdate().eq(ApArticle::getId,apArticle.getId())<br>                    .set(ApArticle::getStaticUrl,path));<br><br><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.在ApArticleService的saveArticle实现方法中添加调用生成文件的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存app端相关文章</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">saveArticle</span><span class="hljs-params">(ArticleDto dto)</span> &#123;<br><br>    <span class="hljs-comment">//        try &#123;</span><br>    <span class="hljs-comment">//            Thread.sleep(3000);</span><br>    <span class="hljs-comment">//        &#125; catch (InterruptedException e) &#123;</span><br>    <span class="hljs-comment">//            e.printStackTrace();</span><br>    <span class="hljs-comment">//        &#125;</span><br>    <span class="hljs-comment">//1.检查参数</span><br>    <span class="hljs-keyword">if</span>(dto == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>    &#125;<br><br>    <span class="hljs-type">ApArticle</span> <span class="hljs-variable">apArticle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApArticle</span>();<br>    BeanUtils.copyProperties(dto,apArticle);<br><br>    <span class="hljs-comment">//2.判断是否存在id</span><br>    <span class="hljs-keyword">if</span>(dto.getId() == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//2.1 不存在id  保存  文章  文章配置  文章内容</span><br><br>        <span class="hljs-comment">//保存文章</span><br>        save(apArticle);<br><br>        <span class="hljs-comment">//保存配置</span><br>        <span class="hljs-type">ApArticleConfig</span> <span class="hljs-variable">apArticleConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApArticleConfig</span>(apArticle.getId());<br>        apArticleConfigMapper.insert(apArticleConfig);<br><br>        <span class="hljs-comment">//保存 文章内容</span><br>        <span class="hljs-type">ApArticleContent</span> <span class="hljs-variable">apArticleContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApArticleContent</span>();<br>        apArticleContent.setArticleId(apArticle.getId());<br>        apArticleContent.setContent(dto.getContent());<br>        apArticleContentMapper.insert(apArticleContent);<br><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//2.2 存在id   修改  文章  文章内容</span><br><br>        <span class="hljs-comment">//修改  文章</span><br>        updateById(apArticle);<br><br>        <span class="hljs-comment">//修改文章内容</span><br>        <span class="hljs-type">ApArticleContent</span> <span class="hljs-variable">apArticleContent</span> <span class="hljs-operator">=</span> apArticleContentMapper.selectOne(Wrappers.&lt;ApArticleContent&gt;lambdaQuery().eq(ApArticleContent::getArticleId, dto.getId()));<br>        apArticleContent.setContent(dto.getContent());<br>        apArticleContentMapper.updateById(apArticleContent);<br>    &#125;<br><br>    <span class="hljs-comment">//异步调用 生成静态文件上传到minio中</span><br>    articleFreemarkerService.buildArticleToMinIO(apArticle,dto.getContent());<br><br><br>    <span class="hljs-comment">//3.结果返回  文章的id</span><br>    <span class="hljs-keyword">return</span> ResponseResult.okResult(apArticle.getId());<br>&#125;<br></code></pre></td></tr></table></figure><p>3.文章微服务开启异步调用</p><p><img src="/../images/image-20210709111445360.png" alt="image-20210709111445360"></p><h1 id="5-延迟任务精准发布文章"><a href="#5-延迟任务精准发布文章" class="headerlink" title="5 延迟任务精准发布文章"></a>5 延迟任务精准发布文章</h1><h3 id="1-文章定时发布"><a href="#1-文章定时发布" class="headerlink" title="1)文章定时发布"></a>1)文章定时发布</h3><h3 id="2-延迟任务概述"><a href="#2-延迟任务概述" class="headerlink" title="2)延迟任务概述"></a>2)延迟任务概述</h3><h4 id="2-1-什么是延迟任务"><a href="#2-1-什么是延迟任务" class="headerlink" title="2.1)什么是延迟任务"></a>2.1)什么是延迟任务</h4><ul><li>定时任务：有固定周期的，有明确的触发时间</li><li>延迟队列：没有固定的开始时间，它常常是由一个事件触发的，而在这个事件触发之后的一段时间内触发另一个事件，任务可以立即执行，也可以延迟</li></ul><p><img src="/../images/image-20210513145942962.png" alt="image-20210513145942962"></p><p>应用场景：</p><p>场景一：订单下单之后30分钟后，如果用户没有付钱，则系统自动取消订单；如果期间下单成功，任务取消</p><p>场景二：接口对接出现网络问题，1分钟后重试，如果失败，2分钟重试，直到出现阈值终止</p><h4 id="2-2-技术对比"><a href="#2-2-技术对比" class="headerlink" title="2.2)技术对比"></a>2.2)技术对比</h4><h5 id="2-2-1-DelayQueue"><a href="#2-2-1-DelayQueue" class="headerlink" title="2.2.1)DelayQueue"></a>2.2.1)DelayQueue</h5><p>JDK自带DelayQueue 是一个支持延时获取元素的阻塞队列， 内部采用优先队列 PriorityQueue 存储元素，同时元素必须实现 Delayed 接口；在创建元素时可以指定多久才可以从队列中获取当前元素，只有在延迟期满时才能从队列中提取元素</p><p><img src="/../images/image-20210513150058814.png" alt="image-20210513150058814"></p><p>DelayQueue属于排序队列，它的特殊之处在于队列的元素必须实现Delayed接口，该接口需要实现compareTo和getDelay方法</p><p>getDelay方法：获取元素在队列中的剩余时间，只有当剩余时间为0时元素才可以出队列。</p><p>compareTo方法：用于排序，确定元素出队列的顺序。</p><p><strong>实现：</strong></p><p>1：在测试包jdk下创建延迟任务元素对象DelayedTask，实现compareTo和getDelay方法，</p><p>2：在main方法中创建DelayQueue并向延迟队列中添加三个延迟任务，</p><p>3：循环的从延迟队列中拉取任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayedTask</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Delayed</span>&#123;<br>    <br>    <span class="hljs-comment">// 任务的执行时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">executeTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DelayedTask</span><span class="hljs-params">(<span class="hljs-type">int</span> delay)</span>&#123;<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        calendar.add(Calendar.SECOND,delay);<br>        <span class="hljs-built_in">this</span>.executeTime = (<span class="hljs-type">int</span>)(calendar.getTimeInMillis() /<span class="hljs-number">1000</span> );<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 元素在队列中的剩余时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDelay</span><span class="hljs-params">(TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        <span class="hljs-keyword">return</span> executeTime - (calendar.getTimeInMillis()/<span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 元素排序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Delayed o)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDelay(TimeUnit.NANOSECONDS) - o.getDelay(TimeUnit.NANOSECONDS);<br>        <span class="hljs-keyword">return</span> val == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : ( val &lt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span>: <span class="hljs-number">1</span> );<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        DelayQueue&lt;DelayedTask&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayQueue</span>&lt;DelayedTask&gt;();<br>        <br>        queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedTask</span>(<span class="hljs-number">5</span>));<br>        queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedTask</span>(<span class="hljs-number">10</span>));<br>        queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedTask</span>(<span class="hljs-number">15</span>));<br><br>        System.out.println(System.currentTimeMillis()/<span class="hljs-number">1000</span>+<span class="hljs-string">&quot; start consume &quot;</span>);<br>        <span class="hljs-keyword">while</span>(queue.size() != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">DelayedTask</span> <span class="hljs-variable">delayedTask</span> <span class="hljs-operator">=</span> queue.poll();<br>            <span class="hljs-keyword">if</span>(delayedTask !=<span class="hljs-literal">null</span> )&#123;<br>                System.out.println(System.currentTimeMillis()/<span class="hljs-number">1000</span>+<span class="hljs-string">&quot; cosume task&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//每隔一秒消费一次</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;     <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DelayQueue实现完成之后思考一个问题：</p><p>使用线程池或者原生DelayQueue程序挂掉之后，任务都是放在内存，需要考虑未处理消息的丢失带来的影响，如何保证数据不丢失，需要持久化（磁盘）</p><h5 id="2-2-2-RabbitMQ实现延迟任务"><a href="#2-2-2-RabbitMQ实现延迟任务" class="headerlink" title="2.2.2)RabbitMQ实现延迟任务"></a>2.2.2)RabbitMQ实现延迟任务</h5><ul><li><p>TTL：Time To Live (消息存活时间)</p></li><li><p>死信队列：Dead Letter Exchange(死信交换机)，当消息成为Dead message后，可以重新发送另一个交换机（死信交换机）</p></li></ul><p><img src="/../images/image-20210513150319742.png" alt="image-20210513150319742"></p><h5 id="2-2-3-redis实现"><a href="#2-2-3-redis实现" class="headerlink" title="2.2.3)redis实现"></a>2.2.3)redis实现</h5><p>zset数据类型的去重有序（分数排序）特点进行延迟。例如：时间戳作为score进行排序</p><p><img src="/../images/image-20210513150352211.png" alt="image-20210513150352211"></p><h3 id="3-redis实现延迟任务"><a href="#3-redis实现延迟任务" class="headerlink" title="3)redis实现延迟任务"></a>3)redis实现延迟任务</h3><p>实现思路</p><p><img src="/../images/image-20210513150440342.png" alt="image-20210513150440342"></p><p>问题思路</p><p>1.为什么任务需要存储在数据库中？</p><p>延迟任务是一个通用的服务，任何需要延迟得任务都可以调用该服务，需要考虑数据持久化的问题，存储数据库中是一种数据安全的考虑。</p><p>2.为什么redis中使用两种数据类型，list和zset？</p><p>效率问题，算法的时间复杂度</p><p>3.在添加zset数据的时候，为什么不需要预加载？</p><p>任务模块是一个通用的模块，项目中任何需要延迟队列的地方，都可以调用这个接口，要考虑到数据量的问题，如果数据量特别大，为了防止阻塞，只需要把未来几分钟要执行的数据存入缓存即可。</p><h3 id="4-延迟任务服务实现"><a href="#4-延迟任务服务实现" class="headerlink" title="4)延迟任务服务实现"></a>4)延迟任务服务实现</h3><h4 id="4-1-搭建heima-leadnews-schedule模块"><a href="#4-1-搭建heima-leadnews-schedule模块" class="headerlink" title="4.1)搭建heima-leadnews-schedule模块"></a>4.1)搭建heima-leadnews-schedule模块</h4><p>leadnews-schedule是一个通用的服务，单独创建模块来管理任何类型的延迟任务</p><p>①：导入资料文件夹下的heima-leadnews-schedule模块到heima-leadnews-service下，如下图所示：</p><p><img src="/../images/image-20210513151649297.png" alt="image-20210513151649297"></p><p>②：添加bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">51701</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">leadnews-schedule</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br></code></pre></td></tr></table></figure><p>③：在nacos中添加对应配置，并添加数据库及mybatis-plus的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/leadnews_schedule?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-comment"># 设置Mapper接口所对应的XML文件位置，如果你在Mapper接口中有自定义方法，需要进行该配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/*.xml</span><br>  <span class="hljs-comment"># 设置别名包扫描路径，通过该属性可以给包中的类注册别名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.heima.model.schedule.pojos</span><br></code></pre></td></tr></table></figure><h4 id="4-2-数据库准备"><a href="#4-2-数据库准备" class="headerlink" title="4.2)数据库准备"></a>4.2)数据库准备</h4><p>导入资料中leadnews_schedule数据库</p><p>taskinfo 任务表</p><p><img src="/../images/image-20210513151812858.png" alt="image-20210513151812858"></p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.schedule.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;taskinfo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Taskinfo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(type = IdType.ID_WORKER)</span><br>    <span class="hljs-keyword">private</span> Long taskId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;execute_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date executeTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;parameters&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] parameters;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 优先级</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;priority&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer priority;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;task_type&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer taskType;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>taskinfo_logs 任务日志表</p><p><img src="/../images/image-20210513151835752.png" alt="image-20210513151835752"></p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.schedule.pojos;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;taskinfo_logs&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskinfoLogs</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(type = IdType.ID_WORKER)</span><br>    <span class="hljs-keyword">private</span> Long taskId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;execute_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date executeTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;parameters&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] parameters;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 优先级</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;priority&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer priority;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;task_type&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer taskType;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 版本号,用乐观锁</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态 0=int 1=EXECUTED 2=CANCELLED</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(&quot;status&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer status;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>乐观锁支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * mybatis-plus乐观锁支持</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">optimisticLockerInterceptor</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>    interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInnerInterceptor</span>());<br>    <span class="hljs-keyword">return</span> interceptor;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-安装redis"><a href="#4-3-安装redis" class="headerlink" title="4.3)安装redis"></a>4.3)安装redis</h4><p>①拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis<br></code></pre></td></tr></table></figure><p>② 创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name redis --restart=always -p 6379:6379 redis --requirepass &quot;leadnews&quot;<br></code></pre></td></tr></table></figure><p>③链接测试</p><p> 打开资料中的Redis Desktop Manager，输入host、port、password链接测试</p><p><img src="/../images/image-20210513152138388.png" alt="image-20210513152138388"></p><p>能链接成功，即可</p><h4 id="4-4-项目集成redis"><a href="#4-4-项目集成redis" class="headerlink" title="4.4)项目集成redis"></a>4.4)项目集成redis</h4><p>① 在项目导入redis相关依赖，已经完成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- redis依赖commons-pool 这个依赖一定要添加 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 在heima-leadnews-schedule中集成redis,添加以下nacos配置，链接上redis</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">leadnews</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>③ 拷贝资料文件夹下的类：CacheService到heima-leadnews-common模块下，并添加自动配置</p><p><img src="/../images/image-20210514181214681.png" alt="image-20210514181214681"></p><p>④：测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.schedule.test;<br><br><br><span class="hljs-keyword">import</span> com.heima.common.redis.CacheService;<br><span class="hljs-keyword">import</span> com.heima.schedule.ScheduleApplication;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><br><br><span class="hljs-meta">@SpringBootTest(classes = ScheduleApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CacheService cacheService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-comment">//在list的左边添加元素</span><br><span class="hljs-comment">//        cacheService.lLeftPush(&quot;list_001&quot;,&quot;hello,redis&quot;);</span><br><br>        <span class="hljs-comment">//在list的右边获取元素，并删除</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">list_001</span> <span class="hljs-operator">=</span> cacheService.lRightPop(<span class="hljs-string">&quot;list_001&quot;</span>);<br>        System.out.println(list_001);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testZset</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//添加数据到zset中  分值</span><br>        <span class="hljs-comment">/*cacheService.zAdd(&quot;zset_key_001&quot;,&quot;hello zset 001&quot;,1000);</span><br><span class="hljs-comment">        cacheService.zAdd(&quot;zset_key_001&quot;,&quot;hello zset 002&quot;,8888);</span><br><span class="hljs-comment">        cacheService.zAdd(&quot;zset_key_001&quot;,&quot;hello zset 003&quot;,7777);</span><br><span class="hljs-comment">        cacheService.zAdd(&quot;zset_key_001&quot;,&quot;hello zset 004&quot;,999999);*/</span><br><br>        <span class="hljs-comment">//按照分值获取数据</span><br>        Set&lt;String&gt; zset_key_001 = cacheService.zRangeByScore(<span class="hljs-string">&quot;zset_key_001&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8888</span>);<br>        System.out.println(zset_key_001);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-添加任务"><a href="#4-5-添加任务" class="headerlink" title="4.5)添加任务"></a>4.5)添加任务</h4><p>①：拷贝mybatis-plus生成的文件，mapper</p><p>②：创建task类，用于接收添加任务的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.schedule.dtos;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 任务id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long taskId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer taskType;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 优先级</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer priority;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> executeTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * task参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] parameters;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>③：创建TaskService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.schedule.service;<br><br><span class="hljs-keyword">import</span> com.heima.model.schedule.dtos.Task;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对外访问接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TaskService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task   任务对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>       任务id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">addTask</span><span class="hljs-params">(Task task)</span> ;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.schedule.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.common.constants.ScheduleConstants;<br><span class="hljs-keyword">import</span> com.heima.common.redis.CacheService;<br><span class="hljs-keyword">import</span> com.heima.model.schedule.dtos.Task;<br><span class="hljs-keyword">import</span> com.heima.model.schedule.pojos.Taskinfo;<br><span class="hljs-keyword">import</span> com.heima.model.schedule.pojos.TaskinfoLogs;<br><span class="hljs-keyword">import</span> com.heima.schedule.mapper.TaskinfoLogsMapper;<br><span class="hljs-keyword">import</span> com.heima.schedule.mapper.TaskinfoMapper;<br><span class="hljs-keyword">import</span> com.heima.schedule.service.TaskService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TaskService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加延迟任务</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">addTask</span><span class="hljs-params">(Task task)</span> &#123;<br>        <span class="hljs-comment">//1.添加任务到数据库中</span><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> addTaskToDb(task);<br><br>        <span class="hljs-keyword">if</span> (success) &#123;<br>            <span class="hljs-comment">//2.添加任务到redis</span><br>            addTaskToCache(task);<br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> task.getTaskId();<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CacheService cacheService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把任务添加到redis中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTaskToCache</span><span class="hljs-params">(Task task)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> task.getTaskType() + <span class="hljs-string">&quot;_&quot;</span> + task.getPriority();<br><br>        <span class="hljs-comment">//获取5分钟之后的时间  毫秒值</span><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        calendar.add(Calendar.MINUTE, <span class="hljs-number">5</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nextScheduleTime</span> <span class="hljs-operator">=</span> calendar.getTimeInMillis();<br><br>        <span class="hljs-comment">//2.1 如果任务的执行时间小于等于当前时间，存入list</span><br>        <span class="hljs-keyword">if</span> (task.getExecuteTime() &lt;= System.currentTimeMillis()) &#123;<br>            cacheService.lLeftPush(ScheduleConstants.TOPIC + key, JSON.toJSONString(task));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (task.getExecuteTime() &lt;= nextScheduleTime) &#123;<br>            <span class="hljs-comment">//2.2 如果任务的执行时间大于当前时间 &amp;&amp; 小于等于预设时间（未来5分钟） 存入zset中</span><br>            cacheService.zAdd(ScheduleConstants.FUTURE + key, JSON.toJSONString(task), task.getExecuteTime());<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TaskinfoMapper taskinfoMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TaskinfoLogsMapper taskinfoLogsMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加任务到数据库中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addTaskToDb</span><span class="hljs-params">(Task task)</span> &#123;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//保存任务表</span><br>            <span class="hljs-type">Taskinfo</span> <span class="hljs-variable">taskinfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Taskinfo</span>();<br>            BeanUtils.copyProperties(task, taskinfo);<br>            taskinfo.setExecuteTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(task.getExecuteTime()));<br>            taskinfoMapper.insert(taskinfo);<br><br>            <span class="hljs-comment">//设置taskID</span><br>            task.setTaskId(taskinfo.getTaskId());<br><br>            <span class="hljs-comment">//保存任务日志数据</span><br>            <span class="hljs-type">TaskinfoLogs</span> <span class="hljs-variable">taskinfoLogs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskinfoLogs</span>();<br>            BeanUtils.copyProperties(taskinfo, taskinfoLogs);<br>            taskinfoLogs.setVersion(<span class="hljs-number">1</span>);<br>            taskinfoLogs.setStatus(ScheduleConstants.SCHEDULED);<br>            taskinfoLogsMapper.insert(taskinfoLogs);<br><br>            flag = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ScheduleConstants常量类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.constants;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleConstants</span> &#123;<br><br>    <span class="hljs-comment">//task状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> SCHEDULED=<span class="hljs-number">0</span>;   <span class="hljs-comment">//初始化状态</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> EXECUTED=<span class="hljs-number">1</span>;       <span class="hljs-comment">//已执行状态</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> CANCELLED=<span class="hljs-number">2</span>;   <span class="hljs-comment">//已取消状态</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String FUTURE=<span class="hljs-string">&quot;future_&quot;</span>;   <span class="hljs-comment">//未来数据key前缀</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String TOPIC=<span class="hljs-string">&quot;topic_&quot;</span>;     <span class="hljs-comment">//当前数据key前缀</span><br>&#125;<br></code></pre></td></tr></table></figure><p>④：测试</p><h4 id="4-6-取消任务"><a href="#4-6-取消任务" class="headerlink" title="4.6)取消任务"></a>4.6)取消任务</h4><p>在TaskService中添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> taskId        任务id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>              取消结果</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancelTask</span><span class="hljs-params">(<span class="hljs-type">long</span> taskId)</span>;<br><br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> taskId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancelTask</span><span class="hljs-params">(<span class="hljs-type">long</span> taskId)</span> &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">//删除任务，更新日志</span><br>    <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> updateDb(taskId,ScheduleConstants.EXECUTED);<br><br>    <span class="hljs-comment">//删除redis的数据</span><br>    <span class="hljs-keyword">if</span>(task != <span class="hljs-literal">null</span>)&#123;<br>        removeTaskFromCache(task);<br>        flag = <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除redis中的任务数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeTaskFromCache</span><span class="hljs-params">(Task task)</span> &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> task.getTaskType()+<span class="hljs-string">&quot;_&quot;</span>+task.getPriority();<br><br>    <span class="hljs-keyword">if</span>(task.getExecuteTime()&lt;=System.currentTimeMillis())&#123;<br>        cacheService.lRemove(ScheduleConstants.TOPIC+key,<span class="hljs-number">0</span>,JSON.toJSONString(task));<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        cacheService.zRemove(ScheduleConstants.FUTURE+key, JSON.toJSONString(task));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除任务，更新任务日志状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> taskId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> Task <span class="hljs-title function_">updateDb</span><span class="hljs-params">(<span class="hljs-type">long</span> taskId, <span class="hljs-type">int</span> status)</span> &#123;<br>    <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//删除任务</span><br>        taskinfoMapper.deleteById(taskId);<br><br>        <span class="hljs-type">TaskinfoLogs</span> <span class="hljs-variable">taskinfoLogs</span> <span class="hljs-operator">=</span> taskinfoLogsMapper.selectById(taskId);<br>        taskinfoLogs.setStatus(status);<br>        taskinfoLogsMapper.updateById(taskinfoLogs);<br><br>        task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>();<br>        BeanUtils.copyProperties(taskinfoLogs,task);<br>        task.setExecuteTime(taskinfoLogs.getExecuteTime().getTime());<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        log.error(<span class="hljs-string">&quot;task cancel exception taskid=&#123;&#125;&quot;</span>,taskId);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> task;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><h4 id="4-7-消费任务"><a href="#4-7-消费任务" class="headerlink" title="4.7)消费任务"></a>4.7)消费任务</h4><p>在TaskService中添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按照类型和优先级来拉取任务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> priority</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Task <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">int</span> type,<span class="hljs-type">int</span> priority)</span>;<br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按照类型和优先级拉取任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Task <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">int</span> type,<span class="hljs-type">int</span> priority)</span> &#123;<br>    <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> type+<span class="hljs-string">&quot;_&quot;</span>+priority;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">task_json</span> <span class="hljs-operator">=</span> cacheService.lRightPop(ScheduleConstants.TOPIC + key);<br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(task_json))&#123;<br>            task = JSON.parseObject(task_json, Task.class);<br>            <span class="hljs-comment">//更新数据库信息</span><br>            updateDb(task.getTaskId(),ScheduleConstants.EXECUTED);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>        log.error(<span class="hljs-string">&quot;poll task exception&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> task;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-8-未来数据定时刷新"><a href="#4-8-未来数据定时刷新" class="headerlink" title="4.8)未来数据定时刷新"></a>4.8)未来数据定时刷新</h4><h5 id="4-8-1-reids-key值匹配"><a href="#4-8-1-reids-key值匹配" class="headerlink" title="4.8.1)reids key值匹配"></a>4.8.1)reids key值匹配</h5><p>方案1：keys 模糊匹配</p><p>keys的模糊匹配功能很方便也很强大，但是在生产环境需要慎用！开发中使用keys的模糊匹配却发现redis的CPU使用率极高，所以公司的redis生产环境将keys命令禁用了！redis是单线程，会被堵塞</p><p><img src="/../images/image-20210515162329679.png" alt="image-20210515162329679"></p><p>方案2：scan </p><p>SCAN 命令是一个基于游标的迭代器，SCAN命令每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为SCAN命令的游标参数， 以此来延续之前的迭代过程。</p><p><img src="/../images/image-20210515162419548.png" alt="image-20210515162419548"></p><p>代码案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testKeys</span><span class="hljs-params">()</span>&#123;<br>    Set&lt;String&gt; keys = cacheService.keys(<span class="hljs-string">&quot;future_*&quot;</span>);<br>    System.out.println(keys);<br><br>    Set&lt;String&gt; scan = cacheService.scan(<span class="hljs-string">&quot;future_*&quot;</span>);<br>    System.out.println(scan);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-8-2-reids管道"><a href="#4-8-2-reids管道" class="headerlink" title="4.8.2)reids管道"></a>4.8.2)reids管道</h5><p>普通redis客户端和服务器交互模式</p><p><img src="/../images/image-20210515162537224.png" alt="image-20210515162537224"></p><p>Pipeline请求模型</p><p><img src="/../images/image-20210515162604410.png" alt="image-20210515162604410"></p><p>官方测试结果数据对比</p><p><img src="/../images/image-20210515162621928.png" alt="image-20210515162621928"></p><p>测试案例对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//耗时6151</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPiple1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span>System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10000</span> ; i++) &#123;<br>        <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>();<br>        task.setTaskType(<span class="hljs-number">1001</span>);<br>        task.setPriority(<span class="hljs-number">1</span>);<br>        task.setExecuteTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime());<br>        cacheService.lLeftPush(<span class="hljs-string">&quot;1001_1&quot;</span>, JSON.toJSONString(task));<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;耗时&quot;</span>+(System.currentTimeMillis()- start));<br>&#125;<br><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPiple2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span>  <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-comment">//使用管道技术</span><br>    List&lt;Object&gt; objectList = cacheService.getstringRedisTemplate().executePipelined(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisCallback</span>&lt;Object&gt;() &#123;<br>        <span class="hljs-meta">@Nullable</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doInRedis</span><span class="hljs-params">(RedisConnection redisConnection)</span> <span class="hljs-keyword">throws</span> DataAccessException &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">10000</span> ; i++) &#123;<br>                <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>();<br>                task.setTaskType(<span class="hljs-number">1001</span>);<br>                task.setPriority(<span class="hljs-number">1</span>);<br>                task.setExecuteTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().getTime());<br>                redisConnection.lPush(<span class="hljs-string">&quot;1001_1&quot;</span>.getBytes(), JSON.toJSONString(task).getBytes());<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;);<br>    System.out.println(<span class="hljs-string">&quot;使用管道技术执行10000次自增操作共耗时:&quot;</span>+(System.currentTimeMillis()-start)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-8-3-未来数据定时刷新-功能完成"><a href="#4-8-3-未来数据定时刷新-功能完成" class="headerlink" title="4.8.3)未来数据定时刷新-功能完成"></a>4.8.3)未来数据定时刷新-功能完成</h5><p>在TaskService中添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0 */1 * * * ?&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(System.currentTimeMillis() / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot;执行了定时任务&quot;</span>);<br><br>    <span class="hljs-comment">// 获取所有未来数据集合的key值</span><br>    Set&lt;String&gt; futureKeys = cacheService.scan(ScheduleConstants.FUTURE + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">// future_*</span><br>    <span class="hljs-keyword">for</span> (String futureKey : futureKeys) &#123; <span class="hljs-comment">// future_250_250</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">topicKey</span> <span class="hljs-operator">=</span> ScheduleConstants.TOPIC + futureKey.split(ScheduleConstants.FUTURE)[<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//获取该组key下当前需要消费的任务数据</span><br>        Set&lt;String&gt; tasks = cacheService.zRangeByScore(futureKey, <span class="hljs-number">0</span>, System.currentTimeMillis());<br>        <span class="hljs-keyword">if</span> (!tasks.isEmpty()) &#123;<br>            <span class="hljs-comment">//将这些任务数据添加到消费者队列中</span><br>            cacheService.refreshWithPipeline(futureKey, topicKey, tasks);<br>            System.out.println(<span class="hljs-string">&quot;成功的将&quot;</span> + futureKey + <span class="hljs-string">&quot;下的当前需要执行的任务数据刷新到&quot;</span> + topicKey + <span class="hljs-string">&quot;下&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在引导类中添加开启任务调度注解：<code>@EnableScheduling</code></p><h4 id="4-9-分布式锁解决集群下的方法抢占执行"><a href="#4-9-分布式锁解决集群下的方法抢占执行" class="headerlink" title="4.9)分布式锁解决集群下的方法抢占执行"></a>4.9)分布式锁解决集群下的方法抢占执行</h4><h5 id="4-9-1-问题描述"><a href="#4-9-1-问题描述" class="headerlink" title="4.9.1)问题描述"></a>4.9.1)问题描述</h5><p>启动两台heima-leadnews-schedule服务，每台服务都会去执行refresh定时任务方法</p><p><img src="/../images/image-20210516112243712.png" alt="image-20210516112243712"></p><h5 id="4-9-2-分布式锁"><a href="#4-9-2-分布式锁" class="headerlink" title="4.9.2)分布式锁"></a>4.9.2)分布式锁</h5><p>分布式锁：控制分布式系统有序的去对共享资源进行操作，通过互斥来保证数据的一致性。</p><p>解决方案：</p><p><img src="/../images/image-20210516112457413.png" alt="image-20210516112457413"></p><h5 id="4-9-3-redis分布式锁"><a href="#4-9-3-redis分布式锁" class="headerlink" title="4.9.3)redis分布式锁"></a>4.9.3)redis分布式锁</h5><p>sexnx （SET if Not eXists） 命令在指定的 key 不存在时，为 key 设置指定的值。</p><p><img src="/../images/image-20210516112612399.png" alt="image-20210516112612399"></p><p>这种加锁的思路是，如果 key 不存在则为 key 设置 value，如果 key 已存在则 SETNX 命令不做任何操作</p><ul><li>客户端A请求服务器设置key的值，如果设置成功就表示加锁成功</li><li>客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败</li><li>客户端A执行代码完成，删除锁</li><li>客户端B在等待一段时间后再去请求设置key的值，设置成功</li><li>客户端B执行代码完成，删除锁</li></ul><h5 id="4-9-4-在工具类CacheService中添加方法"><a href="#4-9-4-在工具类CacheService中添加方法" class="headerlink" title="4.9.4)在工具类CacheService中添加方法"></a>4.9.4)在工具类CacheService中添加方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 加锁</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> expire</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String name, <span class="hljs-type">long</span> expire)</span> &#123;<br>    name = name + <span class="hljs-string">&quot;_lock&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-type">RedisConnectionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> stringRedisTemplate.getConnectionFactory();<br>    <span class="hljs-type">RedisConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> factory.getConnection();<br>    <span class="hljs-keyword">try</span> &#123;<br><br>        <span class="hljs-comment">//参考redis命令：</span><br>        <span class="hljs-comment">//set key value [EX seconds] [PX milliseconds] [NX|XX]</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> conn.set(<br>                name.getBytes(),<br>                token.getBytes(),<br>                Expiration.from(expire, TimeUnit.MILLISECONDS),<br>                RedisStringCommands.SetOption.SET_IF_ABSENT <span class="hljs-comment">//NX</span><br>        );<br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span> &amp;&amp; result)<br>            <span class="hljs-keyword">return</span> token;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        RedisConnectionUtils.releaseConnection(conn, factory,<span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改未来数据定时刷新的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 未来数据定时刷新</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Scheduled(cron = &quot;0 */1 * * * ?&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> cacheService.tryLock(<span class="hljs-string">&quot;FUTURE_TASK_SYNC&quot;</span>, <span class="hljs-number">1000</span> * <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(token))&#123;<br>        log.info(<span class="hljs-string">&quot;未来数据定时刷新---定时任务&quot;</span>);<br><br>        <span class="hljs-comment">//获取所有未来数据的集合key</span><br>        Set&lt;String&gt; futureKeys = cacheService.scan(ScheduleConstants.FUTURE + <span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String futureKey : futureKeys) &#123;<span class="hljs-comment">//future_100_50</span><br><br>            <span class="hljs-comment">//获取当前数据的key  topic</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">topicKey</span> <span class="hljs-operator">=</span> ScheduleConstants.TOPIC+futureKey.split(ScheduleConstants.FUTURE)[<span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">//按照key和分值查询符合条件的数据</span><br>            Set&lt;String&gt; tasks = cacheService.zRangeByScore(futureKey, <span class="hljs-number">0</span>, System.currentTimeMillis());<br><br>            <span class="hljs-comment">//同步数据</span><br>            <span class="hljs-keyword">if</span>(!tasks.isEmpty())&#123;<br>                cacheService.refreshWithPipeline(futureKey,topicKey,tasks);<br>                log.info(<span class="hljs-string">&quot;成功的将&quot;</span>+futureKey+<span class="hljs-string">&quot;刷新到了&quot;</span>+topicKey);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-10-数据库同步到redis"><a href="#4-10-数据库同步到redis" class="headerlink" title="4.10)数据库同步到redis"></a>4.10)数据库同步到redis</h4><p><img src="/../images/image-20210721013255332.png" alt="image-20210721013255332"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0 */5 * * * ?&quot;)</span><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reloadData</span><span class="hljs-params">()</span> &#123;<br>    clearCache();<br>    log.info(<span class="hljs-string">&quot;数据库数据同步到缓存&quot;</span>);<br>    <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>    calendar.add(Calendar.MINUTE, <span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">//查看小于未来5分钟的所有任务</span><br>    List&lt;Taskinfo&gt; allTasks = taskinfoMapper.selectList(Wrappers.&lt;Taskinfo&gt;lambdaQuery().lt(Taskinfo::getExecuteTime,calendar.getTime()));<br>    <span class="hljs-keyword">if</span>(allTasks != <span class="hljs-literal">null</span> &amp;&amp; allTasks.size() &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span> (Taskinfo taskinfo : allTasks) &#123;<br>            <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>();<br>            BeanUtils.copyProperties(taskinfo,task);<br>            task.setExecuteTime(taskinfo.getExecuteTime().getTime());<br>            addTaskToCache(task);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearCache</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 删除缓存中未来数据集合和当前消费者队列的所有key</span><br>    Set&lt;String&gt; futurekeys = cacheService.scan(ScheduleConstants.FUTURE + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">// future_</span><br>    Set&lt;String&gt; topickeys = cacheService.scan(ScheduleConstants.TOPIC + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">// topic_</span><br>    cacheService.delete(futurekeys);<br>    cacheService.delete(topickeys);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-延迟队列解决精准时间发布文章"><a href="#5-延迟队列解决精准时间发布文章" class="headerlink" title="5)延迟队列解决精准时间发布文章"></a>5)延迟队列解决精准时间发布文章</h3><h5 id="5-1-延迟队列服务提供对外接口"><a href="#5-1-延迟队列服务提供对外接口" class="headerlink" title="5.1)延迟队列服务提供对外接口"></a>5.1)延迟队列服务提供对外接口</h5><p>提供远程的feign接口，在heima-leadnews-feign-api编写类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.apis.schedule;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.schedule.dtos.Task;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><br><span class="hljs-meta">@FeignClient(&quot;leadnews-schedule&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IScheduleClient</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task   任务对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>       任务id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/api/v1/task/add&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult  <span class="hljs-title function_">addTask</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Task task)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> taskId        任务id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>              取消结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/api/v1/task/cancel/&#123;taskId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">cancelTask</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;taskId&quot;)</span> <span class="hljs-type">long</span> taskId)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按照类型和优先级来拉取任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> priority</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/api/v1/task/poll/&#123;type&#125;/&#123;priority&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;type&quot;)</span> <span class="hljs-type">int</span> type,<span class="hljs-meta">@PathVariable(&quot;priority&quot;)</span>  <span class="hljs-type">int</span> priority)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在heima-leadnews-schedule微服务下提供对应的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.schedule.feign;<br><br><span class="hljs-keyword">import</span> com.heima.apis.schedule.IScheduleClient;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.schedule.dtos.Task;<br><span class="hljs-keyword">import</span> com.heima.schedule.service.TaskService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleClient</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IScheduleClient</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TaskService taskService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task 任务对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 任务id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/api/v1/task/add&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">addTask</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Task task)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(taskService.addTask(task));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> taskId 任务id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 取消结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/api/v1/task/cancel/&#123;taskId&#125;&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">cancelTask</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;taskId&quot;)</span> <span class="hljs-type">long</span> taskId)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(taskService.cancelTask(taskId));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 按照类型和优先级来拉取任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> priority</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/api/v1/task/poll/&#123;type&#125;/&#123;priority&#125;&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;type&quot;)</span> <span class="hljs-type">int</span> type, <span class="hljs-meta">@PathVariable(&quot;priority&quot;)</span> <span class="hljs-type">int</span> priority)</span> &#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(taskService.poll(type,priority));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-2-发布文章集成添加延迟队列接口"><a href="#5-2-发布文章集成添加延迟队列接口" class="headerlink" title="5.2)发布文章集成添加延迟队列接口"></a>5.2)发布文章集成添加延迟队列接口</h5><p>在创建WmNewsTaskService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service;<br><br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmNews;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WmNewsTaskService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加任务到延迟队列中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id  文章的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publishTime  发布的时间  可以做为任务的执行时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewsToTask</span><span class="hljs-params">(Integer id, Date publishTime)</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.service.impl;<br><br><span class="hljs-keyword">import</span> com.heima.apis.schedule.IScheduleClient;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.TaskTypeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.schedule.dtos.Task;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmNews;<br><span class="hljs-keyword">import</span> com.heima.utils.common.ProtostuffUtil;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmNewsTaskService;<br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsTaskServiceImpl</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WmNewsTaskService</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IScheduleClient scheduleClient;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加任务到延迟队列中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id          文章的id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publishTime 发布的时间  可以做为任务的执行时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewsToTask</span><span class="hljs-params">(Integer id, Date publishTime)</span> &#123;<br><br>        log.info(<span class="hljs-string">&quot;添加任务到延迟服务中----begin&quot;</span>);<br><br>        <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>();<br>        task.setExecuteTime(publishTime.getTime());<br>        task.setTaskType(TaskTypeEnum.NEWS_SCAN_TIME.getTaskType());<br>        task.setPriority(TaskTypeEnum.NEWS_SCAN_TIME.getPriority());<br>        <span class="hljs-type">WmNews</span> <span class="hljs-variable">wmNews</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WmNews</span>();<br>        wmNews.setId(id);<br>        task.setParameters(ProtostuffUtil.serialize(wmNews));<br><br>        scheduleClient.addTask(task);<br><br>        log.info(<span class="hljs-string">&quot;添加任务到延迟服务中----end&quot;</span>);<br><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.common.enums;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TaskTypeEnum</span> &#123;<br><br>    NEWS_SCAN_TIME(<span class="hljs-number">1001</span>, <span class="hljs-number">1</span>,<span class="hljs-string">&quot;文章定时审核&quot;</span>),<br>    REMOTEERROR(<span class="hljs-number">1002</span>, <span class="hljs-number">2</span>,<span class="hljs-string">&quot;第三方接口调用失败，重试&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> taskType; <span class="hljs-comment">//对应具体业务</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> priority; <span class="hljs-comment">//业务不同级别</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String desc; <span class="hljs-comment">//描述信息</span><br>&#125;<br></code></pre></td></tr></table></figure><p>序列化工具对比</p><ul><li>JdkSerialize：java内置的序列化能将实现了Serilazable接口的对象进行序列化和反序列化， ObjectOutputStream的writeObject()方法可序列化对象生成字节数组</li><li>Protostuff：google开源的protostuff采用更为紧凑的二进制数组，表现更加优异，然后使用protostuff的编译工具生成pojo类</li></ul><p>拷贝资料中的两个类到heima-leadnews-utils下</p><p>Protostuff需要引导依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.protostuff<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>protostuff-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.protostuff<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>protostuff-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改发布文章代码：</p><p>把之前的异步调用修改为调用延迟任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WmNewsTaskService wmNewsTaskService;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发布修改文章或保存为草稿</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">submitNews</span><span class="hljs-params">(WmNewsDto dto)</span> &#123;<br><br>    <span class="hljs-comment">//0.条件判断</span><br>    <span class="hljs-keyword">if</span>(dto == <span class="hljs-literal">null</span> || dto.getContent() == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>    &#125;<br><br>    <span class="hljs-comment">//1.保存或修改文章</span><br><br>    <span class="hljs-type">WmNews</span> <span class="hljs-variable">wmNews</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WmNews</span>();<br>    <span class="hljs-comment">//属性拷贝 属性名词和类型相同才能拷贝</span><br>    BeanUtils.copyProperties(dto,wmNews);<br>    <span class="hljs-comment">//封面图片  list---&gt; string</span><br>    <span class="hljs-keyword">if</span>(dto.getImages() != <span class="hljs-literal">null</span> &amp;&amp; dto.getImages().size() &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//[1dddfsd.jpg,sdlfjldk.jpg]--&gt;   1dddfsd.jpg,sdlfjldk.jpg</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">imageStr</span> <span class="hljs-operator">=</span> StringUtils.join(dto.getImages(), <span class="hljs-string">&quot;,&quot;</span>);<br>        wmNews.setImages(imageStr);<br>    &#125;<br>    <span class="hljs-comment">//如果当前封面类型为自动 -1</span><br>    <span class="hljs-keyword">if</span>(dto.getType().equals(WemediaConstants.WM_NEWS_TYPE_AUTO))&#123;<br>        wmNews.setType(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    saveOrUpdateWmNews(wmNews);<br><br>    <span class="hljs-comment">//2.判断是否为草稿  如果为草稿结束当前方法</span><br>    <span class="hljs-keyword">if</span>(dto.getStatus().equals(WmNews.Status.NORMAL.getCode()))&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br>    &#125;<br><br>    <span class="hljs-comment">//3.不是草稿，保存文章内容图片与素材的关系</span><br>    <span class="hljs-comment">//获取到文章内容中的图片信息</span><br>    List&lt;String&gt; materials =  ectractUrlInfo(dto.getContent());<br>    saveRelativeInfoForContent(materials,wmNews.getId());<br><br>    <span class="hljs-comment">//4.不是草稿，保存文章封面图片与素材的关系，如果当前布局是自动，需要匹配封面图片</span><br>    saveRelativeInfoForCover(dto,wmNews,materials);<br><br>    <span class="hljs-comment">//审核文章</span><br>    <span class="hljs-comment">//        wmNewsAutoScanService.autoScanWmNews(wmNews.getId());</span><br>    wmNewsTaskService.addNewsToTask(wmNews.getId(),wmNews.getPublishTime());<br><br>    <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-消费任务进行审核文章"><a href="#5-3-消费任务进行审核文章" class="headerlink" title="5.3)消费任务进行审核文章"></a>5.3)消费任务进行审核文章</h5><p>WmNewsTaskService中添加方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费延迟队列数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">scanNewsByTask</span>()</span>;<br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> WmNewsAutoScanServiceImpl wmNewsAutoScanService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费延迟队列数据</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Scheduled(fixedRate = 1000)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanNewsByTask</span><span class="hljs-params">()</span> &#123;<br><br>    log.info(<span class="hljs-string">&quot;文章审核---消费任务执行---begin---&quot;</span>);<br><br>    <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> scheduleClient.poll(TaskTypeEnum.NEWS_SCAN_TIME.getTaskType(), TaskTypeEnum.NEWS_SCAN_TIME.getPriority());<br>    <span class="hljs-keyword">if</span>(responseResult.getCode().equals(<span class="hljs-number">200</span>) &amp;&amp; responseResult.getData() != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json_str</span> <span class="hljs-operator">=</span> JSON.toJSONString(responseResult.getData());<br>        <span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> JSON.parseObject(json_str, Task.class);<br>        <span class="hljs-type">byte</span>[] parameters = task.getParameters();<br>        <span class="hljs-type">WmNews</span> <span class="hljs-variable">wmNews</span> <span class="hljs-operator">=</span> ProtostuffUtil.deserialize(parameters, WmNews.class);<br>        System.out.println(wmNews.getId()+<span class="hljs-string">&quot;-----------&quot;</span>);<br>        wmNewsAutoScanService.autoScanWmNews(wmNews.getId());<br>    &#125;<br>    log.info(<span class="hljs-string">&quot;文章审核---消费任务执行---end---&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在WemediaApplication自媒体的引导类中添加开启任务调度注解<code>@EnableScheduling</code></p><h3 id="6-作业"><a href="#6-作业" class="headerlink" title="6)作业"></a>6)作业</h3><h1 id="6-kafka及异步通知文章上下架"><a href="#6-kafka及异步通知文章上下架" class="headerlink" title="6 kafka及异步通知文章上下架"></a>6 kafka及异步通知文章上下架</h1><h3 id="1-自媒体文章上下架"><a href="#1-自媒体文章上下架" class="headerlink" title="1)自媒体文章上下架"></a>1)自媒体文章上下架</h3><p>需求分析</p><p><img src="/../images/image-20210525180731705.png" alt="image-20210525180731705"></p><p><img src="/../images/image-20210525180757907.png" alt="image-20210525180757907"></p><h3 id="2-kafka概述"><a href="#2-kafka概述" class="headerlink" title="2)kafka概述"></a>2)kafka概述</h3><p>消息中间件对比                              </p><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>10万级</td><td>100万级</td></tr><tr><td>时效性</td><td>ms</td><td>us</td><td>ms</td><td>ms级以内</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>非常高（分布式）</td></tr><tr><td>功能特性</td><td>成熟的产品、较全的文档、各种协议支持好</td><td>并发能力强、性能好、延迟低</td><td>MQ功能比较完善，扩展性佳</td><td>只支持主要的MQ功能，主要应用于大数据领域</td></tr></tbody></table><p>消息中间件对比-选择建议</p><table><thead><tr><th><strong>消息中间件</strong></th><th><strong>建议</strong></th></tr></thead><tbody><tr><td>Kafka</td><td>追求高吞吐量，适合产生大量数据的互联网服务的数据收集业务</td></tr><tr><td>RocketMQ</td><td>可靠性要求很高的金融互联网领域,稳定性高，经历了多次阿里双11考验</td></tr><tr><td>RabbitMQ</td><td>性能较好，社区活跃度高，数据量没有那么大，优先选择功能比较完备的RabbitMQ</td></tr></tbody></table><p>kafka介绍</p><p>Kafka 是一个分布式流媒体平台,类似于消息队列或企业消息传递系统。kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org/</a>  </p><p><img src="/../images/image-20210525181028436.png" alt="image-20210525181028436"></p><p>kafka介绍-名词解释</p><p><img src="/../images/image-20210525181100793.png" alt="image-20210525181100793"></p><ul><li><p>producer：发布消息的对象称之为主题生产者（Kafka topic producer）</p></li><li><p>topic：Kafka将消息分门别类，每一类的消息称之为一个主题（Topic）</p></li><li><p>consumer：订阅消息并处理发布的消息的对象称之为主题消费者（consumers）</p></li><li><p>broker：已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理（Broker）。 消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。</p></li></ul><h3 id="3-kafka安装配置"><a href="#3-kafka安装配置" class="headerlink" title="3)kafka安装配置"></a>3)kafka安装配置</h3><p>Kafka对于zookeeper是强依赖，保存kafka相关的节点数据，所以安装Kafka之前必须先安装zookeeper</p><ul><li>Docker安装zookeeper</li></ul><p>下载镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull zookeeper:3.4.14<br></code></pre></td></tr></table></figure><p>创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name zookeeper -p 2181:2181 zookeeper:3.4.14<br></code></pre></td></tr></table></figure><ul><li>Docker安装kafka</li></ul><p>下载镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull wurstmeister/kafka:2.12-2.3.1<br></code></pre></td></tr></table></figure><p>创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name kafka \<br>--env KAFKA_ADVERTISED_HOST_NAME=192.168.200.130 \<br>--env KAFKA_ZOOKEEPER_CONNECT=192.168.200.130:2181 \<br>--env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.200.130:9092 \<br>--env KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \<br>--env KAFKA_HEAP_OPTS=&quot;-Xmx256M -Xms256M&quot; \<br>--net=host wurstmeister/kafka:2.12-2.3.1<br></code></pre></td></tr></table></figure><h3 id="4-kafka入门"><a href="#4-kafka入门" class="headerlink" title="4)kafka入门"></a>4)kafka入门</h3><p><img src="/../images/image-20210525181412230.png" alt="image-20210525181412230"></p><ul><li>生产者发送消息，多个消费者只能有一个消费者接收到消息</li><li>生产者发送消息，多个消费者都可以接收到消息</li></ul><p>（1）创建kafka-demo项目，导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）生产者发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.kafka.sample;<br><br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerQuickStart</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.kafka的配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//kafka的连接地址</span><br>        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">&quot;192.168.200.130:9092&quot;</span>);<br>        <span class="hljs-comment">//发送失败，失败的重试次数</span><br>        properties.put(ProducerConfig.RETRIES_CONFIG,<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//消息key的序列化器</span><br>        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>        <span class="hljs-comment">//消息value的序列化器</span><br>        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br><br>        <span class="hljs-comment">//2.生产者对象</span><br>        KafkaProducer&lt;String,String&gt; producer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;String, String&gt;(properties);<br><br>        <span class="hljs-comment">//封装发送的消息</span><br>        ProducerRecord&lt;String,String&gt; record = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;String, String&gt;(<span class="hljs-string">&quot;itheima-topic&quot;</span>,<span class="hljs-string">&quot;100001&quot;</span>,<span class="hljs-string">&quot;hello kafka&quot;</span>);<br><br>        <span class="hljs-comment">//3.发送消息</span><br>        producer.send(record);<br><br>        <span class="hljs-comment">//4.关闭消息通道，必须关闭，否则消息发送不成功</span><br>        producer.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>（3）消费者接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.kafka.sample;<br><br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消费者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerQuickStart</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.添加kafka的配置信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//kafka的连接地址</span><br>        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;192.168.200.130:9092&quot;</span>);<br>        <span class="hljs-comment">//消费者组</span><br>        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="hljs-string">&quot;group2&quot;</span>);<br>        <span class="hljs-comment">//消息的反序列化器</span><br>        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br><br>        <span class="hljs-comment">//2.消费者对象</span><br>        KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;String, String&gt;(properties);<br><br>        <span class="hljs-comment">//3.订阅主题</span><br>        consumer.subscribe(Collections.singletonList(<span class="hljs-string">&quot;itheima-topic&quot;</span>));<br><br>        <span class="hljs-comment">//当前线程一直处于监听状态</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//4.获取消息</span><br>            ConsumerRecords&lt;String, String&gt; consumerRecords = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;<br>                System.out.println(consumerRecord.key());<br>                System.out.println(consumerRecord.value());<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>总结</p><ul><li>生产者发送消息，多个消费者订阅同一个主题，只能有一个消费者收到消息（一对一）</li><li>生产者发送消息，多个消费者订阅同一个主题，所有消费者都能收到消息（一对多）</li></ul><h3 id="5-kafka高可用设计"><a href="#5-kafka高可用设计" class="headerlink" title="5)kafka高可用设计"></a>5)kafka高可用设计</h3><h4 id="5-1-集群"><a href="#5-1-集群" class="headerlink" title="5.1)集群"></a>5.1)集群</h4><p><img src="/../images/image-20210530223101568.png" alt="image-20210530223101568"></p><ul><li><p>Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成</p></li><li><p>这样如果集群中某一台机器宕机，其他机器上的 Broker 也依然能够对外提供服务。这其实就是 Kafka 提供高可用的手段之一</p></li></ul><h4 id="5-2-备份机制-Replication）"><a href="#5-2-备份机制-Replication）" class="headerlink" title="5.2)备份机制(Replication）"></a>5.2)备份机制(Replication）</h4><p><img src="/../images/image-20210530223218580.png" alt="image-20210530223218580"></p><p>Kafka 中消息的备份又叫做 副本（Replica）</p><p>Kafka 定义了两类副本：</p><ul><li><p>领导者副本（Leader Replica）</p></li><li><p>追随者副本（Follower Replica）</p></li></ul><p><strong>同步方式</strong></p><p><img src="/../images/image-20210530223316815.png" alt="image-20210530223316815"></p><p>ISR（in-sync replica）需要同步复制保存的follower</p><p>如果leader失效后，需要选出新的leader，选举的原则如下：</p><p>第一：选举时优先从ISR中选定，因为这个列表中follower的数据是与leader同步的</p><p>第二：如果ISR列表中的follower都不行了，就只能从其他follower中选取</p><p>极端情况，就是所有副本都失效了，这时有两种方案</p><p>第一：等待ISR中的一个活过来，选为Leader，数据可靠，但活过来的时间不确定</p><p>第二：选择第一个活过来的Replication，不一定是ISR中的，选为leader，以最快速度恢复可用性，但数据不一定完整</p><h3 id="6-kafka生产者详解"><a href="#6-kafka生产者详解" class="headerlink" title="6)kafka生产者详解"></a>6)kafka生产者详解</h3><h4 id="6-1-发送类型"><a href="#6-1-发送类型" class="headerlink" title="6.1)发送类型"></a>6.1)发送类型</h4><ul><li><p>同步发送</p><p>  使用send()方法发送，它会返回一个Future对象，调用get()方法进行等待，就可以知道消息是否发送成功</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RecordMetadata</span> <span class="hljs-variable">recordMetadata</span> <span class="hljs-operator">=</span> producer.send(kvProducerRecord).get();<br>System.out.println(recordMetadata.offset());<br></code></pre></td></tr></table></figure><ul><li><p>异步发送</p><p>  调用send()方法，并指定一个回调函数，服务器在返回响应时调用函数</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//异步消息发送</span><br>producer.send(kvProducerRecord, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Callback</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCompletion</span><span class="hljs-params">(RecordMetadata recordMetadata, Exception e)</span> &#123;<br>        <span class="hljs-keyword">if</span>(e != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;记录异常信息到日志表中&quot;</span>);<br>        &#125;<br>        System.out.println(recordMetadata.offset());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="6-2-参数详解"><a href="#6-2-参数详解" class="headerlink" title="6.2)参数详解"></a>6.2)参数详解</h4><ul><li>ack</li></ul><p><img src="/../images/image-20210530224302935.png" alt="image-20210530224302935"></p><p>代码的配置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ack配置  消息确认机制</span><br>prop.put(ProducerConfig.ACKS_CONFIG,<span class="hljs-string">&quot;all&quot;</span>);<br></code></pre></td></tr></table></figure><p>参数的选择说明</p><table><thead><tr><th><strong>确认机制</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>acks=0</td><td>生产者在成功写入消息之前不会等待任何来自服务器的响应,消息有丢失的风险，但是速度最快</td></tr><tr><td>acks=1（默认值）</td><td>只要集群首领节点收到消息，生产者就会收到一个来自服务器的成功响应</td></tr><tr><td>acks=all</td><td>只有当所有参与赋值的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应</td></tr></tbody></table><ul><li>retries</li></ul><p><img src="/../images/image-20210530224406689.png" alt="image-20210530224406689"></p><p>生产者从服务器收到的错误有可能是临时性错误，在这种情况下，retries参数的值决定了生产者可以重发消息的次数，如果达到这个次数，生产者会放弃重试返回错误，默认情况下，生产者会在每次重试之间等待100ms</p><p>代码中配置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重试次数</span><br>prop.put(ProducerConfig.RETRIES_CONFIG,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><ul><li>消息压缩</li></ul><p>默认情况下， 消息发送时不会被压缩。</p><p>代码中配置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据压缩</span><br>prop.put(ProducerConfig.COMPRESSION_TYPE_CONFIG,<span class="hljs-string">&quot;lz4&quot;</span>);<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>压缩算法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>snappy</td><td>占用较少的  CPU，  却能提供较好的性能和相当可观的压缩比， 如果看重性能和网络带宽，建议采用</td></tr><tr><td>lz4</td><td>占用较少的 CPU， 压缩和解压缩速度较快，压缩比也很客观</td></tr><tr><td>gzip</td><td>占用较多的  CPU，但会提供更高的压缩比，网络带宽有限，可以使用这种算法</td></tr></tbody></table><p>使用压缩可以降低网络传输开销和存储开销，而这往往是向 Kafka 发送消息的瓶颈所在。</p><h3 id="7-kafka消费者详解"><a href="#7-kafka消费者详解" class="headerlink" title="7)kafka消费者详解"></a>7)kafka消费者详解</h3><h4 id="7-1-消费者组"><a href="#7-1-消费者组" class="headerlink" title="7.1)消费者组"></a>7.1)消费者组</h4><p><img src="/../images/image-20210530224706747.png" alt="image-20210530224706747"></p><ul><li><p>消费者组（Consumer Group） ：指的就是由一个或多个消费者组成的群体</p></li><li><p>一个发布在Topic上消息被分发给此消费者组中的一个消费者</p><ul><li><p>所有的消费者都在一个组中，那么这就变成了queue模型</p></li><li><p>所有的消费者都在不同的组中，那么就完全变成了发布-订阅模型</p></li></ul></li></ul><h4 id="7-2-消息有序性"><a href="#7-2-消息有序性" class="headerlink" title="7.2)消息有序性"></a>7.2)消息有序性</h4><p>应用场景：</p><ul><li><p>即时消息中的单对单聊天和群聊，保证发送方消息发送顺序与接收方的顺序一致</p></li><li><p>充值转账两个渠道在同一个时间进行余额变更，短信通知必须要有顺序</p></li></ul><p><img src="/../images/image-20210530224903891.png" alt="image-20210530224903891"></p><p>topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。</p><h4 id="7-3-提交和偏移量"><a href="#7-3-提交和偏移量" class="headerlink" title="7.3)提交和偏移量"></a>7.3)提交和偏移量</h4><p>kafka不会像其他JMS队列那样需要得到消费者的确认，消费者可以使用kafka来追踪消息在分区的位置（偏移量）</p><p>消费者会往一个叫做_consumer_offset的特殊主题发送消息，消息里包含了每个分区的偏移量。如果消费者发生崩溃或有新的消费者加入群组，就会触发再均衡</p><p><img src="/../images/image-20210530225021266.png" alt="image-20210530225021266"></p><p>正常的情况</p><p><img src="/../images/image-20210530224959350.png" alt="image-20210530224959350"></p><p>如果消费者2挂掉以后，会发生再均衡，消费者2负责的分区会被其他消费者进行消费</p><p>再均衡后不可避免会出现一些问题</p><p>问题一：</p><p><img src="/../images/image-20210530225215337.png" alt="image-20210530225215337"></p><p>如果提交偏移量小于客户端处理的最后一个消息的偏移量，那么处于两个偏移量之间的消息就会被重复处理。</p><p>问题二：</p><p><img src="/../images/image-20210530225239897.png" alt="image-20210530225239897"></p><p>如果提交的偏移量大于客户端的最后一个消息的偏移量，那么处于两个偏移量之间的消息将会丢失。</p><p>如果想要解决这些问题，还要知道目前kafka提交偏移量的方式：</p><p>提交偏移量的方式有两种，分别是自动提交偏移量和手动提交</p><ul><li>自动提交偏移量</li></ul><p>当enable.auto.commit被设置为true，提交方式就是让消费者自动提交偏移量，每隔5秒消费者会自动把从poll()方法接收的最大偏移量提交上去</p><ul><li><p>手动提交 ，当enable.auto.commit被设置为false可以有以下三种提交方式</p><ul><li><p>提交当前偏移量（同步提交）</p></li><li><p>异步提交</p></li><li><p>同步和异步组合提交</p></li></ul></li></ul><p>1.提交当前偏移量（同步提交）</p><p>把<code>enable.auto.commit</code>设置为false,让应用程序决定何时提交偏移量。使用commitSync()提交偏移量，commitSync()将会提交poll返回的最新的偏移量，所以在处理完所有记录后要确保调用了commitSync()方法。否则还是会有消息丢失的风险。</p><p>只要没有发生不可恢复的错误，commitSync()方法会一直尝试直至提交成功，如果提交失败也可以记录到错误日志里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>    ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>        System.out.println(record.value());<br>        System.out.println(record.key());<br>        <span class="hljs-keyword">try</span> &#123;<br>            consumer.commitSync();<span class="hljs-comment">//同步提交当前最新的偏移量</span><br>        &#125;<span class="hljs-keyword">catch</span> (CommitFailedException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;记录提交失败的异常：&quot;</span>+e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.异步提交</p><p>手动提交有一个缺点，那就是当发起提交调用时应用会阻塞。当然我们可以减少手动提交的频率，但这个会增加消息重复的概率（和自动提交一样）。另外一个解决办法是，使用异步提交的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>    ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>    <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>        System.out.println(record.value());<br>        System.out.println(record.key());<br>    &#125;<br>    consumer.commitAsync(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OffsetCommitCallback</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">(Map&lt;TopicPartition, OffsetAndMetadata&gt; map, Exception e)</span> &#123;<br>            <span class="hljs-keyword">if</span>(e!=<span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;记录错误的提交偏移量：&quot;</span>+ map+<span class="hljs-string">&quot;,异常信息&quot;</span>+e);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>3.同步和异步组合提交</p><p>异步提交也有个缺点，那就是如果服务器返回提交失败，异步提交不会进行重试。相比较起来，同步提交会进行重试直到成功或者最后抛出异常给应用。异步提交没有实现重试是因为，如果同时存在多个异步提交，进行重试可能会导致位移覆盖。</p><p>举个例子，假如我们发起了一个异步提交commitA，此时的提交位移为2000，随后又发起了一个异步提交commitB且位移为3000；commitA提交失败但commitB提交成功，此时commitA进行重试并成功的话，会将实际上将已经提交的位移从3000回滚到2000，导致消息重复消费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>        <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>            System.out.println(record.value());<br>            System.out.println(record.key());<br>        &#125;<br>        consumer.commitAsync();<br>    &#125;<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;+<br>    e.printStackTrace();<br>    System.out.println(<span class="hljs-string">&quot;记录错误信息：&quot;</span>+e);<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        consumer.commitSync();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        consumer.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-springboot集成kafka"><a href="#8-springboot集成kafka" class="headerlink" title="8)springboot集成kafka"></a>8)springboot集成kafka</h3><h4 id="8-1-入门"><a href="#8-1-入门" class="headerlink" title="8.1)入门"></a>8.1)入门</h4><p>1.导入spring-kafka依赖信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- kafkfa --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在resources下创建文件application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9991</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kafka-demo</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>      <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;-test</span><br>      <span class="hljs-attr">key-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>      <span class="hljs-attr">value-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br></code></pre></td></tr></table></figure><p>3.消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.kafka.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        kafkaTemplate.send(<span class="hljs-string">&quot;itcast-topic&quot;</span>,<span class="hljs-string">&quot;黑马程序员&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.消息消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.kafka.listener;<br><br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloListener</span> &#123;<br><br>    <span class="hljs-meta">@KafkaListener(topics = &quot;itcast-topic&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(message))&#123;<br>            System.out.println(message);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-2-传递消息为对象"><a href="#8-2-传递消息为对象" class="headerlink" title="8.2)传递消息为对象"></a>8.2)传递消息为对象</h4><p>目前springboot整合后的kafka，因为序列化器是StringSerializer，这个时候如果需要传递对象可以有两种方式</p><p>方式一：可以自定义序列化器，对象类型众多，这种方式通用性不强，本章节不介绍</p><p>方式二：可以把要传递的对象进行转json字符串，接收消息后再转为对象即可，本项目采用这种方式</p><ul><li>发送消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;xiaowang&quot;</span>);<br>    user.setAge(<span class="hljs-number">18</span>);<br><br>    kafkaTemplate.send(<span class="hljs-string">&quot;user-topic&quot;</span>, JSON.toJSONString(user));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接收消息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.kafka.listener;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.kafka.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloListener</span> &#123;<br><br>    <span class="hljs-meta">@KafkaListener(topics = &quot;user-topic&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(message))&#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> JSON.parseObject(message, User.class);<br>            System.out.println(user);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-自媒体文章上下架功能完成"><a href="#9-自媒体文章上下架功能完成" class="headerlink" title="9)自媒体文章上下架功能完成"></a>9)自媒体文章上下架功能完成</h3><h4 id="9-1-需求分析"><a href="#9-1-需求分析" class="headerlink" title="9.1)需求分析"></a>9.1)需求分析</h4><p><img src="/../images/image-20210528111736003.png" alt="image-20210528111736003"></p><p><img src="/../images/image-20210528111853271.png" alt="image-20210528111853271"></p><ul><li><p>已发表且已上架的文章可以下架</p></li><li><p>已发表且已下架的文章可以上架</p></li></ul><h4 id="9-2-流程说明"><a href="#9-2-流程说明" class="headerlink" title="9.2)流程说明"></a>9.2)流程说明</h4><p><img src="/../images/image-20210528111956504.png" alt="image-20210528111956504"></p><h4 id="9-3-接口定义"><a href="#9-3-接口定义" class="headerlink" title="9.3)接口定义"></a>9.3)接口定义</h4><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/news/down_or_up</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>DTO</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><p> DTO  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsDto</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 是否上架  0 下架  1 上架</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> Short enable;<br>                       <br>&#125;<br></code></pre></td></tr></table></figure><p>ResponseResult  </p><p><img src="/../images/image-20210528112150495.png" alt="image-20210528112150495"></p><h4 id="9-4-自媒体文章上下架-功能实现"><a href="#9-4-自媒体文章上下架-功能实现" class="headerlink" title="9.4)自媒体文章上下架-功能实现"></a>9.4)自媒体文章上下架-功能实现</h4><p>9.4.1)接口定义</p><p>在heima-leadnews-wemedia工程下的WmNewsController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/down_or_up&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">downOrUp</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> WmNewsDto dto)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在WmNewsDto中新增enable属性 ，完整的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.wemedia.dtos;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsDto</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> Integer id;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String title;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 频道id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer channelId;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 标签</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String labels;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发布时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date publishTime;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String content;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章封面类型  0 无图 1 单图 3 多图 -1 自动</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short type;<br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提交时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date submitedTime; <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态 提交为1  草稿为0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short status;<br>     <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 封面图片列表 多张图以逗号隔开</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; images;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上下架 0 下架  1 上架</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short enable;<br>&#125;<br></code></pre></td></tr></table></figure><p>9.4.2)业务层编写</p><p>在WmNewsService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文章的上下架</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">downOrUp</span><span class="hljs-params">(WmNewsDto dto)</span>;<br></code></pre></td></tr></table></figure><p>实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文章的上下架</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">downOrUp</span><span class="hljs-params">(WmNewsDto dto)</span> &#123;<br>    <span class="hljs-comment">//1.检查参数</span><br>    <span class="hljs-keyword">if</span>(dto.getId() == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>    &#125;<br><br>    <span class="hljs-comment">//2.查询文章</span><br>    <span class="hljs-type">WmNews</span> <span class="hljs-variable">wmNews</span> <span class="hljs-operator">=</span> getById(dto.getId());<br>    <span class="hljs-keyword">if</span>(wmNews == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.DATA_NOT_EXIST,<span class="hljs-string">&quot;文章不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//3.判断文章是否已发布</span><br>    <span class="hljs-keyword">if</span>(!wmNews.getStatus().equals(WmNews.Status.PUBLISHED.getCode()))&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID,<span class="hljs-string">&quot;当前文章不是发布状态，不能上下架&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//4.修改文章enable</span><br>    <span class="hljs-keyword">if</span>(dto.getEnable() != <span class="hljs-literal">null</span> &amp;&amp; dto.getEnable() &gt; -<span class="hljs-number">1</span> &amp;&amp; dto.getEnable() &lt; <span class="hljs-number">2</span>)&#123;<br>        update(Wrappers.&lt;WmNews&gt;lambdaUpdate().set(WmNews::getEnable,dto.getEnable())<br>                .eq(WmNews::getId,wmNews.getId()));<br>    &#125;<br>    <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure><p>9.4.3)控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/down_or_up&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">downOrUp</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> WmNewsDto dto)</span>&#123;<br>    <span class="hljs-keyword">return</span> wmNewsService.downOrUp(dto);<br>&#125;<br></code></pre></td></tr></table></figure><p>9.4.4)测试</p><h4 id="9-5-消息通知article端文章上下架"><a href="#9-5-消息通知article端文章上下架" class="headerlink" title="9.5)消息通知article端文章上下架"></a>9.5)消息通知article端文章上下架</h4><p>9.5.1)在heima-leadnews-common模块下导入kafka依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- kafkfa --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>9.5.2)在自媒体端的nacos配置中心配置kafka的生产者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>      <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br></code></pre></td></tr></table></figure><p>9.5.3)在自媒体端文章上下架后发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//发送消息，通知article端修改文章配置</span><br><span class="hljs-keyword">if</span>(wmNews.getArticleId() != <span class="hljs-literal">null</span>)&#123;<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;articleId&quot;</span>,wmNews.getArticleId());<br>    map.put(<span class="hljs-string">&quot;enable&quot;</span>,dto.getEnable());<br>    kafkaTemplate.send(WmNewsMessageConstants.WM_NEWS_UP_OR_DOWN_TOPIC,JSON.toJSONString(map));<br>&#125;<br></code></pre></td></tr></table></figure><p>常量类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WmNewsMessageConstants</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String WM_NEWS_UP_OR_DOWN_TOPIC=<span class="hljs-string">&quot;wm.news.up.or.down.topic&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>9.5.4)在article端的nacos配置中心配置kafka的消费者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br>      <span class="hljs-attr">key-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>      <span class="hljs-attr">value-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br></code></pre></td></tr></table></figure><p>9.5.5)在article端编写监听，接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.listener;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.article.service.ApArticleConfigService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArtilceIsDownListener</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleConfigService apArticleConfigService;<br><br>    <span class="hljs-meta">@KafkaListener(topics = WmNewsMessageConstants.WM_NEWS_UP_OR_DOWN_TOPIC)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(message))&#123;<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> JSON.parseObject(message, Map.class);<br>            apArticleConfigService.updateByMap(map);<br>            log.info(<span class="hljs-string">&quot;article端文章配置修改，articleId=&#123;&#125;&quot;</span>,map.get(<span class="hljs-string">&quot;articleId&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>9.5.6)修改ap_article_config表的数据</p><p>新建ApArticleConfigService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticleConfig;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApArticleConfigService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;ApArticleConfig&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改文章配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateByMap</span><span class="hljs-params">(Map map)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.heima.article.mapper.ApArticleConfigMapper;<br><span class="hljs-keyword">import</span> com.heima.article.service.ApArticleConfigService;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticleConfig;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApArticleConfigServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;ApArticleConfigMapper, ApArticleConfig&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApArticleConfigService</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改文章配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateByMap</span><span class="hljs-params">(Map map)</span> &#123;<br>        <span class="hljs-comment">//0 下架 1 上架</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">enable</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;enable&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isDown</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(enable.equals(<span class="hljs-number">1</span>))&#123;<br>            isDown = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//修改文章配置</span><br>        update(Wrappers.&lt;ApArticleConfig&gt;lambdaUpdate().eq(ApArticleConfig::getArticleId,map.get(<span class="hljs-string">&quot;articleId&quot;</span>)).set(ApArticleConfig::getIsDown,isDown));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-app端文章搜索"><a href="#7-app端文章搜索" class="headerlink" title="7 app端文章搜索"></a>7 app端文章搜索</h1><h2 id="1-今日内容介绍"><a href="#1-今日内容介绍" class="headerlink" title="1) 今日内容介绍"></a>1) 今日内容介绍</h2><h3 id="1-1-App端搜索-效果图"><a href="#1-1-App端搜索-效果图" class="headerlink" title="1.1)App端搜索-效果图"></a>1.1)App端搜索-效果图</h3><p><img src="/../images/image-20210709140539138.png" alt="image-20210709140539138"></p><h3 id="1-2-今日内容"><a href="#1-2-今日内容" class="headerlink" title="1.2)今日内容"></a>1.2)今日内容</h3><ul><li><p>文章搜索</p><ul><li><p>ElasticSearch环境搭建</p></li><li><p>索引库创建</p></li><li><p>文章搜索多条件复合查询</p></li><li><p>索引数据同步</p></li></ul></li><li><p>搜索历史记录</p><ul><li><p>Mongodb环境搭建</p></li><li><p>异步保存搜索历史</p></li><li><p>查看搜索历史列表</p></li><li><p>删除搜索历史</p></li></ul></li><li><p>联想词查询</p><ul><li><p>联想词的来源</p></li><li><p>联想词功能实现</p></li></ul></li></ul><h2 id="2-搭建ElasticSearch环境"><a href="#2-搭建ElasticSearch环境" class="headerlink" title="2) 搭建ElasticSearch环境"></a>2) 搭建ElasticSearch环境</h2><h3 id="2-1-拉取镜像"><a href="#2-1-拉取镜像" class="headerlink" title="2.1) 拉取镜像"></a>2.1) 拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch:7.4.0<br></code></pre></td></tr></table></figure><h3 id="2-2-创建容器"><a href="#2-2-创建容器" class="headerlink" title="2.2) 创建容器"></a>2.2) 创建容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -id --name elasticsearch -d --restart=always -p 9200:9200 -p 9300:9300 -v /usr/share/elasticsearch/plugins:/usr/share/elasticsearch/plugins -e &quot;discovery.type=single-node&quot; elasticsearch:7.4.0<br></code></pre></td></tr></table></figure><h3 id="2-3-配置中文分词器-ik"><a href="#2-3-配置中文分词器-ik" class="headerlink" title="2.3) 配置中文分词器 ik"></a>2.3) 配置中文分词器 ik</h3><p>因为在创建elasticsearch容器的时候，映射了目录，所以可以在宿主机上进行配置ik中文分词器</p><p>在去选择ik分词器的时候，需要与elasticsearch的版本好对应上</p><p>把资料中的<code>elasticsearch-analysis-ik-7.4.0.zip</code>上传到服务器上,放到对应目录（plugins）解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">切换目录</span><br>cd /usr/share/elasticsearch/plugins<br><span class="hljs-meta prompt_">#</span><span class="language-bash">新建目录</span><br>mkdir analysis-ik<br>cd analysis-ik<br><span class="hljs-meta prompt_">#</span><span class="language-bash">root根目录中拷贝文件</span><br>mv elasticsearch-analysis-ik-7.4.0.zip /usr/share/elasticsearch/plugins/analysis-ik<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压文件</span><br>cd /usr/share/elasticsearch/plugins/analysis-ik<br>unzip elasticsearch-analysis-ik-7.4.0.zip<br></code></pre></td></tr></table></figure><h3 id="2-4-使用postman测试"><a href="#2-4-使用postman测试" class="headerlink" title="2.4) 使用postman测试"></a>2.4) 使用postman测试</h3><p><img src="/../images/image-20210709140935410.png" alt="image-20210709140935410"></p><h2 id="3-app端文章搜索"><a href="#3-app端文章搜索" class="headerlink" title="3) app端文章搜索"></a>3) app端文章搜索</h2><h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1) 需求分析"></a>3.1) 需求分析</h3><ul><li><p>用户输入关键可搜索文章列表</p></li><li><p>关键词高亮显示</p></li><li><p>文章列表展示与home展示一样，当用户点击某一篇文章，可查看文章详情</p></li></ul><p><img src="/../images/image-20210709141502366.png" alt="image-20210709141502366"></p><h3 id="3-2-思路分析"><a href="#3-2-思路分析" class="headerlink" title="3.2) 思路分析"></a>3.2) 思路分析</h3><p>为了加快检索的效率，在查询的时候不会直接从数据库中查询文章，需要在elasticsearch中进行高速检索。</p><p><img src="/../images/image-20210709141558811.png" alt="image-20210709141558811"></p><h3 id="3-3-创建索引和映射"><a href="#3-3-创建索引和映射" class="headerlink" title="3.3) 创建索引和映射"></a>3.3) 创建索引和映射</h3><p>使用postman添加映射</p><p>put请求 ： <a href="http://192.168.200.130:9200/app_info_article">http://192.168.200.130:9200/app_info_article</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;publishTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;date&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;layout&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;integer&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;staticUrl&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;authorId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;authorName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/../images/1606653927638.png" alt="1606653927638"></p><p>GET请求查询映射：<a href="http://192.168.200.130:9200/app_info_article">http://192.168.200.130:9200/app_info_article</a></p><p>DELETE请求，删除索引及映射：<a href="http://192.168.200.130:9200/app_info_article">http://192.168.200.130:9200/app_info_article</a></p><p>GET请求，查询所有文档：<a href="http://192.168.200.130:9200/app_info_article/_search">http://192.168.200.130:9200/app_info_article/_search</a></p><h3 id="3-4-数据初始化到索引库"><a href="#3-4-数据初始化到索引库" class="headerlink" title="3.4) 数据初始化到索引库"></a>3.4) 数据初始化到索引库</h3><h4 id="3-4-1-导入es-init到heima-leadnews-test工程下"><a href="#3-4-1-导入es-init到heima-leadnews-test工程下" class="headerlink" title="3.4.1)导入es-init到heima-leadnews-test工程下"></a>3.4.1)导入es-init到heima-leadnews-test工程下</h4><p><img src="/../images/image-20210709142215818.png" alt="image-20210709142215818"></p><h4 id="3-4-1-查询所有的文章信息，批量导入到es索引库中"><a href="#3-4-1-查询所有的文章信息，批量导入到es索引库中" class="headerlink" title="3.4.1)查询所有的文章信息，批量导入到es索引库中"></a>3.4.1)查询所有的文章信息，批量导入到es索引库中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.es;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.es.mapper.ApArticleMapper;<br><span class="hljs-keyword">import</span> com.heima.es.pojo.SearchArticleVo;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.index.IndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.xcontent.XContentType;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApArticleTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleMapper apArticleMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestHighLevelClient restHighLevelClient;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注意：数据量的导入，如果数据量过大，需要分页导入</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//1.查询所有符合条件的文章数据</span><br>        List&lt;SearchArticleVo&gt; searchArticleVos = apArticleMapper.loadArticleList();<br><br>        <span class="hljs-comment">//2.批量导入到es索引库</span><br><br>        <span class="hljs-type">BulkRequest</span> <span class="hljs-variable">bulkRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>(<span class="hljs-string">&quot;app_info_article&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (SearchArticleVo searchArticleVo : searchArticleVos) &#123;<br><br>            <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">indexRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>().id(searchArticleVo.getId().toString())<br>                    .source(JSON.toJSONString(searchArticleVo), XContentType.JSON);<br><br>            <span class="hljs-comment">//批量添加数据</span><br>            bulkRequest.add(indexRequest);<br><br>        &#125;<br>        restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-3-测试"><a href="#3-4-3-测试" class="headerlink" title="3.4.3)测试"></a>3.4.3)测试</h4><p>postman查询所有的es中数据   GET请求： <a href="http://192.168.200.130:9200/app_info_article/_search">http://192.168.200.130:9200/app_info_article/_search</a></p><p><img src="/../images/image-20210709142339535.png" alt="image-20210709142339535"></p><h3 id="3-5-文章搜索功能实现"><a href="#3-5-文章搜索功能实现" class="headerlink" title="3.5) 文章搜索功能实现"></a>3.5) 文章搜索功能实现</h3><h4 id="3-5-1-搭建搜索微服务"><a href="#3-5-1-搭建搜索微服务" class="headerlink" title="3.5.1)搭建搜索微服务"></a>3.5.1)搭建搜索微服务</h4><p>（1）导入  heima-leadnews-search</p><p><img src="/../images/image-20210709142616797.png" alt="image-20210709142616797"></p><p>（2）在heima-leadnews-service的pom中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--elasticsearch--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）nacos配置中心leadnews-search</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">autoconfigure:</span><br>    <span class="hljs-attr">exclude:</span> <span class="hljs-string">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</span><br><span class="hljs-attr">elasticsearch:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br></code></pre></td></tr></table></figure><h4 id="3-5-2-搜索接口定义"><a href="#3-5-2-搜索接口定义" class="headerlink" title="3.5.2) 搜索接口定义"></a>3.5.2) 搜索接口定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/article/search&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleSearchController</span> &#123;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserSearchDto dto)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UserSearchDto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.search.dtos;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSearchDto</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 搜索关键字</span><br><span class="hljs-comment">    */</span><br>    String searchWords;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 当前页</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">int</span> pageNum;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 分页条数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">int</span> pageSize;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 最小时间</span><br><span class="hljs-comment">    */</span><br>    Date minBehotTime;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFromIndex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.pageNum&lt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.pageSize&lt;<span class="hljs-number">1</span>) <span class="hljs-built_in">this</span>.pageSize = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.pageSize * (pageNum-<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-3-业务层实现"><a href="#3-5-3-业务层实现" class="headerlink" title="3.5.3) 业务层实现"></a>3.5.3) 业务层实现</h4><p>创建业务层接口：ApArticleSearchService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.service;<br><br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ArticleSearchService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ES文章分页搜索</span><br><span class="hljs-comment">     <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    ResponseResult <span class="hljs-title function_">search</span><span class="hljs-params">(UserSearchDto userSearchDto)</span> <span class="hljs-keyword">throws</span> IOException;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><span class="hljs-keyword">import</span> com.heima.model.user.pojos.ApUser;<br><span class="hljs-keyword">import</span> com.heima.search.service.ArticleSearchService;<br><span class="hljs-keyword">import</span> com.heima.utils.thread.AppThreadLocalUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.text.Text;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.*;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHit;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.sort.SortOrder;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleSearchServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArticleSearchService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * es文章分页检索</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">search</span><span class="hljs-params">(UserSearchDto dto)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//1.检查参数</span><br>        <span class="hljs-keyword">if</span>(dto == <span class="hljs-literal">null</span> || StringUtils.isBlank(dto.getSearchWords()))&#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>        &#125;<br><br>        <span class="hljs-comment">//2.设置查询条件</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;app_info_article&quot;</span>);<br>        <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br><br>        <span class="hljs-comment">//布尔查询</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br><br>        <span class="hljs-comment">//关键字的分词之后查询</span><br>        <span class="hljs-type">QueryStringQueryBuilder</span> <span class="hljs-variable">queryStringQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.queryStringQuery(dto.getSearchWords()).field(<span class="hljs-string">&quot;title&quot;</span>).field(<span class="hljs-string">&quot;content&quot;</span>).defaultOperator(Operator.OR);<br>        boolQueryBuilder.must(queryStringQueryBuilder);<br><br>        <span class="hljs-comment">//查询小于mindate的数据</span><br>        <span class="hljs-type">RangeQueryBuilder</span> <span class="hljs-variable">rangeQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.rangeQuery(<span class="hljs-string">&quot;publishTime&quot;</span>).lt(dto.getMinBehotTime().getTime());<br>        boolQueryBuilder.filter(rangeQueryBuilder);<br><br>        <span class="hljs-comment">//分页查询</span><br>        searchSourceBuilder.from(<span class="hljs-number">0</span>);<br>        searchSourceBuilder.size(dto.getPageSize());<br><br>        <span class="hljs-comment">//按照发布时间倒序查询</span><br>        searchSourceBuilder.sort(<span class="hljs-string">&quot;publishTime&quot;</span>, SortOrder.DESC);<br><br>        <span class="hljs-comment">//设置高亮  title</span><br>        <span class="hljs-type">HighlightBuilder</span> <span class="hljs-variable">highlightBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>();<br>        highlightBuilder.field(<span class="hljs-string">&quot;title&quot;</span>);<br>        highlightBuilder.preTags(<span class="hljs-string">&quot;&lt;font style=&#x27;color: red; font-size: inherit;&#x27;&gt;&quot;</span>);<br>        highlightBuilder.postTags(<span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>);<br>        searchSourceBuilder.highlighter(highlightBuilder);<br><br><br>        searchSourceBuilder.query(boolQueryBuilder);<br>        searchRequest.source(searchSourceBuilder);<br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br><br><br>        <span class="hljs-comment">//3.结果封装返回</span><br><br>        List&lt;Map&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        SearchHit[] hits = searchResponse.getHits().getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> JSON.parseObject(json, Map.class);<br>            <span class="hljs-comment">//处理高亮</span><br>            <span class="hljs-keyword">if</span>(hit.getHighlightFields() != <span class="hljs-literal">null</span> &amp;&amp; hit.getHighlightFields().size() &gt; <span class="hljs-number">0</span>)&#123;<br>                Text[] titles = hit.getHighlightFields().get(<span class="hljs-string">&quot;title&quot;</span>).getFragments();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> StringUtils.join(titles);<br>                <span class="hljs-comment">//高亮标题</span><br>                map.put(<span class="hljs-string">&quot;h_title&quot;</span>,title);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//原始标题</span><br>                map.put(<span class="hljs-string">&quot;h_title&quot;</span>,map.get(<span class="hljs-string">&quot;title&quot;</span>));<br>            &#125;<br>            list.add(map);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(list);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-4-控制层实现"><a href="#3-5-4-控制层实现" class="headerlink" title="3.5.4) 控制层实现"></a>3.5.4) 控制层实现</h4><p>新建控制器ArticleSearchController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><span class="hljs-keyword">import</span> com.heima.search.service.ArticleSearchService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/article/search&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleSearchController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ArticleSearchService articleSearchService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserSearchDto dto)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">return</span> articleSearchService.search(dto);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-5-测试"><a href="#3-5-5-测试" class="headerlink" title="3.5.5) 测试"></a>3.5.5) 测试</h4><p>需要在app的网关中添加搜索微服务的路由配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#搜索微服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">leadnews-search</span><br> <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://leadnews-search</span><br> <span class="hljs-attr">predicates:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/search/**</span><br> <span class="hljs-attr">filters:</span><br>   <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>启动项目进行测试，至少要启动文章微服务，用户微服务，搜索微服务，app网关微服务，app前端工程</p><h3 id="3-6-文章自动审核构建索引"><a href="#3-6-文章自动审核构建索引" class="headerlink" title="3.6) 文章自动审核构建索引"></a>3.6) 文章自动审核构建索引</h3><h4 id="3-6-1-思路分析"><a href="#3-6-1-思路分析" class="headerlink" title="3.6.1)思路分析"></a>3.6.1)思路分析</h4><p><img src="/../images/image-20210709143151781.png" alt="image-20210709143151781"></p><h4 id="3-6-2-文章微服务发送消息"><a href="#3-6-2-文章微服务发送消息" class="headerlink" title="3.6.2)文章微服务发送消息"></a>3.6.2)文章微服务发送消息</h4><p>1.把SearchArticleVo放到model工程下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.search.vos;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchArticleVo</span> &#123;<br><br>    <span class="hljs-comment">// 文章id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-comment">// 文章标题</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-comment">// 文章发布时间</span><br>    <span class="hljs-keyword">private</span> Date publishTime;<br>    <span class="hljs-comment">// 文章布局</span><br>    <span class="hljs-keyword">private</span> Integer layout;<br>    <span class="hljs-comment">// 封面</span><br>    <span class="hljs-keyword">private</span> String images;<br>    <span class="hljs-comment">// 作者id</span><br>    <span class="hljs-keyword">private</span> Long authorId;<br>    <span class="hljs-comment">// 作者名词</span><br>    <span class="hljs-keyword">private</span> String authorName;<br>    <span class="hljs-comment">//静态url</span><br>    <span class="hljs-keyword">private</span> String staticUrl;<br>    <span class="hljs-comment">//文章内容</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2.文章微服务的ArticleFreemarkerService中的buildArticleToMinIO方法中收集数据并发送消息</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;<br><span class="hljs-keyword">import</span> com.heima.article.mapper.ApArticleContentMapper;<br><span class="hljs-keyword">import</span> com.heima.article.service.ApArticleService;<br><span class="hljs-keyword">import</span> com.heima.article.service.ArticleFreemarkerService;<br><span class="hljs-keyword">import</span> com.heima.common.constants.ArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.file.service.FileStorageService;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> com.heima.model.search.vos.SearchArticleVo;<br><span class="hljs-keyword">import</span> freemarker.template.Configuration;<br><span class="hljs-keyword">import</span> freemarker.template.Template;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleFreemarkerServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArticleFreemarkerService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleContentMapper apArticleContentMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FileStorageService fileStorageService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleService apArticleService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成静态文件上传到minIO中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apArticle</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildArticleToMinIO</span><span class="hljs-params">(ApArticle apArticle, String content)</span> &#123;<br>        <span class="hljs-comment">//已知文章的id</span><br>        <span class="hljs-comment">//4.1 获取文章内容</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(content))&#123;<br>            <span class="hljs-comment">//4.2 文章内容通过freemarker生成html文件</span><br>            <span class="hljs-type">Template</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">StringWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>            <span class="hljs-keyword">try</span> &#123;<br>                template = configuration.getTemplate(<span class="hljs-string">&quot;article.ftl&quot;</span>);<br>                <span class="hljs-comment">//数据模型</span><br>                Map&lt;String,Object&gt; contentDataModel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>                contentDataModel.put(<span class="hljs-string">&quot;content&quot;</span>, JSONArray.parseArray(content));<br>                <span class="hljs-comment">//合成</span><br>                template.process(contentDataModel,out);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br><br><br>            <span class="hljs-comment">//4.3 把html文件上传到minio中</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(out.toString().getBytes());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> fileStorageService.uploadHtmlFile(<span class="hljs-string">&quot;&quot;</span>, apArticle.getId() + <span class="hljs-string">&quot;.html&quot;</span>, in);<br><br><br>            <span class="hljs-comment">//4.4 修改ap_article表，保存static_url字段</span><br>            apArticleService.update(Wrappers.&lt;ApArticle&gt;lambdaUpdate().eq(ApArticle::getId,apArticle.getId())<br>                    .set(ApArticle::getStaticUrl,path));<br><br>            <span class="hljs-comment">//发送消息，创建索引</span><br>            createArticleESIndex(apArticle,content,path);<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 送消息，创建索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apArticle</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> path</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createArticleESIndex</span><span class="hljs-params">(ApArticle apArticle, String content, String path)</span> &#123;<br>        <span class="hljs-type">SearchArticleVo</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchArticleVo</span>();<br>        BeanUtils.copyProperties(apArticle,vo);<br>        vo.setContent(content);<br>        vo.setStaticUrl(path);<br><br>        kafkaTemplate.send(ArticleConstants.ARTICLE_ES_SYNC_TOPIC, JSON.toJSONString(vo));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在ArticleConstants类中添加新的常量，完整代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.constants;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">LOADTYPE_LOAD_MORE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">LOADTYPE_LOAD_NEW</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;__all__&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ARTICLE_ES_SYNC_TOPIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;article.es.sync.topic&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">HOT_ARTICLE_LIKE_WEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">HOT_ARTICLE_COMMENT_WEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">HOT_ARTICLE_COLLECTION_WEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOT_ARTICLE_FIRST_PAGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hot_article_first_page_&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.文章微服务集成kafka发送消息</p><p>在文章微服务的nacos的配置中心添加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>      <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br></code></pre></td></tr></table></figure><h4 id="3-6-3-搜索微服务接收消息并创建索引"><a href="#3-6-3-搜索微服务接收消息并创建索引" class="headerlink" title="3.6.3)搜索微服务接收消息并创建索引"></a>3.6.3)搜索微服务接收消息并创建索引</h4><p>1.搜索微服务中添加kafka的配置,nacos配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br>      <span class="hljs-attr">key-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br>      <span class="hljs-attr">value-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span><br></code></pre></td></tr></table></figure><p>2.定义监听接收消息,保存索引数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.listener;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.common.constants.ArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.model.search.vos.SearchArticleVo;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.index.IndexRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.xcontent.XContentType;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncArticleListener</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-meta">@KafkaListener(topics = ArticleConstants.ARTICLE_ES_SYNC_TOPIC)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(message))&#123;<br><br>            log.info(<span class="hljs-string">&quot;SyncArticleListener,message=&#123;&#125;&quot;</span>,message);<br><br>            <span class="hljs-type">SearchArticleVo</span> <span class="hljs-variable">searchArticleVo</span> <span class="hljs-operator">=</span> JSON.parseObject(message, SearchArticleVo.class);<br>            <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">indexRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;app_info_article&quot;</span>);<br>            indexRequest.id(searchArticleVo.getId().toString());<br>            indexRequest.source(message, XContentType.JSON);<br>            <span class="hljs-keyword">try</span> &#123;<br>                restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>                log.error(<span class="hljs-string">&quot;sync es error=&#123;&#125;&quot;</span>,e);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-app端搜索-搜索记录"><a href="#4-app端搜索-搜索记录" class="headerlink" title="4) app端搜索-搜索记录"></a>4) app端搜索-搜索记录</h2><h3 id="4-1-需求分析-1"><a href="#4-1-需求分析-1" class="headerlink" title="4.1) 需求分析"></a>4.1) 需求分析</h3><p><img src="/../images/1587366878895.png" alt="1587366878895"></p><ul><li>展示用户的搜索记录10条，按照搜索关键词的时间倒序</li><li>可以删除搜索记录</li><li>保存历史记录，保存10条，多余的则删除最久的历史记录</li></ul><h3 id="4-2-数据存储说明"><a href="#4-2-数据存储说明" class="headerlink" title="4.2)数据存储说明"></a>4.2)数据存储说明</h3><p>用户的搜索记录，需要给每一个用户都保存一份，数据量较大，要求加载速度快，通常这样的数据存储到mongodb更合适，不建议直接存储到关系型数据库中</p><p><img src="/../images/image-20210709153428259.png" alt="image-20210709153428259"></p><h3 id="4-3-MongoDB安装及集成"><a href="#4-3-MongoDB安装及集成" class="headerlink" title="4.3)MongoDB安装及集成"></a>4.3)MongoDB安装及集成</h3><h4 id="4-3-1-安装MongoDB"><a href="#4-3-1-安装MongoDB" class="headerlink" title="4.3.1)安装MongoDB"></a>4.3.1)安装MongoDB</h4><p>拉取镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull mongo</span><br></code></pre></td></tr></table></figure><p>创建容器</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">docker run -di <span class="hljs-params">--name</span> mongo-service <span class="hljs-params">--restart=always</span> -p 27017<span class="hljs-function">:27017</span> -v ~<span class="hljs-string">/data/mongodata</span>:<span class="hljs-string">/data</span> mongo<br></code></pre></td></tr></table></figure><h4 id="4-3-2-导入资料中的mongo-demo项目到heima-leadnews-test中"><a href="#4-3-2-导入资料中的mongo-demo项目到heima-leadnews-test中" class="headerlink" title="4.3.2)导入资料中的mongo-demo项目到heima-leadnews-test中"></a>4.3.2)导入资料中的mongo-demo项目到heima-leadnews-test中</h4><p>其中有三项配置比较关键：</p><p>第一：mongo依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二：mongo配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9998</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">mongodb:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">27017</span><br>      <span class="hljs-attr">database:</span> <span class="hljs-string">leadnews-history</span><br></code></pre></td></tr></table></figure><p>第三：映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mongo.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 联想词表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(&quot;ap_associate_words&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApAssociateWords</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 联想词</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String associateWords;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-3-核心方法"><a href="#4-3-3-核心方法" class="headerlink" title="4.3.3)核心方法"></a>4.3.3)核心方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mongo.test;<br><br><br><span class="hljs-keyword">import</span> com.itheima.mongo.MongoApplication;<br><span class="hljs-keyword">import</span> com.itheima.mongo.pojo.ApAssociateWords;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.data.domain.Sort;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.query.Query;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest(classes = MongoApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MongoTest</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br><br>    <span class="hljs-comment">//保存</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">/*for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="hljs-comment">            ApAssociateWords apAssociateWords = new ApAssociateWords();</span><br><span class="hljs-comment">            apAssociateWords.setAssociateWords(&quot;黑马头条&quot;);</span><br><span class="hljs-comment">            apAssociateWords.setCreatedTime(new Date());</span><br><span class="hljs-comment">            mongoTemplate.save(apAssociateWords);</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-type">ApAssociateWords</span> <span class="hljs-variable">apAssociateWords</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApAssociateWords</span>();<br>        apAssociateWords.setAssociateWords(<span class="hljs-string">&quot;黑马直播&quot;</span>);<br>        apAssociateWords.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        mongoTemplate.save(apAssociateWords);<br><br>    &#125;<br><br>    <span class="hljs-comment">//查询一个</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveFindOne</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApAssociateWords</span> <span class="hljs-variable">apAssociateWords</span> <span class="hljs-operator">=</span> mongoTemplate.findById(<span class="hljs-string">&quot;60bd973eb0c1d430a71a7928&quot;</span>, ApAssociateWords.class);<br>        System.out.println(apAssociateWords);<br>    &#125;<br><br>    <span class="hljs-comment">//条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuery</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> Query.query(Criteria.where(<span class="hljs-string">&quot;associateWords&quot;</span>).is(<span class="hljs-string">&quot;黑马头条&quot;</span>))<br>                .with(Sort.by(Sort.Direction.DESC,<span class="hljs-string">&quot;createdTime&quot;</span>));<br>        List&lt;ApAssociateWords&gt; apAssociateWordsList = mongoTemplate.find(query, ApAssociateWords.class);<br>        System.out.println(apAssociateWordsList);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDel</span><span class="hljs-params">()</span>&#123;<br>        mongoTemplate.remove(Query.query(Criteria.where(<span class="hljs-string">&quot;associateWords&quot;</span>).is(<span class="hljs-string">&quot;黑马头条&quot;</span>)),ApAssociateWords.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-保存搜索记录"><a href="#4-4-保存搜索记录" class="headerlink" title="4.4)保存搜索记录"></a>4.4)保存搜索记录</h3><h4 id="4-4-1-实现思路"><a href="#4-4-1-实现思路" class="headerlink" title="4.4.1)实现思路"></a>4.4.1)实现思路</h4><p><img src="/../images/image-20210709153935904.png" alt="image-20210709153935904"></p><p>用户输入关键字进行搜索的异步记录关键字</p><p><img src="/../images/image-20210709154053892.png" alt="image-20210709154053892"></p><p>用户搜索记录对应的集合，对应实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.pojos;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * APP用户搜索信息表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(&quot;ap_user_search&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserSearch</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer userId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 搜索词</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String keyword;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-实现步骤"><a href="#4-4-2-实现步骤" class="headerlink" title="4.4.2)实现步骤"></a>4.4.2)实现步骤</h4><p>1.搜索微服务集成mongodb</p><p>①：pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>②：nacos配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>   <span class="hljs-attr">mongodb:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">27017</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">leadnews-history</span><br></code></pre></td></tr></table></figure><p>③：在当天资料中找到对应的实体类拷贝到搜索微服务下</p><p>2.创建ApUserSearchService新增insert方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApUserSearchService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存用户搜索历史记录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyword</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String keyword,Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserSearchServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApUserSearchService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存用户搜索历史记录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyword</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String keyword, Integer userId)</span> &#123;<br>        <span class="hljs-comment">//1.查询当前用户的搜索关键词</span><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> Query.query(Criteria.where(<span class="hljs-string">&quot;userId&quot;</span>).is(userId).and(<span class="hljs-string">&quot;keyword&quot;</span>).is(keyword));<br>        <span class="hljs-type">ApUserSearch</span> <span class="hljs-variable">apUserSearch</span> <span class="hljs-operator">=</span> mongoTemplate.findOne(query, ApUserSearch.class);<br><br>        <span class="hljs-comment">//2.存在 更新创建时间</span><br>        <span class="hljs-keyword">if</span>(apUserSearch != <span class="hljs-literal">null</span>)&#123;<br>            apUserSearch.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            mongoTemplate.save(apUserSearch);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//3.不存在，判断当前历史记录总数量是否超过10</span><br>        apUserSearch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApUserSearch</span>();<br>        apUserSearch.setUserId(userId);<br>        apUserSearch.setKeyword(keyword);<br>        apUserSearch.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query1</span> <span class="hljs-operator">=</span> Query.query(Criteria.where(<span class="hljs-string">&quot;userId&quot;</span>).is(userId));<br>        query1.with(Sort.by(Sort.Direction.DESC,<span class="hljs-string">&quot;createdTime&quot;</span>));<br>        List&lt;ApUserSearch&gt; apUserSearchList = mongoTemplate.find(query1, ApUserSearch.class);<br><br>        <span class="hljs-keyword">if</span>(apUserSearchList == <span class="hljs-literal">null</span> || apUserSearchList.size() &lt; <span class="hljs-number">10</span>)&#123;<br>            mongoTemplate.save(apUserSearch);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">ApUserSearch</span> <span class="hljs-variable">lastUserSearch</span> <span class="hljs-operator">=</span> apUserSearchList.get(apUserSearchList.size() - <span class="hljs-number">1</span>);<br>            mongoTemplate.findAndReplace(Query.query(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(lastUserSearch.getId())),apUserSearch);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.参考自媒体相关微服务，在搜索微服务中获取当前登录的用户</p><p>4.在ArticleSearchService的search方法中调用保存历史记录</p><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><span class="hljs-keyword">import</span> com.heima.model.user.pojos.ApUser;<br><span class="hljs-keyword">import</span> com.heima.search.service.ApUserSearchService;<br><span class="hljs-keyword">import</span> com.heima.search.service.ArticleSearchService;<br><span class="hljs-keyword">import</span> com.heima.utils.thread.AppThreadLocalUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchRequest;<br><span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchResponse;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RequestOptions;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<br><span class="hljs-keyword">import</span> org.elasticsearch.common.text.Text;<br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.*;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHit;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;<br><span class="hljs-keyword">import</span> org.elasticsearch.search.sort.SortOrder;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleSearchServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ArticleSearchService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApUserSearchService apUserSearchService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * es文章分页检索</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">search</span><span class="hljs-params">(UserSearchDto dto)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">//1.检查参数</span><br>        <span class="hljs-keyword">if</span>(dto == <span class="hljs-literal">null</span> || StringUtils.isBlank(dto.getSearchWords()))&#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>        &#125;<br><br>        <span class="hljs-type">ApUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> AppThreadLocalUtil.getUser();<br><br>        <span class="hljs-comment">//异步调用 保存搜索记录</span><br>        <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span> &amp;&amp; dto.getFromIndex() == <span class="hljs-number">0</span>)&#123;<br>            apUserSearchService.insert(dto.getSearchWords(), user.getId());<br>        &#125;<br><br><br>        <span class="hljs-comment">//2.设置查询条件</span><br>        <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;app_info_article&quot;</span>);<br>        <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();<br><br>        <span class="hljs-comment">//布尔查询</span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br><br>        <span class="hljs-comment">//关键字的分词之后查询</span><br>        <span class="hljs-type">QueryStringQueryBuilder</span> <span class="hljs-variable">queryStringQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.queryStringQuery(dto.getSearchWords()).field(<span class="hljs-string">&quot;title&quot;</span>).field(<span class="hljs-string">&quot;content&quot;</span>).defaultOperator(Operator.OR);<br>        boolQueryBuilder.must(queryStringQueryBuilder);<br><br>        <span class="hljs-comment">//查询小于mindate的数据</span><br>        <span class="hljs-type">RangeQueryBuilder</span> <span class="hljs-variable">rangeQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.rangeQuery(<span class="hljs-string">&quot;publishTime&quot;</span>).lt(dto.getMinBehotTime().getTime());<br>        boolQueryBuilder.filter(rangeQueryBuilder);<br><br>        <span class="hljs-comment">//分页查询</span><br>        searchSourceBuilder.from(<span class="hljs-number">0</span>);<br>        searchSourceBuilder.size(dto.getPageSize());<br><br>        <span class="hljs-comment">//按照发布时间倒序查询</span><br>        searchSourceBuilder.sort(<span class="hljs-string">&quot;publishTime&quot;</span>, SortOrder.DESC);<br><br>        <span class="hljs-comment">//设置高亮  title</span><br>        <span class="hljs-type">HighlightBuilder</span> <span class="hljs-variable">highlightBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>();<br>        highlightBuilder.field(<span class="hljs-string">&quot;title&quot;</span>);<br>        highlightBuilder.preTags(<span class="hljs-string">&quot;&lt;font style=&#x27;color: red; font-size: inherit;&#x27;&gt;&quot;</span>);<br>        highlightBuilder.postTags(<span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>);<br>        searchSourceBuilder.highlighter(highlightBuilder);<br><br><br>        searchSourceBuilder.query(boolQueryBuilder);<br>        searchRequest.source(searchSourceBuilder);<br>        <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br><br><br>        <span class="hljs-comment">//3.结果封装返回</span><br><br>        List&lt;Map&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        SearchHit[] hits = searchResponse.getHits().getHits();<br>        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> hit.getSourceAsString();<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> JSON.parseObject(json, Map.class);<br>            <span class="hljs-comment">//处理高亮</span><br>            <span class="hljs-keyword">if</span>(hit.getHighlightFields() != <span class="hljs-literal">null</span> &amp;&amp; hit.getHighlightFields().size() &gt; <span class="hljs-number">0</span>)&#123;<br>                Text[] titles = hit.getHighlightFields().get(<span class="hljs-string">&quot;title&quot;</span>).getFragments();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> StringUtils.join(titles);<br>                <span class="hljs-comment">//高亮标题</span><br>                map.put(<span class="hljs-string">&quot;h_title&quot;</span>,title);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//原始标题</span><br>                map.put(<span class="hljs-string">&quot;h_title&quot;</span>,map.get(<span class="hljs-string">&quot;title&quot;</span>));<br>            &#125;<br>            list.add(map);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(list);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.保存历史记录中开启异步调用，添加注解@Async</p><p>6.在搜索微服务引导类上开启异步调用</p><p><img src="/../images/image-20210709154841113.png" alt="image-20210709154841113"></p><p>7.测试，搜索后查看结果</p><h3 id="4-5-加载搜索记录列表"><a href="#4-5-加载搜索记录列表" class="headerlink" title="4.5) 加载搜索记录列表"></a>4.5) 加载搜索记录列表</h3><h4 id="4-5-1-思路分析"><a href="#4-5-1-思路分析" class="headerlink" title="4.5.1) 思路分析"></a>4.5.1) 思路分析</h4><p>按照当前用户，按照时间倒序查询</p><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/history/load</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>无</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><h4 id="4-5-2-接口定义"><a href="#4-5-2-接口定义" class="headerlink" title="4.5.2) 接口定义"></a>4.5.2) 接口定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * APP用户搜索信息表 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/history&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserSearchController</span>&#123;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/load&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findUserSearch</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-3-mapper"><a href="#4-5-3-mapper" class="headerlink" title="4.5.3) mapper"></a>4.5.3) mapper</h4><p>已定义</p><h4 id="4-5-4-业务层"><a href="#4-5-4-业务层" class="headerlink" title="4.5.4) 业务层"></a>4.5.4) 业务层</h4><p>在ApUserSearchService中新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     查询搜索历史</span><br><span class="hljs-comment">     <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>ResponseResult <span class="hljs-title function_">findUserSearch</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询搜索历史</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findUserSearch</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取当前用户</span><br>    <span class="hljs-type">ApUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> AppThreadLocalUtil.getUser();<br>    <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);<br>    &#125;<br><br>    <span class="hljs-comment">//根据用户查询数据，按照时间倒序</span><br>    List&lt;ApUserSearch&gt; apUserSearches = mongoTemplate.find(Query.query(Criteria.where(<span class="hljs-string">&quot;userId&quot;</span>).is(user.getId())).with(Sort.by(Sort.Direction.DESC, <span class="hljs-string">&quot;createdTime&quot;</span>)), ApUserSearch.class);<br>    <span class="hljs-keyword">return</span> ResponseResult.okResult(apUserSearches);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-5-控制器"><a href="#4-5-5-控制器" class="headerlink" title="4.5.5) 控制器"></a>4.5.5) 控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * APP用户搜索信息表 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/history&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserSearchController</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApUserSearchService apUserSearchService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/load&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findUserSearch</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> apUserSearchService.findUserSearch();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-6-测试"><a href="#4-5-6-测试" class="headerlink" title="4.5.6) 测试"></a>4.5.6) 测试</h4><p>打开app的搜索页面，可以查看搜索记录列表</p><h3 id="4-6-删除搜索记录"><a href="#4-6-删除搜索记录" class="headerlink" title="4.6) 删除搜索记录"></a>4.6) 删除搜索记录</h3><h4 id="4-6-1-思路分析"><a href="#4-6-1-思路分析" class="headerlink" title="4.6.1) 思路分析"></a>4.6.1) 思路分析</h4><p>按照搜索历史id删除</p><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/history/del</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>HistorySearchDto</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><h4 id="4-6-2-接口定义"><a href="#4-6-2-接口定义" class="headerlink" title="4.6.2) 接口定义"></a>4.6.2) 接口定义</h4><p>在ApUserSearchController接口新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/del&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">delUserSearch</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> HistorySearchDto historySearchDto)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>HistorySearchDto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HistorySearchDto</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 接收搜索历史记录id</span><br><span class="hljs-comment">    */</span><br>    String id;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-6-3-业务层"><a href="#4-6-3-业务层" class="headerlink" title="4.6.3) 业务层"></a>4.6.3) 业务层</h4><p>在ApUserSearchService中新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     删除搜索历史</span><br><span class="hljs-comment">     <span class="hljs-doctag">@param</span> historySearchDto</span><br><span class="hljs-comment">     <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>ResponseResult <span class="hljs-title function_">delUserSearch</span><span class="hljs-params">(HistorySearchDto historySearchDto)</span>;<br></code></pre></td></tr></table></figure><p>实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除历史记录</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">delUserSearch</span><span class="hljs-params">(HistorySearchDto dto)</span> &#123;<br>    <span class="hljs-comment">//1.检查参数</span><br>    <span class="hljs-keyword">if</span>(dto.getId() == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>    &#125;<br><br>    <span class="hljs-comment">//2.判断是否登录</span><br>    <span class="hljs-type">ApUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> AppThreadLocalUtil.getUser();<br>    <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);<br>    &#125;<br><br>    <span class="hljs-comment">//3.删除</span><br>    mongoTemplate.remove(Query.query(Criteria.where(<span class="hljs-string">&quot;userId&quot;</span>).is(user.getId()).and(<span class="hljs-string">&quot;id&quot;</span>).is(dto.getId())),ApUserSearch.class);<br>    <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-6-4-控制器"><a href="#4-6-4-控制器" class="headerlink" title="4.6.4) 控制器"></a>4.6.4) 控制器</h4><p>修改ApUserSearchController，补全方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/del&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">delUserSearch</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> HistorySearchDto historySearchDto)</span> &#123;<br>    <span class="hljs-keyword">return</span> apUserSearchService.delUserSearch(historySearchDto);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-6-5-测试"><a href="#4-6-5-测试" class="headerlink" title="4.6.5) 测试"></a>4.6.5) 测试</h4><p>打开app可以删除搜索记录</p><h2 id="5-app端搜索-关键字联想词"><a href="#5-app端搜索-关键字联想词" class="headerlink" title="5) app端搜索-关键字联想词"></a>5) app端搜索-关键字联想词</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p><img src="/../images/1587366921085.png" alt="1587366921085"></p><ul><li>根据用户输入的关键字展示联想词</li></ul><p>对应实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.pojos;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 联想词表</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(&quot;ap_associate_words&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApAssociateWords</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 联想词</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String associateWords;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-搜索词-数据来源"><a href="#5-2-搜索词-数据来源" class="headerlink" title="5.2)搜索词-数据来源"></a>5.2)搜索词-数据来源</h3><p>通常是网上搜索频率比较高的一些词，通常在企业中有两部分来源：</p><p>第一：自己维护搜索词</p><p>通过分析用户搜索频率较高的词，按照排名作为搜索词</p><p>第二：第三方获取</p><p>关键词规划师（百度）、5118、爱站网</p><p><img src="/../images/image-20210709160036983.png" alt="image-20210709160036983"></p><p>导入资料中的ap_associate_words.js脚本到mongo中</p><h3 id="5-3-功能实现"><a href="#5-3-功能实现" class="headerlink" title="5.3 功能实现"></a>5.3 功能实现</h3><h4 id="5-3-1-接口定义"><a href="#5-3-1-接口定义" class="headerlink" title="5.3.1 接口定义"></a>5.3.1 接口定义</h4><table><thead><tr><th></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>接口路径</td><td>/api/v1/associate/search</td></tr><tr><td>请求方式</td><td>POST</td></tr><tr><td>参数</td><td>UserSearchDto</td></tr><tr><td>响应结果</td><td>ResponseResult</td></tr></tbody></table><p>新建接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/associate&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApAssociateWordsController</span> &#123;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserSearchDto userSearchDto)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-3-3-业务层"><a href="#5-3-3-业务层" class="headerlink" title="5.3.3 业务层"></a>5.3.3 业务层</h4><p>新建联想词业务层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.service;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 联想词表 服务类</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApAssociateWordsService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     联想词</span><br><span class="hljs-comment">     <span class="hljs-doctag">@param</span> userSearchDto</span><br><span class="hljs-comment">     <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    ResponseResult <span class="hljs-title function_">findAssociate</span><span class="hljs-params">(UserSearchDto userSearchDto)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.service.impl;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><span class="hljs-keyword">import</span> com.heima.search.pojos.ApAssociateWords;<br><span class="hljs-keyword">import</span> com.heima.search.service.ApAssociateWordsService;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.query.Criteria;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.query.Query;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span>: V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApAssociateWordsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApAssociateWordsService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    MongoTemplate mongoTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 联想词</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userSearchDto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAssociate</span><span class="hljs-params">(UserSearchDto userSearchDto)</span> &#123;<br>        <span class="hljs-comment">//1 参数检查</span><br>        <span class="hljs-keyword">if</span>(userSearchDto == <span class="hljs-literal">null</span> || StringUtils.isBlank(userSearchDto.getSearchWords()))&#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>        &#125;<br>        <span class="hljs-comment">//分页检查</span><br>        <span class="hljs-keyword">if</span> (userSearchDto.getPageSize() &gt; <span class="hljs-number">20</span>) &#123;<br>            userSearchDto.setPageSize(<span class="hljs-number">20</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//3 执行查询 模糊查询</span><br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> Query.query(Criteria.where(<span class="hljs-string">&quot;associateWords&quot;</span>).regex(<span class="hljs-string">&quot;.*?\\&quot;</span> + userSearchDto.getSearchWords() + <span class="hljs-string">&quot;.*&quot;</span>));<br>        query.limit(userSearchDto.getPageSize());<br>        List&lt;ApAssociateWords&gt; wordsList = mongoTemplate.find(query, ApAssociateWords.class);<br><br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(wordsList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-4-控制器"><a href="#5-3-4-控制器" class="headerlink" title="5.3.4  控制器"></a>5.3.4  控制器</h4><p>新建联想词控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.search.controller.v1;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.search.dtos.UserSearchDto;<br><span class="hljs-keyword">import</span> com.heima.search.service.ApAssociateWordsService;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 联想词表 前端控制器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> itheima</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/associate&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApAssociateWordsController</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApAssociateWordsService apAssociateWordsService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">findAssociate</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserSearchDto userSearchDto)</span> &#123;<br>        <span class="hljs-keyword">return</span> apAssociateWordsService.findAssociate(userSearchDto);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-5-测试"><a href="#5-3-5-测试" class="headerlink" title="5.3.5 测试"></a>5.3.5 测试</h4><p>同样，打开前端联调测试效果</p><h1 id="8-xxl-Job分布式任务调度"><a href="#8-xxl-Job分布式任务调度" class="headerlink" title="8 xxl-Job分布式任务调度"></a>8 xxl-Job分布式任务调度</h1><h2 id="1-今日内容"><a href="#1-今日内容" class="headerlink" title="1 今日内容"></a>1 今日内容</h2><h3 id="1-1-需求分析-1"><a href="#1-1-需求分析-1" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h3><p><img src="/../images/image-20210729224950851.png" alt="image-20210729224950851"></p><p>目前实现的思路：从数据库直接按照发布时间倒序查询</p><ul><li><p>问题1：</p><p>  如何访问量较大，直接查询数据库，压力较大</p></li><li><p>问题2：</p><p>  新发布的文章会展示在前面，并不是热点文章</p></li></ul><h3 id="1-2-实现思路"><a href="#1-2-实现思路" class="headerlink" title="1.2 实现思路"></a>1.2 实现思路</h3><p>把热点数据存入redis进行展示</p><p>判断文章是否是热点，有几项标准： 点赞数量，评论数量，阅读数量，收藏数量</p><p>计算文章热度，有两种方案：</p><ul><li><p>定时计算文章热度</p></li><li><p>实时计算文章热度</p></li></ul><h3 id="1-3-定时计算"><a href="#1-3-定时计算" class="headerlink" title="1.3 定时计算"></a>1.3 定时计算</h3><p><img src="/../images/image-20210729225206299.png" alt="image-20210729225206299"></p><ul><li><p>根据文章的行为（点赞、评论、阅读、收藏）计算文章的分值，利用定时任务每天完成一次计算</p></li><li><p>把分值较大的文章数据存入到redis中</p></li><li><p>App端用户查询文章列表的时候，优先从redis中查询热度较高的文章数据</p></li></ul><h3 id="1-4-定时任务框架-xxljob"><a href="#1-4-定时任务框架-xxljob" class="headerlink" title="1.4 定时任务框架-xxljob"></a>1.4 定时任务框架-xxljob</h3><p>spring传统的定时任务@Scheduled，但是这样存在这一些问题 ：</p><ul><li><p>做集群任务的重复执行问题</p></li><li><p>cron表达式定义在代码之中，修改不方便</p></li><li><p>定时任务失败了，无法重试也没有统计</p></li><li><p>如果任务量过大，不能有效的分片执行</p></li></ul><p>解决这些问题的方案为：</p><p>xxl-job 分布式任务调度框架</p><h3 id="1-5-学习目录"><a href="#1-5-学习目录" class="headerlink" title="1.5 学习目录"></a>1.5 学习目录</h3><ul><li><p>xxl-job概述</p></li><li><p>xxl-job入门案例</p></li><li><p>xxl-job高级部分</p></li><li><p>热点文章定时计算</p></li><li><p>查询文章接口改造</p></li></ul><h2 id="2-分布式任务调度"><a href="#2-分布式任务调度" class="headerlink" title="2.分布式任务调度"></a>2.分布式任务调度</h2><h3 id="2-1-什么是分布式任务调度"><a href="#2-1-什么是分布式任务调度" class="headerlink" title="2.1 什么是分布式任务调度"></a>2.1 什么是分布式任务调度</h3><p>当前软件的架构已经开始向分布式架构转变，将单体结构拆分为若干服务，服务之间通过网络交互来完成业务处理。在分布式架构下，一个服务往往会部署多个实例来运行我们的业务，如果在这种分布式系统环境下运行任务调度，我们称之为<strong>分布式任务调度</strong>。</p><p><img src="/../images/image-20210729230059884.png" alt="image-20210729230059884"></p><p>将任务调度程序分布式构建，这样就可以具有分布式系统的特点，并且提高任务的调度处理能力：</p><p>1、并行任务调度</p><p>并行任务调度实现靠多线程，如果有大量任务需要调度，此时光靠多线程就会有瓶颈了，因为一台计算机CPU的处理能力是有限的。</p><p>如果将任务调度程序分布式部署，每个结点还可以部署为集群，这样就可以让多台计算机共同去完成任务调度，我们可以将任务分割为若干个分片，由不同的实例并行执行，来提高任务调度的处理效率。</p><p>2、高可用</p><p>若某一个实例宕机，不影响其他实例来执行任务。</p><p>3、弹性扩容</p><p>当集群中增加实例就可以提高并执行任务的处理效率。</p><p>4、任务管理与监测</p><p>对系统中存在的所有定时任务进行统一的管理及监测。让开发人员及运维人员能够时刻了解任务执行情况，从而做出快速的应急处理响应。</p><p><strong>分布式任务调度面临的问题：</strong></p><p>当任务调度以集群方式部署，同一个任务调度可能会执行多次，例如：电商系统定期发放优惠券，就可能重复发放优惠券，对公司造成损失，信用卡还款提醒就会重复执行多次，给用户造成烦恼，所以我们需要控制相同的任务在多个运行实例上只执行一次。常见解决方案：</p><ul><li>分布式锁，多个实例在任务执行前首先需要获取锁，如果获取失败那么就证明有其他服务已经在运行，如果获取成功那么证明没有服务在运行定时任务，那么就可以执行。</li><li>ZooKeeper选举，利用ZooKeeper对Leader实例执行定时任务，执行定时任务的时候判断自己是否是Leader，如果不是则不执行，如果是则执行业务逻辑，这样也能达到目的。</li></ul><h3 id="2-2-xxl-Job简介"><a href="#2-2-xxl-Job简介" class="headerlink" title="2.2 xxl-Job简介"></a>2.2 xxl-Job简介</h3><p>针对分布式任务调度的需求，市场上出现了很多的产品：</p><p>1） TBSchedule：淘宝推出的一款非常优秀的高性能分布式调度框架，目前被应用于阿里、京东、支付宝、国美等很多互联网企业的流程调度系统中。但是已经多年未更新，文档缺失严重，缺少维护。</p><p>2） XXL-Job：大众点评的分布式任务调度平台，是一个轻量级分布式任务调度平台, 其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><p>3）Elastic-job：当当网借鉴TBSchedule并基于quartz 二次开发的弹性分布式任务调度系统，功能丰富强大，采用zookeeper实现分布式协调，具有任务高可用以及分片功能。</p><p>4）Saturn： 唯品会开源的一个分布式任务调度平台，基于Elastic-job，可以全域统一配置，统一监<br>控，具有任务高可用以及分片功能。 </p><p>XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p><p>源码地址：<a href="https://gitee.com/xuxueli0323/xxl-job">https://gitee.com/xuxueli0323/xxl-job</a></p><p>文档地址：<a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></p><p><strong>特性</strong></p><ul><li><strong>简单灵活</strong><br>  提供Web页面对任务进行管理，管理系统支持用户管理、权限控制；<br>  支持容器部署；<br>  支持通过通用HTTP提供跨平台任务调度；</li><li><strong>丰富的任务管理功能</strong><br>  支持页面对任务CRUD操作；<br>  支持在页面编写脚本任务、命令行任务、Java代码任务并执行；<br>  支持任务级联编排，父任务执行结束后触发子任务执行；<br>  支持设置指定任务执行节点路由策略，包括轮询、随机、广播、故障转移、忙碌转移等；<br>  支持Cron方式、任务依赖、调度中心API接口方式触发任务执行</li><li><strong>高性能</strong><br>  任务调度流程全异步化设计实现，如异步调度、异步运行、异步回调等，有效对密集调度进行流量削峰；</li><li><strong>高可用</strong><br>  任务调度中心、任务执行节点均 集群部署，支持动态扩展、故障转移<br>  支持任务配置路由故障转移策略，执行器节点不可用是自动转移到其他节点执行<br>  支持任务超时控制、失败重试配置<br>  支持任务处理阻塞策略：调度当任务执行节点忙碌时来不及执行任务的处理策略，包括：串行、抛弃、覆盖策略</li><li><strong>易于监控运维</strong><br>  支持设置任务失败邮件告警，预留接口支持短信、钉钉告警；<br>  支持实时查看任务执行运行数据统计图表、任务进度监控数据、任务完整执行日志；</li></ul><h3 id="2-3-XXL-Job-环境搭建"><a href="#2-3-XXL-Job-环境搭建" class="headerlink" title="2.3 XXL-Job-环境搭建"></a>2.3 XXL-Job-环境搭建</h3><h4 id="2-3-1-调度中心环境要求"><a href="#2-3-1-调度中心环境要求" class="headerlink" title="2.3.1 调度中心环境要求"></a>2.3.1 调度中心环境要求</h4><ul><li>Maven3+</li><li>Jdk1.8+</li><li>Mysql5.7+</li></ul><h4 id="2-3-2-源码仓库地址"><a href="#2-3-2-源码仓库地址" class="headerlink" title="2.3.2 源码仓库地址"></a>2.3.2 源码仓库地址</h4><table><thead><tr><th align="left">源码仓库地址</th><th align="left">Release Download</th></tr></thead><tbody><tr><td align="left"><a href="https://github.com/xuxueli/xxl-job">https://github.com/xuxueli/xxl-job</a></td><td align="left"><a href="https://github.com/xuxueli/xxl-job/releases">Download</a></td></tr><tr><td align="left"><a href="http://gitee.com/xuxueli0323/xxl-job">http://gitee.com/xuxueli0323/xxl-job</a></td><td align="left"><a href="http://gitee.com/xuxueli0323/xxl-job/releases">Download</a></td></tr></tbody></table><p>也可以使用资料文件夹中的源码</p><h4 id="2-3-3-初始化“调度数据库”"><a href="#2-3-3-初始化“调度数据库”" class="headerlink" title="2.3.3 初始化“调度数据库”"></a>2.3.3 初始化“调度数据库”</h4><p>请下载项目源码并解压，获取 “调度数据库初始化SQL脚本” 并执行即可。</p><p>位置：<code>/xxl-job/doc/db/tables_xxl_job.sql</code>  共8张表</p><p><img src="/../images/image-20210730001433997.png" alt="image-20210730001433997"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">- xxl_job_lock：任务调度锁表；<br>- xxl_job_group：执行器信息表，维护任务执行器信息；<br>- xxl_job_info：调度扩展信息表： 用于保存XXL-JOB调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等；<br>- xxl_job_log：调度日志表： 用于保存XXL-JOB任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等；<br>- xxl_job_logglue：任务GLUE日志：用于保存GLUE更新历史，用于支持GLUE的版本回溯功能；<br>- xxl_job_registry：执行器注册表，维护在线的执行器和调度中心机器地址信息；<br>- xxl_job_user：系统用户表；<br></code></pre></td></tr></table></figure><p>调度中心支持集群部署，集群情况下各节点务必连接同一个mysql实例;</p><p>如果mysql做主从,调度中心集群节点务必强制走主库;</p><h4 id="2-3-4-编译源码"><a href="#2-3-4-编译源码" class="headerlink" title="2.3.4 编译源码"></a>2.3.4 编译源码</h4><p>解压源码,按照maven格式将源码导入IDE, 使用maven进行编译即可，源码结构如下：</p><p><img src="/../images/image-20210729230502703.png" alt="image-20210729230502703"></p><h4 id="2-3-5-配置部署“调度中心”"><a href="#2-3-5-配置部署“调度中心”" class="headerlink" title="2.3.5 配置部署“调度中心”"></a>2.3.5 配置部署“调度中心”</h4><p>调度中心项目：xxl-job-admin</p><p>作用：统一管理任务调度平台上调度任务，负责触发调度执行，并且提供任务管理平台。</p><p>步骤一：调度中心配置</p><p>调度中心配置文件地址：<code>/xxl-job/xxl-job-admin/src/main/resources/application.properties</code></p><p>数据库的连接信息修改为自己的数据库</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">### web</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8888</span><br><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/xxl-job-admin</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### actuator</span><br><span class="hljs-attr">management.server.servlet.context-path</span>=<span class="hljs-string">/actuator</span><br><span class="hljs-attr">management.health.mail.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### resources</span><br><span class="hljs-attr">spring.mvc.servlet.load-on-startup</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/static/**</span><br><span class="hljs-attr">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/static/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### freemarker</span><br><span class="hljs-attr">spring.freemarker.templateLoaderPath</span>=<span class="hljs-string">classpath:/templates/</span><br><span class="hljs-attr">spring.freemarker.suffix</span>=<span class="hljs-string">.ftl</span><br><span class="hljs-attr">spring.freemarker.charset</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-attr">spring.freemarker.request-context-attribute</span>=<span class="hljs-string">request</span><br><span class="hljs-attr">spring.freemarker.settings.number_format</span>=<span class="hljs-string">0.##########</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### mybatis</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="hljs-comment">#mybatis.type-aliases-package=com.xxl.job.admin.core.model</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### xxl-job, datasource</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/xxl_job?Unicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### datasource-pool</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.datasource.hikari.minimum-idle</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">spring.datasource.hikari.auto-commit</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.datasource.hikari.idle-timeout</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">spring.datasource.hikari.pool-name</span>=<span class="hljs-string">HikariCP</span><br><span class="hljs-attr">spring.datasource.hikari.max-lifetime</span>=<span class="hljs-string">900000</span><br><span class="hljs-attr">spring.datasource.hikari.connection-timeout</span>=<span class="hljs-string">10000</span><br><span class="hljs-attr">spring.datasource.hikari.connection-test-query</span>=<span class="hljs-string">SELECT 1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### xxl-job, email</span><br><span class="hljs-attr">spring.mail.host</span>=<span class="hljs-string">smtp.qq.com</span><br><span class="hljs-attr">spring.mail.port</span>=<span class="hljs-string">25</span><br><span class="hljs-attr">spring.mail.username</span>=<span class="hljs-string">xxx@qq.com</span><br><span class="hljs-attr">spring.mail.password</span>=<span class="hljs-string">xxx</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.auth</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="hljs-string">javax.net.ssl.SSLSocketFactory</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### xxl-job, access token</span><br><span class="hljs-attr">xxl.job.accessToken</span>=<span class="hljs-string"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### xxl-job, i18n (default is zh_CN, and you can choose &quot;zh_CN&quot;, &quot;zh_TC&quot; and &quot;en&quot;)</span><br><span class="hljs-attr">xxl.job.i18n</span>=<span class="hljs-string">zh_CN</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## xxl-job, triggerpool max size</span><br><span class="hljs-attr">xxl.job.triggerpool.fast.max</span>=<span class="hljs-string">200</span><br><span class="hljs-attr">xxl.job.triggerpool.slow.max</span>=<span class="hljs-string">100</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">### xxl-job, log retention days</span><br><span class="hljs-attr">xxl.job.logretentiondays</span>=<span class="hljs-string">30</span><br></code></pre></td></tr></table></figure><p>启动调度中心，默认登录账号 “admin/123456”, 登录后运行界面如下图所示。</p><p><img src="/../images/image-20210729230630495.png" alt="image-20210729230630495"></p><h3 id="2-4-配置部署调度中心-docker安装"><a href="#2-4-配置部署调度中心-docker安装" class="headerlink" title="2.4 配置部署调度中心-docker安装"></a>2.4 配置部署调度中心-docker安装</h3><p>1.创建mysql容器，初始化xxl-job的SQL脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p 3306:3306 --name mysql57 \<br>-v /opt/mysql/conf:/etc/mysql \<br>-v /opt/mysql/logs:/var/log/mysql \<br>-v /opt/mysql/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=root \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure><p>2.拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull xuxueli/xxl-job-admin:2.3.0<br></code></pre></td></tr></table></figure><p>3.创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -e PARAMS=&quot;--spring.datasource.url=jdbc:mysql://192.168.200.130:3306/xxl_job?Unicode=true&amp;characterEncoding=UTF-8 \<br>--spring.datasource.username=root \<br>--spring.datasource.password=root&quot; \<br>-p 8888:8080 -v /tmp:/data/applogs \<br>--name xxl-job-admin --restart=always  -d xuxueli/xxl-job-admin:2.3.0<br></code></pre></td></tr></table></figure><h3 id="2-5-xxl-job入门案例编写"><a href="#2-5-xxl-job入门案例编写" class="headerlink" title="2.5 xxl-job入门案例编写"></a>2.5 xxl-job入门案例编写</h3><h4 id="2-5-1-登录调度中心，点击下图所示“新建任务”按钮，新建示例任务"><a href="#2-5-1-登录调度中心，点击下图所示“新建任务”按钮，新建示例任务" class="headerlink" title="2.5.1 登录调度中心，点击下图所示“新建任务”按钮，新建示例任务"></a>2.5.1 登录调度中心，点击下图所示“新建任务”按钮，新建示例任务</h4><p><img src="/../images/image-20210729232146585.png" alt="image-20210729232146585"></p><h4 id="2-5-2-创建xxljob-demo项目，导入依赖"><a href="#2-5-2-创建xxljob-demo项目，导入依赖" class="headerlink" title="2.5.2 创建xxljob-demo项目，导入依赖"></a>2.5.2 创建xxljob-demo项目，导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--xxl-job--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuxueli<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxl-job-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-5-3-application-yml配置"><a href="#2-5-3-application-yml配置" class="headerlink" title="2.5.3 application.yml配置"></a>2.5.3 application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8881</span><br><br><br><span class="hljs-attr">xxl:</span><br>  <span class="hljs-attr">job:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">addresses:</span> <span class="hljs-string">http://192.168.200.130:8888/xxl-job-admin</span><br>    <span class="hljs-attr">executor:</span><br>      <span class="hljs-attr">appname:</span> <span class="hljs-string">xxl-job-executor-sample</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9999</span><br><br></code></pre></td></tr></table></figure><h4 id="2-5-4-新建配置类"><a href="#2-5-4-新建配置类" class="headerlink" title="2.5.4 新建配置类"></a>2.5.4 新建配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.xxljob.config;<br><br><span class="hljs-keyword">import</span> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * xxl-job config</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xuxueli 2017-04-28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XxlJobConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(XxlJobConfig.class);<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String adminAddresses;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appname;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> XxlJobSpringExecutor <span class="hljs-title function_">xxlJobExecutor</span><span class="hljs-params">()</span> &#123;<br>        logger.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);<br>        <span class="hljs-type">XxlJobSpringExecutor</span> <span class="hljs-variable">xxlJobSpringExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XxlJobSpringExecutor</span>();<br>        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);<br>        xxlJobSpringExecutor.setAppname(appname);<br>        xxlJobSpringExecutor.setPort(port);<br>        <span class="hljs-keyword">return</span> xxlJobSpringExecutor;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-4-任务代码，重要注解-XxlJob-“JobHandler”"><a href="#2-5-4-任务代码，重要注解-XxlJob-“JobHandler”" class="headerlink" title="2.5.4 任务代码，重要注解:@XxlJob(“JobHandler”)"></a>2.5.4 任务代码，重要注解:@XxlJob(“<strong>JobHandler</strong>”)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.xxljob.job;<br><br><span class="hljs-keyword">import</span> com.xxl.job.core.handler.annotation.XxlJob;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloJob</span> &#123;<br><br><br>    <span class="hljs-meta">@XxlJob(&quot;demoJobHandler&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">helloJob</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;简单任务执行了。。。。&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-5-测试-单节点"><a href="#2-5-5-测试-单节点" class="headerlink" title="2.5.5 测试-单节点"></a>2.5.5 测试-单节点</h4><ul><li><p>启动微服务</p></li><li><p>在xxl-job的调度中心中启动任务</p></li></ul><h3 id="2-6-任务详解-执行器"><a href="#2-6-任务详解-执行器" class="headerlink" title="2.6 任务详解-执行器"></a>2.6 任务详解-执行器</h3><ul><li><p>执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器, 实现任务自动发现功能; </p></li><li><p>另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器</p></li></ul><p><img src="/../images/image-20210729232926534.png" alt="image-20210729232926534"></p><p><img src="/../images/image-20210729232825564.png" alt="image-20210729232825564"></p><p> 以下是执行器的属性说明：</p><table><thead><tr><th>属性名称</th><th>说明</th></tr></thead><tbody><tr><td>AppName</td><td>是每个执行器集群的唯一标示AppName, 执行器会周期性以AppName为对象进行自动注册。可通过该配置自动发现注册成功的执行器, 供任务调度时使用;</td></tr><tr><td>名称</td><td>执行器的名称, 因为AppName限制字母数字等组成,可读性不强, 名称为了提高执行器的可读性;</td></tr><tr><td>排序</td><td>执行器的排序, 系统中需要执行器的地方,如任务新增, 将会按照该排序读取可用的执行器列表;</td></tr><tr><td>注册方式</td><td>调度中心获取执行器地址的方式；</td></tr><tr><td>机器地址</td><td>注册方式为”手动录入”时有效，支持人工维护执行器的地址信息；</td></tr></tbody></table><p>自动注册和手动注册的区别和配置</p><p><img src="/../images/image-20210729233016355.png" alt="image-20210729233016355"></p><h3 id="2-7-任务详解-基础配置"><a href="#2-7-任务详解-基础配置" class="headerlink" title="2.7 任务详解-基础配置"></a>2.7 任务详解-基础配置</h3><p><img src="/../images/image-20210729233926457.png" alt="image-20210729233926457"></p><p><strong>基础配置</strong></p><ul><li><p>执行器：每个任务必须绑定一个执行器, 方便给任务进行分组</p></li><li><p>任务描述：任务的描述信息，便于任务管理；</p></li><li><p>负责人：任务的负责人；</p></li><li><p>报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔</p></li></ul><p><img src="/../images/image-20210729234009010.png" alt="image-20210729234009010"></p><p><strong>调度配置</strong></p><ul><li>调度类型：<ul><li>无：该类型不会主动触发调度；</li><li>CRON：该类型将会通过CRON，触发任务调度；</li><li>固定速度：该类型将会以固定速度，触发任务调度；按照固定的间隔时间，周期性触发；</li></ul></li></ul><p><img src="/../images/image-20210729234114283.png" alt="image-20210729234114283"></p><p><strong>任务配置</strong></p><ul><li>运行模式：</li></ul><p>​    BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 “JobHandler” 属性匹配执行器中任务；</p><ul><li><p>JobHandler：运行模式为 “BEAN模式” 时生效，对应执行器中新开发的JobHandler类“@JobHandler”注解自定义的value值；</p></li><li><p>执行参数：任务执行所需的参数；</p></li></ul><p><img src="/../images/image-20210729234219162.png" alt="image-20210729234219162"></p><p><strong>阻塞处理策略</strong></p><p>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；</p><ul><li><p>单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO(First Input First Output)队列并以串行方式运行；</p></li><li><p>丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；</p></li><li><p>覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</p></li></ul><p><img src="/../images/image-20210729234256062.png" alt="image-20210729234256062"></p><p><strong>路由策略</strong></p><p>当执行器集群部署时，提供丰富的路由策略，包括；</p><ul><li><p>FIRST（第一个）：固定选择第一个机器；</p></li><li><p>LAST（最后一个）：固定选择最后一个机器；</p></li><li><p><strong>ROUND（轮询）</strong></p></li><li><p>RANDOM（随机）：随机选择在线的机器；</p></li><li><p>CONSISTENT_HASH（一致性HASH）：每个任务按照Hash算法固定选择某一台机器，且所有任务均匀散列在不同机器上。</p></li><li><p>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；</p></li><li><p>LEAST_RECENTLY_USED（最近最久未使用）：最久未使用的机器优先被选举；</p></li><li><p>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；</p></li><li><p>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</p></li><li><p><strong>SHARDING_BROADCAST(分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</strong></p></li></ul><p><img src="/../images/image-20210729234409132.png" alt="image-20210729234409132"></p><h3 id="2-8-路由策略-轮询-案例"><a href="#2-8-路由策略-轮询-案例" class="headerlink" title="2.8 路由策略(轮询)-案例"></a>2.8 路由策略(轮询)-案例</h3><p>1.修改任务为轮询</p><p><img src="/../images/image-20210729234513775.png" alt="image-20210729234513775"></p><p>2.启动多个微服务</p><p><img src="/../images/image-20210729234536483.png" alt="image-20210729234536483"></p><p>修改yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;port:8881&#125;</span><br><br><br><span class="hljs-attr">xxl:</span><br>  <span class="hljs-attr">job:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">addresses:</span> <span class="hljs-string">http://192.168.200.130:8888/xxl-job-admin</span><br>    <span class="hljs-attr">executor:</span><br>      <span class="hljs-attr">appname:</span> <span class="hljs-string">xxl-job-executor-sample</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;executor.port:9999&#125;</span><br></code></pre></td></tr></table></figure><p>3.启动多个微服务</p><p>每个微服务轮询的去执行任务</p><h3 id="2-9-路由策略-分片广播"><a href="#2-9-路由策略-分片广播" class="headerlink" title="2.9 路由策略(分片广播)"></a>2.9 路由策略(分片广播)</h3><h4 id="2-9-1-分片逻辑"><a href="#2-9-1-分片逻辑" class="headerlink" title="2.9.1 分片逻辑"></a>2.9.1 分片逻辑</h4><p>执行器集群部署时，任务路由策略选择”分片广播”情况下，一次任务调度将会广播触发对应集群中所有执行器执行一次任务</p><p><img src="/../images/image-20210729234756221.png" alt="image-20210729234756221"></p><p>执行器集群部署时，任务路由策略选择”分片广播”情况下，一次任务调度将会广播触发对应集群中所有执行器执行一次任务</p><p><img src="/../images/image-20210729234822935.png" alt="image-20210729234822935"></p><h4 id="2-9-2-路由策略-分片广播-案例"><a href="#2-9-2-路由策略-分片广播-案例" class="headerlink" title="2.9.2 路由策略(分片广播)-案例"></a>2.9.2 路由策略(分片广播)-案例</h4><p>需求：让两个节点同时执行10000个任务，每个节点分别执行5000个任务</p><p>①：创建分片执行器</p><p><img src="/../images/image-20210729234930218.png" alt="image-20210729234930218"></p><p>②：创建任务，路由策略为分片广播</p><p><img src="/../images/image-20210729234948571.png" alt="image-20210729234948571"></p><p>③：分片广播代码</p><p>   分片参数</p><p>​     index：当前分片序号(从0开始)，执行器集群列表中当前执行器的序号；</p><p>​     total：总分片数，执行器集群的总机器数量；</p><p>修改yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;port:8881&#125;</span><br><br><br><span class="hljs-attr">xxl:</span><br>  <span class="hljs-attr">job:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">addresses:</span> <span class="hljs-string">http://192.168.200.130:8888/xxl-job-admin</span><br>    <span class="hljs-attr">executor:</span><br>      <span class="hljs-attr">appname:</span> <span class="hljs-string">xxl-job-sharding-executor</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;executor.port:9999&#125;</span><br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.xxljob.job;<br><br><span class="hljs-keyword">import</span> com.xxl.job.core.context.XxlJobHelper;<br><span class="hljs-keyword">import</span> com.xxl.job.core.handler.annotation.XxlJob;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloJob</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String port;<br><br><br>    <span class="hljs-meta">@XxlJob(&quot;demoJobHandler&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">helloJob</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;简单任务执行了。。。。&quot;</span>+port);<br><br>    &#125;<br><br>    <span class="hljs-meta">@XxlJob(&quot;shardingJobHandler&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shardingJobHandler</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//分片的参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">shardIndex</span> <span class="hljs-operator">=</span> XxlJobHelper.getShardIndex();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shardTotal</span> <span class="hljs-operator">=</span> XxlJobHelper.getShardTotal();<br><br>        <span class="hljs-comment">//业务逻辑</span><br>        List&lt;Integer&gt; list = getList();<br>        <span class="hljs-keyword">for</span> (Integer integer : list) &#123;<br>            <span class="hljs-keyword">if</span>(integer % shardTotal == shardIndex)&#123;<br>                System.out.println(<span class="hljs-string">&quot;当前第&quot;</span>+shardIndex+<span class="hljs-string">&quot;分片执行了，任务项为：&quot;</span>+integer);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">getList</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            list.add(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>④：测试</p><p>启动多个微服务测试，一次执行可以执行多个任务</p><h2 id="3-热点文章-定时计算"><a href="#3-热点文章-定时计算" class="headerlink" title="3.热点文章-定时计算"></a>3.热点文章-定时计算</h2><h3 id="3-1-需求分析-1"><a href="#3-1-需求分析-1" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><p>需求：为每个频道缓存热度较高的30条文章优先展示</p><p><img src="/../images/image-20210729235644605.png" alt="image-20210729235644605"></p><p>判断文章热度较高的标准是什么？</p><p>文章：阅读，点赞，评论，收藏</p><h3 id="3-2-实现思路"><a href="#3-2-实现思路" class="headerlink" title="3.2 实现思路"></a>3.2 实现思路</h3><p><img src="/../images/image-20210729235731309.png" alt="image-20210729235731309"></p><h3 id="3-3-实现步骤"><a href="#3-3-实现步骤" class="headerlink" title="3.3 实现步骤"></a>3.3 实现步骤</h3><p>分值计算不涉及到前端工程，也无需提供api接口，是一个纯后台的功能的开发。</p><h4 id="3-3-1-频道列表远程接口准备"><a href="#3-3-1-频道列表远程接口准备" class="headerlink" title="3.3.1 频道列表远程接口准备"></a>3.3.1 频道列表远程接口准备</h4><p>计算完成新热数据后，需要给每个频道缓存一份数据，所以需要查询所有频道信息</p><p>① 在heima-leadnews-feign-api定义远程接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.apis.wemedia;<br><br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-meta">@FeignClient(&quot;leadnews-wemedia&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IWemediaClient</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/api/v1/channel/list&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">getChannels</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>② heima-leadnews-wemedia端提供接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.wemedia.feign;<br><br><span class="hljs-keyword">import</span> com.heima.apis.wemedia.IWemediaClient;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.wemedia.service.WmChannelService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WemediaClient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IWemediaClient</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WmChannelService wmChannelService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/api/v1/channel/list&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">getChannels</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> wmChannelService.findAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ApArticleMapper.xml新增方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findArticleListByLast5days&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap&quot;</span>&gt;</span><br>    SELECT<br>    aa.*<br>    FROM<br>    `ap_article` aa<br>    LEFT JOIN ap_article_config aac ON aa.id = aac.article_id<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        and aac.is_delete != 1<br>        and aac.is_down != 1<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;dayParam != null&quot;</span>&gt;</span><br>            and aa.publish_time &lt;![CDATA[&gt;=]]&gt; #&#123;dayParam&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改ApArticleMapper类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.heima.model.article.dtos.ArticleHomeDto;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ApArticleMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;ApArticle&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载文章列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type  1  加载更多   2记载最新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;ApArticle&gt; <span class="hljs-title function_">loadArticleList</span><span class="hljs-params">(ArticleHomeDto dto,Short type)</span>;<br><br>    <span class="hljs-keyword">public</span> List&lt;ApArticle&gt; <span class="hljs-title function_">findArticleListByLast5days</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;dayParam&quot;)</span> Date dayParam)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2-热文章业务层"><a href="#3-3-2-热文章业务层" class="headerlink" title="3.3.2 热文章业务层"></a>3.3.2 热文章业务层</h4><p>定义业务层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HotArticleService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算热点文章</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeHotArticle</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改ArticleConstans</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.constants;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleConstants</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">LOADTYPE_LOAD_MORE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Short</span> <span class="hljs-variable">LOADTYPE_LOAD_NEW</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;__all__&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ARTICLE_ES_SYNC_TOPIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;article.es.sync.topic&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">HOT_ARTICLE_LIKE_WEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">HOT_ARTICLE_COMMENT_WEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">HOT_ARTICLE_COLLECTION_WEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HOT_ARTICLE_FIRST_PAGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hot_article_first_page_&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个vo接收计算分值后的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.article.vos;<br><br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotArticleVo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApArticle</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章分值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer score;<br>&#125;<br></code></pre></td></tr></table></figure><p>业务层实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.apis.wemedia.IWemediaClient;<br><span class="hljs-keyword">import</span> com.heima.article.mapper.ApArticleMapper;<br><span class="hljs-keyword">import</span> com.heima.article.service.HotArticleService;<br><span class="hljs-keyword">import</span> com.heima.common.constants.ArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.common.redis.CacheService;<br><span class="hljs-keyword">import</span> com.heima.model.article.pojos.ApArticle;<br><span class="hljs-keyword">import</span> com.heima.model.article.vos.HotArticleVo;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.wemedia.pojos.WmChannel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.joda.time.DateTime;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotArticleServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HotArticleService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleMapper apArticleMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算热点文章</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeHotArticle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1.查询前5天的文章数据</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">dateParam</span> <span class="hljs-operator">=</span> DateTime.now().minusDays(<span class="hljs-number">50</span>).toDate();<br>        List&lt;ApArticle&gt; apArticleList = apArticleMapper.findArticleListByLast5days(dateParam);<br><br>        <span class="hljs-comment">//2.计算文章的分值</span><br>        List&lt;HotArticleVo&gt; hotArticleVoList = computeHotArticle(apArticleList);<br><br>        <span class="hljs-comment">//3.为每个频道缓存30条分值较高的文章</span><br>        cacheTagToRedis(hotArticleVoList);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IWemediaClient wemediaClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CacheService cacheService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为每个频道缓存30条分值较高的文章</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hotArticleVoList</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cacheTagToRedis</span><span class="hljs-params">(List&lt;HotArticleVo&gt; hotArticleVoList)</span> &#123;<br>        <span class="hljs-comment">//每个频道缓存30条分值较高的文章</span><br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> wemediaClient.getChannels();<br>        <span class="hljs-keyword">if</span>(responseResult.getCode().equals(<span class="hljs-number">200</span>))&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">channelJson</span> <span class="hljs-operator">=</span> JSON.toJSONString(responseResult.getData());<br>            List&lt;WmChannel&gt; wmChannels = JSON.parseArray(channelJson, WmChannel.class);<br>            <span class="hljs-comment">//检索出每个频道的文章</span><br>            <span class="hljs-keyword">if</span>(wmChannels != <span class="hljs-literal">null</span> &amp;&amp; wmChannels.size() &gt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">for</span> (WmChannel wmChannel : wmChannels) &#123;<br>                    List&lt;HotArticleVo&gt; hotArticleVos = hotArticleVoList.stream().filter(x -&gt; x.getChannelId().equals(wmChannel.getId())).collect(Collectors.toList());<br>                    <span class="hljs-comment">//给文章进行排序，取30条分值较高的文章存入redis  key：频道id   value：30条分值较高的文章</span><br>                    sortAndCache(hotArticleVos, ArticleConstants.HOT_ARTICLE_FIRST_PAGE + wmChannel.getId());<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">//设置推荐数据</span><br>        <span class="hljs-comment">//给文章进行排序，取30条分值较高的文章存入redis  key：频道id   value：30条分值较高的文章</span><br>        sortAndCache(hotArticleVoList, ArticleConstants.HOT_ARTICLE_FIRST_PAGE+ArticleConstants.DEFAULT_TAG);<br><br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 排序并且缓存数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hotArticleVos</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortAndCache</span><span class="hljs-params">(List&lt;HotArticleVo&gt; hotArticleVos, String key)</span> &#123;<br>        hotArticleVos = hotArticleVos.stream().sorted(Comparator.comparing(HotArticleVo::getScore).reversed()).collect(Collectors.toList());<br>        <span class="hljs-keyword">if</span> (hotArticleVos.size() &gt; <span class="hljs-number">30</span>) &#123;<br>            hotArticleVos = hotArticleVos.subList(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>);<br>        &#125;<br>        cacheService.set(key, JSON.toJSONString(hotArticleVos));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算文章分值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apArticleList</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;HotArticleVo&gt; <span class="hljs-title function_">computeHotArticle</span><span class="hljs-params">(List&lt;ApArticle&gt; apArticleList)</span> &#123;<br><br>        List&lt;HotArticleVo&gt; hotArticleVoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">if</span>(apArticleList != <span class="hljs-literal">null</span> &amp;&amp; apArticleList.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span> (ApArticle apArticle : apArticleList) &#123;<br>                <span class="hljs-type">HotArticleVo</span> <span class="hljs-variable">hot</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotArticleVo</span>();<br>                BeanUtils.copyProperties(apArticle,hot);<br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> computeScore(apArticle);<br>                hot.setScore(score);<br>                hotArticleVoList.add(hot);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hotArticleVoList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算文章的具体分值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apArticle</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">computeScore</span><span class="hljs-params">(ApArticle apArticle)</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">scere</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(apArticle.getLikes() != <span class="hljs-literal">null</span>)&#123;<br>            scere += apArticle.getLikes() * ArticleConstants.HOT_ARTICLE_LIKE_WEIGHT;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(apArticle.getViews() != <span class="hljs-literal">null</span>)&#123;<br>            scere += apArticle.getViews();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(apArticle.getComment() != <span class="hljs-literal">null</span>)&#123;<br>            scere += apArticle.getComment() * ArticleConstants.HOT_ARTICLE_COMMENT_WEIGHT;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(apArticle.getCollection() != <span class="hljs-literal">null</span>)&#123;<br>            scere += apArticle.getCollection() * ArticleConstants.HOT_ARTICLE_COLLECTION_WEIGHT;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> scere;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ArticleApplication的引导类中添加以下注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.heima.apis&quot;)</span><br></code></pre></td></tr></table></figure><p>现在数据库中准备点数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.service.impl;<br><br><span class="hljs-keyword">import</span> com.heima.article.ArticleApplication;<br><span class="hljs-keyword">import</span> com.heima.article.service.HotArticleService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@SpringBootTest(classes = ArticleApplication.class)</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotArticleServiceImplTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HotArticleService hotArticleService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeHotArticle</span><span class="hljs-params">()</span> &#123;<br>        hotArticleService.computeHotArticle();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-3-xxl-job定时计算-步骤"><a href="#3-3-3-xxl-job定时计算-步骤" class="headerlink" title="3.3.3 xxl-job定时计算-步骤"></a>3.3.3 xxl-job定时计算-步骤</h4><p>①：在heima-leadnews-article中的pom文件中新增依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--xxl-job--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuxueli<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxl-job-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 在xxl-job-admin中新建执行器和任务</p><p>新建执行器：leadnews-hot-article-executor</p><p><img src="/../images/image-20210730000549587.png" alt="image-20210730000549587"></p><p>新建任务：路由策略为轮询，Cron表达式：0 0 2 * * ? </p><p><img src="/../images/image-20210730000626824.png" alt="image-20210730000626824"></p><p>③ leadnews-article中集成xxl-job</p><p>XxlJobConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.config;<br><br><span class="hljs-keyword">import</span> com.xxl.job.core.executor.impl.XxlJobSpringExecutor;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * xxl-job config</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> xuxueli 2017-04-28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XxlJobConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(XxlJobConfig.class);<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String adminAddresses;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appname;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> XxlJobSpringExecutor <span class="hljs-title function_">xxlJobExecutor</span><span class="hljs-params">()</span> &#123;<br>        logger.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);<br>        <span class="hljs-type">XxlJobSpringExecutor</span> <span class="hljs-variable">xxlJobSpringExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XxlJobSpringExecutor</span>();<br>        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);<br>        xxlJobSpringExecutor.setAppname(appname);<br>        xxlJobSpringExecutor.setPort(port);<br>        <span class="hljs-keyword">return</span> xxlJobSpringExecutor;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>在nacos配置新增配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">xxl:</span><br>  <span class="hljs-attr">job:</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">addresses:</span> <span class="hljs-string">http://192.168.200.130:8888/xxl-job-admin</span><br>    <span class="hljs-attr">executor:</span><br>      <span class="hljs-attr">appname:</span> <span class="hljs-string">leadnews-hot-article-executor</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>④：在article微服务中新建任务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.job;<br><br><span class="hljs-keyword">import</span> com.heima.article.service.HotArticleService;<br><span class="hljs-keyword">import</span> com.xxl.job.core.handler.annotation.XxlJob;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputeHotArticleJob</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HotArticleService hotArticleService;<br><br>    <span class="hljs-meta">@XxlJob(&quot;computeHotArticleJob&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;热文章分值计算调度任务开始执行...&quot;</span>);<br>        hotArticleService.computeHotArticle();<br>        log.info(<span class="hljs-string">&quot;热文章分值计算调度任务结束...&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-查询文章接口改造"><a href="#4-查询文章接口改造" class="headerlink" title="4.查询文章接口改造"></a>4.查询文章接口改造</h2><h3 id="4-1-思路分析"><a href="#4-1-思路分析" class="headerlink" title="4.1 思路分析"></a>4.1 思路分析</h3><p><img src="/../images/image-20210613110712894.png" alt="image-20210613110712894"></p><h3 id="4-2-功能实现"><a href="#4-2-功能实现" class="headerlink" title="4.2 功能实现"></a>4.2 功能实现</h3><h4 id="4-2-1-在ApArticleService中新增方法"><a href="#4-2-1-在ApArticleService中新增方法" class="headerlink" title="4.2.1 在ApArticleService中新增方法"></a>4.2.1 在ApArticleService中新增方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载文章列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type  1 加载更多   2 加载最新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> firstPage  true  是首页  flase 非首页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">load2</span><span class="hljs-params">(ArticleHomeDto dto,Short type,<span class="hljs-type">boolean</span> firstPage)</span>;<br></code></pre></td></tr></table></figure><p>实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载文章列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type      1 加载更多   2 加载最新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> firstPage true  是首页  flase 非首页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">load2</span><span class="hljs-params">(ArticleHomeDto dto, Short type, <span class="hljs-type">boolean</span> firstPage)</span> &#123;<br>    <span class="hljs-keyword">if</span>(firstPage)&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> cacheService.get(ArticleConstants.HOT_ARTICLE_FIRST_PAGE + dto.getTag());<br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(jsonStr))&#123;<br>            List&lt;HotArticleVo&gt; hotArticleVoList = JSON.parseArray(jsonStr, HotArticleVo.class);<br>            <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">responseResult</span> <span class="hljs-operator">=</span> ResponseResult.okResult(hotArticleVoList);<br>            <span class="hljs-keyword">return</span> responseResult;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> load(type,dto);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-修改控制器"><a href="#4-2-2-修改控制器" class="headerlink" title="4.2.2 修改控制器"></a>4.2.2 修改控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载首页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@PostMapping(&quot;/load&quot;)</span><br><span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ArticleHomeDto dto)</span>&#123;<br>    <span class="hljs-comment">//        return apArticleService.load(dto, ArticleConstants.LOADTYPE_LOAD_MORE);</span><br>    <span class="hljs-keyword">return</span> apArticleService.load2(dto, ArticleConstants.LOADTYPE_LOAD_MORE,<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9-热点文章-实时计算"><a href="#9-热点文章-实时计算" class="headerlink" title="9 热点文章-实时计算"></a>9 热点文章-实时计算</h1><h2 id="1-今日内容-1"><a href="#1-今日内容-1" class="headerlink" title="1 今日内容"></a>1 今日内容</h2><h3 id="1-1-定时计算与实时计算"><a href="#1-1-定时计算与实时计算" class="headerlink" title="1.1 定时计算与实时计算"></a>1.1 定时计算与实时计算</h3><p><img src="/../images/image-20210730201509223.png" alt="image-20210730201509223"></p><h3 id="1-2-今日内容-1"><a href="#1-2-今日内容-1" class="headerlink" title="1.2 今日内容"></a>1.2 今日内容</h3><p>kafkaStream</p><ul><li><p>什么是流式计算</p></li><li><p>kafkaStream概述</p></li><li><p>kafkaStream入门案例</p></li><li><p>Springboot集成kafkaStream</p></li></ul><p>实时计算</p><ul><li><p>用户行为发送消息</p></li><li><p>kafkaStream聚合处理消息</p></li><li><p>更新文章行为数量</p></li><li><p>替换热点文章数据</p></li></ul><h2 id="2-实时流式计算"><a href="#2-实时流式计算" class="headerlink" title="2 实时流式计算"></a>2 实时流式计算</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>一般流式计算会与批量计算相比较。在流式计算模型中，输入是持续的，可以认为在时间上是无界的，也就意味着，永远拿不到全量数据去做计算。同时，计算结果是持续输出的，也即计算结果在时间上也是无界的。流式计算一般对实时性要求较高，同时一般是先定义目标计算，然后数据到来之后将计算逻辑应用于数据。同时为了提高计算效率，往往尽可能采用增量计算代替全量计算。</p><p><img src="/../images/image-20210731090637590.png" alt="image-20210731090637590"></p><p>流式计算就相当于上图的右侧扶梯，是可以源源不断的产生数据，源源不断的接收数据，没有边界。</p><h3 id="2-2-应用场景"><a href="#2-2-应用场景" class="headerlink" title="2.2 应用场景"></a>2.2 应用场景</h3><ul><li><p>日志分析</p><p>  网站的用户访问日志进行实时的分析，计算访问量，用户画像，留存率等等，实时的进行数据分析，帮助企业进行决策</p></li><li><p>大屏看板统计</p><p>  可以实时的查看网站注册数量，订单数量，购买数量，金额等。</p></li><li><p>公交实时数据</p><p>  可以随时更新公交车方位，计算多久到达站牌等</p></li><li><p>实时文章分值计算</p><p>  头条类文章的分值计算，通过用户的行为实时文章的分值，分值越高就越被推荐。</p></li></ul><h3 id="2-3-技术方案选型"><a href="#2-3-技术方案选型" class="headerlink" title="2.3 技术方案选型"></a>2.3 技术方案选型</h3><ul><li><p>Hadoop </p><p>  <img src="/../images/image-20210731090700382.png" alt="image-20210731090700382"></p></li><li><p>Apche Storm</p><p>  Storm 是一个分布式实时大数据处理系统，可以帮助我们方便地处理海量数据，具有高可靠、高容错、高扩展的特点。是流式框架，有很高的数据吞吐能力。</p></li><li><p>Kafka Stream </p><p>  可以轻松地将其嵌入任何Java应用程序中，并与用户为其流应用程序所拥有的任何现有打包，部署和操作工具集成。</p></li></ul><h2 id="3-Kafka-Stream"><a href="#3-Kafka-Stream" class="headerlink" title="3 Kafka Stream"></a>3 Kafka Stream</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>Kafka Stream是Apache Kafka从0.10版本引入的一个新Feature。它是提供了对存储于Kafka内的数据进行流式处理和分析的功能。</p><p>Kafka Stream的特点如下：</p><ul><li>Kafka Stream提供了一个非常简单而轻量的Library，它可以非常方便地嵌入任意Java应用中，也可以任意方式打包和部署</li><li>除了Kafka外，无任何外部依赖</li><li>充分利用Kafka分区机制实现水平扩展和顺序性保证</li><li>通过可容错的state store实现高效的状态操作（如windowed join和aggregation）</li><li>支持正好一次处理语义</li><li>提供记录级的处理能力，从而实现毫秒级的低延迟</li><li>支持基于事件时间的窗口操作，并且可处理晚到的数据（late arrival of records）</li><li>同时提供底层的处理原语Processor（类似于Storm的spout和bolt），以及高层抽象的DSL（类似于Spark的map/group/reduce）</li></ul><p><img src="/../images/image-20210730201706437.png" alt="image-20210730201706437"></p><h3 id="3-2-Kafka-Streams的关键概念"><a href="#3-2-Kafka-Streams的关键概念" class="headerlink" title="3.2 Kafka Streams的关键概念"></a>3.2 Kafka Streams的关键概念</h3><ul><li><strong>源处理器（Source Processor）</strong>：源处理器是一个没有任何上游处理器的特殊类型的流处理器。它从一个或多个kafka主题生成输入流。通过消费这些主题的消息并将它们转发到下游处理器。</li><li><strong>Sink处理器</strong>：sink处理器是一个没有下游流处理器的特殊类型的流处理器。它接收上游流处理器的消息发送到一个指定的<strong>Kafka主题</strong>。</li></ul><p><img src="/../images/image-20210731090727323.png" alt="image-20210731090727323"></p><h3 id="3-3-KStream"><a href="#3-3-KStream" class="headerlink" title="3.3 KStream"></a>3.3 KStream</h3><p>（1）数据结构类似于map,如下图，key-value键值对</p><p><img src="/../images/image-20210731090746415.png" alt="image-20210731090746415"></p><p>（2）KStream</p><p><img src="/../images/image-20210730201817959.png" alt="image-20210730201817959"></p><p><strong>KStream</strong>数据流（data stream），即是一段顺序的，可以无限长，不断更新的数据集。<br>数据流中比较常记录的是事件，这些事件可以是一次鼠标点击（click），一次交易，或是传感器记录的位置数据。</p><p>KStream负责抽象的，就是数据流。与Kafka自身topic中的数据一样，类似日志，每一次操作都是<strong>向其中插入（insert）新数据。</strong></p><p>为了说明这一点，让我们想象一下以下两个数据记录正在发送到流中：</p><p>（“ alice”，1）-&gt;（“” alice“，3）</p><p>如果您的流处理应用是要总结每个用户的价值，它将返回<code>4</code>了<code>alice</code>。为什么？因为第二条数据记录将不被视为先前记录的更新。（insert）新数据</p><h3 id="3-4-Kafka-Stream入门案例编写"><a href="#3-4-Kafka-Stream入门案例编写" class="headerlink" title="3.4 Kafka Stream入门案例编写"></a>3.4 Kafka Stream入门案例编写</h3><p>（1）需求分析，求单词个数（word count）</p><p><img src="/../images/image-20210730201911566.png" alt="image-20210730201911566"></p><p>（2）引入依赖</p><p>在之前的kafka-demo工程的pom文件中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-streams<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>connect-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>(3)创建原生的kafka staream入门案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.kafka.sample;<br><br><span class="hljs-keyword">import</span> org.apache.kafka.common.serialization.Serdes;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.KafkaStreams;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.KeyValue;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.StreamsBuilder;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.StreamsConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.kstream.KStream;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.kstream.TimeWindows;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.kstream.ValueMapper;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 流式处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaStreamQuickStart</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//kafka的配置信心</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="hljs-string">&quot;192.168.200.130:9092&quot;</span>);<br>        prop.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());<br>        prop.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());<br>        prop.put(StreamsConfig.APPLICATION_ID_CONFIG,<span class="hljs-string">&quot;streams-quickstart&quot;</span>);<br><br>        <span class="hljs-comment">//stream 构建器</span><br>        <span class="hljs-type">StreamsBuilder</span> <span class="hljs-variable">streamsBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamsBuilder</span>();<br><br>        <span class="hljs-comment">//流式计算</span><br>        streamProcessor(streamsBuilder);<br><br><br>        <span class="hljs-comment">//创建kafkaStream对象</span><br>        <span class="hljs-type">KafkaStreams</span> <span class="hljs-variable">kafkaStreams</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaStreams</span>(streamsBuilder.build(),prop);<br>        <span class="hljs-comment">//开启流式计算</span><br>        kafkaStreams.start();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 流式计算</span><br><span class="hljs-comment">     * 消息的内容：hello kafka  hello itcast</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> streamsBuilder</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">streamProcessor</span><span class="hljs-params">(StreamsBuilder streamsBuilder)</span> &#123;<br>        <span class="hljs-comment">//创建kstream对象，同时指定从那个topic中接收消息</span><br>        KStream&lt;String, String&gt; stream = streamsBuilder.stream(<span class="hljs-string">&quot;itcast-topic-input&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 处理消息的value</span><br><span class="hljs-comment">         */</span><br>        stream.flatMapValues(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueMapper</span>&lt;String, Iterable&lt;String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Iterable&lt;String&gt; <span class="hljs-title function_">apply</span><span class="hljs-params">(String value)</span> &#123;<br>                <span class="hljs-keyword">return</span> Arrays.asList(value.split(<span class="hljs-string">&quot; &quot;</span>));<br>            &#125;<br>        &#125;)<br>                <span class="hljs-comment">//按照value进行聚合处理</span><br>                .groupBy((key,value)-&gt;value)<br>                <span class="hljs-comment">//时间窗口</span><br>                .windowedBy(TimeWindows.of(Duration.ofSeconds(<span class="hljs-number">10</span>)))<br>                <span class="hljs-comment">//统计单词的个数</span><br>                .count()<br>                <span class="hljs-comment">//转换为kStream</span><br>                .toStream()<br>                .map((key,value)-&gt;&#123;<br>                    System.out.println(<span class="hljs-string">&quot;key:&quot;</span>+key+<span class="hljs-string">&quot;,vlaue:&quot;</span>+value);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyValue</span>&lt;&gt;(key.key().toString(),value.toString());<br>                &#125;)<br>                <span class="hljs-comment">//发送消息</span><br>                .to(<span class="hljs-string">&quot;itcast-topic-out&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>(4)测试准备</p><ul><li><p>使用生产者在topic为：itcast_topic_input中发送多条消息</p></li><li><p>使用消费者接收topic为：itcast_topic_out</p></li></ul><p>结果：</p><ul><li>通过流式计算，会把生产者的多条消息汇总成一条发送到消费者中输出</li></ul><h3 id="3-5-SpringBoot集成Kafka-Stream"><a href="#3-5-SpringBoot集成Kafka-Stream" class="headerlink" title="3.5 SpringBoot集成Kafka Stream"></a>3.5 SpringBoot集成Kafka Stream</h3><p>（1）自定配置参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.kafka.config;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.serialization.Serdes;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.StreamsConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.Topology;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.EnableKafkaStreams;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaStreamsDefaultConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.kafka.config.KafkaStreamsConfiguration;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过重新注册KafkaStreamsConfiguration对象，设置自定配置参数</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableKafkaStreams</span><br><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;kafka&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaStreamConfig</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_MESSAGE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>* <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>;<br>    <span class="hljs-keyword">private</span> String hosts;<br>    <span class="hljs-keyword">private</span> String group;<br>    <span class="hljs-meta">@Bean(name = KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME)</span><br>    <span class="hljs-keyword">public</span> KafkaStreamsConfiguration <span class="hljs-title function_">defaultKafkaStreamsConfig</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; props = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, hosts);<br>        props.put(StreamsConfig.APPLICATION_ID_CONFIG, <span class="hljs-built_in">this</span>.getGroup()+<span class="hljs-string">&quot;_stream_aid&quot;</span>);<br>        props.put(StreamsConfig.CLIENT_ID_CONFIG, <span class="hljs-built_in">this</span>.getGroup()+<span class="hljs-string">&quot;_stream_cid&quot;</span>);<br>        props.put(StreamsConfig.RETRIES_CONFIG, <span class="hljs-number">10</span>);<br>        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());<br>        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaStreamsConfiguration</span>(props);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改application.yml文件，在最下方添加自定义配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kafka:</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:9092</span><br>  <span class="hljs-attr">group:</span> <span class="hljs-string">$&#123;spring.application.name&#125;</span><br></code></pre></td></tr></table></figure><p>(2)新增配置类，创建KStream对象，进行聚合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.kafka.stream;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.KeyValue;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.StreamsBuilder;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.kstream.KStream;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.kstream.TimeWindows;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.kstream.ValueMapper;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaStreamHelloListener</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KStream&lt;String,String&gt; <span class="hljs-title function_">kStream</span><span class="hljs-params">(StreamsBuilder streamsBuilder)</span>&#123;<br>        <span class="hljs-comment">//创建kstream对象，同时指定从那个topic中接收消息</span><br>        KStream&lt;String, String&gt; stream = streamsBuilder.stream(<span class="hljs-string">&quot;itcast-topic-input&quot;</span>);<br>        stream.flatMapValues(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueMapper</span>&lt;String, Iterable&lt;String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Iterable&lt;String&gt; <span class="hljs-title function_">apply</span><span class="hljs-params">(String value)</span> &#123;<br>                <span class="hljs-keyword">return</span> Arrays.asList(value.split(<span class="hljs-string">&quot; &quot;</span>));<br>            &#125;<br>        &#125;)<br>                <span class="hljs-comment">//根据value进行聚合分组</span><br>                .groupBy((key,value)-&gt;value)<br>                <span class="hljs-comment">//聚合计算时间间隔</span><br>                .windowedBy(TimeWindows.of(Duration.ofSeconds(<span class="hljs-number">10</span>)))<br>                <span class="hljs-comment">//求单词的个数</span><br>                .count()<br>                .toStream()<br>                <span class="hljs-comment">//处理后的结果转换为string字符串</span><br>                .map((key,value)-&gt;&#123;<br>                    System.out.println(<span class="hljs-string">&quot;key:&quot;</span>+key+<span class="hljs-string">&quot;,value:&quot;</span>+value);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyValue</span>&lt;&gt;(key.key().toString(),value.toString());<br>                &#125;)<br>                <span class="hljs-comment">//发送消息</span><br>                .to(<span class="hljs-string">&quot;itcast-topic-out&quot;</span>);<br>        <span class="hljs-keyword">return</span> stream;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p>​    启动微服务，正常发送消息，可以正常接收到消息</p><h2 id="3-app端热点文章计算"><a href="#3-app端热点文章计算" class="headerlink" title="3 app端热点文章计算"></a>3 app端热点文章计算</h2><h3 id="3-1-思路说明"><a href="#3-1-思路说明" class="headerlink" title="3.1 思路说明"></a>3.1 思路说明</h3><p><img src="/../images/image-20210621235620854.png" alt="image-20210621235620854"></p><h3 id="3-2-功能实现"><a href="#3-2-功能实现" class="headerlink" title="3.2 功能实现"></a>3.2 功能实现</h3><h4 id="3-2-1-用户行为（阅读量，评论，点赞，收藏）发送消息，以阅读和点赞为例"><a href="#3-2-1-用户行为（阅读量，评论，点赞，收藏）发送消息，以阅读和点赞为例" class="headerlink" title="3.2.1 用户行为（阅读量，评论，点赞，收藏）发送消息，以阅读和点赞为例"></a>3.2.1 用户行为（阅读量，评论，点赞，收藏）发送消息，以阅读和点赞为例</h4><p>①在heima-leadnews-behavior微服务中集成kafka生产者配置</p><p>修改nacos，新增内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">leadnews-behavior</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:9092</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br>      <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span><br></code></pre></td></tr></table></figure><p>②修改ApLikesBehaviorServiceImpl新增发送消息</p><p>定义消息发送封装类：UpdateArticleMess</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.mess;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpdateArticleMess</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改文章的字段类型</span><br><span class="hljs-comment">      */</span><br>    <span class="hljs-keyword">private</span> UpdateArticleType type;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long articleId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改数据的增量，可为正负</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer add;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UpdateArticleType</span>&#123;<br>        COLLECTION,COMMENT,LIKES,VIEWS;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>topic常量类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.constants;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotArticleConstants</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HOT_ARTICLE_SCORE_TOPIC=<span class="hljs-string">&quot;hot.article.score.topic&quot;</span>;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.behavior.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.behavior.service.ApLikesBehaviorService;<br><span class="hljs-keyword">import</span> com.heima.common.constants.BehaviorConstants;<br><span class="hljs-keyword">import</span> com.heima.common.constants.HotArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.common.redis.CacheService;<br><span class="hljs-keyword">import</span> com.heima.model.behavior.dtos.LikesBehaviorDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.mess.UpdateArticleMess;<br><span class="hljs-keyword">import</span> com.heima.model.user.pojos.ApUser;<br><span class="hljs-keyword">import</span> com.heima.utils.thread.AppThreadLocalUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApLikesBehaviorServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApLikesBehaviorService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CacheService cacheService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">like</span><span class="hljs-params">(LikesBehaviorDto dto)</span> &#123;<br><br>        <span class="hljs-comment">//1.检查参数</span><br>        <span class="hljs-keyword">if</span> (dto == <span class="hljs-literal">null</span> || dto.getArticleId() == <span class="hljs-literal">null</span> || checkParam(dto)) &#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>        &#125;<br><br>        <span class="hljs-comment">//2.是否登录</span><br>        <span class="hljs-type">ApUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> AppThreadLocalUtil.getUser();<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);<br>        &#125;<br><br>        <span class="hljs-type">UpdateArticleMess</span> <span class="hljs-variable">mess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateArticleMess</span>();<br>        mess.setArticleId(dto.getArticleId());<br>        mess.setType(UpdateArticleMess.UpdateArticleType.LIKES);<br><br>        <span class="hljs-comment">//3.点赞  保存数据</span><br>        <span class="hljs-keyword">if</span> (dto.getOperation() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> cacheService.hGet(BehaviorConstants.LIKE_BEHAVIOR + dto.getArticleId().toString(), user.getId().toString());<br>            <span class="hljs-keyword">if</span> (obj != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID, <span class="hljs-string">&quot;已点赞&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 保存当前key</span><br>            log.info(<span class="hljs-string">&quot;保存当前key:&#123;&#125; ,&#123;&#125;, &#123;&#125;&quot;</span>, dto.getArticleId(), user.getId(), dto);<br>            cacheService.hPut(BehaviorConstants.LIKE_BEHAVIOR + dto.getArticleId().toString(), user.getId().toString(), JSON.toJSONString(dto));<br>            mess.setAdd(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 删除当前key</span><br>            log.info(<span class="hljs-string">&quot;删除当前key:&#123;&#125;, &#123;&#125;&quot;</span>, dto.getArticleId(), user.getId());<br>            cacheService.hDelete(BehaviorConstants.LIKE_BEHAVIOR + dto.getArticleId().toString(), user.getId().toString());<br>            mess.setAdd(-<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//发送消息，数据聚合</span><br>        kafkaTemplate.send(HotArticleConstants.HOT_ARTICLE_SCORE_TOPIC,JSON.toJSONString(mess));<br><br><br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查参数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkParam</span><span class="hljs-params">(LikesBehaviorDto dto)</span> &#123;<br>        <span class="hljs-keyword">if</span> (dto.getType() &gt; <span class="hljs-number">2</span> || dto.getType() &lt; <span class="hljs-number">0</span> || dto.getOperation() &gt; <span class="hljs-number">1</span> || dto.getOperation() &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>③修改阅读行为的类ApReadBehaviorServiceImpl发送消息</p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.behavior.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.behavior.service.ApReadBehaviorService;<br><span class="hljs-keyword">import</span> com.heima.common.constants.BehaviorConstants;<br><span class="hljs-keyword">import</span> com.heima.common.constants.HotArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.common.redis.CacheService;<br><span class="hljs-keyword">import</span> com.heima.model.behavior.dtos.ReadBehaviorDto;<br><span class="hljs-keyword">import</span> com.heima.model.common.dtos.ResponseResult;<br><span class="hljs-keyword">import</span> com.heima.model.common.enums.AppHttpCodeEnum;<br><span class="hljs-keyword">import</span> com.heima.model.mess.UpdateArticleMess;<br><span class="hljs-keyword">import</span> com.heima.model.user.pojos.ApUser;<br><span class="hljs-keyword">import</span> com.heima.utils.thread.AppThreadLocalUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApReadBehaviorServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApReadBehaviorService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CacheService cacheService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">readBehavior</span><span class="hljs-params">(ReadBehaviorDto dto)</span> &#123;<br>        <span class="hljs-comment">//1.检查参数</span><br>        <span class="hljs-keyword">if</span> (dto == <span class="hljs-literal">null</span> || dto.getArticleId() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.PARAM_INVALID);<br>        &#125;<br><br>        <span class="hljs-comment">//2.是否登录</span><br>        <span class="hljs-type">ApUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> AppThreadLocalUtil.getUser();<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);<br>        &#125;<br>        <span class="hljs-comment">//更新阅读次数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">readBehaviorJson</span> <span class="hljs-operator">=</span> (String) cacheService.hGet(BehaviorConstants.READ_BEHAVIOR + dto.getArticleId().toString(), user.getId().toString());<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(readBehaviorJson)) &#123;<br>            <span class="hljs-type">ReadBehaviorDto</span> <span class="hljs-variable">readBehaviorDto</span> <span class="hljs-operator">=</span> JSON.parseObject(readBehaviorJson, ReadBehaviorDto.class);<br>            dto.setCount((<span class="hljs-type">short</span>) (readBehaviorDto.getCount() + dto.getCount()));<br>        &#125;<br>        <span class="hljs-comment">// 保存当前key</span><br>        log.info(<span class="hljs-string">&quot;保存当前key:&#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>, dto.getArticleId(), user.getId(), dto);<br>        cacheService.hPut(BehaviorConstants.READ_BEHAVIOR + dto.getArticleId().toString(), user.getId().toString(), JSON.toJSONString(dto));<br><br>        <span class="hljs-comment">//发送消息，数据聚合</span><br>        <span class="hljs-type">UpdateArticleMess</span> <span class="hljs-variable">mess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateArticleMess</span>();<br>        mess.setArticleId(dto.getArticleId());<br>        mess.setType(UpdateArticleMess.UpdateArticleType.VIEWS);<br>        mess.setAdd(<span class="hljs-number">1</span>);<br>        kafkaTemplate.send(HotArticleConstants.HOT_ARTICLE_SCORE_TOPIC,JSON.toJSONString(mess));<br>        <br>        <br>        <span class="hljs-keyword">return</span> ResponseResult.okResult(AppHttpCodeEnum.SUCCESS);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-2-使用kafkaStream实时接收消息，聚合内容"><a href="#3-2-2-使用kafkaStream实时接收消息，聚合内容" class="headerlink" title="3.2.2 使用kafkaStream实时接收消息，聚合内容"></a>3.2.2 使用kafkaStream实时接收消息，聚合内容</h4><p>①在leadnews-article微服务中集成kafkaStream (参考kafka-demo)</p><p>②定义实体类，用于聚合之后的分值封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.model.article.mess;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleVisitStreamMess</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文章id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long articleId;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 阅读</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> view;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收藏</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> collect;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 评论</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> comment;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 点赞</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> like;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改常量类：增加常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.constans;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotArticleConstants</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HOT_ARTICLE_SCORE_TOPIC=<span class="hljs-string">&quot;hot.article.score.topic&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HOT_ARTICLE_INCR_HANDLE_TOPIC=<span class="hljs-string">&quot;hot.article.incr.handle.topic&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>③ 定义stream,接收消息并聚合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.stream;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.common.constants.HotArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.model.mess.ArticleVisitStreamMess;<br><span class="hljs-keyword">import</span> com.heima.model.mess.UpdateArticleMess;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.KeyValue;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.StreamsBuilder;<br><span class="hljs-keyword">import</span> org.apache.kafka.streams.kstream.*;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotArticleStreamHandler</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KStream&lt;String,String&gt; <span class="hljs-title function_">kStream</span><span class="hljs-params">(StreamsBuilder streamsBuilder)</span>&#123;<br>        <span class="hljs-comment">//接收消息</span><br>        KStream&lt;String,String&gt; stream = streamsBuilder.stream(HotArticleConstants.HOT_ARTICLE_SCORE_TOPIC);<br>        <span class="hljs-comment">//聚合流式处理</span><br>        stream.map((key,value)-&gt;&#123;<br>            <span class="hljs-type">UpdateArticleMess</span> <span class="hljs-variable">mess</span> <span class="hljs-operator">=</span> JSON.parseObject(value, UpdateArticleMess.class);<br>            <span class="hljs-comment">//重置消息的key:1234343434   和  value: likes:1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyValue</span>&lt;&gt;(mess.getArticleId().toString(),mess.getType().name()+<span class="hljs-string">&quot;:&quot;</span>+mess.getAdd());<br>        &#125;)<br>                <span class="hljs-comment">//按照文章id进行聚合</span><br>                .groupBy((key,value)-&gt;key)<br>                <span class="hljs-comment">//时间窗口</span><br>                .windowedBy(TimeWindows.of(Duration.ofSeconds(<span class="hljs-number">10</span>)))<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 自行的完成聚合的计算</span><br><span class="hljs-comment">                 */</span><br>                .aggregate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Initializer</span>&lt;String&gt;() &#123;<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 初始方法，返回值是消息的value</span><br><span class="hljs-comment">                     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">                     */</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">apply</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;COLLECTION:0,COMMENT:0,LIKES:0,VIEWS:0&quot;</span>;<br>                    &#125;<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 真正的聚合操作，返回值是消息的value</span><br><span class="hljs-comment">                     */</span><br>                &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Aggregator</span>&lt;String, String, String&gt;() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">apply</span><span class="hljs-params">(String key, String value, String aggValue)</span> &#123;<br>                        <span class="hljs-keyword">if</span>(StringUtils.isBlank(value))&#123;<br>                            <span class="hljs-keyword">return</span> aggValue;<br>                        &#125;<br>                        String[] aggAry = aggValue.split(<span class="hljs-string">&quot;,&quot;</span>);<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,com=<span class="hljs-number">0</span>,lik=<span class="hljs-number">0</span>,vie=<span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">for</span> (String agg : aggAry) &#123;<br>                            String[] split = agg.split(<span class="hljs-string">&quot;:&quot;</span>);<br>                            <span class="hljs-comment">/**</span><br><span class="hljs-comment">                             * 获得初始值，也是时间窗口内计算之后的值</span><br><span class="hljs-comment">                             */</span><br>                            <span class="hljs-keyword">switch</span> (UpdateArticleMess.UpdateArticleType.valueOf(split[<span class="hljs-number">0</span>]))&#123;<br>                                <span class="hljs-keyword">case</span> COLLECTION:<br>                                    col = Integer.parseInt(split[<span class="hljs-number">1</span>]);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> COMMENT:<br>                                    com = Integer.parseInt(split[<span class="hljs-number">1</span>]);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> LIKES:<br>                                    lik = Integer.parseInt(split[<span class="hljs-number">1</span>]);<br>                                    <span class="hljs-keyword">break</span>;<br>                                <span class="hljs-keyword">case</span> VIEWS:<br>                                    vie = Integer.parseInt(split[<span class="hljs-number">1</span>]);<br>                                    <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-comment">/**</span><br><span class="hljs-comment">                         * 累加操作</span><br><span class="hljs-comment">                         */</span><br>                        String[] valAry = value.split(<span class="hljs-string">&quot;:&quot;</span>);<br>                        <span class="hljs-keyword">switch</span> (UpdateArticleMess.UpdateArticleType.valueOf(valAry[<span class="hljs-number">0</span>]))&#123;<br>                            <span class="hljs-keyword">case</span> COLLECTION:<br>                                col += Integer.parseInt(valAry[<span class="hljs-number">1</span>]);<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-keyword">case</span> COMMENT:<br>                                com += Integer.parseInt(valAry[<span class="hljs-number">1</span>]);<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-keyword">case</span> LIKES:<br>                                lik += Integer.parseInt(valAry[<span class="hljs-number">1</span>]);<br>                                <span class="hljs-keyword">break</span>;<br>                            <span class="hljs-keyword">case</span> VIEWS:<br>                                vie += Integer.parseInt(valAry[<span class="hljs-number">1</span>]);<br>                                <span class="hljs-keyword">break</span>;<br>                        &#125;<br><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">formatStr</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;COLLECTION:%d,COMMENT:%d,LIKES:%d,VIEWS:%d&quot;</span>, col, com, lik, vie);<br>                        System.out.println(<span class="hljs-string">&quot;文章的id:&quot;</span>+key);<br>                        System.out.println(<span class="hljs-string">&quot;当前时间窗口内的消息处理结果：&quot;</span>+formatStr);<br>                        <span class="hljs-keyword">return</span> formatStr;<br>                    &#125;<br>                &#125;, Materialized.as(<span class="hljs-string">&quot;hot-atricle-stream-count-001&quot;</span>))<br>                .toStream()<br>                .map((key,value)-&gt;&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyValue</span>&lt;&gt;(key.key().toString(),formatObj(key.key().toString(),value));<br>                &#125;)<br>                <span class="hljs-comment">//发送消息</span><br>                .to(HotArticleConstants.HOT_ARTICLE_INCR_HANDLE_TOPIC);<br><br>        <span class="hljs-keyword">return</span> stream;<br><br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 格式化消息的value数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> articleId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">formatObj</span><span class="hljs-params">(String articleId,String value)</span>&#123;<br>        <span class="hljs-type">ArticleVisitStreamMess</span> <span class="hljs-variable">mess</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArticleVisitStreamMess</span>();<br>        mess.setArticleId(Long.valueOf(articleId));<br>        <span class="hljs-comment">//COLLECTION:0,COMMENT:0,LIKES:0,VIEWS:0</span><br>        String[] valAry = value.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String val : valAry) &#123;<br>            String[] split = val.split(<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-keyword">switch</span> (UpdateArticleMess.UpdateArticleType.valueOf(split[<span class="hljs-number">0</span>]))&#123;<br>                <span class="hljs-keyword">case</span> COLLECTION:<br>                    mess.setCollect(Integer.parseInt(split[<span class="hljs-number">1</span>]));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> COMMENT:<br>                    mess.setComment(Integer.parseInt(split[<span class="hljs-number">1</span>]));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> LIKES:<br>                    mess.setLike(Integer.parseInt(split[<span class="hljs-number">1</span>]));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> VIEWS:<br>                    mess.setView(Integer.parseInt(split[<span class="hljs-number">1</span>]));<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;聚合消息处理之后的结果为:&#123;&#125;&quot;</span>,JSON.toJSONString(mess));<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(mess);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-3-重新计算文章的分值，更新到数据库和缓存中"><a href="#3-2-3-重新计算文章的分值，更新到数据库和缓存中" class="headerlink" title="3.2.3 重新计算文章的分值，更新到数据库和缓存中"></a>3.2.3 重新计算文章的分值，更新到数据库和缓存中</h4><p>①在ApArticleService添加方法，用于更新数据库中的文章分值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新文章的分值  同时更新缓存中的热点文章数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mess</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateScore</span><span class="hljs-params">(ArticleVisitStreamMess mess)</span>;<br></code></pre></td></tr></table></figure><p>实现类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新文章的分值  同时更新缓存中的热点文章数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mess</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateScore</span><span class="hljs-params">(ArticleVisitStreamMess mess)</span> &#123;<br>    <span class="hljs-comment">//1.更新文章的阅读、点赞、收藏、评论的数量</span><br>    <span class="hljs-type">ApArticle</span> <span class="hljs-variable">apArticle</span> <span class="hljs-operator">=</span> updateArticle(mess);<br>    <span class="hljs-comment">//2.计算文章的分值</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> computeScore(apArticle);<br>    score = score * <span class="hljs-number">3</span>;<br><br>    <span class="hljs-comment">//3.替换当前文章对应频道的热点数据</span><br>    replaceDataToRedis(apArticle, score, ArticleConstants.HOT_ARTICLE_FIRST_PAGE + apArticle.getChannelId());<br><br>    <span class="hljs-comment">//4.替换推荐对应的热点数据</span><br>    replaceDataToRedis(apArticle, score, ArticleConstants.HOT_ARTICLE_FIRST_PAGE + ArticleConstants.DEFAULT_TAG);<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 替换数据并且存入到redis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apArticle</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> score</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceDataToRedis</span><span class="hljs-params">(ApArticle apArticle, Integer score, String s)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">articleListStr</span> <span class="hljs-operator">=</span> cacheService.get(s);<br>    <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(articleListStr)) &#123;<br>        List&lt;HotArticleVo&gt; hotArticleVoList = JSON.parseArray(articleListStr, HotArticleVo.class);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">//如果缓存中存在该文章，只更新分值</span><br>        <span class="hljs-keyword">for</span> (HotArticleVo hotArticleVo : hotArticleVoList) &#123;<br>            <span class="hljs-keyword">if</span> (hotArticleVo.getId().equals(apArticle.getId())) &#123;<br>                hotArticleVo.setScore(score);<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//如果缓存中不存在，查询缓存中分值最小的一条数据，进行分值的比较，如果当前文章的分值大于缓存中的数据，就替换</span><br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">if</span> (hotArticleVoList.size() &gt;= <span class="hljs-number">30</span>) &#123;<br>                hotArticleVoList = hotArticleVoList.stream().sorted(Comparator.comparing(HotArticleVo::getScore).reversed()).collect(Collectors.toList());<br>                <span class="hljs-type">HotArticleVo</span> <span class="hljs-variable">lastHot</span> <span class="hljs-operator">=</span> hotArticleVoList.get(hotArticleVoList.size() - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (lastHot.getScore() &lt; score) &#123;<br>                    hotArticleVoList.remove(lastHot);<br>                    <span class="hljs-type">HotArticleVo</span> <span class="hljs-variable">hot</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotArticleVo</span>();<br>                    BeanUtils.copyProperties(apArticle, hot);<br>                    hot.setScore(score);<br>                    hotArticleVoList.add(hot);<br>                &#125;<br><br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">HotArticleVo</span> <span class="hljs-variable">hot</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotArticleVo</span>();<br>                BeanUtils.copyProperties(apArticle, hot);<br>                hot.setScore(score);<br>                hotArticleVoList.add(hot);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//缓存到redis</span><br>        hotArticleVoList = hotArticleVoList.stream().sorted(Comparator.comparing(HotArticleVo::getScore).reversed()).collect(Collectors.toList());<br>        cacheService.set(s, JSON.toJSONString(hotArticleVoList));<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新文章行为数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mess</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> ApArticle <span class="hljs-title function_">updateArticle</span><span class="hljs-params">(ArticleVisitStreamMess mess)</span> &#123;<br>    <span class="hljs-type">ApArticle</span> <span class="hljs-variable">apArticle</span> <span class="hljs-operator">=</span> getById(mess.getArticleId());<br>    apArticle.setCollection(apArticle.getCollection()==<span class="hljs-literal">null</span>?<span class="hljs-number">0</span>:apArticle.getCollection()+mess.getCollect());<br>    apArticle.setComment(apArticle.getComment()==<span class="hljs-literal">null</span>?<span class="hljs-number">0</span>:apArticle.getComment()+mess.getComment());<br>    apArticle.setLikes(apArticle.getLikes()==<span class="hljs-literal">null</span>?<span class="hljs-number">0</span>:apArticle.getLikes()+mess.getLike());<br>    apArticle.setViews(apArticle.getViews()==<span class="hljs-literal">null</span>?<span class="hljs-number">0</span>:apArticle.getViews()+mess.getView());<br>    updateById(apArticle);<br>    <span class="hljs-keyword">return</span> apArticle;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算文章的具体分值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> apArticle</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">computeScore</span><span class="hljs-params">(ApArticle apArticle)</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(apArticle.getLikes() != <span class="hljs-literal">null</span>)&#123;<br>        score += apArticle.getLikes() * ArticleConstants.HOT_ARTICLE_LIKE_WEIGHT;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(apArticle.getViews() != <span class="hljs-literal">null</span>)&#123;<br>        score += apArticle.getViews();<br>    &#125;<br>    <span class="hljs-keyword">if</span>(apArticle.getComment() != <span class="hljs-literal">null</span>)&#123;<br>        score += apArticle.getComment() * ArticleConstants.HOT_ARTICLE_COMMENT_WEIGHT;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(apArticle.getCollection() != <span class="hljs-literal">null</span>)&#123;<br>        score += apArticle.getCollection() * ArticleConstants.HOT_ARTICLE_COLLECTION_WEIGHT;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> score;<br>&#125;<br></code></pre></td></tr></table></figure><p>②定义监听，接收聚合之后的数据，文章的分值重新进行计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.article.listener;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.heima.article.service.ApArticleService;<br><span class="hljs-keyword">import</span> com.heima.common.constants.HotArticleConstants;<br><span class="hljs-keyword">import</span> com.heima.model.mess.ArticleVisitStreamMess;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArticleIncrHandleListener</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApArticleService apArticleService;<br><br>    <span class="hljs-meta">@KafkaListener(topics = HotArticleConstants.HOT_ARTICLE_INCR_HANDLE_TOPIC)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String mess)</span>&#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isNotBlank(mess))&#123;<br>            <span class="hljs-type">ArticleVisitStreamMess</span> <span class="hljs-variable">articleVisitStreamMess</span> <span class="hljs-operator">=</span> JSON.parseObject(mess, ArticleVisitStreamMess.class);<br>            apArticleService.updateScore(articleVisitStreamMess);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="10-项目部署-持续集成"><a href="#10-项目部署-持续集成" class="headerlink" title="10 项目部署_持续集成"></a>10 项目部署_持续集成</h1><h2 id="1-今日内容介绍-1"><a href="#1-今日内容介绍-1" class="headerlink" title="1 今日内容介绍"></a>1 今日内容介绍</h2><h3 id="1-1-什么是持续集成"><a href="#1-1-什么是持续集成" class="headerlink" title="1.1 什么是持续集成"></a>1.1 什么是持续集成</h3><p>持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干</p><p><img src="/../images/image-20210802000658790.png" alt="image-20210802000658790"></p><p><strong>持续集成的组成要素</strong></p><p>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成的， 无需人工干预。</p><p>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用SVN或Git。</p><p>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</p><h3 id="1-2-持续集成的好处"><a href="#1-2-持续集成的好处" class="headerlink" title="1.2 持续集成的好处"></a>1.2 持续集成的好处</h3><p>1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；<br>2、对系统健康持续检查，减少发布风险带来的问题；<br>3、减少重复性工作；<br>4、持续部署，提供可部署单元包；<br>5、持续交付可供使用的版本；<br>6、增强团队信心；</p><h3 id="1-3-今日内容"><a href="#1-3-今日内容" class="headerlink" title="1.3 今日内容"></a>1.3 今日内容</h3><p><img src="/../images/image-20210802000829722.png" alt="image-20210802000829722"></p><h2 id="2-软件开发模式"><a href="#2-软件开发模式" class="headerlink" title="2 软件开发模式"></a>2 软件开发模式</h2><h3 id="2-1-软件开发生命周期"><a href="#2-1-软件开发生命周期" class="headerlink" title="2.1 软件开发生命周期"></a>2.1 软件开发生命周期</h3><p>软件开发生命周期又叫做SDLC（Software Development Life Cycle），它是集合了计划、开发、测试和部署过程的集合。如下图所示 ：</p><p><img src="/../images/image-20210802011508487.png" alt="image-20210802011508487"></p><ul><li><p>需求分析</p><p>  这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。</p></li><li><p>设计</p><p>  第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目计划。计划可以使用图表，布局设计或者文字的方式呈现。</p></li><li><p>实现</p><p>  第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。</p></li><li><p>测试</p><p>  测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等。</p></li><li><p>进化</p><p>  最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修改，bug修复，功能增加等。</p></li></ul><h3 id="2-2-软件开发瀑布模型"><a href="#2-2-软件开发瀑布模型" class="headerlink" title="2.2 软件开发瀑布模型"></a>2.2 软件开发瀑布模型</h3><p>瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开发， 但是已经不适合现在的开发了。</p><p>下图对软件开发模型的一个阐述。</p><p><img src="/../images/image-20210802011525024.png" alt="image-20210802011525024"></p><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>简单易用和理解</td><td>各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。</td></tr><tr><td>当前一阶段完成后，您只需要去关注后续阶段。</td><td>由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。</td></tr><tr><td>为项目提供了按阶段划分的检查节点</td><td>瀑布模型的突出缺点是不适应用户需求的变化。</td></tr></tbody></table><h3 id="2-3-软件的敏捷开发"><a href="#2-3-软件的敏捷开发" class="headerlink" title="2.3 软件的敏捷开发"></a>2.3 软件的敏捷开发</h3><ul><li><p>什么是敏捷开发？</p><p>  敏捷开发（Agile Development） 的核心是迭代开发（Iterative Development） 与 增量开发（Incremental Development）。</p></li><li><p>何为迭代开发？</p><p>  对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p>  举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p></li><li><p>何为增量开发？</p><p>  软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p>  举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼……每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶……</p></li><li><p>敏捷开发如何迭代？</p><p>  虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p></li></ul><p><img src="/../images/image-20210802011540379.png" alt="image-20210802011540379"></p><ul><li><p>敏捷开发有什么好处？</p><ul><li><p>早期交付</p><p>  敏捷开发的第一个好处，就是早期交付，从而大大降低成本。 还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。 敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p></li><li><p>降低风险</p><p>  敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。 请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p></li></ul></li></ul><h2 id="3-Jenkins安装配置"><a href="#3-Jenkins安装配置" class="headerlink" title="3 Jenkins安装配置"></a>3 Jenkins安装配置</h2><h3 id="3-1-Jenkins介绍"><a href="#3-1-Jenkins介绍" class="headerlink" title="3.1 Jenkins介绍"></a>3.1 Jenkins介绍</h3><p><img src="/../images/image-20210802011553923.png" alt="image-20210802011553923"></p><p>Jenkins  是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。官网：  <a href="http://jenkins-ci.org/%E3%80%82">http://jenkins-ci.org/。</a></p><p>Jenkins的特征：</p><ul><li>开源的 Java语言开发持续集成工具，支持持续集成，持续部署。</li><li>易于安装部署配置：可通过 yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</li><li>消息通知及测试报告：集成 RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit/TestNG测试报告。</li><li>分布式构建：支持 Jenkins能够让多台计算机一起构建/测试。</li><li>文件识别： Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li><li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如 git，svn，maven，docker等。</li></ul><p>Jenkins安装和持续集成环境配置</p><p><img src="/../images/image-20210802011607894.png" alt="image-20210802011607894"></p><p>1 ）首先，开发人员每天进行代码提交，提交到Git仓库</p><p>2）然后，Jenkins作为持续集成工具，使用Git工具到Git仓库拉取代码到集成服务器，再配合JDK，Maven等软件完成代码编译，代码测试与审查，测试，打包等工作，在这个过程中每一步出错，都重新再执行一次整个流程。</p><p>3）最后，Jenkins把生成的jar或war包分发到测试服务器或者生产服务器，测试人员或用户就可以访问应用。</p><h3 id="3-2-Jenkins环境搭建"><a href="#3-2-Jenkins环境搭建" class="headerlink" title="3.2 Jenkins环境搭建"></a>3.2 Jenkins环境搭建</h3><h4 id="3-2-1-Jenkins安装配置"><a href="#3-2-1-Jenkins安装配置" class="headerlink" title="3.2.1  Jenkins安装配置"></a>3.2.1  Jenkins安装配置</h4><p>可以导入资料中的镜像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">服务器用户名：root   密码：itcast<br><br>jenkins  用户名：itcast   密码：itcast<br></code></pre></td></tr></table></figure><ol><li><p>采用YUM方式安装</p><p> 加入jenkins安装源：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo --no-check-certificate<br><br>sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key<br></code></pre></td></tr></table></figure><p> 执行yum命令安装：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install jenkins<br></code></pre></td></tr></table></figure></li><li><p>采用RPM安装包方式</p><p> <a href="https://pkg.jenkins.io/redhat-stable/">Jenkins安装包下载地址</a></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://pkg.jenkins.io/redhat-stable/jenkins-2.190.1-1.1.noarch.rpm<br></code></pre></td></tr></table></figure><p> 执行安装：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rpm -ivh jenkins-2.190.1-1.1.noarch.rpm<br></code></pre></td></tr></table></figure></li><li><p>配置：</p><p> 修改配置文件：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/sysconfig/jenkins<br></code></pre></td></tr></table></figure><p> 修改内容：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 修改为对应的目标用户， 这里使用的是root</span><br><span class="hljs-variable">$JENKINS_USER</span>=<span class="hljs-string">&quot;root&quot;</span><br><span class="hljs-comment"># 服务监听端口</span><br>JENKINS_PORT=<span class="hljs-string">&quot;16060&quot;</span><br></code></pre></td></tr></table></figure><p> 目录权限：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> -R root:root /var/lib/jenkins<br><span class="hljs-built_in">chown</span> -R root:root /var/cache/jenkins<br><span class="hljs-built_in">chown</span> -R root:root /var/log/jenkins<br></code></pre></td></tr></table></figure><p> 重启：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl restart jenkins<br></code></pre></td></tr></table></figure><p> 如果启动失败， 出现错误信息：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Starting Jenkins bash: /usr/bin/java: No such file or directory<br></code></pre></td></tr></table></figure><p> 创建JAVA环境的软链接：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ln</span> -s /usr/local/jdk/bin/java /usr/bin/java<br></code></pre></td></tr></table></figure></li><li><p>管理后台初始化设置</p><p> <a href="http://192.168.200.100:16060/">http://192.168.200.100:16060/</a></p><p> 需要输入管理密码， 在以下位置查看：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cat</span> /var/lib/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure><p> <img src="/../images/image-20210802011625800.png" alt="image-20210802011625800"></p><p> 按默认设置，把建议的插件都安装上</p><p> <img src="/../images/image-20210802011638639.png" alt="image-20210802011638639"></p><p> 这一步等待时间较长， 安装完成之后， 创建管理员用户：</p><p> <img src="/../images/image-20210802011653454.png" alt="image-20210802011653454"></p></li></ol><p>配置访问地址：</p><p><img src="/../images/image-20210802011707013.png" alt="image-20210802011707013"></p><p>配置完成之后， 会进行重启， 之后可以看到管理后台：</p><p><img src="/../images/image-20210802011723835.png" alt="image-20210802011723835"></p><h4 id="3-2-2-Jenkins插件安装"><a href="#3-2-2-Jenkins插件安装" class="headerlink" title="3.2.2  Jenkins插件安装"></a>3.2.2  Jenkins插件安装</h4><p>在实现持续集成之前， 需要确保以下插件安装成功。</p><ul><li>Maven Integration plugin： Maven 集成管理插件。</li><li>Docker plugin： Docker集成插件。</li><li>GitLab Plugin： GitLab集成插件。</li><li>Publish Over SSH：远程文件发布插件。</li><li>SSH: 远程脚本执行插件。</li></ul><p>安装方法：</p><ol><li><p>进入【系统管理】-【插件管理】</p></li><li><p>点击标签页的【可选插件】</p><p> 在过滤框中搜索插件名称</p><p> <img src="/../images/image-20210802011740056.png" alt="image-20210802011740056"></p></li><li><p>勾选插件， 点击直接安装即可。</p></li></ol><blockquote><p>注意，如果没有安装按钮，需要更改配置</p><p>在安装插件的高级配置中，修改升级站点的连接为：<a href="http://updates.jenkins.io/update-center.json">http://updates.jenkins.io/update-center.json</a>   保存</p><p><img src="/../images/image-20210802011758588.png" alt="image-20210802011758588"></p></blockquote><h4 id="3-2-3-Git安装配置"><a href="#3-2-3-Git安装配置" class="headerlink" title="3.2.3  Git安装配置"></a>3.2.3  Git安装配置</h4><ol><li><p>yum 安装方式</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install git<br></code></pre></td></tr></table></figure></li><li><p>采用源码包方式安装</p><ul><li><p>安装依赖包</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>yum -y install gcc perl-ExtUtils-MakeMaker<br></code></pre></td></tr></table></figure></li><li><p>如果之前有安装旧版本， 先做卸载， 没有安装则忽略</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum remove git<br></code></pre></td></tr></table></figure></li><li><p>下载源码包</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/local<br>wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-1.8.3.1.tar.gz<br>tar -xvf git-1.8.3.1.tar.gz<br></code></pre></td></tr></table></figure><p>  也可以安装其他版本， 地址：<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/">https://mirrors.edge.kernel.org/pub/software/scm/git/</a></p></li><li><p>编译安装</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> git-1.8.3.1<br>make prefix=/usr/local/git all<br>make prefix=/usr/local/git install<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=<span class="hljs-variable">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; /etc/bashrc<br><span class="hljs-built_in">source</span> /etc/bashrc<br></code></pre></td></tr></table></figure></li></ul></li><li><p>检查git版本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@localhost jenkins]<span class="hljs-comment"># git version</span><br>git version 1.8.3.1<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-2-4-Maven安装配置"><a href="#3-2-4-Maven安装配置" class="headerlink" title="3.2.4  Maven安装配置"></a>3.2.4  Maven安装配置</h4><ol><li><p>下载安装包</p><p> 下载地址： <a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p></li><li><p>解压安装包</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /usr/local<br>unzip -o apache-maven-3.6.1.zip <br></code></pre></td></tr></table></figure><p> 上传本地仓库并解压</p><p> <img src="/../images/image-20210802013808080.png" alt="image-20210802013808080"></p></li><li><p>配置</p><p> 环境变量配置</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/profile<br></code></pre></td></tr></table></figure><p> 增加：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> MAVEN_HOME=/usr/local/maven/apache-maven-3.6.1<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MAVEN_HOME</span>/bin<br></code></pre></td></tr></table></figure><p> 如果权限不够，则需要增加当前目录的权限</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 777 /usr/local/maven/apache-maven-3.6.1/bin/mvn<br></code></pre></td></tr></table></figure><p> 修改镜像仓库配置：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /usr/local/maven/apache-maven-3.6.1/conf/settings.xml<br></code></pre></td></tr></table></figure><p> 需要把本机的仓库打包上传到服务器上（不上传会自动下载）</p><p> 然后指定上传后的仓库配置</p><p> <img src="/../images/image-20210802013533421.png" alt="image-20210802013533421"></p></li></ol><h4 id="3-2-5-Docker安装配置"><a href="#3-2-5-Docker安装配置" class="headerlink" title="3.2.5  Docker安装配置"></a>3.2.5  Docker安装配置</h4><ol><li><p>更新软件包版本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y update<br></code></pre></td></tr></table></figure></li><li><p>卸载旧版本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum -y remove docker  docker-common docker-selinux docker-engine<br></code></pre></td></tr></table></figure></li><li><p>安装软件依赖包</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure></li><li><p>设置yum源为阿里云</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>安装后查看docker版本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker -v<br></code></pre></td></tr></table></figure></li><li><p>启动</p><p> 设置开机启动：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure><p> 启动docker</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl start docker<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-2-6-Docker-Registry私有仓库安装配置"><a href="#3-2-6-Docker-Registry私有仓库安装配置" class="headerlink" title="3.2.6  Docker Registry私有仓库安装配置"></a>3.2.6  Docker Registry私有仓库安装配置</h4><h3 id="3-3-Jenkins工具配置"><a href="#3-3-Jenkins工具配置" class="headerlink" title="3.3 Jenkins工具配置"></a>3.3 Jenkins工具配置</h3><ol><li><p>进入【系统管理】–&gt; 【全局工具配置】</p><p> <img src="/../images/image-20210802011944005.png" alt="image-20210802011944005"></p></li><li><p>MAVEN配置全局设置</p><p> <img src="/../images/image-20210802011956261.png" alt="image-20210802011956261"></p></li><li><p>指定JDK配置</p><p> <img src="/../images/image-20210802012010244.png" alt="image-20210802012010244"></p></li></ol><ol start="4"><li><p>指定MAVEN 目录</p><p> <img src="/../images/image-20210802012026476.png" alt="image-20210802012026476"></p></li><li><p>指定DOCKER目录</p><p> <img src="/../images/image-20210802012038581.png" alt="image-20210802012038581"></p><p> 如果不清楚docker的安装的目录，可以使用<code>whereis docker</code> 命令查看docker的安装的目录</p></li></ol><h2 id="4-后端项目部署"><a href="#4-后端项目部署" class="headerlink" title="4 后端项目部署"></a>4 后端项目部署</h2><h3 id="4-1-多环境切换"><a href="#4-1-多环境切换" class="headerlink" title="4.1 多环境切换"></a>4.1 多环境切换</h3><p>在项目开发部署的过程中，一般都会有三套项目环境</p><ul><li><p>Development ：开发环境</p></li><li><p>Production ：生产环境</p></li><li><p>Test ：测试环境</p></li></ul><p>例如：开发环境的mysql连接的是本地，生产环境需要连接线上的mysql环境</p><h3 id="4-2-多环境切换-微服务中多环境配置"><a href="#4-2-多环境切换-微服务中多环境配置" class="headerlink" title="4.2 多环境切换-微服务中多环境配置"></a>4.2 多环境切换-微服务中多环境配置</h3><p>1.在微服务中的bootstrap.yml中新增配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">51801</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">leadnews-user</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>2.在nacos的配置中心中新增各个环境的配置文件，例如user微服务中新增</p><p>修改bootstrap.yml 添加内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">profiles</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">active</span>: <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>创建对应的nacos的多环境配置：</p><p><img src="/../images/image-20210623143417530.png" alt="image-20210623143417530"></p><p><img src="/../images/image-20210623143557710.png" alt="image-20210623143557710"></p><p>注意事项：</p><p>其中DataID属性命名有规范：</p><ul><li>prefix，默认使用${spring.application.name}，也可以通过spring.cloud.nacos.config.prefix来配置。</li><li>spring.profile.active，即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</li><li>file-exetension，为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</li></ul><h3 id="4-3-整体思路"><a href="#4-3-整体思路" class="headerlink" title="4.3 整体思路"></a>4.3 整体思路</h3><p>目标：把黑马头条的app端相关的微服务部署到192.168.200.100这台服务器上</p><p><img src="/../images/image-20210802003955971.png" alt="image-20210802003955971"></p><p><img src="/../images/image-20210802004007699.png" alt="image-20210802004007699"></p><h3 id="4-4-服务集成Docker配置"><a href="#4-4-服务集成Docker配置" class="headerlink" title="4.4 服务集成Docker配置"></a>4.4 服务集成Docker配置</h3><p>目标：部署的每一个微服务都是先创建docker镜像后创建对应容器启动</p><p>方式一：本地微服务打包以后上传到服务器，编写Dockerfile文件完成。</p><p>方式二：使用dockerfile-maven-plugin插件，可以直接把微服务创建为镜像使用（更省事）</p><p><strong>服务集成Docker配置</strong></p><p><img src="/../images/image-20210802004133439.png" alt="image-20210802004133439"></p><p>每个微服务都引入该依赖,以heima-leadnews-user微服务为例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>heima-leadnews-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.heima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>heima-leadnews-user<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">docker.image</span>&gt;</span>docker_storage<span class="hljs-tag">&lt;/<span class="hljs-name">docker.image</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>heima-leadnews-user<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.spotify<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span>$&#123;docker.image&#125;/$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">buildArgs</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">JAR_FILE</span>&gt;</span>target/$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">JAR_FILE</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">buildArgs</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>服务集成Dockerfile文件</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 设置JAVA版本</span><br><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span><br><span class="hljs-comment"># 指定存储卷, 任何向/tmp写入的信息都不会记录到容器存储层</span><br><span class="hljs-keyword">VOLUME</span><span class="language-bash"> /tmp</span><br><span class="hljs-comment"># 拷贝运行JAR包</span><br><span class="hljs-keyword">ARG</span> JAR_FILE<br><span class="hljs-keyword">COPY</span><span class="language-bash"> <span class="hljs-variable">$&#123;JAR_FILE&#125;</span> app.jar</span><br><span class="hljs-comment"># 设置JVM运行参数， 这里限定下内存大小，减少开销</span><br><span class="hljs-keyword">ENV</span> JAVA_OPTS=<span class="hljs-string">&quot;\</span><br><span class="hljs-string">-server \</span><br><span class="hljs-string">-Xms256m \</span><br><span class="hljs-string">-Xmx512m \</span><br><span class="hljs-string">-XX:MetaspaceSize=256m \</span><br><span class="hljs-string">-XX:MaxMetaspaceSize=512m&quot;</span><br><span class="hljs-comment">#空参数，方便创建容器时传参</span><br><span class="hljs-keyword">ENV</span> PARAMS=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 入口点， 执行JAVA运行命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;java -jar <span class="hljs-variable">$JAVA_OPTS</span> /app.jar <span class="hljs-variable">$PARAMS</span>&quot;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="4-5-jenkins基础依赖打包配置"><a href="#4-5-jenkins基础依赖打包配置" class="headerlink" title="4.5 jenkins基础依赖打包配置"></a>4.5 jenkins基础依赖打包配置</h3><p>在微服务运行之前需要在本地仓库中先去install所依赖的jar包，所以第一步应该是从git中拉取代码，并且把基础的依赖部分安装到仓库中</p><p>1，父工程heima-leadnews</p><p><img src="/../images/image-20210802004744531.png" alt="image-20210802004744531"></p><p>2，找到自己指定的git仓库，设置用户名和密码</p><p><img src="/../images/image-20210802004803711.png" alt="image-20210802004803711"></p><p>3，把基础依赖信息安装到服务器上的本地仓库</p><p><img src="/../images/image-20210802004818581.png" alt="image-20210802004818581"></p><p>4，执行</p><p>执行日志，部分截图，下面是从git中拉取代码</p><p><img src="/../images/image-20210802004838998.png" alt="image-20210802004838998"></p><p>执行日志，部分截图，编译打包</p><p><img src="/../images/image-20210802004858057.png" alt="image-20210802004858057"></p><p>执行日志，部分截图，执行成功</p><p><img src="/../images/image-20210802004915042.png" alt="image-20210802004915042"></p><h3 id="4-6-jenkins微服务打包配置"><a href="#4-6-jenkins微服务打包配置" class="headerlink" title="4.6 jenkins微服务打包配置"></a>4.6 jenkins微服务打包配置</h3><p>所有微服务打包的方式类似，以heima-leadnews-user微服务为例</p><p>1，新建任务</p><p><img src="/../images/image-20210802004942366.png" alt="image-20210802004942366"></p><p>2，找到自己指定的git仓库，设置用户名和密码</p><p><img src="/../images/image-20210802005000376.png" alt="image-20210802005000376"></p><p>3，执行maven命令</p><p><img src="/../images/image-20210802005018020.png" alt="image-20210802005018020"></p><p><img src="/../images/image-20210802005027229.png" alt="image-20210802005027229"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">clean install -Dmaven.test.skip=<span class="hljs-literal">true</span>  dockerfile:build -f heima-leadnews/heima-leadnews-service/heima-leadnews-user/pom.xml<br></code></pre></td></tr></table></figure><p><font color='red'>注意：根据自己的实际代码路径配置</font></p><p>-Dmaven.test.skip=true  跳过测试</p><p>dockerfile:build 启动dockerfile插件构建容器</p><p>-f heima-leadnews-user/pom.xml 指定需要构建的文件（必须是pom）</p><p>4，并执行shell脚本</p><p><img src="/../images/image-20210802005318464.png" alt="image-20210802005318464"></p><p><img src="/../images/image-20210802005329034.png" alt="image-20210802005329034"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> [ -n  <span class="hljs-string">&quot;$(docker ps -a -f  name=$JOB_NAME  --format &#x27;&#123;&#123;.ID&#125;&#125;&#x27; )&quot;</span> ]<br> then<br> #删除之前的容器<br> docker rm -f $(docker ps -a -f  name=$JOB_NAME  --format <span class="hljs-string">&#x27;&#123;&#123;.ID&#125;&#125;&#x27;</span> )<br>fi<br> # 清理镜像<br>docker image prune -f <br> # 启动docker服务<br>docker run -d --net=host -e PARAMS=<span class="hljs-string">&quot;--spring.profiles.active=prod&quot;</span>  --name $JOB_NAME docker_storage/$JOB_NAME<br></code></pre></td></tr></table></figure><p>5，执行日志</p><p>拉取代码</p><p><img src="/../images/image-20210802005404751.png" alt="image-20210802005404751"></p><p>编译打包</p><p><img src="/../images/image-20210802005417489.png" alt="image-20210802005417489"></p><p>构建镜像</p><p><img src="/../images/image-20210802005438400.png" alt="image-20210802005438400"></p><p>清理容器，创建新的容器</p><p><img src="/../images/image-20210802005452184.png" alt="image-20210802005452184"></p><h3 id="4-7-部署服务到远程服务器上"><a href="#4-7-部署服务到远程服务器上" class="headerlink" title="4.7 部署服务到远程服务器上"></a>4.7 部署服务到远程服务器上</h3><p>目标：使用jenkins（192.168.200.100）把微服务打包部署到192.168.200.130服务器上</p><p><img src="/../images/image-20210802005538404.png" alt="image-20210802005538404"></p><h4 id="4-7-1-安装配置私有仓库"><a href="#4-7-1-安装配置私有仓库" class="headerlink" title="4.7.1 安装配置私有仓库"></a>4.7.1 安装配置私有仓库</h4><p>对于持续集成环境的配置，Jenkins会发布大量的微服务， 要与多台机器进行交互， 可以采用docker镜像的保存与导出功能结合SSH实现， 但这样交互繁琐，稳定性差， 而且不便管理， 这里我们通过搭建Docker的私有仓库来实现， 这个有点类似GIT仓库， 集中统一管理资源， 由客户端拉取或更新。</p><ol><li><p>下载最新Registry镜像</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull registry:latest<br></code></pre></td></tr></table></figure></li><li><p>启动Registry镜像服务</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d -p 5000:5000 --name registry -v /usr/local/docker/registry:/var/lib/registry registry:latest<br></code></pre></td></tr></table></figure><p> 映射5000端口； -v是将Registry内的镜像数据卷与本地文件关联， 便于管理和维护Registry内的数据。</p></li><li><p>查看仓库资源</p><p> 访问地址：<a href="http://192.168.200.100:5000/v2/_catalog">http://192.168.200.100:5000/v2/_catalog</a></p><p> 启动正常， 可以看到返回：</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;repositories&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p> 目前并没有上传镜像， 显示空数据。</p><p> 如果上传成功， 可以看到数据:<br> <img src="/../images/image-20210802005839314.png" alt="image-20210802005839314"></p></li><li><p>配置Docker客户端</p><p> 正常生产环境中使用， 要配置HTTPS服务， 确保安全，内部开发或测试集成的局域网环境，可以采用简便的方式， 不做安全控制。</p><p> 先确保持续集成环境的机器已安装好Docker客户端， 然后做以下修改：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /lib/systemd/system/docker.service<br></code></pre></td></tr></table></figure><p> 修改内容：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ExecStart=/usr/bin/dockerd --insecure-registry 192.168.200.100:5000<br></code></pre></td></tr></table></figure><p> 指向安装Registry的服务IP与端口。</p><p> 重启生效：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reolad<br>systemctl restart docker.service<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-7-2-jenkins中安装插件"><a href="#4-7-2-jenkins中安装插件" class="headerlink" title="4.7.2 jenkins中安装插件"></a>4.7.2 jenkins中安装插件</h4><p><img src="/../images/image-20210802005913026.png" alt="image-20210802005913026"></p><h4 id="4-7-3-jenkins系统配置远程服务器链接"><a href="#4-7-3-jenkins系统配置远程服务器链接" class="headerlink" title="4.7.3 jenkins系统配置远程服务器链接"></a>4.7.3 jenkins系统配置远程服务器链接</h4><p>位置：Manage Jenkins–&gt;Configure System</p><p><img src="/../images/image-20210802005937966.png" alt="image-20210802005937966"></p><p>需要添加凭证</p><p>位置：Manage Jenkins–&gt;Manage CreDentials</p><p><img src="/../images/image-20210802010324224.png" alt="image-20210802010324224"></p><p>添加链接到130服务器的用户名和密码</p><p><img src="/../images/image-20210802010525665.png" alt="image-20210802010525665"></p><p><img src="/../images/image-20210802010429136.png" alt="image-20210802010429136"></p><p><img src="/../images/image-20210802010201146.png" alt="image-20210802010201146"></p><h4 id="4-7-4-jenkins项目创建与其他微服务相同"><a href="#4-7-4-jenkins项目创建与其他微服务相同" class="headerlink" title="4.7.4 jenkins项目创建与其他微服务相同"></a>4.7.4 jenkins项目创建与其他微服务相同</h4><p>创建项目参考之前创建过的用户微服务</p><h4 id="4-7-5-设置参数"><a href="#4-7-5-设置参数" class="headerlink" title="4.7.5 设置参数"></a>4.7.5 设置参数</h4><p><img src="/../images/image-20210802010650039.png" alt="image-20210802010650039"></p><h4 id="4-7-6-构建执行Execute-shell"><a href="#4-7-6-构建执行Execute-shell" class="headerlink" title="4.7.6 构建执行Execute shell"></a>4.7.6 构建执行Execute shell</h4><p><img src="/../images/image-20210802010720937.png" alt="image-20210802010720937"></p><p>maven命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">clean install -Dmaven.test.skip=<span class="hljs-literal">true</span> dockerfile:build -f heima-leadnews/heima-leadnews-service/heima-leadnews-article/pom.xml<br></code></pre></td></tr></table></figure><p>shell脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">image_tag=$docker_registry/docker_storage/$JOB_NAME<br>echo &#x27;================docker镜像清理================&#x27;<br>if [ -n  &quot;$(docker ps -a -f  name=$JOB_NAME  --format &#x27;&#123;&#123;.ID&#125;&#125;&#x27; )&quot; ]<br> then<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">删除之前的容器</span><br> docker rm -f $(docker ps -a -f  name=$JOB_NAME  --format &#x27;&#123;&#123;.ID&#125;&#125;&#x27; )<br>fi<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">清理镜像</span><br>docker image prune -f <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建TAG</span><br>docker tag docker_storage/$JOB_NAME $image_tag<br>echo &#x27;================docker镜像推送================&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">推送镜像</span><br>docker push $image_tag<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除TAG</span><br>docker rmi $image_tag<br>echo &#x27;================docker tag 清理 ================&#x27;<br></code></pre></td></tr></table></figure><h4 id="4-7-7-在远程服务器上执行脚本"><a href="#4-7-7-在远程服务器上执行脚本" class="headerlink" title="4.7.7 在远程服务器上执行脚本"></a>4.7.7 在远程服务器上执行脚本</h4><p><img src="/../images/image-20210802010750809.png" alt="image-20210802010750809"></p><p>远程服务器执行的shell脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;================拉取最新镜像================&#x27;<br>docker pull $docker_registry/docker_storage/$JOB_NAME<br><br>echo &#x27;================删除清理容器镜像================&#x27;<br>if [ -n  &quot;$(docker ps -a -f  name=$JOB_NAME  --format &#x27;&#123;&#123;.ID&#125;&#125;&#x27; )&quot; ]<br> then<br><span class="hljs-meta prompt_"> #</span><span class="language-bash">删除之前的容器</span><br> docker rm -f $(docker ps -a -f  name=$JOB_NAME  --format &#x27;&#123;&#123;.ID&#125;&#125;&#x27; )<br>fi<br><span class="hljs-meta prompt_"> # </span><span class="language-bash">清理镜像</span><br>docker image prune -f <br><br>echo &#x27;===============启动容器================&#x27;<br>docker run -d   --net=host -e PARAMS=&quot;--spring.profiles.active=prod&quot; --name $JOB_NAME $docker_registry/docker_storage/$JOB_NAME<br></code></pre></td></tr></table></figure><h4 id="4-7-8-构建完成以后，可以登录130服务器，查看是否有相关的镜像和容器"><a href="#4-7-8-构建完成以后，可以登录130服务器，查看是否有相关的镜像和容器" class="headerlink" title="4.7.8 构建完成以后，可以登录130服务器，查看是否有相关的镜像和容器"></a>4.7.8 构建完成以后，可以登录130服务器，查看是否有相关的镜像和容器</h4><p>镜像</p><p><img src="/../images/image-20210802010824088.png" alt="image-20210802010824088"></p><p>容器</p><p><img src="/../images/image-20210802010835702.png" alt="image-20210802010835702"></p><h3 id="4-8-联调测试"><a href="#4-8-联调测试" class="headerlink" title="4.8 联调测试"></a>4.8 联调测试</h3><p>1.参考jenkins中heima-leadnews-user微服务把app端网关部署起来</p><p>2.修改本地nginx中的配置反向代理地址为100这台服务器：heima-leadnews-app.conf</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">upstream  heima-app-gateway&#123;<br>server 192.168.200.100:51601;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.启动nginx，打开页面进行测试</p><h2 id="5-jenkins触发器配置"><a href="#5-jenkins触发器配置" class="headerlink" title="5 jenkins触发器配置"></a>5 jenkins触发器配置</h2><h3 id="5-1-URL触发远程构建"><a href="#5-1-URL触发远程构建" class="headerlink" title="5.1 URL触发远程构建"></a>5.1 URL触发远程构建</h3><p>触发远程构建，修改jenkins的配置，如下</p><p><img src="/../images/image-20210802011202642.png" alt="image-20210802011202642"></p><p>触发构建url： <a href="http://192.168.200.100:16060/job/leadnews-admin/build?token=88888888">http://192.168.200.100:16060/job/leadnews-admin/build?token=88888888</a></p><h3 id="5-2-其他工程构建后触发"><a href="#5-2-其他工程构建后触发" class="headerlink" title="5.2 其他工程构建后触发"></a>5.2 其他工程构建后触发</h3><p>配置需要触发的工程</p><p><img src="/../images/image-20210802011225737.png" alt="image-20210802011225737"></p><h3 id="5-3-定时构建"><a href="#5-3-定时构建" class="headerlink" title="5.3 定时构建"></a>5.3 定时构建</h3><p>定时构建（ Build periodically）</p><p><img src="/../images/image-20210802011245118.png" alt="image-20210802011245118"></p><p>定时字符串从左往右分别为： 分 时 日 月 周</p><p><strong>定时构建-定时表达式</strong></p><p>定时字符串从左往右分别为： 分 时 日 月 周</p><table><thead><tr><th>组成部分</th><th>含义</th><th>取值范围</th></tr></thead><tbody><tr><td>第一部分</td><td>minute (分)</td><td>0~59</td></tr><tr><td>第二部分</td><td>hour(小时)</td><td>0~23</td></tr><tr><td>第三部分</td><td>day(天)</td><td>1~31</td></tr><tr><td>第四部分</td><td>month(月)</td><td>1~12</td></tr><tr><td>第五部分</td><td>week(周)</td><td>0~7，0 和 7 都是表示星期天</td></tr></tbody></table><ul><li><p>符号H 表示一个随机数</p></li><li><p>符号*  取值范围的任意值</p></li></ul><p>案例：</p><ul><li><p>每30分钟构建一次：H/30 * * * * 10:02 10:32</p></li><li><p>每2个小时构建一次: H H/2 * * *</p></li><li><p>每天的8点，12点，22点，一天构建3次： (多个时间点中间用逗号隔开) 0 8,12,22 * * *</p></li><li><p>每天中午12点定时构建一次 H 12 * * *</p></li><li><p>每天下午18点定时构建一次 H 18 * * *</p></li></ul><h3 id="5-4-轮询"><a href="#5-4-轮询" class="headerlink" title="5.4 轮询"></a>5.4 轮询</h3><p>轮询 SCM（Poll SCM）</p><p>轮询SCM，是指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建。</p><p><img src="/../images/image-20210802011431941.png" alt="image-20210802011431941"></p><p>Jenkins会定时扫描本地整个项目的代码，增大系统的开销，不建议使用。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黑马头条</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈与队列</title>
    <link href="/2024/02/20/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    <url>/2024/02/20/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="栈与队列理论基础"><a href="#栈与队列理论基础" class="headerlink" title="栈与队列理论基础"></a>栈与队列理论基础</h2><ol><li> C++中stack 是容器么？</li><li> 我们使用的stack是属于哪个版本的STL？</li><li> 我们使用的STL中stack是如何实现的？</li><li> stack 提供迭代器来遍历stack空间么？</li></ol><p>要回答上面的问题，我们需要知道STL的版本：</p><ol><li> HP STL 其他版本的C++ STL，一般是以HP STL为蓝本实现出来的，HP STL是C++ STL的第一个实现版本，而且开放源代码。</li><li> P.J.Plauger STL 由P.J.Plauger参照HP STL实现出来的，被Visual C++编译器所采用，不是开源的。</li><li> SGI STL 由Silicon Graphics Computer Systems公司参照HP STL实现，被Linux的C++编译器GCC所采用，SGI STL是开源软件，源码可读性甚高。</li></ol><p><strong>我们常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的底层结构。</strong></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>代码随想录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发编程面试题</title>
    <link href="/2024/02/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2024/02/19/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="重要知识点汇总"><a href="#重要知识点汇总" class="headerlink" title="重要知识点汇总"></a>重要知识点汇总</h1><h2 id="1-Java进程、线程"><a href="#1-Java进程、线程" class="headerlink" title="1 Java进程、线程"></a>1 Java进程、线程</h2><h3 id="1-1-进程"><a href="#1-1-进程" class="headerlink" title="1.1 进程"></a>1.1 进程</h3><p>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</p><h3 id="1-2-线程"><a href="#1-2-线程" class="headerlink" title="1.2 线程"></a>1.2 线程</h3><ul><li>  一个进程之内可以分为一到多个线程。</li><li>  一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li><li>  Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器</li></ul><h3 id="1-3-并行与并发"><a href="#1-3-并行与并发" class="headerlink" title="1.3 并行与并发"></a>1.3 <strong>并行与并发</strong></h3><p>单核 cpu 下，线程实际还是 串行执行 的。操作系统中有一个组件叫做任务调度器，将 cpu 的时间片（windows下时间片最小约为 15 毫秒）分给不同的程序使用，只是由于 cpu 在线程间（时间片很短）的切换非常快，人类感觉是 同时运行的 。总结为一句话就是： 微观串行，宏观并行 ，一般会将这种 线程轮流使用 CPU 的做法称为并发， concurrent。</p><h2 id="2-Java线程"><a href="#2-Java线程" class="headerlink" title="2 Java线程"></a>2 Java线程</h2><h3 id="2-1-创建运行线程"><a href="#2-1-创建运行线程" class="headerlink" title="2.1 创建运行线程"></a>2.1 创建运行线程</h3><p>创建共有3个方式：</p><ul><li>  直接使用Thread</li><li>  使用Runnable配合Thread</li><li>  FutureTask配合Thread</li></ul><h4 id="2-1-1-直接使用Thread"><a href="#2-1-1-直接使用Thread" class="headerlink" title="2.1.1 直接使用Thread"></a>2.1.1 直接使用Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//要执行的任务</span><br>    &#125;<br>&#125;<br>t.start();<br></code></pre></td></tr></table></figure><h4 id="2-1-2-使用Runnable配合Thread"><a href="#2-1-2-使用Runnable配合Thread" class="headerlink" title="2.1.2 使用Runnable配合Thread"></a>2.1.2 使用Runnable配合Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//要执行的任务</span><br>    &#125;<br>&#125;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnable);<br>t.start();<br></code></pre></td></tr></table></figure><p>Runnable本质还是用Thread创建线程。</p><h4 id="2-1-3-FutureTask配合Thread"><a href="#2-1-3-FutureTask配合Thread" class="headerlink" title="2.1.3 FutureTask配合Thread"></a>2.1.3 FutureTask配合Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br>FutureTask&lt;Integer&gt; task3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;<br> log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>&#125;);<br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task3, <span class="hljs-string">&quot;t3&quot;</span>).start();<br></code></pre></td></tr></table></figure><h3 id="2-2-查看进程线程方法"><a href="#2-2-查看进程线程方法" class="headerlink" title="2.2 查看进程线程方法"></a>2.2 查看进程线程方法</h3><p><strong>windows</strong></p><ul><li>  任务管理器可以查看进程和线程数，也可以用来杀死进程</li><li>  tasklist 查看进程</li><li>  taskkill 杀死进程</li></ul><p><strong>linux</strong></p><ul><li>  ps -fe 查看所有进程</li><li>  ps -fT -p <PID> 查看某个进程（PID）的所有线程</li><li>  kill 杀死进程</li><li>  top 按大写 H 切换是否显示线程</li><li>  top -H -p <PID> 查看某个进程（PID）的所有线程</li></ul><p><strong>Java</strong></p><ul><li>  jps 命令查看所有 Java 进程</li><li>  jstack <PID> 查看某个 Java 进程（PID）的所有线程状态</li><li>  jconsole 来查看某个 Java 进程中线程的运行情况（图形界面）</li></ul><h3 id="2-3-常见方法"><a href="#2-3-常见方法" class="headerlink" title="2.3 常见方法"></a>2.3 常见方法</h3><p><img src="/../images/image-20240219160857563.png" alt="image-20240219160857563"><img src="/../images/image-20240219160913141.png" alt="image-20240219160913141"><img src="/../images/image-20240219160943518.png" alt="image-20240219160943518"></p><h3 id="2-4-run和start"><a href="#2-4-run和start" class="headerlink" title="2.4 run和start"></a>2.4 run和start</h3><ul><li><p>  直接调用 run 是在主线程中执行了 run，没有启动新的线程 </p></li><li><p>  使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码</p></li></ul><h3 id="2-5-sleep和yield"><a href="#2-5-sleep和yield" class="headerlink" title="2.5 sleep和yield"></a>2.5 sleep和yield</h3><p><strong>sleep</strong></p><ul><li>  调用 sleep 会让当前线程从 <em>Running</em> 进入 <em>Timed Waiting</em> 状态（阻塞）</li><li>  其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException</li><li>  睡眠结束后的线程未必会立刻得到执行</li><li>  建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</li><li>  sleep多用于无需锁同步的场景。</li></ul><p><strong>yield</strong></p><ul><li>  调用 yield 会让当前线程从 <em>Running</em> 进入 <em>Runnable</em> 就绪状态，然后调度执行其它线程</li><li>  具体的实现依赖于操作系统的任务调度器</li></ul><h3 id="2-6-join"><a href="#2-6-join" class="headerlink" title="2.6 join"></a>2.6 join</h3><ul><li>  join是使线程进入阻塞，当该线程运行结束后，阻塞释放。</li></ul><h3 id="2-7-interrupt"><a href="#2-7-interrupt" class="headerlink" title="2.7 interrupt"></a>2.7 interrupt</h3><p>用于打断sleep、wait、join，这几个方法都会让线程进入阻塞状态，打断 sleep 的线程, 会清空打断状态，以 sleep 为例。</p><h3 id="2-8-守护线程"><a href="#2-8-守护线程" class="headerlink" title="2.8 守护线程"></a>2.8 守护线程</h3><ul><li><p>  垃圾回收器线程就是一种守护线程</p></li><li><p>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等</p><p>  待它们处理完当前请求</p></li></ul><h2 id="3-共享模型——管程"><a href="#3-共享模型——管程" class="headerlink" title="3 共享模型——管程"></a>3 共享模型——管程</h2><ul><li>  共享问题</li><li>  synchronized</li><li>  线程安全分析</li><li>  Monitor</li><li>  wait/notify</li><li>  线程状态转换</li><li>  活跃性</li><li>  Lock</li></ul><h3 id="3-1-共享问题"><a href="#3-1-共享问题" class="headerlink" title="3.1 共享问题"></a>3.1 共享问题</h3><p>共享问题就是当一个资源有两个以及以上的人访问时，如果不加锁机制，会导致资源业务失败。</p><p>多个线程访问共享资源时没有问题，但是读写时会出现指令交错。而这样的代码块称为临界区。</p><p><strong>竞态条件Race Condition</strong></p><p>多个线程在临界区内执行，由于代码的<strong>执行序列不同</strong>而导致结果无法预测，称之为发生了<strong>竞态条件</strong></p><h3 id="3-2-synchronized（对象锁）"><a href="#3-2-synchronized（对象锁）" class="headerlink" title="3.2 synchronized（对象锁）"></a>3.2 synchronized（对象锁）</h3><p>解决共享问题的方案：</p><ul><li>  阻塞式的解决方案：synchronized，Lock</li><li>  非阻塞式的解决方案：原子变量</li></ul><h3 id="3-3-变量的线程安全"><a href="#3-3-变量的线程安全" class="headerlink" title="3.3  变量的线程安全"></a>3.3  变量的线程安全</h3><p><strong>成员变量和静态变量是否线程安全</strong>？</p><ul><li>  如果没有共享，则是安全的。</li><li>  如果只有读没有写则安全，如果有写则这段代码是临界区，需要考虑安全。</li></ul><p><strong>局部变量是否线程安全</strong>?</p><ul><li>  是线程安全的</li><li>  但局部变量引用的对象则未必，如果该对象没有逃离方法的作用访问，它是线程安全的，如果该对象逃离方法的作用范围，需要考虑线程安全</li></ul><p><strong>常见线程安全类：</strong></p><ul><li>  String</li><li>  Integer</li><li>  StringBuffer</li><li>  Random</li><li>  Vector</li><li>  Hashtable</li><li>  java.util.concurrent 包下的类</li></ul><p><strong>注意：但</strong>注意<strong>它们多个方法的组合不是原子的</strong></p><h3 id="3-4-Monitor"><a href="#3-4-Monitor" class="headerlink" title="3.4 Monitor"></a>3.4 Monitor</h3><p>Monitor 被翻译为<strong>监视器</strong>或<strong>管程</strong>，每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针</p><p><img src="/../images/image-20240219164656074.png" alt="image-20240219164656074"></p><ul><li>  刚开始 Monitor 中 Owner 为 null</li><li>  当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner</li><li>  在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED</li><li>  Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的</li><li>  图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲wait-notify 时会分析</li></ul><h3 id="3-5-synchronized-原理"><a href="#3-5-synchronized-原理" class="headerlink" title="3.5 synchronized 原理"></a>3.5 <strong>synchronized</strong> <strong>原理</strong></h3><h4 id="3-5-1-轻量级锁"><a href="#3-5-1-轻量级锁" class="headerlink" title="3.5.1 轻量级锁"></a>3.5.1 轻量级锁</h4><p>如果一个对象有多线程要加锁，但是加锁的时间是错开的（没有竞争），那么可以使用轻量级锁。关键字并没有改变，还是synchronized。</p><p>轻量级锁过程：</p><ul><li><p>  创建锁对象：每个线程都会有对应的锁记录对象，内部可以存储锁定对象的Mark Word。</p></li><li><p>让锁记录中Object reference 指向锁对象，并且尝试用cas替换Object中的Mark Word，将Mark Word的值存入锁记录中。</p><p>  <img src="/../images/image-20240220101311772.png" alt="image-20240220101311772"></p></li><li><p>如果cas替换成功，对象头中存储了锁记录的地址和状态00，表示该线程给对象加锁。</p><p>  <img src="/../images/image-20240220101412522.png" alt="image-20240220101412522"></p></li><li><p>如果 cas 失败，有两种情况</p><ul><li>  如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程</li><li>  如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数</li></ul><p>  <img src="/../images/image-20240220101614632.png" alt="image-20240220101614632"></p></li><li><p>  当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一</p></li><li><p>  当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头;成功，则解锁成功；失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</p></li></ul><h4 id="3-5-2-锁膨胀"><a href="#3-5-2-锁膨胀" class="headerlink" title="3.5.2 锁膨胀"></a>3.5.2 锁膨胀</h4><ul><li>   Thread-1 加轻量级锁失败，进入锁膨胀流程</li></ul><pre><code class="hljs">-   即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址（重量锁标志为10）-   然后自己进入 Monitor 的 EntryList BLOCKED![image-20240220102130510](../images/image-20240220102130510.png)</code></pre><ul><li>  当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</li><li>  总结：轻量级锁不开启monitor，而是直接mark word绑定锁记录，而当有其他线程抢占锁的时候，启动锁膨胀机制，将线程绑定在Monitor中，每个对象都是有一个Monitor，其中EntryList中是等待中的线程，Owner是当前线程。</li></ul><h4 id="3-5-3-自旋优化"><a href="#3-5-3-自旋优化" class="headerlink" title="3.5.3 自旋优化"></a>3.5.3 自旋优化</h4><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功功（即这时候持锁线程已经退出了同步块，释放了锁）这时当前线程就可以避免阻塞。</p><ul><li>  自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。</li><li>  在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</li><li>  Java 7 之后不能控制是否开启自旋功能</li></ul><h4 id="3-5-4-偏向锁"><a href="#3-5-4-偏向锁" class="headerlink" title="3.5.4 偏向锁"></a>3.5.4 偏向锁</h4><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。偏向锁可以解决只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。</p><p><img src="/../images/image-20240220103859689.png" alt="image-20240220103859689"></p><p><img src="/../images/image-20240220103906771.png" alt="image-20240220103906771"></p><h5 id="3-5-4-1-偏向状态"><a href="#3-5-4-1-偏向状态" class="headerlink" title="3.5.4.1 偏向状态"></a>3.5.4.1 偏向状态</h5><ul><li>  如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的thread、epoch、age 都为 0</li><li>  偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 -XX:BiasedLockingStartupDelay=0 来禁用延迟</li><li>  如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值</li></ul><p><strong>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</strong></p><h5 id="3-5-4-2-撤销-调用对象-hashCode"><a href="#3-5-4-2-撤销-调用对象-hashCode" class="headerlink" title="3.5.4.2 撤销 - 调用对象 hashCode"></a>3.5.4.2 <strong>撤销</strong> <strong>-</strong> <strong>调用对象</strong> <strong>hashCode</strong></h5><p>调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销</p><ul><li>  轻量级锁会在锁记录中记录 hashCode</li><li>  重量级锁会在 Monitor 中记录 hashCode</li></ul><h5 id="3-5-4-3-撤销-其它线程使用对象"><a href="#3-5-4-3-撤销-其它线程使用对象" class="headerlink" title="3.5.4.3 撤销 - 其它线程使用对象"></a>3.5.4.3 <strong>撤销</strong> <strong>-</strong> <strong>其它线程使用对象</strong></h5><p>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</p><h3 id="3-6-wait-notify"><a href="#3-6-wait-notify" class="headerlink" title="3.6 wait notify"></a>3.6 wait notify</h3><ul><li>  obj.wait() 让进入 object 监视器的线程到 waitSet 等待</li><li>  obj.notify() 在 object 上正在 waitSet 等待的线程中挑一个唤醒</li><li>  obj.notifyAll() 让 object 上正在 waitSet 等待的线程全部唤醒</li><li>  wait() 方法会释放对象的锁，进入 WaitSet 等待区，从而让其他线程就机会获取对象的锁。无限制等待，直到notify 为止</li><li>  wait(long n) 有时限的等待, 到 n 毫秒后结束等待，或是被 notify</li></ul><h3 id="3-7-Park-amp-amp-UnPark"><a href="#3-7-Park-amp-amp-UnPark" class="headerlink" title="3.7 Park&amp;&amp;UnPark"></a>3.7 Park&amp;&amp;UnPark</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 暂停当前线程</span><br>LockSupport.park(); <br><span class="hljs-comment">// 恢复某个线程的运行</span><br>LockSupport.unpark(暂停线程对象)<br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>  wait，notify 和 notifyAll 必须配合 Object Monitor 一起使用，而 park，unpark 不必</li><li>  park &amp; unpark 是以线程为单位来【阻塞】和【唤醒】线程，而 notify 只能随机唤醒一个等待线程，notifyAll 是唤醒所有等待线程，就不那么【精确】。</li><li>  park &amp; unpark 可以先 unpark，而 wait &amp; notify 不能先 notify</li></ul><h3 id="3-8-线程状态转换"><a href="#3-8-线程状态转换" class="headerlink" title="3.8 线程状态转换"></a>3.8 线程状态转换</h3><p><img src="/../images/image-20240220110215342.png" alt="image-20240220110215342"></p><p><img src="/../images/image-20240220110721207.png" alt="image-20240220110721207"><img src="/../images/image-20240220110730235.png" alt="image-20240220110730235"><img src="/../images/image-20240220110747417.png" alt="image-20240220110747417"><img src="/../images/image-20240220110800928.png" alt="image-20240220110800928"></p><p>总结：</p><ul><li>  从RUNNABLE到WAITING有wait、join、park方法。</li><li>  RUNNABLE到TIMED_WAITING是要用synchronized获取对象锁之后，调用wait或用sleep或.parkNanos</li></ul><h3 id="3-9-多把锁"><a href="#3-9-多把锁" class="headerlink" title="3.9 多把锁"></a>3.9 多把锁</h3><p>一个对象有两个功能，这两个功能之间不相干，但是只有一把对象锁，这时候就需要准备多把对象锁。</p><p>将锁进行细分：</p><ul><li>  好处是提高并发度</li><li>  坏处是一个线程要多个锁，会造成死锁。</li></ul><h3 id="3-10-活跃度"><a href="#3-10-活跃度" class="headerlink" title="3.10 活跃度"></a>3.10 活跃度</h3><h4 id="3-10-1-死锁"><a href="#3-10-1-死锁" class="headerlink" title="3.10.1 死锁"></a>3.10.1 死锁</h4><p>情景：线程t1获取了A对象的锁，想要获取B对象的锁，t2获取了B对象的锁，此时想要获取A对象的锁。</p><p>定位死锁可以使用jconsole工具，或者用jps定位进程id，再用jstack定位死锁。</p><ul><li>  避免死锁要注意加锁顺序</li><li>  另外如果由于某个线程进入了死循环，导致其它线程一直等待，对于这种情况 linux 下可以通过 top 先定位到CPU 占用高的 Java 进程，再利用 top -Hp 进程id 来定位是哪个线程，最后再用 jstack 排查</li></ul><h4 id="3-10-2-活锁"><a href="#3-10-2-活锁" class="headerlink" title="3.10.2 活锁"></a>3.10.2 活锁</h4><p>活锁出现在两个线程互相改变对方的结束条件，最后谁也无法结束</p><h4 id="3-10-3-饥饿"><a href="#3-10-3-饥饿" class="headerlink" title="3.10.3 饥饿"></a>3.10.3 饥饿</h4><p>一个线程由于优先级太低，始终得不到 CPU 调度执行，也不能够结束，饥饿的情况不易演示，讲读写锁时会涉及饥饿问题</p><h3 id="3-11-ReentrantLock"><a href="#3-11-ReentrantLock" class="headerlink" title="3.11 ReentrantLock"></a>3.11 <strong>ReentrantLock</strong></h3><p>相对于 synchronized 它具备如下特点：</p><ul><li>  可中断</li><li>  可以设置超时时间</li><li>  可以设置为公平锁</li><li>  支持多个条件变量</li><li>  都支持可重入</li></ul><p><strong>可重入：</strong></p><p>可重入指的是用一个线程如果首次获得了锁，那么可以再次获得锁。</p><p><strong>可打断：</strong></p><p>顾名思义</p><p><strong>锁超时</strong></p><p><strong>公平锁</strong></p><p>默认不公平</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ReentrantLock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantLock(<span class="hljs-literal">true</span>);<span class="hljs-comment">//开启公平锁。</span><br></code></pre></td></tr></table></figure><p>公平锁一般没有必要，会降低并发度，后面分析原理时会讲解</p><p><strong>条件变量：</strong></p><p>synchronized 中也有条件变量，就是我们讲原理时那个 waitSet 休息室，当条件不满足时进入 waitSet 等待</p><p>ReentrantLock 的条件变量比 synchronized 强大之处在于，它是支持多个条件变量的，这就好比</p><ul><li><p>  synchronized 是那些不满足条件的线程都在一间休息室等消息</p></li><li><p>  而 ReentrantLock 支持多间休息室，有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒</p></li><li><p>  await 前需要获得锁</p></li><li><p>  await 执行后，会释放锁，进入 conditionObject 等待</p></li><li><p>  await 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁</p></li><li><p>  竞争 lock 锁成功后，从 await 后继续执行</p></li></ul><h2 id="4-共享模型——内存"><a href="#4-共享模型——内存" class="headerlink" title="4 共享模型——内存"></a>4 共享模型——内存</h2><p>共享变量在多线程间的【可见性】问题与多条指令执行时的【有序性】问题</p><h3 id="4-1-Java内存模型"><a href="#4-1-Java内存模型" class="headerlink" title="4.1 Java内存模型"></a>4.1 Java内存模型</h3><p>JMM 即 Java Memory Model。</p><ul><li>  原子性 - 保证指令不会受到线程上下文切换的影响</li><li>  可见性 - 保证指令不会受 cpu 缓存的影响</li><li>  有序性 - 保证指令不会受 cpu 指令并行优化的影响</li></ul><h3 id="4-2-可见性"><a href="#4-2-可见性" class="headerlink" title="4.2 可见性"></a>4.2 可见性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br> <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br> <span class="hljs-keyword">while</span>(run)&#123;<br> <span class="hljs-comment">// ....</span><br> &#125;<br> &#125;);<br> t.start();<br> sleep(<span class="hljs-number">1</span>);<br> run = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 线程t不会如预想的停下来</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/image-20240220113657951.png" alt="image-20240220113657951"></p><p>说说上面的程序为什么没有停止：</p><p>首先t线程初始的时候从主存中读取run的值，JIT编译器会将run缓存到自己的高速缓存中，如果要对让线程直接读取主存中的run值，可以用volatile关键字，可以直接对主存中的变量进行操作。</p><p><strong>注意</strong> synchronized 语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。但缺点synchronized 是属于重量级操作，性能相对更低</p><h3 id="4-3-有序性"><a href="#4-3-有序性" class="headerlink" title="4.3 有序性"></a>4.3 有序性</h3><p>JVM 会在不影响正确性的前提下，可以调整语句的执行顺序。这种特性称之为『指令重排』，多线程下『指令重排』会影响正确性。</p><p>volatile 修饰的变量，可以禁用指令重排</p><p><strong>happens-before</strong></p><p>规定了对共享变量的写操作对其它线程的读操作可见</p><h2 id="5-共享模型——无锁"><a href="#5-共享模型——无锁" class="headerlink" title="5 共享模型——无锁"></a>5 共享模型——无锁</h2><ul><li>  CAS 与 volatile</li><li>  原子整数</li><li>  原子引用</li><li>  原子累加器</li><li>  Unsafe</li></ul><h3 id="5-1-无锁解决锁问题"><a href="#5-1-无锁解决锁问题" class="headerlink" title="5.1 无锁解决锁问题"></a>5.1 无锁解决锁问题</h3><p><strong>有锁的解决方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span>   <span class="hljs-title class_">AccountUnsafe</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">Account</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer balance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AccountUnsafe</span><span class="hljs-params">(Integer balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-comment">//synchronized加锁，对象锁，如果有竞争，自动重量级锁。原理是锁对象，每个线程需要等到上面一个线程解锁以后才可以获取当前对象的锁。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span>  Integer <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(Integer amount)</span> &#123;<br>        balance-=amount;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Account.demo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountUnsafe</span>(<span class="hljs-number">10000</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不需要在意接口。只需要知道到没有加synchronized之前会产生多喝线程同时竞争一个对象。</p><p><strong>无锁解决：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountSafe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> AtomicInteger balance;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AccountSafe</span><span class="hljs-params">(Integer balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(balance);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance.get();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(Integer amount)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> balance.get();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> prev - amount;<br>            <span class="hljs-keyword">if</span> (balance.compareAndSet(prev, next)) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 可以简化为下面的方法</span><br>        <span class="hljs-comment">// balance.addAndGet(-1 * amount);</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Account.demo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountSafe</span>(<span class="hljs-number">10000</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到上面是使用了一个AtomicInteger的解决方法，内部没有锁来保证共享变量的线程安全，是如何实现？</p><ul><li><p><strong>compareAndSet</strong> 正是做这个检查，在 set 前，先比较 prev 与当前值</p><p>   - 不一致了，next 作废，返回 false 表示失败</p><p>   比如，别的线程已经做了减法，当前值已经被减成了 990</p><p>   那么本线程的这次 990 就作废了，进入 while 下次循环重试</p><p>   - 一致，以 next 设置为新值，返回 true 表示成功</p></li></ul><p>这个思路在做redis分布式锁的时候会经常用到。</p><h3 id="5-2-CAS和volatile"><a href="#5-2-CAS和volatile" class="headerlink" title="5.2 CAS和volatile"></a>5.2 CAS和volatile</h3><p>其中的关键是 compareAndSet，它的简称就是 CAS （也有 Compare And Swap 的说法），它必须是原子操作。</p><blockquote><p>  其实 CAS 的底层是 lock cmpxchg 指令（X86 架构），在单核 CPU 和多核 CPU 下都能够保证【比较-交换】的原子性。</p><p>  在多核状态下，某个核执行到带 lock 的指令时，CPU 会让总线锁住，当这个核把此指令执行完毕，再开启总线。这个过程中不会被线程的调度机制所打断，保证了多个线程对内存操作的准确性，是原子的。</p></blockquote><p><strong>volatile</strong></p><p>获取共享变量时，为了保证该变量的可见性，需要使用 volatile 修饰。上面我们讲过volatile的用法，也就是线程直接操作主存。CAS 必须借助 volatile 才能读取到共享变量的最新值来实现【比较并交换】的效果</p><p><strong>无锁效率高的原因：</strong></p><ul><li>  无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 synchronized 会让线程在没有获得锁的时候，发生上下文切换，进入阻塞。打个比喻</li><li>  线程就好像高速跑道上的赛车，高速运行时，速度超快，一旦发生上下文切换，就好比赛车要减速、熄火，等被唤醒又得重新打火、启动、加速… 恢复到高速运行，代价比较大</li><li>  但无锁情况下，因为线程要保持运行，需要额外 CPU 的支持，CPU 在这里就好比高速跑道，没有额外的跑道，线程想高速运行也无从谈起，虽然不会进入阻塞，但由于没有分到时间片，仍然会进入可运行状态，还是会导致上下文切换</li></ul><p>结合 CAS 和 volatile 可以实现无锁并发，适用于线程数少、多核 CPU 的场景下。</p><ul><li>  CAS基于乐观锁的思想：不怕别的线程来改变量，就算改了，在重试就好了。</li><li>  synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。</li><li>  但是CAS也是存在问题的，如果竞争激烈，重试过多必定会影响效率。</li></ul><h3 id="5-3-原子整数"><a href="#5-3-原子整数" class="headerlink" title="5.3 原子整数"></a>5.3 原子整数</h3><p>JUC并发包提供了：</p><ul><li>  AtomicBoolean</li><li>  AtomicInteger</li><li>  AtomicLong</li></ul><p><strong>常见操作：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++</span><br>System.out.println(i.getAndIncrement());<br><span class="hljs-comment">// 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++i</span><br>System.out.println(i.incrementAndGet());<br><span class="hljs-comment">// 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --i</span><br>System.out.println(i.decrementAndGet());<br><span class="hljs-comment">// 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i--</span><br>System.out.println(i.getAndDecrement());<br><span class="hljs-comment">// 获取并加值（i = 0, 结果 i = 5, 返回 0）</span><br>System.out.println(i.getAndAdd(<span class="hljs-number">5</span>));<br><span class="hljs-comment">// 加值并获取（i = 5, 结果 i = 0, 返回 0）</span><br>System.out.println(i.addAndGet(-<span class="hljs-number">5</span>));<br><span class="hljs-comment">// 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0）</span><br><span class="hljs-comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span><br>System.out.println(i.getAndUpdate(p -&gt; p - <span class="hljs-number">2</span>));<br><span class="hljs-comment">// 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0）</span><br><span class="hljs-comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span><br>System.out.println(i.updateAndGet(p -&gt; p + <span class="hljs-number">2</span>));<br><span class="hljs-comment">// 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0）</span><br><span class="hljs-comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span><br><span class="hljs-comment">// getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的</span><br><span class="hljs-comment">// getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 final</span><br>System.out.println(i.getAndAccumulate(<span class="hljs-number">10</span>, (p, x) -&gt; p + x));<br><span class="hljs-comment">// 计算并获取（i = 10, p 为 i 的当前值, x 为参数1, 结果 i = 0, 返回 0）</span><br><span class="hljs-comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span><br>System.out.println(i.accumulateAndGet(-<span class="hljs-number">10</span>, (p, x) -&gt; p + x));<br></code></pre></td></tr></table></figure><h3 id="5-4-原子引用"><a href="#5-4-原子引用" class="headerlink" title="5.4 原子引用"></a>5.4 <strong>原子引用</strong></h3><ul><li>  AtomicReference</li><li>  AtomicMarkableReference</li><li>  AtomicStampedReference</li></ul><p><strong>使用:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecimalAccountSafeCas</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DecimalAccount</span> &#123;<br> AtomicReference&lt;BigDecimal&gt; ref;<br> <span class="hljs-keyword">public</span> <span class="hljs-title function_">DecimalAccountSafeCas</span><span class="hljs-params">(BigDecimal balance)</span> &#123;<br> ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;(balance);<br>&#125;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-keyword">return</span> ref.get();<br> &#125;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(BigDecimal amount)</span> &#123;<br> <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br> <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> ref.get();<br> <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> prev.subtract(amount);<br> <span class="hljs-keyword">if</span> (ref.compareAndSet(prev, next)) &#123;<br> <span class="hljs-keyword">break</span>;<br> &#125;<br> &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主线程仅能判断出共享变量的值与最初值 A 是否相同，不能感知到这种从 A 改为 B 又 改回 A 的情况，如果主线程希望：</p><p>只要有其它线程【动过了】共享变量，那么自己的 cas 就算失败，这时，仅比较值是不够的，需要再加一个版本号</p><p><strong>AtomicStampedReference</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> AtomicStampedReference&lt;String&gt; ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;&gt;(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br> log.debug(<span class="hljs-string">&quot;main start...&quot;</span>);<br> <span class="hljs-comment">// 获取值 A</span><br> <span class="hljs-type">String</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> ref.getReference();<br> <span class="hljs-comment">// 获取版本号</span><br> <span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> ref.getStamp();<br> log.debug(<span class="hljs-string">&quot;版本 &#123;&#125;&quot;</span>, stamp);<br> <span class="hljs-comment">// 如果中间有其它线程干扰，发生了 ABA 现象</span><br> other();<br> sleep(<span class="hljs-number">1</span>);<br> <span class="hljs-comment">// 尝试改为 C</span><br> log.debug(<span class="hljs-string">&quot;change A-&gt;C &#123;&#125;&quot;</span>, ref.compareAndSet(prev, <span class="hljs-string">&quot;C&quot;</span>, stamp, stamp + <span class="hljs-number">1</span>));<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">other</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br> log.debug(<span class="hljs-string">&quot;change A-&gt;B &#123;&#125;&quot;</span>, ref.compareAndSet(ref.getReference(), <span class="hljs-string">&quot;B&quot;</span>, <br> ref.getStamp(), ref.getStamp() + <span class="hljs-number">1</span>));<br> log.debug(<span class="hljs-string">&quot;更新版本为 &#123;&#125;&quot;</span>, ref.getStamp());<br> &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br> sleep(<span class="hljs-number">0.5</span>);<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br> log.debug(<span class="hljs-string">&quot;change B-&gt;A &#123;&#125;&quot;</span>, ref.compareAndSet(ref.getReference(), <span class="hljs-string">&quot;A&quot;</span>, <br> ref.getStamp(), ref.getStamp() + <span class="hljs-number">1</span>));<br> log.debug(<span class="hljs-string">&quot;更新版本为 &#123;&#125;&quot;</span>, ref.getStamp());<br> &#125;, <span class="hljs-string">&quot;t2&quot;</span>).start();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>AtomicMarkableReference</strong></p><p>不关心修改了几次，只是关心有没有修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestABAAtomicMarkableReference</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br> <span class="hljs-type">GarbageBag</span> <span class="hljs-variable">bag</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GarbageBag</span>(<span class="hljs-string">&quot;装满了垃圾&quot;</span>);<br> <span class="hljs-comment">// 参数2 mark 可以看作一个标记，表示垃圾袋满了</span><br> AtomicMarkableReference&lt;GarbageBag&gt; ref = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicMarkableReference</span>&lt;&gt;(bag, <span class="hljs-literal">true</span>);<br> log.debug(<span class="hljs-string">&quot;主线程 start...&quot;</span>);<br> <span class="hljs-type">GarbageBag</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> ref.getReference();<br> log.debug(prev.toString());<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br> log.debug(<span class="hljs-string">&quot;打扫卫生的线程 start...&quot;</span>);<br> bag.setDesc(<span class="hljs-string">&quot;空垃圾袋&quot;</span>);<br> <span class="hljs-keyword">while</span> (!ref.compareAndSet(bag, bag, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>)) &#123;&#125;<br> log.debug(bag.toString());<br> &#125;).start();<br> Thread.sleep(<span class="hljs-number">1000</span>);<br> log.debug(<span class="hljs-string">&quot;主线程想换一只新垃圾袋？&quot;</span>);<br> <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> ref.compareAndSet(prev, <span class="hljs-keyword">new</span> <span class="hljs-title class_">GarbageBag</span>(<span class="hljs-string">&quot;空垃圾袋&quot;</span>), <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br> log.debug(<span class="hljs-string">&quot;换了么？&quot;</span> + success);<br> log.debug(ref.getReference().toString());<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-原子数组"><a href="#5-5-原子数组" class="headerlink" title="5.5 原子数组"></a>5.5 <strong>原子数组</strong></h3><ul><li>  AtomicIntegerArray</li><li>  AtomicLongArray</li><li>  AtomicReferenceArray</li></ul><h3 id="5-6-字段更新器"><a href="#5-6-字段更新器" class="headerlink" title="5.6 字段更新器"></a>5.6 <strong>字段更新器</strong></h3><ul><li>  AtomicReferenceFieldUpdater // 域 字段</li><li>  AtomicIntegerFieldUpdater</li><li>  AtomicLongFieldUpdater</li></ul><p>利用字段更新器，可以针对对象的某个域（Field）进行原子操作，只能配合 volatile 修饰的字段使用，否则会出现异常</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2024/02/19/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/02/19/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a><a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串</a></h2><p><strong>思路：</strong></p><p>两个指针，一头一尾直接遍历。一个temp用于交换。</p><p><strong>代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s)</span> &#123;<br>        <span class="hljs-type">char</span> temp;<br>        <span class="hljs-type">int</span> i,j;<br>        i=<span class="hljs-number">0</span>;<br>        j=s.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>            temp=s[i];<br>            s[i]=s[j];<br>            s[j]=temp;<br>            i++;<br>            j--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="541. 反转字符串 II"></a><a href="https://leetcode.cn/problems/reverse-string-ii/">541. 反转字符串 II</a></h2><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseStr</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">char</span>[] ch=s.toCharArray();<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ch.length; i += <span class="hljs-number">2</span> * k)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-comment">//这里是判断尾数够不够k个来取决end指针的位置</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> Math.min(ch.length - <span class="hljs-number">1</span>, start + k - <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//用异或运算反转 </span><br>            <span class="hljs-keyword">while</span>(start &lt; end)&#123;<br>                ch[start] ^= ch[end];<br>                ch[end] ^= ch[start];<br>                ch[start] ^= ch[end];<br>                start++;<br>                end--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(ch);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="151-反转字符串中的单词"><a href="#151-反转字符串中的单词" class="headerlink" title="151. 反转字符串中的单词"></a><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词</a></h2><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不使用Java内置方法实现</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 1.去除首尾以及中间多余空格</span><br><span class="hljs-comment">     * 2.反转整个字符串</span><br><span class="hljs-comment">     * 3.反转各个单词</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.reverseWords2() called with: s = [&quot; + s + &quot;]&quot;);</span><br>        <span class="hljs-comment">// 1.去除首尾以及中间多余空格</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> removeSpace(s);<br>        <span class="hljs-comment">// 2.反转整个字符串</span><br>        reverseString(sb, <span class="hljs-number">0</span>, sb.length() - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 3.反转各个单词</span><br>        reverseEachWord(sb);<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> StringBuilder <span class="hljs-title function_">removeSpace</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.removeSpace() called with: s = [&quot; + s + &quot;]&quot;);</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> s.length() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (s.charAt(start) == <span class="hljs-string">&#x27; &#x27;</span>) start++;<br>        <span class="hljs-keyword">while</span> (s.charAt(end) == <span class="hljs-string">&#x27; &#x27;</span>) end--;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span> (start &lt;= end) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(start);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27; &#x27;</span> || sb.charAt(sb.length() - <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                sb.append(c);<br>            &#125;<br>            start++;<br>        &#125;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.removeSpace returned: sb = [&quot; + sb + &quot;]&quot;);</span><br>        <span class="hljs-keyword">return</span> sb;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反转字符串指定区间[start, end]的字符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(StringBuilder sb, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.reverseString() called with: sb = [&quot; + sb + &quot;], start = [&quot; + start + &quot;], end = [&quot; + end + &quot;]&quot;);</span><br>        <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> sb.charAt(start);<br>            sb.setCharAt(start, sb.charAt(end));<br>            sb.setCharAt(end, temp);<br>            start++;<br>            end--;<br>        &#125;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.reverseString returned: sb = [&quot; + sb + &quot;]&quot;);</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseEachWord</span><span class="hljs-params">(StringBuilder sb)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sb.length();<br>        <span class="hljs-keyword">while</span> (start &lt; n) &#123;<br>            <span class="hljs-keyword">while</span> (end &lt; n &amp;&amp; sb.charAt(end) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                end++;<br>            &#125;<br>            reverseString(sb, start, end - <span class="hljs-number">1</span>);<br>            start = end + <span class="hljs-number">1</span>;<br>            end = start + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="28-找出字符串中第一个匹配项的下标"><a href="#28-找出字符串中第一个匹配项的下标" class="headerlink" title="28. 找出字符串中第一个匹配项的下标"></a><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标</a></h2><p><strong>思路：</strong></p><p>KMP算法，关键在于next数组的构建，要构建next数组，必须要先理解什么是前缀表，前缀表中记录的是最大前后缀的长度。也就是如下图</p><p><img src="/../images/image-20240219104157458.png" alt="image-20240219104157458"></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next,String s)</span>&#123;<br>        <span class="hljs-type">int</span> j=-<span class="hljs-number">1</span>;<br>        next[<span class="hljs-number">0</span>]=j;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;s.length();i++)&#123;<br>            <span class="hljs-comment">//不匹配，则前缀末尾j指针更新为next[j]，也就是j指针指向的next数组中的前缀。这里已经时改良后的KMP了。</span><br>            <span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>&amp;&amp;s.charAt(i)!=s.charAt(j+<span class="hljs-number">1</span>))&#123;<br>                j=next[j];<br>            &#125;<br>            <span class="hljs-comment">//如果匹配，j++</span><br>            <span class="hljs-keyword">if</span>(s.charAt(i)==s.charAt(j+<span class="hljs-number">1</span>))&#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-comment">//更新next</span><br>            next[i]=j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>        <span class="hljs-keyword">if</span>(needle.length()==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-comment">//定义next数组,注意这里的next【0】=-1</span><br>        <span class="hljs-type">int</span>[] next=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[needle.length()];<br>        getNext(next,needle);<br>        <span class="hljs-type">int</span> j=-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;haystack.length();i++)&#123;<br>            <span class="hljs-comment">//不匹配，则j=next【j</span><br>            <span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>&amp;&amp;haystack.charAt(i)!=needle.charAt(j+<span class="hljs-number">1</span>))&#123;<br>                j=next[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(haystack.charAt(i)==needle.charAt(j+<span class="hljs-number">1</span>))&#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j==needle.length()-<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> (i-needle.length()+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>代码随想录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2024/02/18/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/02/18/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h1><ul><li>  <strong>实例化对象不使用new，用工厂方法创建对象</strong></li><li>  <strong>使用工厂统一管理对象的创建，将调用者跟实现类解耦</strong></li></ul><p><strong>看一个例子：</strong></p><p>例如我们在进行OJ项目的研发过程中，发现按照传统的方式进行编写代码，我们是通过new把代码沙箱进行写死，现在我们需要进行适时调整代码沙箱的实例，也就是用户可以随时自己选择实例进行实现。那么此时我们可以利用静态工厂模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代码沙箱工厂（根据字符串参数创建指定的代码沙箱实例）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeSandboxFactory</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建代码沙箱示例</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 沙箱类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CodeSandbox <span class="hljs-title function_">newInstance</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;example&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExampleCodeSandbox</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;remote&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteCodeSandbox</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;thirdParty&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThirdPartyCodeSandbox</span>();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExampleCodeSandbox</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><blockquote><p>  <strong>建立一个工厂类，对实现了同一接口的一些类进行实例的创建。</strong></p></blockquote><p><img src="/../images/20210326211048396.png" alt="在这里插入图片描述"></p><p>存在问题：因为是通过工厂类直接实现实例的选择，所以当修改实例时需要在工厂内部进行修改，违背了设计中的“开闭原则”，也就是对修改关闭，对扩展开放。</p><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><blockquote><p>  <strong>对简单工厂模式的改进，使用一个工厂接口，创建多个工厂类，每个工厂创建对应的对象。</strong></p></blockquote><p><img src="/../images/20210326221614629.png" alt="在这里插入图片描述"></p><p>也就是定义一个接口，然后通过创建接口的实现类来实现多个不同的工厂，每个工厂创建对应的对象。</p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><blockquote><p>  围绕一个超级工厂创建其他工厂，每个工厂可以生产不同类型的产品</p></blockquote><p><img src="/../images/20210326230943938.png" alt="在这里插入图片描述"></p><p>抽象工厂其实就是简单工厂和工厂方法模式的整合。例如上面可以通过工厂的抽象类生成对应的工厂类，然后进行对象的生产。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工厂模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/02/18/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/02/18/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><h2 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span>&#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode* next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x):<span class="hljs-built_in">val</span>(x),<span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>)&#123;&#125;<span class="hljs-comment">//构造函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">null</span>&amp;&amp;head.val==val)&#123;<br>            head=head.next;<br>        &#125;<br>        ListNode cur=head;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">while</span>(cur.next!=<span class="hljs-literal">null</span>&amp;&amp;cur.next.val==val)&#123;<br>                cur.next=cur.next.next;<br>            &#125;<br>            cur=cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  解题的步骤：首先在拿到一道题的时候我们就是先去思考要得到最后的答案，过滤的条件是什么，其实编程就是一个执行逻辑，过滤掉所有的条件，最后把正确的返回就可以。</li></ul><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a></h2><p><strong>思路：</strong></p><p>本题要求我们熟练链表的基本操作，首先链表分为带有头节点的和不带有头节点的，带有头节点的链表头节点不存值。其中删除和按index插入都是需要记录前序节点的。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-type">int</span> size;<br>    LinkedListNode head;<br><span class="hljs-comment">//带头结点的链表</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListNode</span>&#123;<br>        <span class="hljs-type">int</span> val;<br>        LinkedListNode next;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListNode</span><span class="hljs-params">()</span>&#123;&#125;<br>         <span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedListNode</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span>&#123;<br>            <span class="hljs-built_in">this</span>.val=val;<br>        &#125;<br>        <br>    &#125;<br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        head=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedListNode</span>();<br>        size=<span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>         <span class="hljs-comment">//如果index非法，返回-1</span><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<br>        LinkedListNode cur=head;<br>        <span class="hljs-keyword">while</span>(idx&lt;=index)&#123;<br>            cur=cur.next;<br>            idx++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur.val;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>, val);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size, val);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;<br>            index = <span class="hljs-number">0</span>;<br>        &#125;<br>        size++;<br>        <span class="hljs-comment">//找到要插入节点的前驱</span><br>        <span class="hljs-type">LinkedListNode</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            pred = pred.next;<br>        &#125;<br>        <span class="hljs-type">LinkedListNode</span> <span class="hljs-variable">toAdd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedListNode</span>(val);<br>        toAdd.next = pred.next;<br>        pred.next = toAdd;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>       <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            head = head.next;<br>    <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">LinkedListNode</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index ; i++) &#123;<br>            pred = pred.next;<br>        &#125;<br>        pred.next = pred.next.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h2><p><strong>题目：</strong></p><p><img src="/../images/rev1ex1.jpg" alt="img"></p><p><strong>思路：</strong></p><p>如果这题用开辟空间的方式来记录新的链表，那开销太大了。但是如果只是将next指针反一下就非常快。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">//反转链表，就是遍历链表，然后一个一个头插入最后返回头节点。pass:这个方法对于空间利用率太低</span><br>        <span class="hljs-comment">//正确解法：只需要遍历以后重新调整next指向就可以。</span><br>        ListNode pre=<span class="hljs-literal">null</span>;<br>        ListNode cur=head;<br>        ListNode temp;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">null</span>)&#123;<br>            temp=cur.next;<br>            cur.next=pre;<br>            pre=cur; <span class="hljs-comment">//注意这里，第一次提交的时候这里出错了。</span><br>            cur=temp;<br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h2><p><strong>题目：</strong></p><p><img src="/../images/swap_ex1.jpg" alt="img"></p><p><strong>思路：</strong></p><p>首先我们需要确定的是第一个节点会不会被操作，所有第一个节点可能被操作的题目我们都要加上一个虚拟的头节点用于方便操作。主要思路是用cur记录遍历的节点，用curcur记录cur的next，然后pre记录cur的上一次遍历。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>         <span class="hljs-type">ListNode</span> <span class="hljs-variable">dumyhead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 设置一个虚拟头结点</span><br>        dumyhead.next = head; <span class="hljs-comment">// 将虚拟头结点指向head，这样方便后面做删除操作</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dumyhead;<br>        ListNode temp; <span class="hljs-comment">// 临时节点，保存两个节点后面的节点</span><br>        ListNode firstnode; <span class="hljs-comment">// 临时节点，保存两个节点之中的第一个节点</span><br>        ListNode secondnode; <span class="hljs-comment">// 临时节点，保存两个节点之中的第二个节点</span><br>        <span class="hljs-keyword">while</span> (cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>) &#123;<br>            temp = cur.next.next.next;<br>            firstnode = cur.next;<br>            secondnode = cur.next.next;<br>            cur.next = secondnode;       <span class="hljs-comment">// 步骤一</span><br>            secondnode.next = firstnode; <span class="hljs-comment">// 步骤二</span><br>            firstnode.next = temp;      <span class="hljs-comment">// 步骤三</span><br>            cur = firstnode; <span class="hljs-comment">// cur移动，准备下一轮交换</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> dumyhead.next;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h2><p><strong>题目：</strong></p><p><img src="/../images/remove_ex1.jpg" alt="img"></p><p><strong>思路：</strong></p><p>这题删除操作很简单就是有一个坑那就是对头节点的操作，前面说过了，如果有对头结点的操作的，都是需要创建一个虚拟的头节点便于操作。删除的逻辑是快慢指针，慢指针距离快指针n个距离。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>         <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    dummyNode.next = head;<br><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">fastIndex</span> <span class="hljs-operator">=</span> dummyNode;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">slowIndex</span> <span class="hljs-operator">=</span> dummyNode;<br><br>    <span class="hljs-comment">// 只要快慢指针相差 n 个结点即可</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n  ; i++)&#123; <br>        fastIndex = fastIndex.next;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (fastIndex != <span class="hljs-literal">null</span>)&#123;<br>        fastIndex = fastIndex.next;<br>        slowIndex = slowIndex.next;<br>    &#125;<br><br>    <span class="hljs-comment">//此时 slowIndex 的位置就是待删除元素的前一个位置。</span><br>    <span class="hljs-comment">//具体情况可自己画一个链表长度为 3 的图来模拟代码来理解</span><br>    slowIndex.next = slowIndex.next.next;<br>    <span class="hljs-keyword">return</span> dummyNode.next;<br>        <span class="hljs-comment">// //快慢指针，用一个index记录两个指针之间的距离，当fast指针遍历到null时，返满指针。</span><br>        <span class="hljs-comment">// ListNode slow=head;</span><br>        <span class="hljs-comment">// ListNode fast=head;</span><br>        <span class="hljs-comment">// int index=-1;</span><br>        <span class="hljs-comment">// while(fast!=null)&#123;</span><br>        <span class="hljs-comment">//     fast=fast.next;</span><br>        <span class="hljs-comment">//     if(index&lt;n)&#123;</span><br>        <span class="hljs-comment">//         index++;</span><br>        <span class="hljs-comment">//     &#125;else &#123;</span><br>        <span class="hljs-comment">//         slow=slow.next;</span><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// if(index&lt;n)&#123;</span><br>        <span class="hljs-comment">//     return null;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// if(slow.next!=null&amp;&amp;slow.next.next!=null)&#123;</span><br>        <span class="hljs-comment">//     slow.next=slow.next.next;</span><br>        <span class="hljs-comment">// &#125;else &#123;</span><br>        <span class="hljs-comment">//     slow.next=null;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <br>        <span class="hljs-comment">// return head;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></h2><p><strong>题目：</strong></p><p><img src="/../images/160_statement.png" alt="img"></p><p><strong>思路：</strong></p><p>O(n+m),首先计算出两个链表的长度，然后遍历长的链表到与短链表平齐，用双指针同步遍历两个链表剩余的节点，找到第一个相同地址的节点返回。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        <span class="hljs-comment">//三个指针，一个遍历A，一个遍历B,一个记录两个相等的节点，如果一旦两个节点没有相同的就即为null。</span><br>        <span class="hljs-comment">//但是因为两个链表中是没有顺序的所以不可以用。</span><br>        <span class="hljs-comment">//正确解法：首先求出两个链表的长度，然后相减</span><br>        <span class="hljs-type">int</span> size1=getSize(headA);<br>        <span class="hljs-type">int</span> size2=getSize(headB);<br>        <span class="hljs-type">int</span> sub=size1-size2;<br>        <span class="hljs-keyword">if</span>(sub&lt;<span class="hljs-number">0</span>)&#123;<br>            ListNode temp;<br>            temp=headA;<br>            headA=headB;<br>            headB=temp;<br>            sub=<span class="hljs-number">0</span>-sub;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(sub-- &gt;<span class="hljs-number">0</span>)&#123;<br>            headA=headA.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(headA!=headB&amp;&amp;headA.next!=<span class="hljs-literal">null</span>&amp;&amp;headB.next!=<span class="hljs-literal">null</span>)&#123;<br>            headA=headA.next;<br>            headB=headB.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(headA!=headB)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> headA;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">(ListNode node)</span>&#123;<br>        <span class="hljs-type">int</span> size=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(node!=<span class="hljs-literal">null</span>)&#123;<br>            node=node.next;<br>            size++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h2><p><strong>思路：</strong></p><p>使用快慢指针，快指针每次走两步，慢指针每次走一步，两个指针相遇一定是在环内部，本题是一个数学问题。关键是如何找到环的入口。</p><p>假设从头结点到环形入口节点 的节点数为x。 环形入口节点到 fast指针与slow指针相遇节点 节点数为y。 从相遇节点 再到环形入口节点节点数为 z。 如图所示：</p><p><img src="/../images/20220925103433.png" alt="img"></p><p>相遇的时候slow指针走过的距离为<code>x+y</code>，fast指针走过的距离是x+y+n(y+z)，化简以后得到：<br>$$<br>x = (n - 1) (y + z) + z<br>$$<br>当n=1时，<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p><p>当n&gt;1时，其实这种情况和n为1的时候 效果是一样的，一样可以通过这个方法找到 环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>    <span class="hljs-comment">//     //判断有没有环使用再次遍历到自己。</span><br>    <span class="hljs-comment">//     ListNode cur=head;</span><br>    <span class="hljs-comment">//     while(cur!=null)&#123;</span><br>    <span class="hljs-comment">//         ListNode curcur=cur;</span><br>    <span class="hljs-comment">//         while(curcur!=null)&#123;</span><br>    <span class="hljs-comment">//             curcur=curcur.next;</span><br>    <span class="hljs-comment">//             if(curcur==cur)&#123;</span><br>    <span class="hljs-comment">//                 return cur;</span><br>    <span class="hljs-comment">//             &#125;</span><br>    <span class="hljs-comment">//         &#125;</span><br>    <span class="hljs-comment">//         cur=cur.next;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">//     return null;</span><br>    <span class="hljs-comment">// &#125;</span><br>       <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span> (slow == fast) &#123;<span class="hljs-comment">// 有环</span><br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">index1</span> <span class="hljs-operator">=</span> fast;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> head;<br>                <span class="hljs-comment">// 两个指针，从头结点和相遇结点，各走一步，直到相遇，相遇点即为环入口</span><br>                <span class="hljs-keyword">while</span> (index1 != index2) &#123;<br>                    index1 = index1.next;<br>                    index2 = index2.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> index1;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>代码随想录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OJ在线判题项目笔记</title>
    <link href="/2024/02/11/OJ%E5%9C%A8%E7%BA%BF%E5%88%A4%E9%A2%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/02/11/OJ%E5%9C%A8%E7%BA%BF%E5%88%A4%E9%A2%98%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="OJ在线判题"><a href="#OJ在线判题" class="headerlink" title="OJ在线判题"></a>OJ在线判题</h1><h2 id="项目计划"><a href="#项目计划" class="headerlink" title="项目计划"></a>项目计划</h2><ul><li>  [x] 前后端项目运行（10min）</li><li>  [x] 前端代码熟悉-10min</li><li>  [x] 后端框架搭建-15min</li><li>  [ ] 前后端联通(存在前端页面无法访问后端部分接口)</li><li>  [x]  后端接口+服务层编写</li><li>  [ ]  </li></ul><h2 id="项目调研"><a href="#项目调研" class="headerlink" title="项目调研"></a>项目调研</h2><h2 id="项目笔记"><a href="#项目笔记" class="headerlink" title="项目笔记"></a>项目笔记</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><h3 id="代码沙箱实现"><a href="#代码沙箱实现" class="headerlink" title="代码沙箱实现"></a>代码沙箱实现</h3><h3 id="docker实现方式"><a href="#docker实现方式" class="headerlink" title="docker实现方式"></a>docker实现方式</h3><p><strong>远程开发</strong></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梯度下降法</title>
    <link href="/2024/02/01/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/"/>
    <url>/2024/02/01/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><h2 id="数学意义"><a href="#数学意义" class="headerlink" title="数学意义"></a>数学意义</h2><p>梯度就是方向向量最大。那么梯度下降就是根据方向导数最大的方向寻找局部最优解。</p><p><img src="/../images/v2-0f23b351799a1cb70f9a1f71f743d160_720w.webp" alt="img"></p><p>通过更新x来寻找局部最小值，梯度下降的公式即为：<br>$$<br>x=x-\alpha*\frac{df(x)}{dx}<br>$$<br>其中的$\alpha$成为学习率，越小则下降的幅度越小，反之越大。</p><p><strong>注意：</strong>$\alpha$不能够太大，因为当遍历到最小值的时候，可能会导致越过了最小值。</p><h2 id="二元函数的梯度下降"><a href="#二元函数的梯度下降" class="headerlink" title="二元函数的梯度下降"></a><strong>二元函数的梯度下降</strong></h2><p><img src="/../images/v2-fd9647e3aa2038c05a04e024fdb40a7c_720w.webp" alt="img"></p><p>多元函数的梯度就是对每一个坐标的偏导。<img src="/../images/image-20240202081000240.png" alt="image-20240202081000240"></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>梯度下降法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目idea</title>
    <link href="/2024/02/01/%E9%A1%B9%E7%9B%AEidea/"/>
    <url>/2024/02/01/%E9%A1%B9%E7%9B%AEidea/</url>
    
    <content type="html"><![CDATA[<h1 id="project"><a href="#project" class="headerlink" title="project"></a>project</h1><h1 id="component"><a href="#component" class="headerlink" title="component"></a>component</h1><ul><li>  mybatisplus运行时显示sql语句</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>idea</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis分布式锁</title>
    <link href="/2024/02/01/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2024/02/01/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式锁——Redis实现方式"><a href="#分布式锁——Redis实现方式" class="headerlink" title="分布式锁——Redis实现方式"></a>分布式锁——Redis实现方式</h1><h2 id="Redis分布式锁的实现核心思路"><a href="#Redis分布式锁的实现核心思路" class="headerlink" title="Redis分布式锁的实现核心思路"></a>Redis分布式锁的实现核心思路</h2><ul><li><p>获取锁：</p><ul><li>互斥：确保只能有一个线程获取锁</li><li>非阻塞：尝试一次，成功返回true，失败返回false</li></ul></li><li><p>释放锁：</p><ul><li>手动释放</li><li>超时释放：获取锁时添加一个超时时间（必须添加）</li></ul></li></ul><p>我们利用redis 的setNx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p><strong>锁的基本接口</strong></p><p><img src="/../images/1656079017728.png" alt="1656079017728"></p><p><strong>SimpleRedisLock</strong></p><p>利用setnx方法进行加锁，同时增加过期时间，防止死锁，此方法可以保证加锁和增加过期时间具有原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String KEY_PREFIX=<span class="hljs-string">&quot;lock:&quot;</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>    <span class="hljs-comment">// 获取线程标示</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId()<br>    <span class="hljs-comment">// 获取锁</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>            .setIfAbsent(KEY_PREFIX + name, threadId + <span class="hljs-string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>释放锁逻辑</li></ul><p>SimpleRedisLock</p><p>释放锁，防止删除别人的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//通过del删除锁</span><br>    stringRedisTemplate.delete(KEY_PREFIX + name);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改业务代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>      <span class="hljs-comment">// 1.查询优惠券</span><br>      <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>      <span class="hljs-comment">// 2.判断秒杀是否开始</span><br>      <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>          <span class="hljs-comment">// 尚未开始</span><br>          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>      &#125;<br>      <span class="hljs-comment">// 3.判断秒杀是否已经结束</span><br>      <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>          <span class="hljs-comment">// 尚未开始</span><br>          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>      &#125;<br>      <span class="hljs-comment">// 4.判断库存是否充足</span><br>      <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-comment">// 库存不足</span><br>          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>      &#125;<br>      <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>      <span class="hljs-comment">//创建锁对象(新增代码)</span><br>      <span class="hljs-type">SimpleRedisLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRedisLock</span>(<span class="hljs-string">&quot;order:&quot;</span> + userId, stringRedisTemplate);<br>      <span class="hljs-comment">//获取锁对象</span><br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1200</span>);<br><span class="hljs-comment">//加锁失败</span><br>      <span class="hljs-keyword">if</span> (!isLock) &#123;<br>          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">//获取代理对象(事务)</span><br>          <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>          <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-comment">//释放锁</span><br>          lock.unlock();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="分布式锁常出现的问题"><a href="#分布式锁常出现的问题" class="headerlink" title="分布式锁常出现的问题"></a>分布式锁常出现的问题</h2><p>（1）执行时间大于过期时间，导致另外线程占用锁（拉屎的时候别人冲进来）（续期）</p><p>（2）接上面的场景，执行完后处理删除线程时误删除别人的锁，导致后来线程又加锁。（在释放锁的时候判断是不是自己的锁）</p><p><img src="/../images/image-20240206235653618.png" alt="image-20240206235653618"></p><p>（3）在进行释放锁代码的时候已经通过了是不是自己的锁的验证，这时候别的线程又进来了加锁，导致当前线程把新线程的锁删除。</p><p>（4）Redis如果时集群怎么保证数据一致性。</p><h2 id="解决分布式锁的误删除问题"><a href="#解决分布式锁的误删除问题" class="headerlink" title="解决分布式锁的误删除问题"></a>解决分布式锁的误删除问题</h2><p>在获取锁时存入线程标示（可以用UUID表示）在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致</p><ul><li>如果一致则释放锁</li><li>如果不一致则不释放锁</li></ul><p><img src="/../images/1653387398820.png" alt="1653387398820"></p><p>具体代码如下：加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>   <span class="hljs-comment">// 获取线程标示</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>   <span class="hljs-comment">// 获取锁</span><br>   <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);<br>   <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>&#125;<br></code></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取线程标示</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>    <span class="hljs-comment">// 获取锁中的标示</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);<br>    <span class="hljs-comment">// 判断标示是否一致</span><br>    <span class="hljs-keyword">if</span>(threadId.equals(id)) &#123;<br>        <span class="hljs-comment">// 释放锁</span><br>        stringRedisTemplate.delete(KEY_PREFIX + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分布式锁的原子性问题"><a href="#分布式锁的原子性问题" class="headerlink" title="分布式锁的原子性问题"></a>分布式锁的原子性问题</h2><p>也就上面我们提到的第三个问题</p><p>线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时他的锁到期了，那么此时线程2进来，但是线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，相当于条件判断并没有起到作用，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的拿锁，比锁，删锁，实际上并不是原子性的，我们要防止刚才的情况发生，</p><p><img src="/../images/1653387764938.png?lastModify=1706753347" alt="1653387764938"></p><p> Lua脚本解决多条命令原子性问题（了解即可）<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于Redis的分布式锁实现思路：</p><ul><li>利用set nx ex获取锁，并设置过期时间，保存线程标示</li><li>释放锁时先判断线程标示是否与自己一致，一致则删除锁<ul><li>特性：<ul><li>利用set nx满足互斥性</li><li>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性</li><li>利用Redis集群保证高可用和高并发特性</li></ul></li></ul></li></ul><h1 id="Redission"><a href="#Redission" class="headerlink" title="Redission"></a>Redission</h1><p>基于setnx实现的分布式锁存在下面的问题：</p><p><strong>重入问题</strong>：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，比如HashTable这样的代码中，他的方法都是使用synchronized修饰的，假如他在一个方法内，调用另一个方法，那么此时如果是不可重入的，不就死锁了吗？所以可重入锁他的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的。</p><p><strong>不可重试</strong>：是指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。</p><p><strong>超时释放：</strong>我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟没有锁住，有安全隐患</p><p><strong>主从一致性：</strong> 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。</p><p>Redission提供了许多分布式锁的功能：</p><p><img src="/../images/1653546736063.png?lastModify=1706753347" alt="1653546736063"></p><h2 id="Redission快速入门"><a href="#Redission快速入门" class="headerlink" title="Redission快速入门"></a>Redission快速入门</h2><p>引入依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.redisson&lt;/groupId&gt;<br>&lt;artifactId&gt;redisson&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">3.13</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>配置Redisson客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://192.168.150.101:6379&quot;</span>)<br>            .setPassword(<span class="hljs-string">&quot;123321&quot;</span>);<br>        <span class="hljs-comment">// 创建RedissonClient对象</span><br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如何使用Redission的分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissionClient redissonClient;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//获取锁(可重入)，指定锁的名称</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;anyLock&quot;</span>);<br>    <span class="hljs-comment">//尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试)，锁自动释放时间，时间单位</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,TimeUnit.SECONDS);<br>    <span class="hljs-comment">//判断获取锁成功</span><br>    <span class="hljs-keyword">if</span>(isLock)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;执行业务&quot;</span>);          <br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//释放锁</span><br>            lock.unlock();<br>        &#125;<br>        <br>    &#125;<br>    <br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>在 VoucherOrderServiceImpl</p><p>注入RedissonClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>        <span class="hljs-comment">// 1.查询优惠券</span><br>        <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>        <span class="hljs-comment">// 2.判断秒杀是否开始</span><br>        <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 尚未开始</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 3.判断秒杀是否已经结束</span><br>        <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 尚未开始</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 4.判断库存是否充足</span><br>        <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 库存不足</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//创建锁对象 这个代码不用了，因为我们现在要使用分布式锁</span><br>        <span class="hljs-comment">//SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span><br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br>        <span class="hljs-comment">//获取锁对象</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>       <br><span class="hljs-comment">//加锁失败</span><br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取代理对象(事务)</span><br>            <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>            <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//释放锁</span><br>            lock.unlock();<br>        &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="redission可重入锁"><a href="#redission可重入锁" class="headerlink" title="redission可重入锁"></a>redission可重入锁</h2><p><img src="/../images/1653548087334.png?lastModify=1706753347" alt="1653548087334"></p><h2 id="redission锁重试和WatchDog机制"><a href="#redission锁重试和WatchDog机制" class="headerlink" title="redission锁重试和WatchDog机制"></a>redission锁重试和WatchDog机制</h2><p>Redisson提供的分布式锁是支持锁自动续期的，</p><h2 id="redission锁的MutiLock原理"><a href="#redission锁的MutiLock原理" class="headerlink" title="redission锁的MutiLock原理"></a>redission锁的MutiLock原理</h2><p><img src="/../images/1653553093967.png?lastModify=1706753347" alt="1653553093967"></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>控制单元的功能</title>
    <link href="/2024/02/01/%E6%8E%A7%E5%88%B6%E5%8D%95%E5%85%83%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/02/01/%E6%8E%A7%E5%88%B6%E5%8D%95%E5%85%83%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="控制单元的功能"><a href="#控制单元的功能" class="headerlink" title="控制单元的功能"></a>控制单元的功能</h1><h2 id="微操作命令的分析"><a href="#微操作命令的分析" class="headerlink" title="微操作命令的分析"></a>微操作命令的分析</h2><p>这一篇主要就是讲指令周期的4个阶段的具体操作过程。</p><h3 id="取值周期"><a href="#取值周期" class="headerlink" title="取值周期"></a>取值周期</h3><p><img src="/../images/image-20230403124609095.png" alt="image-20230403124609095"></p><h3 id="间址周期"><a href="#间址周期" class="headerlink" title="间址周期"></a>间址周期</h3><p><img src="/../images/image-20230403124624969.png" alt="image-20230403124624969"></p><h3 id="执行周期"><a href="#执行周期" class="headerlink" title="执行周期"></a>执行周期</h3><p><img src="/../images/image-20230403124647369.png" alt="image-20230403124647369"></p><p><img src="/../images/image-20230403124656707.png" alt="image-20230403124656707"></p><p><img src="/../images/image-20230403124702769.png" alt="image-20230403124702769"></p><p><img src="/../images/image-20230403124710644.png" alt="image-20230403124710644"></p><p><img src="/../images/image-20230403124718257.png" alt="image-20230403124718257"></p><h3 id="中断周期"><a href="#中断周期" class="headerlink" title="中断周期"></a>中断周期</h3><p><img src="/../images/image-20230403124731895.png" alt="image-20230403124731895"></p><h2 id="控制单元的功能-1"><a href="#控制单元的功能-1" class="headerlink" title="控制单元的功能"></a>控制单元的功能</h2><h3 id="外特性"><a href="#外特性" class="headerlink" title="外特性"></a>外特性</h3><p><img src="/../images/image-20230403124807457.png" alt="image-20230403124807457"></p><h4 id="1、输入信号"><a href="#1、输入信号" class="headerlink" title="1、输入信号"></a>1、输入信号</h4><p>（1）时钟</p><p>（2）指令寄存器</p><p>（3）标志</p><p>（4）外来信号</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPU的结构和功能</title>
    <link href="/2024/02/01/CPU%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/02/01/CPU%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="CPU的结构和功能"><a href="#CPU的结构和功能" class="headerlink" title="CPU的结构和功能"></a>CPU的结构和功能</h1><h2 id="CPU结构"><a href="#CPU结构" class="headerlink" title="CPU结构"></a>CPU结构</h2><h3 id="CPU的功能"><a href="#CPU的功能" class="headerlink" title="CPU的功能"></a>CPU的功能</h3><p>CPU是实质上是包括了运算器和控制器两部分，前面讲解了运算器的硬件配置这里我们重点介绍控制器的功能：</p><ul><li>  取指令</li></ul><p>自动形成指令地址；自动发出取指令的命令。</p><ul><li>  分析指令</li></ul><p>操作码译码</p><ul><li>  执行指令</li></ul><p>根据分析指令得到的“操作命令”和“操作数地址”，操作各种器件。</p><h3 id="CPU的结构"><a href="#CPU的结构" class="headerlink" title="CPU的结构"></a>CPU的结构</h3><p>通过功能，要想实现取指令，必须要有一个寄存器专用于存放当前指令的地址，要分析指令就需要译码元件，要执行指令，就需要一个能够发出各种操作命令的CU，要完成算术逻辑运算就需要实现运算的ALU部件。</p><p><img src="/../images/image-20230328100242681.png" alt="image-20230328100242681"></p><p>各部件和其功能的对比图如下：</p><p><img src="/../images/image-20230328100321892.png" alt="image-20230328100321892"></p><h3 id="CPU的寄存器"><a href="#CPU的寄存器" class="headerlink" title="CPU的寄存器"></a>CPU的寄存器</h3><h4 id="1、用户可见寄存器"><a href="#1、用户可见寄存器" class="headerlink" title="1、用户可见寄存器"></a>1、用户可见寄存器</h4><p>通常CPU执行语言访问的寄存器就是用户可见寄存器。</p><p>可以分为下列几种：</p><p><strong>（1）通用寄存器</strong></p><p>可用于存放操作数又可以满足某种寻址方式。</p><p><strong>（2）数据寄存器</strong></p><p>存放操作数，位数满足多数数据数据类型的数值范围、有些机器循序使用两个连续的寄存器存放双倍字长的值。</p><p><strong>（3）地址寄存器</strong></p><p>存放地址，位数要满足最大的地址范围。用于特殊寻址方式（基址寻址、堆栈寻址）。</p><p><strong>（4）条件码寄存器</strong></p><p>存放条件码，可作程序分支的依据，如 正、负、零、溢出、进位等</p><h4 id="2、控制和状态寄存器"><a href="#2、控制和状态寄存器" class="headerlink" title="2、控制和状态寄存器"></a>2、控制和状态寄存器</h4><p>（1）控制寄存器</p><p>MAR（存储器地址寄存器）、MDR（存储器数据寄存器）、PC（程序计数器）、IR（指令寄存器）。</p><p>（2）状态寄存器</p><p>状态寄存器：存放条件码；PSW寄存器：存放程序状态字。</p><h3 id="控制单元和中断系统"><a href="#控制单元和中断系统" class="headerlink" title="控制单元和中断系统"></a>控制单元和中断系统</h3><p>控制单元（CU）提供完成计算机全部指令的微操作命令序列部件。有两种操作命令形成的方式：</p><ul><li>  组合逻辑设计方法：硬连线逻辑</li><li>  微程序设计：存储逻辑</li></ul><h2 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h2><p>指令周期指的是取出并且执行一条指令所需要的全部时间。</p><p><img src="/../images/image-20230328104418752.png" alt="image-20230328104418752"></p><p>每条指令的指令周期都不同。</p><p>具有间接寻址的指令周期：</p><p><img src="/../images/image-20230328104637541.png" alt="image-20230328104637541"></p><p>带有中断周期的指令周期：</p><p><img src="/../images/image-20230328104659428.png" alt="image-20230328104659428"></p><p>指令周期流程：</p><p><img src="/../images/image-20230328104808480.png" alt="image-20230328104808480"></p><p>上面4个周期都有CPU访存操作，为了区别它们，在CPU中可以设置4个标志触发器。</p><p>FE-取、IND-间址、EX-执行、INT-中断。</p><p><img src="/../images/image-20230328105033179.png" alt="image-20230328105033179"></p><h3 id="指令周期的数据流"><a href="#指令周期的数据流" class="headerlink" title="指令周期的数据流"></a>指令周期的数据流</h3><h4 id="1、取指周期的数据流"><a href="#1、取指周期的数据流" class="headerlink" title="1、取指周期的数据流"></a>1、取指周期的数据流</h4><p><img src="/../images/image-20230328105556595.png" alt="image-20230328105556595"></p><p>取指周期的流程如下：PC中存放的是现行程序的地址，将该地址传送至MAR中传送至地址总线中，CU通知存储器读命令，将MAR地址数据从数据总线中传送到MDR中，再传到IR，最后CU控制PC加1。</p><h4 id="2、间址周期数据流"><a href="#2、间址周期数据流" class="headerlink" title="2、间址周期数据流"></a>2、间址周期数据流</h4><p><img src="/../images/image-20230328110257236.png" alt="image-20230328110257236"></p><p>一旦周期结束，CU检查IR内容，如果有间址操作，则MAR中指示的右N位送到MAR中，有送到地址总线中，此后CU向存储器发出读操作。</p><h4 id="3、执行周期数据流"><a href="#3、执行周期数据流" class="headerlink" title="3、执行周期数据流"></a>3、执行周期数据流</h4><p>不同指令的执行周期数据流不同</p><h4 id="4、中断周期数据流"><a href="#4、中断周期数据流" class="headerlink" title="4、中断周期数据流"></a>4、中断周期数据流</h4><p><img src="/../images/image-20230328110545099.png" alt="image-20230328110545099"></p><p>CU把用于保存断点的存储器特殊地址送往MAR，CU发出写命令，PC内容写到MDR中，断电数据通过数据总线送到存储器中。</p><h2 id="指令流水"><a href="#指令流水" class="headerlink" title="指令流水"></a>指令流水</h2><p>根据之前我们讲的内容，如果要提高访存速度，可以提高存储芯片的性能，或者可以采用Cache、多体并行；如果要提高主机和IO设备的交换信息的速度，可以采用DMA方式、多总线结构；为了提高运算器的速度，可以采用高速芯片和快速进位链。</p><p>为了进一步提高处理器的速度，可以通过两个方面来实现：</p><p>1、提高器件的性能</p><p>2、改进系统的结构，开发系统的并行性</p><h3 id="并行的概念"><a href="#并行的概念" class="headerlink" title="并行的概念"></a>并行的概念</h3><p>并发：两个或两个以上事件在 <strong>同一时间段</strong> 发生</p><p>同时：两个或者两个以上事件在同一时刻发生。</p><h3 id="指令流水的原理"><a href="#指令流水的原理" class="headerlink" title="指令流水的原理"></a>指令流水的原理</h3><p>首先什么是流水？这个词其实就是流水线的意思，在工厂中，我们经常用到并行工序，也就是工作研究中讨论的如何让等待时间最低。</p><h4 id="指令二级流水"><a href="#指令二级流水" class="headerlink" title="指令二级流水"></a>指令二级流水</h4><p><img src="/../images/image-20230329102142660.png" alt="image-20230329102142660"></p><p>也就是取下一条指令操作和执行当前指令的操作同时进行。执行和取值阶段时间上完全重叠。速度提高一倍。</p><h4 id="影响指令效率的因素"><a href="#影响指令效率的因素" class="headerlink" title="影响指令效率的因素"></a>影响指令效率的因素</h4><p>上面的这种提高效率的做法其实并不可行，因为：</p><ul><li>  一般来说执行的时间大于取值时间。</li><li>  条件转移指令对指令流水的影响。</li></ul><p>通过猜测法，减少时间损失。</p><h4 id="指令的六级流水"><a href="#指令的六级流水" class="headerlink" title="指令的六级流水"></a>指令的六级流水</h4><p>六级流水就是把指令的处理过程分的更加细致：取指、指令译码、计算操作数地址、去操作数、执行指令、写操作数。</p><p><img src="/../images/image-20230329103207312.png" alt="image-20230329103207312"></p><h4 id="影响指令流水性能的因素"><a href="#影响指令流水性能的因素" class="headerlink" title="影响指令流水性能的因素"></a>影响指令流水性能的因素</h4><p>假设以下的指令都是由5部分组成：取指令（IF）、指令译码/都寄存器（ID）、执行/访存有效地址计算（EX）、存储器访问（MEM）、结构返回寄存器（WB）。</p><h5 id="1、结构相关"><a href="#1、结构相关" class="headerlink" title="1、结构相关"></a>1、结构相关</h5><p>结构相关是指当多条指令进入流水线后，硬件资源满足不了指令重叠的要求。也就是不同指令争用同一部分的功能部件。</p><p><img src="/../images/image-20230329103425114.png" alt="image-20230329103425114"></p><p>如IF和MEM会发生访存冲突，解决方法如下：</p><ul><li>  暂停一个时钟周期</li><li>  设置两个独立的存储器分别存放在操作数和指令。</li></ul><h5 id="2、数据相关"><a href="#2、数据相关" class="headerlink" title="2、数据相关"></a>2、数据相关</h5><p>数据相关是流水线的各条指令因重叠操作，可能改变对操作数的读写访问顺序。</p><p><img src="/../images/image-20230329104730171.png" alt="image-20230329104730171"></p><p>以上的就是几种数据相关的情况，解决办法：</p><ul><li>  后推法：把相关指令延迟到所需操作数被写回寄存器后再执行。</li><li>  定向技术（旁路技术或者相关专用通路技术）：将执行结果直接送到其他指令需要的地方。</li></ul><h5 id="3、控制相关"><a href="#3、控制相关" class="headerlink" title="3、控制相关"></a>3、控制相关</h5><p>控制相关主要是由转移指令引起的。</p><p><img src="/../images/image-20230329120718607.png" alt="image-20230329120718607"></p><h3 id="流水线性能"><a href="#流水线性能" class="headerlink" title="流水线性能"></a>流水线性能</h3><h4 id="1、吞吐量"><a href="#1、吞吐量" class="headerlink" title="1、吞吐量"></a>1、吞吐量</h4><p>吞吐量：单位时间内流水线所完成指令或输出结果的数量</p><p> 最大吞吐率：<img src="../images/image-20230329121152971.png" alt="image-20230329121152971" style="zoom: 50%;" /></p><p> 实际吞吐率：连续处理 n 条指令的吞吐率为<img src="../images/image-20230329121220047.png" alt="image-20230329121220047" style="zoom:50%;" /></p><h4 id="2、加速比"><a href="#2、加速比" class="headerlink" title="2、加速比"></a>2、加速比</h4><p>m段的流水线的速度与等功能的非流水线的速度之比</p><p>完成 n 条指令在 m 段流水线上共需：<img src="../images/image-20230329121410586.png" alt="image-20230329121410586" style="zoom:50%;" /></p><p>完成 n 条指令在等效的非流水线上共需：<img src="../images/image-20230329121432411.png" alt="image-20230329121432411" style="zoom:67%;" /></p><p>则：<img src="/../images/image-20230329121456324-1707235461164.png" alt="image-20230329121456324"></p><h4 id="3、效率"><a href="#3、效率" class="headerlink" title="3、效率"></a>3、效率</h4><p>流水线中各功能段的利用率，由于流水线有建立时间和排空时间 因此各功能段的设备不可能一直处于工作状态</p><p><img src="/../images/image-20230329121609212-1707235463468.png" alt="image-20230329121609212"></p><h3 id="流水线中的多发技术"><a href="#流水线中的多发技术" class="headerlink" title="流水线中的多发技术"></a>流水线中的多发技术</h3><h4 id="1、超标量技术"><a href="#1、超标量技术" class="headerlink" title="1、超标量技术"></a>1、超标量技术</h4><ul><li><p>  每个时钟周期内可并发多条独立指令配置多个功能部件。</p></li><li><p>  不能调整指令的执行顺序， 通过编译优化技术，把可并行执行的指令搭配起来。</p></li></ul><h4 id="2、超流水线技术"><a href="#2、超流水线技术" class="headerlink" title="2、超流水线技术"></a>2、超流水线技术</h4><ul><li>  在 一个时钟周期 内 再分段 （ 3 段） </li><li>  在一个时钟周期内 一个功能部件使用多次（ 3 次）</li><li>  不能调整 指令的 执行顺序  靠编译程序解决优化问题</li></ul><p>流水线速度是原来的3倍。</p><h4 id="3、超长指令字技术（待补充）"><a href="#3、超长指令字技术（待补充）" class="headerlink" title="3、超长指令字技术（待补充）"></a>3、超长指令字技术（待补充）</h4><p><img src="/../images/image-20230329121932103.png" alt="image-20230329121932103"></p><p><img src="/../images/image-20230329121939430.png" alt="image-20230329121939430"></p><p><img src="/../images/image-20230329121945766.png" alt="image-20230329121945766"></p><h2 id="中断系统"><a href="#中断系统" class="headerlink" title="中断系统"></a>中断系统</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>引发中断请求的因素：</p><ul><li>  人为设置的中断：例如“转管指令”</li><li>  程序性事故</li><li>  硬件故障</li><li>  IO设备</li><li>  外部事件</li></ul><p>那么中断系统需要做到哪些要求：</p><ul><li>  各中断源如何向CPU发出中断请求。</li><li>  当多个中断源同时发出中断请求，中断系统如何确认优先级。</li><li>  CPU在什么条件、什么时间、什么方式来响应中断。</li><li>  CPU响应中断后如何保护现场</li><li>  CPU响应中断后，如何停止源程序的执行并且转入中断服务程序的入口地址。</li><li>  中断处理结束，怎么恢复现场，如何返回源程序的间断点。</li><li>  在中断处理过程中又出现中断怎么处理。</li></ul><p>下面就是对以上的问题进行解答：</p><h3 id="中断请求标志和中断判优逻辑"><a href="#中断请求标志和中断判优逻辑" class="headerlink" title="中断请求标志和中断判优逻辑"></a>中断请求标志和中断判优逻辑</h3><h4 id="1、中断请求标记"><a href="#1、中断请求标记" class="headerlink" title="1、中断请求标记"></a>1、中断请求标记</h4><p>中断请求标记就是用来判断中断源是哪个，中断请求触发器（INTR）。当其状态为1时，就是说这个中断源有请求。中断请求触发器越多，表明计算机处理能力越强。但是这些中断触发器既可以集成在CPU中又可以分散到各个中断源中。</p><h4 id="2、中断判优逻辑"><a href="#2、中断判优逻辑" class="headerlink" title="2、中断判优逻辑"></a>2、中断判优逻辑</h4><p>当两个以上的中断源同时进行请求，怎么选择哪个中断源呢？中断判优可以使用硬件实现也可以使用软件实现。</p><p>（1）硬件排队</p><p>硬件排队又分为两种：链式排队器和CPU内的排队器。</p><p>链式排队器就是之前讲过的方式。CPU内的排队器如果有请求INTR=1，就可以封住比它级别低的中断源的请求。</p><p>（2）软件排队</p><p>软件排队是通过编写查询程序实现的。</p><h3 id="中断服务程序的入口地址的寻找"><a href="#中断服务程序的入口地址的寻找" class="headerlink" title="中断服务程序的入口地址的寻找"></a>中断服务程序的入口地址的寻找</h3><p>通过硬件向量法和软件查询法。</p><h4 id="1、硬件向量法"><a href="#1、硬件向量法" class="headerlink" title="1、硬件向量法"></a>1、硬件向量法</h4><p>硬件向量法就是通过向量地址寻找。向量地址由中断向量地址形成部件产生。</p><p>向量地址寻址方法有两种：在向量地址内存中放一条无条件转移指令。二是设置向量地址表。</p><h4 id="2、软件查询法"><a href="#2、软件查询法" class="headerlink" title="2、软件查询法"></a>2、软件查询法</h4><h3 id="中断响应"><a href="#中断响应" class="headerlink" title="中断响应"></a>中断响应</h3><h4 id="1、中断响应条件"><a href="#1、中断响应条件" class="headerlink" title="1、中断响应条件"></a>1、中断响应条件</h4><p>当允许中断触发器EINT为1时，CPU允许响应中断源的请求，当其为0时，意味着CPU禁止响应中断。</p><h4 id="2、响应中断的时间"><a href="#2、响应中断的时间" class="headerlink" title="2、响应中断的时间"></a>2、响应中断的时间</h4><p>CPU是在指令执行周期结束以后才响应中断源的请求。但是一些指令执行时间过长，所以可以在指令执行中设置若干个查询断点。</p><h4 id="3、中断隐指令"><a href="#3、中断隐指令" class="headerlink" title="3、中断隐指令"></a>3、中断隐指令</h4><p>当进入中断周器，CPU要完成一系列的操作：</p><p>（1）保护程序断点</p><p>也就是将当前的PC保存在存储器中，可以存入特定单元或者堆栈。</p><p>（2）寻找中断服务程序的入口地址</p><p>硬件向量法和软件查询法</p><p>（3）关中断</p><p>也就是保证CPU在响应中断的过程中不会受新的中断请求干扰。当进入中断周期时，INT为1，经过一个正跳变和反相，使得EINT置为0。</p><p><img src="/../images/image-20230403104040787.png" alt="image-20230403104040787"></p><p>中断隐指令，就是机器指令系统中没有的指令，它是CPU在中断周期内由硬件自动完成的。</p><h3 id="保护现场和恢复现场"><a href="#保护现场和恢复现场" class="headerlink" title="保护现场和恢复现场"></a>保护现场和恢复现场</h3><p>保护现场包括保护程序断点和保护CPU内部个寄存器的内容。断点通过中断隐指令完成，寄存器内容可以通过中断服务程序完成。</p><h3 id="中断屏蔽技术"><a href="#中断屏蔽技术" class="headerlink" title="中断屏蔽技术"></a>中断屏蔽技术</h3><p>中断屏蔽技术主要用于多重中断。</p><h4 id="多重中断的概念"><a href="#多重中断的概念" class="headerlink" title="多重中断的概念"></a>多重中断的概念</h4><p>多重中断就是在一个中断服务程序正在执行时，另一个中断请求提出了中断。</p><h4 id="实现多重中断的条件"><a href="#实现多重中断的条件" class="headerlink" title="实现多重中断的条件"></a>实现多重中断的条件</h4><p><img src="/../images/image-20230403104828849.png" alt="image-20230403104828849"></p><p>（1）提前设置开中断指令</p><p>因为CPU进入中断，隐指令会自动执行关指令，所以需要开指令接受中断请求。</p><p>（2）优先级高的中断源有权中断优先级低的中断源</p><p><img src="/../images/image-20230403105053164.png" alt="image-20230403105053164"></p><h4 id="屏蔽技术"><a href="#屏蔽技术" class="headerlink" title="屏蔽技术"></a>屏蔽技术</h4><p>（1）屏蔽触发器与屏蔽字</p><p>当中断源被屏蔽时（MASK=1）即使D=1，INTR只能置为0。</p><p><img src="/../images/image-20230403105412363.png" alt="image-20230403105412363"></p><p>（2）屏蔽技术可以改变优先级</p><p><img src="/../images/image-20230403105432202.png" alt="image-20230403105432202"></p><p>（3）屏蔽技术的其他作用</p><p>可以人为屏蔽某个中断源的请求以达到机器运行正常。</p><h4 id="多重断点的断点保护"><a href="#多重断点的断点保护" class="headerlink" title="多重断点的断点保护"></a>多重断点的断点保护</h4><p>（1）断点保存在堆栈中</p><p>（2）断点保存在特定存储单元中</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指令系统</title>
    <link href="/2024/02/01/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/02/01/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h1><h2 id="机器指令"><a href="#机器指令" class="headerlink" title="机器指令"></a>机器指令</h2><blockquote><p>  什么是机器指令，指令系统又是什么？</p></blockquote><p>人们把机器语言的语句叫做机器指令，把这些指令集合叫做指令系统。</p><h3 id="指令的一般格式"><a href="#指令的一般格式" class="headerlink" title="指令的一般格式"></a>指令的一般格式</h3><p>指令是由<strong>操作码</strong>和<strong>地址码</strong>两部分组成的。（都是通过二进制描述）</p><h4 id="1、操作码"><a href="#1、操作码" class="headerlink" title="1、操作码"></a><strong>1、操作码</strong></h4><ul><li>  操作码是用来说明这条指令是用来完成什么样的操作的。</li><li>  操作长度可以是固定的也可以是变化的。如果是固定的，便于硬件的设计，指令译码时间短，广泛运用于字长较长的计算机，如RISC。</li><li>  如果是不固定的，可以有效的压缩操作码的平均长度，在字长较短的微型计算机中方广泛运用。操作码不固定会增加指令译码和分析的难度，使得控制器的设计复杂，通常使用扩展操作码技术使操作码的长度随着地址数的减少而增加。也就是不同的地址数可以有不同的操作数，从而有效缩短指令字长。</li></ul><p><img src="/../images/image-20230326104921193.png" alt="image-20230326104921193"></p><p>上图分析：</p><ul><li>  如果操作码是4位，最多有15条三地址指令，如果操作码是8位，最多有15条二地址指令；如果操作码是12位，最多有15条1地址指令。</li><li>  三地址操作码每减少一种就可以多构造2^4种二地址操作码。可以看到如果操作码是8位时，1111被作为前四位的固定操作码，因为1111相当于是三地址码分给二地址码。</li></ul><h4 id="2、地址码"><a href="#2、地址码" class="headerlink" title="2、地址码"></a>2、地址码</h4><p>地址码是用来保存该指令的源操作数的地址。</p><p>（下列指令都假设指令字长为32位。操作码固定为8位）</p><h5 id="（1）四地址指令"><a href="#（1）四地址指令" class="headerlink" title="（1）四地址指令"></a>（1）四地址指令</h5><p><img src="/../images/image-20230326110522933.png" alt="image-20230326110522933"></p><p>OP是操作数，A1是第一操作数地址，A2是第二操作数地址，A3是结果地址，A4是下一条指令地址。</p><p>该指令完成<img src="../images/image-20230326110715358.png" alt="image-20230326110715358" style="zoom:67%;" />的操作。如果地址字段均指示主存的地址，则完成一条四地址指令，共需要访问4次存储器。寻址范围<img src="../images/image-20230326122031552.png" alt="image-20230326122031552" style="zoom:67%;" />。</p><h5 id="（2）三地址指令"><a href="#（2）三地址指令" class="headerlink" title="（2）三地址指令"></a>（2）三地址指令</h5><p><img src="/../images/image-20230326121334314.png" alt="image-20230326121334314"></p><p>完成<img src="../images/image-20230326121354765.png" alt="image-20230326121354765" style="zoom:67%;" />指令，原来下一条指令地址利用PC去记录。完成一次指令需要访问4次存储器。寻址范围<img src="../images/image-20230326122112816.png" alt="image-20230326122112816" style="zoom:67%;" />。</p><h5 id="（3）二地址指令"><a href="#（3）二地址指令" class="headerlink" title="（3）二地址指令"></a>（3）二地址指令</h5><p><img src="/../images/image-20230326121516902.png" alt="image-20230326121516902"></p><p>完成<img src="../images/image-20230326121530791.png" alt="image-20230326121530791" style="zoom:67%;" />指令，A1表示第一个操作数，A2表示第二操作数，二地址指令取消了A3地址保存结果，而是采用把结果覆盖到A1或者A2中。完成一次指令仍需要访问4次存储器。但是如果把结果保存在ACC中，就只需要3次访存就可以。寻址范围<img src="../images/image-20230326122142565.png" alt="image-20230326122142565" style="zoom:67%;" />。</p><h5 id="（4）一地址指令"><a href="#（4）一地址指令" class="headerlink" title="（4）一地址指令"></a>（4）一地址指令</h5><p><img src="/../images/image-20230326121847103.png" alt="image-20230326121847103"></p><p>完成<img src="../images/image-20230326122202153.png" alt="image-20230326122202153" style="zoom:67%;" />指令操作。ACC参与存储和运算操作数，完成一条指令只需要2次访存。寻址范围<img src="../images/image-20230326122327067.png" alt="image-20230326122327067" style="zoom:67%;" />。</p><h5 id="（5）零地址指令"><a href="#（5）零地址指令" class="headerlink" title="（5）零地址指令"></a>（5）零地址指令</h5><p>指令中没有地址码，例如，空操作、停机、子程序返回、中断返回等。</p><h3 id="指令字长"><a href="#指令字长" class="headerlink" title="指令字长"></a>指令字长</h3><p>指令字长取决于操作码长度、操作数地址长度、操作数地址个数。指令字长固定：指令字长=存储字长。指令字长可变：按字节的倍数变化。</p><h2 id="操作数类型和操作类型"><a href="#操作数类型和操作类型" class="headerlink" title="操作数类型和操作类型"></a>操作数类型和操作类型</h2><h3 id="操作数类型"><a href="#操作数类型" class="headerlink" title="操作数类型"></a>操作数类型</h3><p>常见的操作数类型有地址、数字、字符、逻辑数据等。</p><p>（1）地址</p><p>地址就是无符号的整数。</p><p>（2）数字</p><p>包含定点数、浮点数、十进制数。</p><p>（3）字符</p><p>通常采用ACSⅡ码。</p><p>（4）逻辑数据</p><p>用于逻辑运算。</p><h3 id="数据在存储器中的存放方式"><a href="#数据在存储器中的存放方式" class="headerlink" title="数据在存储器中的存放方式"></a>数据在存储器中的存放方式</h3><p><strong>1、从任意位置开始存储</strong></p><p>优点：不浪费存储资源。</p><p>缺点：除了访问一个字节之外，访问其它任何类型的数据， 都可能花费两个存储周期的时间。读写控制比较复杂。</p><p><strong>2、从一个存储字的起始位置开始访问</strong></p><p>优点：无论访问何种类型的数据，在一个周期内均可完成，读写控制简单。</p><p>缺点：浪费存储资源。</p><p><strong>3、边界对准方式</strong></p><p>从地址的整数倍位置开始访问。</p><h3 id="操作类型"><a href="#操作类型" class="headerlink" title="操作类型"></a>操作类型</h3><p><strong>1、数据传送</strong></p><p>数据传送就是各种元器件之间的数据交互，例如寄存器与寄存器之间、寄存器与存储单元之间、存储单元与存储单元之间。</p><p><strong>2、算术逻辑操作</strong></p><p>加、减、乘、除、增 1、减 1、求补、浮点运算、十进制运算 与、或、非、异或、位操作、位测试、位清除、位求反</p><p><strong>3、移位</strong></p><p>分为算术移位、逻辑移位、循环移位。算术移位是对有符号的数操作，逻辑是无符号的数。</p><p><strong>4、转移</strong></p><p><strong>（1）无条件转移</strong></p><p>不受约束，如“JMP X”。</p><p><strong>（2）条件转移</strong></p><p>根据当前指令执行结果来决定是否需要转移。</p><img src="../images/image-20230326124216225.png" alt="image-20230326124216225" style="zoom:67%;" /><p><strong>（3）调用和返回</strong></p><p>需要重复利用同一个程序段时，将这个程序段设定为独立子程序，调用（CALL）和返回指令（RETURN）配合使用。</p><p><strong>（4）陷阱与陷阱指令</strong></p><ul><li>  一般不提供给用户直接使用 在出现事故时，由 CPU 自动产生并执行（隐指令）</li><li>  设置供用户使用的陷阱指令</li></ul><p><strong>（5）输入输出</strong></p><p>端口中的内容读入到CPU 的寄存器、CPU 的寄存器输出到端口中的内容。</p><p><strong>（6）其他</strong></p><p>等待指令、停机指令、空操作指令、开中断指令等。</p><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><p>寻址方式就是确定本指令的数据地址以及下一跳指令地址的方法。寻址方式分为<strong>指令寻址和数据寻址</strong>。</p><h3 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h3><p>分为<strong>顺序寻址</strong>和<strong>跳跃寻址</strong>。</p><p>1、顺序寻址</p><p>通过PC程序计数器自动加一形成下一条的地址。</p><p>2、跳跃寻址</p><p>当例如指令中是“JMP 7”，就直接跳到第7条指令。</p><h3 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h3><p>数据寻址的地址由下面几部分组成。操作数的有效地址记为EA，是由寻址特征和形式地址共同决定的。</p><p><img src="/../images/image-20230326125309276.png" alt="image-20230326125309276"></p><h4 id="1、立即寻址"><a href="#1、立即寻址" class="headerlink" title="1、立即寻址"></a>1、立即寻址</h4><p><img src="/../images/image-20230326125508622.png" alt="image-20230326125508622"></p><p>操作数就在指令字里，A就是操作数本身，不是地址。数据采用补码的形式存放。优点是只要取指令就有操作数，在执行阶段不必访问存储器。A的位数限制立即数的范围。</p><h4 id="2、直接寻址"><a href="#2、直接寻址" class="headerlink" title="2、直接寻址"></a>2、直接寻址</h4><p><img src="/../images/image-20230326125830548.png" alt="image-20230326125830548"></p><p>直接寻址中指令字中的形式地址A就是操作数的真实地址EA。优点是寻找操作数简单，在指令执行时对主存访问一次。但是它的缺点是限制了操作数的寻址范围。而且必须修改A的值才可以修改操作数的地址。</p><h4 id="3、隐含寻址"><a href="#3、隐含寻址" class="headerlink" title="3、隐含寻址"></a>3、隐含寻址</h4><p><img src="/../images/image-20230326182319815.png" alt="image-20230326182319815"></p><p>其操作数地址隐含在操作码中或者某个寄存器中，这导致指令字中少了一个地址字段，可以缩短指令字长。</p><h4 id="4、间接寻址"><a href="#4、间接寻址" class="headerlink" title="4、间接寻址"></a>4、间接寻址</h4><p><img src="/../images/image-20230326182636448.png" alt="image-20230326182636448"></p><p>间接寻址不直接将操作数的地址存在A中，而是指出操作数有效地址所在的存储单元地址。有效地址是通过形式地址间接提供的，注意这里的存储器都是主存，之后会有存储在寄存器上的。</p><p><strong>优点：</strong></p><ul><li>  这种寻址和直接寻址相比，扩大了寻址范围。当多次间接寻址时，可以用存储字的首位来标记间接寻址是否结束。</li><li>  便于编制程序。</li></ul><p><strong>缺点：</strong></p><ul><li>  指令执行时需要两次访问主存。会导致执行时间过长。</li></ul><h4 id="5、寄存器寻址"><a href="#5、寄存器寻址" class="headerlink" title="5、寄存器寻址"></a>5、寄存器寻址</h4><p><img src="/../images/image-20230326183322889.png" alt="image-20230326183322889"></p><p>地址码直接指出了寄存器的编号，EA=R，由于寄存器寻址在执行过程中不用访问主存，所以执行速度快。同时，指令字段短，节省了存储空间。</p><h4 id="6、寄存器间接寻址"><a href="#6、寄存器间接寻址" class="headerlink" title="6、寄存器间接寻址"></a>6、寄存器间接寻址</h4><p><img src="/../images/image-20230326183553462.png" alt="image-20230326183553462"></p><p>指令执行阶段需要访存主存。有效地址在寄存器中，操作数在主存中。它比间接寻址少访存一次。</p><h4 id="7、基址寻址"><a href="#7、基址寻址" class="headerlink" title="7、基址寻址"></a>7、基址寻址</h4><p><img src="/../images/image-20230326183949826.png" alt="image-20230326183949826"></p><p>基址寻址需要设有基址寄存器（BR），操作数有效地址为指令字中的形式地址与基址寄存器中的内容相加。基址寄存器分为隐式和显式。</p><p>（1）采用专用基址寄存器</p><p><img src="/../images/image-20230326183823365.png" alt="image-20230326183823365"></p><ul><li>  可以扩大寻址范围</li><li>  有利于多道程序</li><li>  BR内容由操作系统或者管理程序确定</li><li>  在程序执行的过程中，BR不变，A可以变。</li></ul><p>（2）采用通用寄存器。</p><p><img src="/../images/image-20230326184237541.png" alt="image-20230326184237541"></p><ul><li>  由用户指定哪个通用寄存器作为基址寄存器</li><li>  基址寄存器的内容由操作系统确定</li><li>  在程序执行过程中，R内容不变，A可变。</li></ul><h4 id="8、变址寻址"><a href="#8、变址寻址" class="headerlink" title="8、变址寻址"></a>8、变址寻址</h4><p>变址寻址和基址寻址非常相似。</p><p><img src="/../images/image-20230326184653005.png" alt="image-20230326184653005"></p><p><img src="/../images/image-20230326184703278.png" alt="image-20230326184703278"></p><p>由于两者的应用场景不同，来区别：</p><ul><li>  IX 的内容由用户给定</li><li>  在程序的执行过程中 IX 内容可变，形式地址 A 不变</li><li>  和基址寻址相比，基址寻址主要是用来为程序或者数据分配存储空间。而变址寻址主要是处理数组问题。</li></ul><h4 id="9、相对寻址"><a href="#9、相对寻址" class="headerlink" title="9、相对寻址"></a>9、相对寻址</h4><p><img src="/../images/image-20230326185302358.png" alt="image-20230326185302358"></p><p><img src="/../images/image-20230326185251358.png" alt="image-20230326185251358"></p><p>相对寻址的有效地址是程序计数器PC和形式地址A相加而成。A是相对于当前指令的位移量。A可正可负，通常用补码表示。相对寻址常被用来转移类指令。</p><p>最大特点是转移地址不固定，对于编写浮动程序有利。A的位数决定操作数的寻址范围。</p><h4 id="10、堆栈寻址"><a href="#10、堆栈寻址" class="headerlink" title="10、堆栈寻址"></a>10、堆栈寻址</h4><p><img src="/../images/image-20230326185801822.png" alt="image-20230326185801822"></p><p><img src="/../images/image-20230326185815873.png" alt="image-20230326185815873"></p><h2 id="指令格式举例"><a href="#指令格式举例" class="headerlink" title="指令格式举例"></a>指令格式举例</h2><p>指令格式这一节主要讲设计指令时需要考虑的各种因素，并且举例一些设计相对来说合理的格式。</p><h3 id="设计格式需要考虑的因素"><a href="#设计格式需要考虑的因素" class="headerlink" title="设计格式需要考虑的因素"></a>设计格式需要考虑的因素</h3><p>指令系统集中反映了机器的性能，一个好的指令系统既需要指令丰富，又需要机器执行程序时快速、占用空间小、搞笑。并且指令系统需要考虑向上兼容，也就是高版本需要兼容低版本。</p><p>指令格式可以从以下几个方面考虑：</p><ul><li>  操作类型</li><li>  数据类型</li><li>  指令格式</li><li>  寻址方式</li><li>  寄存器个数</li></ul><h3 id="指令格式举例-1"><a href="#指令格式举例-1" class="headerlink" title="指令格式举例"></a>指令格式举例</h3><h4 id="1、PDP-8"><a href="#1、PDP-8" class="headerlink" title="1、PDP-8"></a>1、PDP-8</h4><p>指令字长：12位，CPU中只设置一个通用寄存器ACC,其主存分为若干个容量相同的存储空间。支持间接寻址、变址寻址、相对寻址。加上操作码扩展技术。共有35条指令。</p><h4 id="2、PDP-11"><a href="#2、PDP-11" class="headerlink" title="2、PDP-11"></a>2、PDP-11</h4><p>机器字长16位，CPU内设8个16位通用寄存器，其中两寄存器有特殊作用，一个用作堆栈指针SP，一个用作程序计数器PC。</p><h4 id="3、IBM360"><a href="#3、IBM360" class="headerlink" title="3、IBM360"></a>3、IBM360</h4><p>IBM360属于系统机，也就是基本指令系统相同的一系列机子。机器字长32位，CPU中16个32位通用寄存器（用户可以任选一个作为基址寄存器BR或者变址寄存器IX），4个双精度（64位）浮点寄存器。</p><h4 id="4、Intel8086"><a href="#4、Intel8086" class="headerlink" title="4、Intel8086"></a>4、Intel8086</h4><p>这款机器是微型计算机，指令字长是1-6字节，不定长。</p><h3 id="指令格式设计举例"><a href="#指令格式设计举例" class="headerlink" title="指令格式设计举例"></a>指令格式设计举例</h3><h2 id="RISC"><a href="#RISC" class="headerlink" title="RISC"></a>RISC</h2><p>RISC即为精简指令系统计算机（Reduced Instruction Set Computer）。</p><h3 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h3><p>因为当时20世纪70年代中期，发现典型程序中 80% 的语句仅仅使用处理机中 20% 的指令；执行频度高的简单指令，因复杂指令的存在，执行速度无法提高；能否用 20% 的简单指令组合不常用的 80% 的指令功能。于是就引出了RISC技术。</p><h3 id="RISC的主要特征"><a href="#RISC的主要特征" class="headerlink" title="RISC的主要特征"></a>RISC的主要特征</h3><ul><li>  用使用频率高的简单指令组合成为复杂指令。</li><li>  指令长度固定、指令格式种类少、寻址方式少。</li><li>  只有取数（LOAD）存数（STORE）指令访存。</li><li>  CPU中有多个通用寄存器</li><li>  采用流水线技术，一个时钟周期内完成一条指令。</li><li>  控制器采用组合逻辑控制，不作微程序控制。</li><li>  采用优化的编译程序。</li></ul><h3 id="CISC"><a href="#CISC" class="headerlink" title="CISC"></a>CISC</h3><ul><li><p>  系统指令复杂庞大，各种指令使用频度相差大 </p></li><li><p>  指令长度不固定、指令格式种类多、寻址方式多 </p></li><li><p>  访存指令不受限制 </p></li><li><p>  大多数指令需要多个时钟周期执行完毕 </p></li><li><p>  采用微程序控制器 </p></li><li><p>  CPU中设有专用寄存器</p></li></ul><h3 id="RISC和CISC的比较"><a href="#RISC和CISC的比较" class="headerlink" title="RISC和CISC的比较"></a>RISC和CISC的比较</h3><p>1、充分利用了VLSI芯片的面积</p><p>2、提高计算机运行速度</p><p>3、便于设计、可降低成本、提高可靠性</p><p>4、有效支持高级语言程序</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机运算方法</title>
    <link href="/2024/02/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    <url>/2024/02/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机的运算方法"><a href="#计算机的运算方法" class="headerlink" title="计算机的运算方法"></a>计算机的运算方法</h1><p><img src="/../images/image-20230321121954693.png" alt="image-20230321121954693"></p><h2 id="无符号数和有符号数"><a href="#无符号数和有符号数" class="headerlink" title="无符号数和有符号数"></a>无符号数和有符号数</h2><p>计算机中参与运算的主要的数主要有两大类：无符号数和有符号数。</p><h3 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h3><p>计算机中的数通常是存储在寄存器上的，寄存器的位数就是机器字长。当机器字长相同时，无符号数和有符号数的数值范围是不一样的。因为有符号数有一位存储符号。</p><h3 id="有符号数"><a href="#有符号数" class="headerlink" title="有符号数"></a>有符号数</h3><p>对于有符号数，用0代表正数，1代表负数。</p><h4 id="1、机器数和真数"><a href="#1、机器数和真数" class="headerlink" title="1、机器数和真数"></a>1、机器数和真数</h4><p><img src="/../images/image-20230321122502777.png" alt="image-20230321122502777"></p><h4 id="2、原码表示法"><a href="#2、原码表示法" class="headerlink" title="2、原码表示法"></a>2、原码表示法</h4><p>（1）整数原码</p><p>整数的符号位和数值位之间用逗号分隔，小数的符号位与数值位之间用小数点分隔。</p><p><strong>定义</strong>：</p><p><img src="/../images/image-20230321122742699.png" alt="image-20230321122742699"></p><p>X为真数，n为整数的位数。</p><p><strong>例子：</strong></p><p><img src="/../images/image-20230321123058265.png" alt="image-20230321123058265"></p><p><strong>定义：</strong></p><p><img src="/../images/image-20230321123114688.png" alt="image-20230321123114688"></p><p><strong>例子：</strong></p><p><img src="/../images/image-20230321123134014.png" alt="image-20230321123134014"></p><h4 id="3、补码表示法"><a href="#3、补码表示法" class="headerlink" title="3、补码表示法"></a>3、补码表示法</h4><p>（1）补数，也就是可以理解为周期函数，将负数通过模变成正数。</p><p>补数具有以下性质：</p><ul><li>  一个负数加上 “模” 即得该负数的补数</li><li>  一个正数和一个负数互为补数时，它们绝对值之和即为模。</li><li>  正数的补数就是本身。 </li></ul><p><strong>整数补码定义</strong>：</p><p><img src="/../images/image-20230321124019066.png" alt="image-20230321124019066"></p><p><img src="/../images/image-20230321124039266.png" alt="image-20230321124039266"></p><p><strong>小数补码定义：</strong></p><p><img src="/../images/image-20230321124117542.png" alt="image-20230321124117542"></p><p>在求解补码时，利用快捷计算方法：</p><ul><li><p>  当真值为负时，补码可以用原码除符号位外每位取反，末位加1求得。</p></li><li><p>  当真值为负时，原码可用补码除符号位外每位取反，末位加1求得。</p></li></ul><h4 id="4、反码表示法"><a href="#4、反码表示法" class="headerlink" title="4、反码表示法"></a>4、反码表示法</h4><p><strong>整数反码定义：</strong></p><p><img src="/../images/image-20230321124408916.png" alt="image-20230321124408916"></p><p><img src="/../images/image-20230321124442655.png" alt="image-20230321124442655"></p><p><strong>小数反码定义：</strong></p><p><img src="/../images/image-20230321124533830.png" alt="image-20230321124533830"></p><p><img src="/../images/image-20230321124540105.png" alt="image-20230321124540105"></p><p><img src="/../images/image-20230321124602068.png" alt="image-20230321124602068"></p><h4 id="三种机器数的总结"><a href="#三种机器数的总结" class="headerlink" title="三种机器数的总结"></a>三种机器数的总结</h4><ul><li>  最高位为符号位，书写上用“,”（整数） 或“.”（小数）将数值部分和符号位隔开。</li><li>  对于正数，原码 = 补码 = 反码</li><li>  对于负数 ，符号位为 1，其 数值部分 ，原码除符号位外每位取反末位加 1 补码 原码，除符号位外每位取反-&gt;反码。</li></ul><h4 id="5、移码表示法"><a href="#5、移码表示法" class="headerlink" title="5、移码表示法"></a>5、移码表示法</h4><p>定义：</p><p><img src="/../images/image-20230321124751218.png" alt="image-20230321124751218"></p><p><img src="/../images/image-20230321132536559.png" alt="image-20230321132536559"></p><p>补码与移码只差一个符号位</p><h2 id="数的定点表示和浮点表示"><a href="#数的定点表示和浮点表示" class="headerlink" title="数的定点表示和浮点表示"></a>数的定点表示和浮点表示</h2><h3 id="定点表示"><a href="#定点表示" class="headerlink" title="定点表示"></a>定点表示</h3><p>机器处理的数不是纯小数或者纯整数时，必须乘上一个比例因子，否则就会产生”溢出”。</p><h3 id="浮点表示"><a href="#浮点表示" class="headerlink" title="浮点表示"></a>浮点表示</h3><p><strong>为什么要浮点数：</strong></p><ul><li>  编程困难，程序员要调节小数点的位置。</li><li>  数的表示范围小，为了能表示两个大小 相差很大的数据，需要很长的机器字长；</li><li>  数据存储单元的利用率往往很低。</li></ul><p>我的看法就是浮点数就是科学计数法，可以节省空间，并且不需要调节小数点的位置。</p><p>浮点数的一般表示形式：</p><p><img src="/../images/image-20230321133922675.png" alt="image-20230321133922675"></p><p>S是尾数是小数，可正可负；r是尾数的基值；j是阶码，可正可负。</p><h4 id="1、表示形式"><a href="#1、表示形式" class="headerlink" title="1、表示形式"></a>1、表示形式</h4><p><img src="/../images/image-20230321134158801.png" alt="image-20230321134158801"></p><p><img src="/../images/image-20230321134205527.png" alt="image-20230321134205527"></p><h4 id="2、浮点数的表示范围"><a href="#2、浮点数的表示范围" class="headerlink" title="2、浮点数的表示范围"></a>2、浮点数的表示范围</h4><p><img src="/../images/image-20230321134358626.png" alt="image-20230321134358626"></p><p>设阶码取m位，尾数的数值拉取n位。</p><p>最大正数：<img src="../images/image-20230321134512175.png" alt="image-20230321134512175" style="zoom:67%;" /></p><p>最小正数：<img src="../images/image-20230321134538013.png" alt="image-20230321134538013" style="zoom:67%;" /></p><p>最大负数：<img src="../images/image-20230321134558438.png" alt="image-20230321134558438" style="zoom:67%;" /></p><p>最小负数：<img src="../images/image-20230321134624825.png" alt="image-20230321134624825" style="zoom:67%;" /></p><p>上溢：阶码&gt;最大阶码</p><p>下溢：阶码&lt;最小阶码，按照机器零处理。</p><h4 id="3、浮点数的规格化形式"><a href="#3、浮点数的规格化形式" class="headerlink" title="3、浮点数的规格化形式"></a>3、浮点数的规格化形式</h4><p>规格化的过程是根据不同的基数，确定不同的规格化形式。</p><p>当基数为2时，尾数最高位为1。</p><p>当基数为4时，尾数最高两位不全为0</p><p>当基数为8时，尾数最高 3 位不全为 0</p><h4 id="4、浮点数的规格化"><a href="#4、浮点数的规格化" class="headerlink" title="4、浮点数的规格化"></a>4、浮点数的规格化</h4><p><img src="/../images/image-20230321140033472.png" alt="image-20230321140033472"></p><p>基数 r 越大，可表示的浮点数的范围越大。基数 r 越大，浮点数的精度降低。</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p><img src="/../images/image-20230321140143072.png" alt="image-20230321140143072"></p><h3 id="IEEE-754-标准（待补充）"><a href="#IEEE-754-标准（待补充）" class="headerlink" title="IEEE 754 标准（待补充）"></a>IEEE 754 标准（待补充）</h3><p>现代计算机中，浮点数一般采用IEEE标准。</p><p><img src="/../images/image-20230321140305960.png" alt="image-20230321140305960"></p><p>尾数为规格化表示</p><p><img src="/../images/image-20230321140339383.png" alt="image-20230321140339383"></p><h2 id="定点运算"><a href="#定点运算" class="headerlink" title="定点运算"></a>定点运算</h2><h3 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h3><p>在计算机中，移位是相对于小数点的，左移导致绝对值变大，右移导致绝对值缩小。通过移位和加减配合，能够实现乘除运算。</p><p><strong>算术移位规则：</strong></p><p><img src="/../images/image-20230322110026202.png" alt="image-20230322110026202"></p><ul><li>  机器数为正时，不论左移还是右移，填补的代码都是0；</li></ul><p><strong>例题：</strong></p><p><img src="/../images/image-20230322110917986.png" alt="image-20230322110917986"></p><p><img src="/../images/image-20230322110931223.png" alt="image-20230322110931223"></p><p><img src="/../images/image-20230322110942437.png" alt="image-20230322110942437"></p><h4 id="逻辑移位和算术移位的区别"><a href="#逻辑移位和算术移位的区别" class="headerlink" title="逻辑移位和算术移位的区别"></a>逻辑移位和算术移位的区别</h4><p>（1）逻辑移位</p><p>无符号的移位，逻辑左移，低位置为0，高位丢失。逻辑右移，高位添0，低位丢失</p><p>（2）算术移位</p><p>有符号数的移位，高位为符号位，保持不变。</p><h3 id="加减法运算"><a href="#加减法运算" class="headerlink" title="加减法运算"></a>加减法运算</h3><p>采用补码加减法运算。</p><p><img src="/../images/image-20230322111436000.png" alt="image-20230322111436000"></p><p><img src="/../images/image-20230322111443137.png" alt="image-20230322111443137"></p><p>连同符号位一起相加，符号位产生的进位自然丢掉</p><p><strong>注意：</strong>[-B]补由[B]补连同符号位一起，每位取反，末尾加1。需要注意的是在计算结束以后，需要对结果进行mod计算。</p><h4 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h4><p>（1）用一位符号位判断溢出</p><p>参加操作的 两个数（减法时即为被减数和“求补” 以后的减数）符号相同，其结果的符号与原操作数的符号不同，即为溢出。</p><p><strong>硬件实现：</strong></p><p>最高有效位的进位 （异或处理）符号位的进位 = 1</p><p><img src="/../images/image-20230322111959636.png" alt="image-20230322111959636"></p><p>（2）用两位符号位判断溢出</p><p><img src="/../images/image-20230322112012600.png" alt="image-20230322112012600"></p><p>结果的双符号位 相同——未溢出</p><p>结果的双符号位不同——溢出</p><p>最高符号位代表真正的符号。</p><p>采用双符号方案时，寄存器或者主存中操作数就保存一位就可以，因为任何正确的数，两个符号位的值是相同的。</p><h4 id="补码加减法的硬件配置"><a href="#补码加减法的硬件配置" class="headerlink" title="补码加减法的硬件配置"></a>补码加减法的硬件配置</h4><p><img src="/../images/image-20230322112157000.png" alt="image-20230322112157000"></p><h3 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h3><p><strong>改进后的笔算乘法过程：</strong></p><p><img src="/../images/image-20230322112433077.png" alt="image-20230322112433077"></p><p>上述的运算过程可以总结为：</p><ul><li>  乘法运算可用移位和加法来实现，两个n位数相乘需要4次加法和4次移位。</li><li>  由乘数的末位来确定被乘数是否要和部分积相加，然后相加的结果和乘数同时进行逻辑右移1位，乘数的末位去除，高位是部分积的末位。</li><li>  被乘数只与部分积的高位相加</li></ul><h4 id="原码乘法"><a href="#原码乘法" class="headerlink" title="原码乘法"></a>原码乘法</h4><p>(1) 原码一位乘运算规则</p><p><img src="/../images/image-20230322113341429.png" alt="image-20230322113341429"></p><p><img src="/../images/image-20230322113440043.png" alt="image-20230322113440043"></p><p><img src="/../images/image-20230322113530825.png" alt="image-20230322113530825"></p><p>原码一位乘运算就是乘法运算。</p><p><strong>硬件配置：</strong></p><p><img src="/../images/image-20230322113611467.png" alt="image-20230322113611467"></p><h4 id="补码乘法（待补充）"><a href="#补码乘法（待补充）" class="headerlink" title="补码乘法（待补充）"></a>补码乘法（待补充）</h4><h3 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h3><p><img src="/../images/image-20230322114652019.png" alt="image-20230322114652019"></p><h4 id="原码除法"><a href="#原码除法" class="headerlink" title="原码除法"></a>原码除法</h4><p><img src="/../images/image-20230322114710617.png" alt="image-20230322114710617"></p><p><img src="/../images/image-20230322114720356.png" alt="image-20230322114720356"></p><h5 id="（1）恢复余数法"><a href="#（1）恢复余数法" class="headerlink" title="（1）恢复余数法"></a>（1）恢复余数法</h5><p>也就是当余数为负数的时候就要回复余数，下面会详细讲解。</p><p><strong>直接看例题：</strong></p><p><img src="/../images/image-20230322114835432.png" alt="image-20230322114835432"></p><p><img src="/../images/image-20230322114848579.png" alt="image-20230322114848579"></p><p><strong>分析以上的算术规则就是：</strong></p><p><img src="/../images/image-20230322114940781.png" alt="image-20230322114940781"></p><ul><li>  注意的是被除数和商是同时逻辑左移的。</li><li>  总结算法：余数为负，上商0，加上除数恢复余数（注意不用左移）。余数为正，上商1，左移一位，减去除数。左移n次退出。</li><li>  第一次上的商在商的整数位上，如果该位为1，表示除法溢出，反之。</li></ul><h5 id="（2）加减交替法"><a href="#（2）加减交替法" class="headerlink" title="（2）加减交替法"></a>（2）加减交替法</h5><p><img src="/../images/image-20230322115838944.png" alt="image-20230322115838944"></p><p><strong>直接看例题：</strong></p><p><img src="/../images/image-20230322115859734.png" alt="image-20230322115859734"></p><p><img src="/../images/image-20230322120109135.png" alt="image-20230322120109135"></p><p><strong>硬件配置：</strong></p><p><img src="/../images/image-20230322120140584.png" alt="image-20230322120140584"></p><h2 id="浮点四则运算"><a href="#浮点四则运算" class="headerlink" title="浮点四则运算"></a>浮点四则运算</h2><p><img src="/../images/image-20230323094311912.png" alt="image-20230323094311912"></p><p>浮点数尾数部分和定点加减运算相同，但是因为阶码不等，影响实际的小数位置，为此，浮点数加减的运算规则是：</p><ol><li> 对阶 </li><li> 尾数求和 </li><li> 规格化 </li><li> 舍入 </li><li> 溢出判断</li></ol><h3 id="对阶"><a href="#对阶" class="headerlink" title="对阶"></a>对阶</h3><p>对阶就是将两个操作数的小数点位置对齐。</p><p>（1）求阶差</p><p><img src="/../images/image-20230323094749970.png" alt="image-20230323094749970"></p><p>求阶差可以使用补码求法，求出来的补码再将其转换成原码，也就是除了符号位其余的数取反，最后一位数加1。下面的例子是假设阶数符号位2位。</p><p>（2）对阶原则</p><p>小阶向大阶看齐。使阶数小的尾数向右移动，每右移一位，阶码加1，知道两个阶码相同，右移次数就是阶码差。但是<strong>阶数右移会出现精度丢失</strong>，之后会进行舍入操作。</p><p>（3）例子</p><p><img src="/../images/image-20230323095141120.png" alt="image-20230323095141120"></p><h3 id="尾数求和"><a href="#尾数求和" class="headerlink" title="尾数求和"></a>尾数求和</h3><p>接上一个例子：</p><p>如果是减法就看成加上这个数的负数的补码。</p><p><img src="/../images/image-20230323095214220.png" alt="image-20230323095214220"></p><h3 id="规格化"><a href="#规格化" class="headerlink" title="规格化"></a>规格化</h3><p><strong>定义：</strong></p><p><img src="/../images/image-20230323100319048.png" alt="image-20230323100319048"></p><p><strong>判断：</strong></p><p><img src="/../images/image-20230323100346022.png" alt="image-20230323100346022"></p><p>原码——不论正数、负数，第一数位为1。</p><p>补码——符号位和第一数位不同。</p><p><strong>特例：</strong></p><p><img src="/../images/image-20230323100546047.png" alt="image-20230323100546047"></p><p><img src="/../images/image-20230323100551260.png" alt="image-20230323100551260"></p><h3 id="左规"><a href="#左规" class="headerlink" title="左规"></a>左规</h3><p>当尾数出现00.0XXXX或者11.1XXXXX需要左规。</p><p><strong>定义</strong>：</p><p>尾数左移一位，阶码减 1，直到数符和第一数位不同为止。</p><h3 id="右规"><a href="#右规" class="headerlink" title="右规"></a>右规</h3><p>当出现01.XXXXX或者10.XXXX，表示尾数溢出，需要右规。</p><blockquote><p>  这在定点数中是不允许的，但是浮点运算中这不算溢出，可以通过右规处理。</p></blockquote><p><strong>定义：</strong></p><p>尾数右移一位，阶码加 1。</p><h3 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h3><p>在 <strong>对阶</strong> 和 <strong>右规</strong> 过程中，可能出现<strong>尾数末位丢失</strong>引起误差，需考虑舍入。</p><p>（1）0舍1入法</p><p><strong>定义：</strong></p><p>尾数右移时，被移除的最高数是0，舍去，如果被移去的最高数值是1，则在尾数的末尾加1。</p><p>（2）恒置1法</p><p>右移时不论舍去最高位是什么，都将尾数末尾置为1。</p><h3 id="溢出判断-1"><a href="#溢出判断-1" class="headerlink" title="溢出判断"></a>溢出判断</h3><p><img src="/../images/image-20230323101712444.png" alt="image-20230323101712444"></p><h2 id="算术逻辑单元"><a href="#算术逻辑单元" class="headerlink" title="算术逻辑单元"></a>算术逻辑单元</h2><h3 id="ALU电路"><a href="#ALU电路" class="headerlink" title="ALU电路"></a>ALU电路</h3><p><img src="/../images/image-20230323101809601.png" alt="image-20230323101809601"></p><p>AB是输入变量，k是控制信号，F是输出函数。</p><h3 id="快速进位链"><a href="#快速进位链" class="headerlink" title="快速进位链"></a>快速进位链</h3><ol><li> <strong>并行加法器</strong></li></ol><p><img src="/../images/image-20230323102136534.png" alt="image-20230323102136534"></p><p>由于每个全加器的进位输出是高一位的全加器的进位输入，所以这种一级一级的进位过程会导致运算速度降低。</p><ol start="2"><li> <strong>串行进位链</strong></li></ol><p>以 4 位全加器为例，每一位的进位表达式为：</p><p><img src="/../images/image-20230323102505126.png" alt="image-20230323102505126"></p><p>4位全加器产生进位全部时间是8t。</p><p>n位时间是2nt。</p><ol start="3"><li> <strong>并行进位链</strong>（先行进位，跳跃进位）</li></ol><p><img src="/../images/image-20230323102712566.png" alt="image-20230323102712566"></p><p><strong>（1）单重分组跳跃进位链</strong></p><p>n 位全加器分若干小组，小组中的进位同时产生， 小组与小组之间采用串行进位。</p><p>以<strong>n=16</strong>为例：</p><p><img src="/../images/image-20230323102832391.png" alt="image-20230323102832391"></p><p><strong>（2）双重分组跳跃进位链</strong>(待补充)</p><p>n 位全加器分若干大组，大组中又包含若干 小组。每个大组中小组的最高位进位同时产生。 大组与大组之间采用串行进位。</p><p>以<strong>n=32</strong>为例：</p><p><img src="/../images/image-20230323103015191.png" alt="image-20230323103015191"></p><p><img src="/../images/image-20230323103022867.png" alt="image-20230323103022867"></p><p><img src="/../images/image-20230323103029641.png" alt="image-20230323103029641"></p><p><img src="/../images/image-20230323103036492.png" alt="image-20230323103036492"></p><p><img src="/../images/image-20230323103045418.png" alt="image-20230323103045418"></p><p><img src="/../images/image-20230323103053529.png" alt="image-20230323103053529"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>输入输出系统</title>
    <link href="/2024/02/01/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/02/01/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="输入输出系统"><a href="#输入输出系统" class="headerlink" title="输入输出系统"></a>输入输出系统</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="输入输出系统的发展概况"><a href="#输入输出系统的发展概况" class="headerlink" title="输入输出系统的发展概况"></a>输入输出系统的发展概况</h3><p>发展分为4个阶段：</p><p><strong>1、早期阶段</strong></p><ul><li>  IO设备与主存之间交换信息都必须通过CPU，这个阶段下每个IO设备都需要一套逻辑电路和CPU连接，这样使得线路十分<strong>分散、庞杂</strong>。</li><li>  IO设备与CPU之间是串行方式工作的。</li><li>  更换IO设备非常困难。</li><li>  利用程序查询方式。</li></ul><p><strong>2、接口模块和DMA阶段</strong></p><ul><li>  这个时候采用了总线连接。</li><li>  IO设备之间可以实现并行工作方式</li><li>  通过中断方式交换信息</li><li>  为了提高CPU效率，出现了直接存储器存取（DMA），特点是IO设备与主存之间有一条直接数据通路。</li></ul><p><strong>3、具有通信结构的阶段</strong></p><ul><li>  通道出现的原因是在一些大型的计算机系统中，如果每个IO都配备专门DMA接口，会导致控制变复杂。</li><li>  通道主要负责管理IO设备以及实现主存与IO设备之间交换信息。</li></ul><p><strong>4、具有I/O处理机的阶段</strong></p><h3 id="输入输出系统的组成"><a href="#输入输出系统的组成" class="headerlink" title="输入输出系统的组成"></a>输入输出系统的组成</h3><p><strong>1、I/O软件</strong></p><p>（1）I/O指令</p><p><img src="/../images/image-20230314134140015.png" alt="image-20230314134140015"></p><p>是CPU指令的一部分，I/O指令的设备码相当于设备的地址。</p><p>（2）通道指令</p><p>通道指令是对具有通道的IO系统专门设置的指令。IBM370的通道指令为64位。</p><p><strong>2、I/O硬件</strong></p><h3 id="I-O设备与主机的联系方式"><a href="#I-O设备与主机的联系方式" class="headerlink" title="I/O设备与主机的联系方式"></a>I/O设备与主机的联系方式</h3><p><strong>1、IO设备编址方式</strong></p><p>（1）统一编址</p><p>将IO设备看成是存储器地址的一部分。统一编址占用存储空间，减少主存容量，但无需专用的IO指令。</p><p>（2）不统一编址</p><p>IO地址和存储器地址是分开的。不统一编址的特点相反。</p><p><strong>2、设备寻址</strong></p><p>通过IO指令的设备码字段直接指出该设备的设备号。</p><p><strong>3、传送方式</strong></p><p>分为串行传输和并行传输</p><p><strong>4、联络方式</strong></p><p>（1）立即响应方式</p><p>如一些指示灯。</p><p>（2）异步工作采用应答信号联络</p><p>发生场景是当IO设备与主机工作速度不一致时。</p><p><img src="/../images/image-20230314140113190.png" alt="image-20230314140113190"></p><p>（3）同步工作采用同步时标</p><p><strong>5、I/O设备与主机连接方式</strong></p><p>（1）辐射式连接</p><img src="../images/image-20230314140248153.png" alt="image-20230314140248153" style="zoom:67%;" /><p>每台设备都有一套控制线路和一组信号线。不便于增删设备。</p><p>（2）总线连接</p><p>便于增删设备。是现代大多数计算机系统使用的。</p><h3 id="I-O设备与主机信息传送的控制方式"><a href="#I-O设备与主机信息传送的控制方式" class="headerlink" title="I/O设备与主机信息传送的控制方式"></a>I/O设备与主机信息传送的控制方式</h3><p><strong>1、程序查询方式</strong></p><p><img src="/../images/image-20230314140511776.png" alt="image-20230314140511776"></p><p>CPU不断查询IO设备是否做好准备。这种方式处于串行工作状态，CPU效率不高。如果IO没有做好准备，CPU会踏步等待。</p><p><strong>2、程序中断方式</strong></p><p><img src="/../images/image-20230314140755727.png" alt="image-20230314140755727"></p><p>CPU启动IO设备后继续执行原程序，当IO设备准备就绪并且发出中断请求时，CPU才响应。</p><p>中断方式流程：</p><p><img src="/../images/image-20230314141021243.png" alt="image-20230314141021243"></p><p><strong>3、DMA 方式</strong></p><ul><li><p>  主存和 I/O 之间有一条直接数据通道 </p></li><li><p>不中断现行程序</p><p>  <img src="/../images/image-20230314141216617.png" alt="image-20230314141216617"></p><p>  CPU和IO并行工作</p></li><li><p>  周期挪用</p></li></ul><p><strong>4、三种方式的 CPU 工作效率比较</strong></p><p><img src="/../images/image-20230314141313718.png" alt="image-20230314141313718"></p><h2 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I/O设备"></a>I/O设备</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><img src="/../images/image-20230315091921740.png" alt="image-20230315091921740"></p><p>IO设备大致可以分为三类：</p><ul><li>  人机交互设备：键盘、鼠标。</li><li>  计算机信息的存储设备：磁盘、光盘、磁带等</li><li>  机-机通信设备：调制解调器</li></ul><h3 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h3><p>1、键盘</p><p>键盘的输入信息的步骤：</p><ul><li>  按下一个键</li><li>  判断是哪个键按下</li><li>  将此键翻译成ASCⅡ码。</li></ul><p>2、鼠标</p><ul><li>  机械式：金属球</li><li>  光电式：光电转换器</li></ul><p>3、触摸屏</p><h3 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h3><p>1、显示设备</p><p>CRT是目前应用最广泛发显示器件。既可以字符显示器也可以作为图像、图形显示器。</p><p>显示器设备主要可以分为：字符显示器、图形显示器、图像显示器。</p><p>2、打印机</p><ul><li>  击打式（点阵式）</li><li>  非击打式（逐页打印）</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1、A/D、D/A 模拟/数字转换器</p><p>2、终端，由键盘和显示器组成，完成显示控制与存储、键盘管理及通信控制</p><p>3、汉字处理：汉字输入、汉字存储、汉字输出</p><h3 id="多媒体技术"><a href="#多媒体技术" class="headerlink" title="多媒体技术"></a>多媒体技术</h3><p>多媒体计算机的关键技术：</p><ul><li>  视频和音频数据的压缩与解压技术</li><li>  多媒体转用芯片</li><li>  大容量存储器</li><li>  适用于多媒体系统的软件</li></ul><h2 id="I-O接口"><a href="#I-O接口" class="headerlink" title="I/O接口"></a>I/O接口</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>为什么要设置接口？</p><p>1、实现设备的选择 </p><p>2、实现数据缓冲达到速度匹配</p><p>3、实现数据串一并格式转换</p><p>4、实现电平的转换</p><p>5、传送控制命令</p><p>6、反映设备的状态。</p><h3 id="接口的功能和组成"><a href="#接口的功能和组成" class="headerlink" title="接口的功能和组成"></a>接口的功能和组成</h3><p><strong>1、总线连接方式的I/O接口电路</strong></p><p><img src="/../images/image-20230315093829247.png" alt="image-20230315093829247"></p><p>（1）数据线</p><p>IO设备与主机之间的数据交换</p><p>（2）设备选择线</p><p>设备选择线是用来传送设备码的。</p><p>（3）命令线</p><p>传输CPU向设备发出的命令信号。</p><p>（4）状态线</p><p>将IO设备的状态向主机报告。</p><p><strong>2、接口的功能和组成</strong></p><p><strong>功能：</strong></p><p>（1）选址功能</p><p>（2）传送命令功能</p><p>（3）传送数据的功能</p><p>（4）反映IO设备工作状态的功能</p><p><strong>组成：</strong></p><p>（1）设备选择电路</p><p>（2）命令寄存器、命令译码器</p><p>（3）数据缓冲寄存器</p><p>（4）设备状态标记</p><p><img src="/../images/image-20230315095636284.png" alt="image-20230315095636284"></p><h3 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h3><p>1、按数据传送方式分类</p><ul><li>  并行接口</li><li>  串行接口</li></ul><p>2、按功能选择的灵活性分类</p><ul><li>  可编程接口</li><li>  不可编程接口</li></ul><p>3、按通用性分类</p><ul><li>  通用接口</li><li>  专用接口</li></ul><p>4、按数据传送的控制方式分类</p><ul><li>  程序型接口</li><li>  DMA型接口</li></ul><h2 id="程序查询方式"><a href="#程序查询方式" class="headerlink" title="程序查询方式"></a>程序查询方式</h2><h3 id="程序查询流程"><a href="#程序查询流程" class="headerlink" title="程序查询流程"></a>程序查询流程</h3><p>1、查询流程</p><p>单个设备：</p><p><img src="/../images/image-20230315110430052.png" alt="image-20230315110430052"></p><p>多个设备：</p><p><img src="/../images/image-20230315110536602.png" alt="image-20230315110536602"></p><p>在查询多个设备时，CPU需要按照IO设备的优先级进行查找。程序查找方式让CPU效率变低。</p><p>2、程序流程</p><p><img src="/../images/image-20230315110657465.png" alt="image-20230315110657465"></p><h3 id="程序查询方式的接口电路"><a href="#程序查询方式的接口电路" class="headerlink" title="程序查询方式的接口电路"></a>程序查询方式的接口电路</h3><p><img src="/../images/image-20230315123513597.png" alt="image-20230315123513597"></p><p>该接口的工作流程：</p><p>①CPU通过IO指令启动输入设备，指令的设备码字段就会通过地址线送至设备选择电路。</p><p>②如果该接口的设备码与地址线上的代码吻合，SEL有效。</p><p>③启动命令①使得B置为1，D置为0。</p><p>④由B启动设备</p><p>⑤输入设备将数据送至DBR（数据缓冲寄存器）。</p><p>⑥设备发出设备工作结束，将D置为1，B置为0；</p><p>⑦D通知CPU准备就绪。</p><p>⑧CPU执行输入指令，将数据缓冲寄存器中的数据送至CPU的通用寄存器中，在存入相关单元。</p><h2 id="程序中断方式"><a href="#程序中断方式" class="headerlink" title="程序中断方式"></a>程序中断方式</h2><h3 id="中断的概念"><a href="#中断的概念" class="headerlink" title="中断的概念"></a>中断的概念</h3><p>程序在运行时，遇到异常情况或者特殊请求时，计算机停止现行程序的运行，待处理完突发事务后再返回现行程序的中断处。</p><h3 id="I-O中断的产生"><a href="#I-O中断的产生" class="headerlink" title="I/O中断的产生"></a>I/O中断的产生</h3><p><img src="/../images/image-20230315124840655.png" alt="image-20230315124840655"></p><h3 id="程序中断方式的接口电路"><a href="#程序中断方式的接口电路" class="headerlink" title="程序中断方式的接口电路"></a>程序中断方式的接口电路</h3><p><strong>1、中断请求触发器和中断屏蔽触发器</strong></p><p><img src="/../images/image-20230315125046442.png" alt="image-20230315125046442"></p><p>每台外部设备都必须配备一个中断请求触发器INTR，当为1时，表示有中断请求。在IO设备接口中需要设置一个屏蔽触发器MASK，当为1时，表示被屏蔽。</p><p>总结就是仅当设备准备就绪并且该设备未被屏蔽（MASK=0）时，CPU的中断信号可将中断请求触发器置为1。</p><p><strong>2、排队器</strong></p><p><img src="/../images/image-20230315130156100.png" alt="image-20230315130156100"></p><p>当有多个中断源时，按照中断源的优先级别进行排序。设备优先权可以通过硬件或者软件实现，这里使用的是链式排队器。</p><p>链式排队器的使用规则如下：</p><ul><li>  排队器输出端INTP只有一个高电平。</li><li>  当某个中断源提出中断请求时，迫使比它低的中断源INTP变成低电平。</li><li>  某个中断源有请求时，<img src="../images/image-20230315130939717.png" alt="image-20230315130939717" style="zoom:67%;" />为0。</li><li>  当有两个中断源同时请求时，可以通过加上上面两个输入头的与非门，可以保证只有一个输出头是高电平。</li></ul><p><strong>3、中断向量地址形成部件</strong></p><p><img src="../images/image-20230315131156556.png" alt="image-20230315131156556"  /><img src="../images/image-20230315131203681.png" alt="image-20230315131203681"  /></p><p>发生中断时，需要找到中断请求的程度，也就是要找到入口地址，找到入口地址有软件和硬件方法之分。我们通过硬件向量法寻找向量地址。</p><p>如上面第一幅图，排队器的输出就是向量地址，然后把向量地址去（图二）主存中找到对应的地址，该地址中保留的地址信息就是入口地址。</p><p><strong>4、程序中断方式接口电路的基本组成</strong></p><p><img src="/../images/image-20230315131734873.png" alt="image-20230315131734873"></p><h3 id="I-O中断处理过程"><a href="#I-O中断处理过程" class="headerlink" title="I/O中断处理过程"></a>I/O中断处理过程</h3><p><strong>1、CPU响应中断的条件和时间</strong></p><p>（1）条件</p><ul><li>  允许中断触发器EINT=1</li><li>  用开中断指令将EINT置为1</li><li>  用关中断指令将EINT置为0或者硬件自动复位。</li></ul><p>（2）时间</p><p>当D=1（随机）且MASK=0时，在每条指令执行阶段的结束前，CPU法中断查询信号（将INTR置为1）</p><p><strong>2、I/O中断处理过程</strong></p><p><img src="/../images/image-20230315132400638.png" alt="image-20230315132400638"></p><h3 id="中断服务程序的流程"><a href="#中断服务程序的流程" class="headerlink" title="中断服务程序的流程"></a>中断服务程序的流程</h3><p><strong>1、中断服务程序的流程</strong></p><p>（1）保护现场</p><ul><li>  保护程序的断点</li><li>  保存通用寄存器和状态寄存器的内容</li><li>  进栈指令</li></ul><p>（2）中断服务</p><p>对不用的IO设备具有不同内容的设备服务。</p><p>（3）恢复现场</p><p>出栈指令</p><p>（4）中断返回</p><p>中断返回指令</p><p><strong>2、单重中断和多重中断</strong></p><p><img src="/../images/image-20230315133019891.png" alt="image-20230315133019891"></p><p><strong>单重中断：</strong>不允许中断现行的中断服务程序  </p><p><strong>多重中断</strong>：允许级别更高的中断源中断现行的中断服务程序</p><h2 id="DMA方式"><a href="#DMA方式" class="headerlink" title="DMA方式"></a>DMA方式</h2><h3 id="DMA方式的特点"><a href="#DMA方式的特点" class="headerlink" title="DMA方式的特点"></a>DMA方式的特点</h3><p><img src="/../images/image-20230316155354208.png" alt="image-20230316155354208"></p><blockquote><p>  什么是DMA方式？</p></blockquote><p>主存和DMA接口之间有一条直接通路，在IO设备和主存之间进行信息交换的时候可以不用通过CPU。所以不需要CPU暂停现行程序。适合高速IO设备与主存之间的通信。</p><p>当出现高速IO设备和CPU共享主存，可能导致两者冲突。为了有效避免，我们通过下面3个方式：</p><p><strong>（1）停止CPU访问主存</strong></p><p>当外部设备传输一组数据时，DMA向CPU发出停止信号，CPU停止访问主存，这样的优点是控制简单，但是会造成CPU为充分发挥对主存的利用率。</p><p><img src="/../images/image-20230316155506254.png" alt="image-20230316155506254"></p><p><strong>（2）周期挪用</strong></p><p>IO设备发出数据请求时，DMA挪用或者窃取一个或者多个周期，DMA不请求时，CPU仍旧继续访问主存。</p><p><img src="/../images/image-20230316155727257.png" alt="image-20230316155727257"></p><p>DMA访问主存有三种可能：</p><ul><li>  CPU此时不访问</li><li>  CPU正在访存</li><li>  CPU与DMA同时请求访存，CPU将总线控制权让给DMA。</li></ul><p><strong>（3）DMA与CPU交替访问</strong></p><p>这种适合于CPU的工作周期比主存存取周期长的情况。</p><p><img src="/../images/image-20230316160113771.png" alt="image-20230316160113771"></p><h3 id="DMA接口的功能和组成"><a href="#DMA接口的功能和组成" class="headerlink" title="DMA接口的功能和组成"></a>DMA接口的功能和组成</h3><p><strong>1、DMA接口的功能</strong></p><p>(1) 向CPU申请DMA传送 </p><p>(2) 处理总线控制权的转交  </p><p>(3) 管理系统总线、控制数据传送  </p><p>(4) 确定数据传送的首地址和长度修正传送过程中的数据地址和长度  </p><p>(5) DMA传送结束时，给出操作完成信号</p><p><strong>2、DMA接口基本组成</strong></p><p><img src="/../images/image-20230316160851241.png" alt="image-20230316160851241"></p><ul><li>  主存地址寄存器（AR）：存放存储中需要交换数据的地址。</li><li>  字计数器（WC）：记录传送数据的总字数</li><li>  数据缓冲寄存器（BR）：用于暂存每次传输的数据。</li><li>  DMA控制逻辑：管理DMA的传送过程。当设备传送结束一个字，就向DMA提出申请（DREQ），向CPU发出总线使用权的请求（HRQ），待收到CPU响应信号（HLDA）后DMA负责管理传送的全过程，通知设备已经被赋予一个DMA周期（DACK）。</li><li>  中断机构：当字计数器置为0时，由中断机构发出中断请求给CPU进行后处理。</li><li>  设备地址寄存器（DAR）:存储IO设备的设备码或者表示信息存储区的寻址信息。</li></ul><h3 id="DMA的工作过程"><a href="#DMA的工作过程" class="headerlink" title="DMA的工作过程"></a>DMA的工作过程</h3><p><strong>1、DMA的传送过程</strong></p><p>预处理、数据传送、后处理</p><p><strong>（1）预处理</strong></p><p>通过几条输入输出指令预置如下信息（<strong>程序初始化</strong>）：</p><ul><li>  通知 DMA 控制逻辑传送方向（入/出）</li><li>  设备地址——DMA 的 DAR </li><li>  主存地址——DMA 的 AR </li><li>  传送字数——DMA 的 WC</li></ul><p><strong>（2）数据传送</strong></p><p>DMA是以数据块为单位进行传送的</p><p><img src="/../images/image-20230316162444116.png" alt="image-20230316162444116"></p><p>输出流程：</p><p><img src="/../images/image-20230316162534941.png" alt="image-20230316162534941"></p><p><strong>（3）后处理</strong></p><ul><li>  主要校验送入主存的数据是否正确。</li><li>  是否继续用DMA</li><li>  测试传送过程是否正确，错则转诊断程序，由中断服务程序完成。</li></ul><p><strong>2、DMA接口与系统的连接方式</strong></p><p>（1）具有公共请求线的 DMA 请求 </p><p><img src="/../images/image-20230316162826729.png" alt="image-20230316162826729"></p><p>（2）独立的DMA请求</p><p><img src="/../images/image-20230316162900042.png" alt="image-20230316162900042"></p><p>3、DMA方式与程序中断的比较</p><ul><li>  数据传送，程序中断靠程序传送，DMA靠硬件</li><li>  响应时间，程序中断是在一条指令结束的时候响应，DMA方式是存取周期结束。</li><li>  处理异常能力：程序中断有处理异常的能力，DMA没有</li><li>  中断请求：DMA不需要中断程序。</li><li>  优先级：DMA高。</li></ul><h3 id="DMA接口的类型"><a href="#DMA接口的类型" class="headerlink" title="DMA接口的类型"></a>DMA接口的类型</h3><p><img src="/../images/image-20230316163259082.png" alt="image-20230316163259082"></p><p><img src="/../images/image-20230316163305994.png" alt="image-20230316163305994"></p><p><img src="/../images/image-20230316163312507.png" alt="image-20230316163312507"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储器</title>
    <link href="/2024/02/01/%E5%AD%98%E5%82%A8%E5%99%A8/"/>
    <url>/2024/02/01/%E5%AD%98%E5%82%A8%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="存储器分类"><a href="#存储器分类" class="headerlink" title="存储器分类"></a>存储器分类</h3><ol><li> 按存储介质分类</li></ol><p>（1）半导体存储器</p><p>（2）磁表面存储器</p><p>（3）磁芯存储器</p><p>（4）光盘存储器</p><ol start="2"><li> 按照存取方式分类</li></ol><p>（1）随机存储器（RAM）</p><p>​    RAM是一种可读可写的存储器，其特点是对存储器的任何一个存储单元的内容都可以随机存取。RAM又分为静态RAM（用触发器寄存信息）和动态RAM（以电容充放电原理寄存信息）。</p><p>（2）只读存储器（ROM）</p><p>（3）串行访问存储器</p><p>​    顺序存取存储器    磁带</p><p>​    直接存取存储器    磁盘</p><ol start="3"><li> 按照在计算机中的作用分类</li></ol><p><img src="/../images/image-20230308094142431.png" alt="image-20230308094142431"></p><h3 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h3><p>存储器有3个主要的性能指标：速度、容量、每位价格。</p><p>存储系统层次结构主要体现在缓存-主存和主存-辅存这两个存储层次上。</p><p><img src="/../images/image-20230308095327520.png" alt="image-20230308095327520"></p><p>主存-辅存层次的不断发展，形成了虚拟存储系统。</p><h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><h4 id="主存的基本构成"><a href="#主存的基本构成" class="headerlink" title="主存的基本构成"></a>主存的基本构成</h4><p><img src="/../images/image-20230308095723932.png" alt="image-20230308095723932"></p><p>从上面这个图中我们可以看出，地址总线接到MAR上，根据MAR中的地址去读取存储单元，需要经过驱动器和译码器，同时读出操作时，需要经过读写电路进行放大才能够将被选中的存储字送到MDR中。</p><h4 id="主存和CPU的联系"><a href="#主存和CPU的联系" class="headerlink" title="主存和CPU的联系"></a>主存和CPU的联系</h4><p><img src="/../images/image-20230308100830545.png" alt="image-20230308100830545"></p><p>现代计算机，MDR和MAR都是存放在CPU中，通过总线和主存连接。</p><h4 id="主存中存储单元的分配"><a href="#主存中存储单元的分配" class="headerlink" title="主存中存储单元的分配"></a>主存中存储单元的分配</h4><p>在学习这一个知识点之前，我们先对一些基本概念进行总结。</p><ul><li>  比特位/位：bit，一般写作b</li><li>  字节：byte/Byte，一般写作B。1B=8b</li><li>  字：不同的机器字的位数不同。</li><li>  存储单元：CPU访问存储器的基本单位，8位二进制数为一个存储单元。也就是<strong>一字节</strong>。</li><li>  存储字长：就是一个字的位数。</li><li>  地址线：一根地址线对应2个存储单元。地址线一次确定一个存储单元，存储单元的个数=2^地址线。</li></ul><p>我们继续看下面的题目：</p><p><img src="/../images/image-20230308105640965.png" alt="image-20230308105640965"></p><p>12345678H，（H为16进制）。</p><p>一共8个数，每两个占用一个字节，也就是4字节。其中，12为高位，78为低位。</p><p><strong>区分大端、大尾和小端、小尾</strong></p><p>左边的图是低地址存高位字节，右边的图是低地址存地位字节。</p><p><strong>字地址</strong></p><p>字地址=存储字地址=存储单元地址</p><p>高位字节地址为字地址（大端模式），低位字节为字地址（小端模式）。</p><p><strong>寻址范围</strong>(待补充)</p><h4 id="主存的技术指标"><a href="#主存的技术指标" class="headerlink" title="主存的技术指标"></a>主存的技术指标</h4><p>主要的技术指标是<strong>存储容量</strong>和<strong>存储速度</strong>。</p><ul><li><p>存储容量：主存存放的二进制代码的总位数</p><p>  存储容量=存储单元个数*存储字长</p></li><li><p>  存储时间：存储器的访问时间（读出与写入的时间）</p></li><li><p>  存储周期：连续两次独立的存储器操作。（读或写）所需的 最小间隔时间。</p></li><li><p>  存储器的带宽：位/秒</p></li></ul><h3 id="半导体存储芯片"><a href="#半导体存储芯片" class="headerlink" title="半导体存储芯片"></a>半导体存储芯片</h3><p><img src="/../images/image-20230309103626963.png" alt="image-20230309103626963"></p><h4 id="半导体存储芯片的基本结构"><a href="#半导体存储芯片的基本结构" class="headerlink" title="半导体存储芯片的基本结构"></a>半导体存储芯片的基本结构</h4><p><strong>存储矩阵</strong>：存储矩阵是由大量相同的位存储单元阵列构成。</p><p><strong>译码驱动</strong>：将地址总线送来的地址信号翻译成对应的存储单元的选择信号，该信号在读写电路的配合下完成对被选中的单元进行的读写操作。</p><p><img src="/../images/image-20230309104156519.png" alt="image-20230309104156519"></p><p><strong>读写电路</strong>：包括读出放大器和写入电路，用来完成读写操作。</p><p>读写控制线：决定芯片进行读写操作。</p><p>片选线：CS表示芯片选择信号，CE表示芯片使能信号。低电平表示有效，高电平表示无效。</p><p>地址线：单向的，其位数与存储字的个数有关。</p><p>数据线：双向的，其位数与读出写入的数据位数有关。</p><p>数据线数和地址线数共同反映了存储芯片容量的大小。</p><p>容量=2^地址线数*数据线</p><h4 id="译码驱动方式"><a href="#译码驱动方式" class="headerlink" title="译码驱动方式"></a>译码驱动方式</h4><p>分为两种：线选法和重合法。</p><h5 id="线选法"><a href="#线选法" class="headerlink" title="线选法"></a>线选法</h5><p>特点是用一根字选择线，直接选中一个存储单元。例如输入0000，（下图是4条地址线，所以是16个存储单元，8条数据线，所以是8位，一共是16*8的矩阵）只有0字线被选中，对应着0这条线上的存储单元可以进行读写操作。</p><p><strong>缺点：</strong>如果有1M的地址线，就要2^20个字线。</p><p><img src="/../images/image-20230309105801579.png" alt="image-20230309105801579"></p><h5 id="重合法"><a href="#重合法" class="headerlink" title="重合法"></a>重合法</h5><p><img src="/../images/image-20230309133705367.png" alt="image-20230309133705367"></p><p>重合法将单一地址译码器分成了行地址和列地址译码器。行和列的交汇处共同锁定一个单元。如果加入00000，这时0行整行都被选中。然后让列地址译码器为00000，那么就可以确定00这个单元。</p><p>适用于存储大的内存芯片。</p><h3 id="随机存取存储器"><a href="#随机存取存储器" class="headerlink" title="随机存取存储器"></a>随机存取存储器</h3><p>随机存储器可以分为：静态RAM（SRAM）和动态RAM（DRAM）。</p><h4 id="静态RAM"><a href="#静态RAM" class="headerlink" title="静态RAM"></a>静态RAM</h4><h5 id="静态RAM基本电路"><a href="#静态RAM基本电路" class="headerlink" title="静态RAM基本电路"></a>静态RAM基本电路</h5><p><img src="/../images/image-20230309151317246.png" alt="image-20230309151317246"></p><p>静态RAM是通过触发器存储0或1，由T1-T6这六个MOS管构成一个基本电路。T5-T6由行地址控制，T7-T8由列地址控制。</p><p>由于静态RAM是用触发器工作的，所以当信息读出后一九保持着原状态，不需要再生。但是电源掉电后会使得信息丢失，故是一种<strong>易失性半导体存储器。</strong></p><p>（1）读操作</p><p><img src="/../images/image-20230309153547937.png" alt="image-20230309153547937"></p><p>（2）写操作</p><p><img src="/../images/image-20230309153603400.png" alt="image-20230309153603400"></p><p>在写操作时，在写选择时，经过两个写放大器以后，使两端输出为相反电平。这样可以保证触发器的两端是相反的电平。</p><h5 id="静态RAM芯片举例"><a href="#静态RAM芯片举例" class="headerlink" title="静态RAM芯片举例"></a>静态RAM芯片举例</h5><blockquote><p>  Intel2114芯片</p></blockquote><p><img src="/../images/image-20230309153909652.png" alt="image-20230309153909652"></p><p>（1）基本构成</p><p>基本电路用过6个MOS管组成，是一个存储容量为1K*4位。可以一次传输4位的数据，将64*64的矩阵分成4组。</p><p>CS是片选信号（低电平有效），WE是写允许信号（低电平为写，高电平是读）。</p><p>（2）矩阵结构</p><p><img src="/../images/image-20230309154247065.png" alt="image-20230309154247065"></p><p>（3）读操作</p><p>CS为低电平，WE为高电平，输出端输出第0行的第0，16，32，48这4个基本单元所存的信息。</p><h4 id="动态RAM"><a href="#动态RAM" class="headerlink" title="动态RAM"></a>动态RAM</h4><h5 id="动态RAM的基本单元电路"><a href="#动态RAM的基本单元电路" class="headerlink" title="动态RAM的基本单元电路"></a>动态RAM的基本单元电路</h5><p><img src="/../images/image-20230309155024581.png" alt="image-20230309155024581"></p><img src="../images/image-20230309155108755.png" alt="image-20230309155108755" style="zoom:67%;" /><p>常见的单元电路有<strong>三管式</strong>和<strong>单管式</strong>。都是通过电容存储。电容一般只能维持1-2ms，所以需要对其进行刷新。</p><h5 id="动态RAM芯片举例"><a href="#动态RAM芯片举例" class="headerlink" title="动态RAM芯片举例"></a>动态RAM芯片举例</h5><ol><li> 三管动态RAM芯片</li></ol><blockquote><p>  Intel1103</p></blockquote><p><img src="/../images/image-20230309160109457.png" alt="image-20230309160109457"></p><ul><li>  读操作</li></ul><p><img src="/../images/image-20230309155735468.png" alt="image-20230309155735468"></p><p>读操作时，首先对T4进行通电，电源对都数据线进行充电，读信号有效，T2就会被导通。如果Cg没有充电，则是0，T2通电，电流从T2传到读选择线，读到的数据是1。</p><ol start="2"><li> 单管动态RAM芯片</li></ol><blockquote><p>  RAM4116(16K*1位):</p></blockquote><p><img src="/../images/image-20230309160720851.png" alt="image-20230309160720851"></p><p><img src="/../images/image-20230309160558474.png" alt="image-20230309160558474"></p><ul><li>  读操作</li></ul><p>如果 CS中保存的是0，则数据线没有电流</p><p>如果 CS中保存的是1，则数据线有电流</p><ul><li>  写操作</li></ul><p>写入的是1 ： 对电容进行充电<br>写入的是 0：对电容进行放电</p><h5 id="动态RAM刷新"><a href="#动态RAM刷新" class="headerlink" title="动态RAM刷新"></a>动态RAM刷新</h5><p>（1）集中刷新</p><p>集中刷新是对所有存储单元的刷新，刷新的时候必须停止读写操作。</p><p><img src="/../images/image-20230309161720689.png" alt="image-20230309161720689"></p><p>（2）分散刷新</p><p><img src="/../images/image-20230309161920451.png" alt="image-20230309161920451"></p><p>可以保证不停止读写操作，但是耗时，效率低下。</p><p>（3） 分散刷新与集中刷新相结合（异步刷新）</p><p><img src="/../images/image-20230309162021700.png" alt="image-20230309162021700"></p><p>每行每隔 2 ms 刷新一次，将刷新安排在指令译码阶段，不会出现 “死区”。</p><h4 id="静态RAM和动态RAM对比"><a href="#静态RAM和动态RAM对比" class="headerlink" title="静态RAM和动态RAM对比"></a>静态RAM和动态RAM对比</h4><p><img src="/../images/image-20230309162111663.png" alt="image-20230309162111663"></p><h3 id="只读存储器"><a href="#只读存储器" class="headerlink" title="只读存储器"></a>只读存储器</h3><p>根据只读存储器的原始定义，里面的内容一旦确定就不可以改变，但是后来出现新的需求，用户想要改变ROM中的信息，这就出现了PROM、EPROM、EEPROM。</p><p>对半导体ROM而言，基本器件有两种：MOS型和TTL型。</p><h4 id="掩模ROM"><a href="#掩模ROM" class="headerlink" title="掩模ROM"></a>掩模ROM</h4><p>采用重合法驱动，行选择线和列选择线交叉处既可以有耦合元件又可以没有。如果有耦合元件，输出“1”，没有输出“0”。MOS管不可以进行改变，只能读。</p><h4 id="PROM"><a href="#PROM" class="headerlink" title="PROM"></a>PROM</h4><p>是一次性破坏性编程的只读存储器，由双极型电路和熔丝构成。熔丝断开的状态来判断0和1。</p><p><img src="/../images/image-20230310105656805.png" alt="image-20230310105656805"></p><h4 id="EPROM"><a href="#EPROM" class="headerlink" title="EPROM"></a>EPROM</h4><p>EPROM是一种可擦除可编程只读存储器。目前最多的是浮动栅雪崩注入型MOS管构成，称为FAMOS型EPROM。</p><p><img src="/../images/image-20230310105915905.png" alt="image-20230310105915905"></p><p>D端加正电压，形成浮动栅，S与D之间不通电，MOS管处于“0”状态。</p><p>D端不加正电压，不能形成浮动栅，S与D之间通电，MOS管处于“1”状态。</p><p>EPROM改写的方式有两种：一种是用紫外线照射，但是擦除的时间太长，不能进行单独的擦除。另一种方法是用电气的方式。在联机的条件下，用字擦除方式或页擦除方式，既可以局部擦除也可以全部擦除。这种称为<strong>EEPROM</strong>。</p><h4 id="FlashMemory"><a href="#FlashMemory" class="headerlink" title="FlashMemory"></a>FlashMemory</h4><p>性能价格比更好、可靠性高的可擦写非易失性存储器。</p><p>具有整块擦除的特点，擦除速度快。</p><p>具备RAM功能。</p><h3 id="存储器与CPU的连接"><a href="#存储器与CPU的连接" class="headerlink" title="存储器与CPU的连接"></a>存储器与CPU的连接</h3><p>单片存储芯片的容量有限，很难满足实际要求，将若干个存储芯片连在一起才能组成更大容量</p><h4 id="存储容量的扩展"><a href="#存储容量的扩展" class="headerlink" title="存储容量的扩展"></a>存储容量的扩展</h4><h5 id="位扩展"><a href="#位扩展" class="headerlink" title="位扩展"></a>位扩展</h5><p>位扩展是增加存储字长。</p><p><img src="/../images/image-20230310130919327.png" alt="image-20230310130919327"></p><h5 id="字扩展"><a href="#字扩展" class="headerlink" title="字扩展"></a>字扩展</h5><p><img src="/../images/image-20230310130958111.png" alt="image-20230310130958111"></p><h5 id="字位扩展"><a href="#字位扩展" class="headerlink" title="字位扩展"></a>字位扩展</h5><p><img src="/../images/image-20230310131039799.png" alt="image-20230310131039799"></p><h4 id="存储器与CPU的连接-1"><a href="#存储器与CPU的连接-1" class="headerlink" title="存储器与CPU的连接"></a>存储器与CPU的连接</h4><ul><li>  地址线的连接</li><li>  数据线的连接</li><li>  读/写命令线的连接</li><li>  片选线的连接</li><li>  合理选择存储芯片</li><li>  其他 时序、负载</li></ul><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>设CPU共有16根地址线，8根数据线，并用MREQ（低电平有效）作访存控制信号，WR作读写命令信号（高电平为读，低电平为写）。现有下列存储芯片：ROM（2K×8位，4K×4位，8K×8位），RAM（1K×4位，2K×8位，4K×8位），及74138译码器和其他门电路（门电路自定）。试从上述规格中选用合适芯片，画出CPU和存储芯片的连接图。要求：</p><p>（1）6000H ~ 67FFH 为系统区。6800H~6BFFH 为用户区</p><p>（2）指出选用的存储芯片类型及数量。</p><p>（3）详细画出片选逻辑。</p><p>以下是作答：</p><img src="../../../../../相册/typora/image-20230310140356820.png" alt="image-20230310140356820" style="zoom: 200%;" /><p><img src="/../images/image-20230310140431375.png" alt="image-20230310140431375"></p><h3 id="存储器的校验"><a href="#存储器的校验" class="headerlink" title="存储器的校验"></a>存储器的校验</h3><h4 id="编码的最小距离"><a href="#编码的最小距离" class="headerlink" title="编码的最小距离"></a>编码的最小距离</h4><p>任意两组合法代码之间二进制位数的最小差异</p><p>编码的纠错、检错能力与编码的最小距离有关。</p><p><code>L-1=D+C</code></p><p><strong>L：</strong>编码的最小距离</p><p><strong>D：</strong>检查错误的位数</p><p><strong>C：</strong>纠正错误的位数</p><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><p>分为奇校验和偶校验。</p><p>例子：</p><p>原数        奇校验        偶校验</p><p>1001        1001 1        1001 0</p><p>1101        1101 0        1101 1</p><h4 id="汉明码"><a href="#汉明码" class="headerlink" title="汉明码"></a>汉明码</h4><p><img src="/../images/image-20230310145531410.png" alt="image-20230310145531410"></p><p>汉明码是采用奇偶校验和分组校验的方式检测和纠正错误。</p><p>如果检验的位数有n，那么需要添加k位检验数，组成一个n+k的代码。新增的k应该满足如下条件。</p><img src="../../../../../相册/typora/image-20230310144605014.png" alt="image-20230310144605014" style="zoom:50%;" /><p>检验位的位置确定：</p><img src="../../../../../相册/typora/image-20230310144720558.png" alt="image-20230310144720558" style="zoom: 50%;" /><p>分组如下：</p><img src="../../../../../相册/typora/image-20230310144816584.png" alt="image-20230310144816584" style="zoom:67%;" /><p>每一组中具有以下的特点：</p><ul><li>  每个小组gi有一位且仅有一位为它所独占，这一位是其他小组所没有的，即gi独占<img src="../../../../../相册/typora/image-20230310145204848.png" alt="image-20230310145204848" style="zoom:80%;" />（i，2，3，….）位。</li><li>  每两个小组gi和gj共同占有一个是其他小组没有的，每两个小组共同占用第<img src="../../../../../相册/typora/image-20230310145644554.png" alt="image-20230310145644554" style="zoom:80%;" />位。</li><li>  每三个小组共同占用第<img src="../../../../../相册/typora/image-20230310145723504.png" alt="image-20230310145723504" style="zoom:80%;" />位。</li></ul><h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><p>求 0101 按 “偶校验” 配置的汉明码？</p><p><strong>解：</strong></p><p><img src="/../images/image-20230310150628129.png" alt="image-20230310150628129"></p><h3 id="提高访问速度的措施"><a href="#提高访问速度的措施" class="headerlink" title="提高访问速度的措施"></a>提高访问速度的措施</h3><p>采用高速器件、采用层次结构Cache-主存、调整主存结构。</p><h4 id="单体多字系统"><a href="#单体多字系统" class="headerlink" title="单体多字系统"></a>单体多字系统</h4><p>用一句话概括这种系统就是一次读取多个地址。</p><p>采用前提：指令和数据在主存中必须是连续存放的，一旦遇到转移指令，或者操作数不能连续存放，这种方法的效果就不明显。</p><h4 id="多体并行系统"><a href="#多体并行系统" class="headerlink" title="多体并行系统"></a>多体并行系统</h4><p>就是采用多体模块组成的存储器，每个模块都有相同的容量和存取速度，各模块都有各自独立的地址寄存器（MAR）、数据寄存器（MDR）、地址译码、驱动电路，他们能够并行工作、又能交叉工作。</p><p>（1）高位交叉</p><p><img src="/../images/image-20230313161539912.png" alt="image-20230313161539912"></p><p>因为程序是按照顺序编址的，也就是一个存储体满了以后再进行下一个存储体的编址，这样一来，我们就只能把高位作为体号、地位作为体内地址。</p><p>（2）低位交叉</p><p>低位交叉就是各个存储体轮流编址，原因和高位差不多，所以高位是体内地址、低位是体号。</p><p><img src="/../images/image-20230313162051856.png" alt="image-20230313162051856"></p><p>地位交叉的特点是在不改变周期的前提下，增加存储器的带宽。和高位交叉不同的是，高位交叉容易出现一个存储体特别繁忙，而其他的存储体非常空闲。</p><p><img src="/../images/image-20230313162225647.png" alt="image-20230313162225647"></p><p>设K体低位交叉存储器，存取周期为T，总线传输周期 为τ，为实现流水线方式存取，应满足 T ＝ kτ。 </p><p><img src="/../images/image-20230313162349072.png" alt="image-20230313162349072"></p><p>连续读取 k 个字所需的时间为   T＋(k－1)τ</p><h4 id="高性能存储芯片"><a href="#高性能存储芯片" class="headerlink" title="高性能存储芯片"></a>高性能存储芯片</h4><ul><li><p>SDRAM (同步 DRAM) </p><p>  在系统时钟的控制下进行读出和写入</p><p>  CPU 无须等待</p></li><li><p> RDRAM</p><p>   主要解决 存储器带宽 问题 </p></li><li><p>带 Cache 的 DRAM  </p><p>  在 DRAM 的芯片内 集成 了一个由 SRAM 组成的  Cache ，有利于 <strong>猝发式读取</strong>。</p></li></ul><h2 id="高速缓冲存储器"><a href="#高速缓冲存储器" class="headerlink" title="高速缓冲存储器"></a>高速缓冲存储器</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>避免CPU空等现象出现：</p><p>因为CPU和主存之间的速度差异，所以需要引入一个缓存。</p><p><img src="/../images/image-20230313174609385.png" alt="image-20230313174609385"></p><h4 id="Cache的工作原理"><a href="#Cache的工作原理" class="headerlink" title="Cache的工作原理"></a>Cache的工作原理</h4><p>（1）主存和缓存的编址</p><p><img src="/../images/image-20230313203919251.png" alt="image-20230313203919251"></p><p>主存和缓存按块存储，块的大小相同。</p><p>（2）命中与未命中</p><p><strong>命中：</strong>主存块调入缓存，主存块与缓存块建立了对应关系。用标记记录与某缓存块建立了对应关系的主存块号。</p><p><strong>未命中：</strong>主存块未调入缓存，主存块与缓存块未建立对应关系。</p><p>（3）Cache的命中率</p><p>CPU欲访问信息在Cache中的比率。命中率与Cache的容量与快长有关。</p><p>（4）Cache-主存系统的效率</p><p>效率 e 与 命中率 有关。</p><p><img src="/../images/image-20230313204826595.png" alt="image-20230313204826595"></p><p>设 Cache 命中率 为 h，访问 Cache 的时间为 tc   ，  访问 主存 的时间为 tm</p><p><img src="/../images/image-20230313204908815.png" alt="image-20230313204908815"></p><h4 id="Cache的基本结构"><a href="#Cache的基本结构" class="headerlink" title="Cache的基本结构"></a>Cache的基本结构</h4><p><img src="/../images/image-20230313204937027.png" alt="image-20230313204937027"></p><h4 id="Cache的读写操作"><a href="#Cache的读写操作" class="headerlink" title="Cache的读写操作"></a>Cache的读写操作</h4><p>（1）读</p><p><img src="/../images/image-20230313205012942.png" alt="image-20230313205012942"></p><p>（2）写</p><ul><li><p>写直达法（write-through）</p><p>  写操作时数据既写入Cache又写入主存；写操作时间就是访问主存的时间，Cache块退出时， 不需要对主存执行写操作，更新策略比较容易实现。</p></li><li><p>写回法（write-back）</p><p>  写操作时只把数据写入 Cache 而不写入主存  当 Cache 数据被替换出去时才写回主存   写操作时间就是访问 Cache 的时间，Cache块退出时，被替换的块需写回主存，增加了  Cache 的复杂性。</p></li></ul><h4 id="Cache的改进"><a href="#Cache的改进" class="headerlink" title="Cache的改进"></a>Cache的改进</h4><p>（1）增加级数</p><p>（2）统一缓存和分立缓存</p><h3 id="Cache-主存的地址映射"><a href="#Cache-主存的地址映射" class="headerlink" title="Cache-主存的地址映射"></a>Cache-主存的地址映射</h3><h4 id="直接映射"><a href="#直接映射" class="headerlink" title="直接映射"></a>直接映射</h4><p><img src="/../images/image-20230313205958121.png" alt="image-20230313205958121"></p><p>每个主存块只有和一个缓存块对应，映射关系是<img src="../../../../../相册/typora/image-20230313210141032.png" alt="image-20230313210141032" style="zoom:67%;" />。</p><p><strong>缺点：</strong></p><p>直接映射不够灵活，因每个主存块只能固定地对应某个缓存块，即使缓存内还有很多空间也不能占用。程序恰好访问到要重复访问对应的缓存块，只能利用替换算法将缓存块中的数据替换。</p><h4 id="全相联映射"><a href="#全相联映射" class="headerlink" title="全相联映射"></a>全相联映射</h4><p><img src="/../images/image-20230313210704824.png" alt="image-20230313210704824"></p><p>主存 中的任一块可以映射到缓存中的任一块。这样一来确实解决了每个主存块只能够存储对应的缓存块，但是也导致了问题：首先是这样的电路设计复杂成本高，当我们需要缓存块对应的主存块时，需要对主存进行遍历。</p><h4 id="组相联映射"><a href="#组相联映射" class="headerlink" title="组相联映射"></a>组相联映射</h4><p><img src="/../images/image-20230313211237834.png" alt="image-20230313211237834"></p><p>某一主存块 j 按模 Q 映射到 缓存 的第 i 组中的 任一块</p><h3 id="替换算法"><a href="#替换算法" class="headerlink" title="替换算法"></a>替换算法</h3><ol><li>  先进先出 （ FIFO ）算法 </li><li>  近期最少使用（ LRU）算法 </li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统总线</title>
    <link href="/2024/02/01/%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF/"/>
    <url>/2024/02/01/%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h1><h2 id="总线概念"><a href="#总线概念" class="headerlink" title="总线概念"></a>总线概念</h2><p>总线是连接多个部件的信息传输线，是各部件共享的传输介质。如果出现两个或者两个以上的部件同时向总线发送信息，会导致信号冲突，传输失效。</p><p>总线上的信息传输可以分为串行或者并行，并且在线路上按照位传输，一般并行的线路传输距离会比较近，主要是并行线路会出现相互干扰。</p><h3 id="单总线结构图"><a href="#单总线结构图" class="headerlink" title="单总线结构图"></a>单总线结构图</h3><p><img src="/../images/image-20230304163516479.png" alt="image-20230304163516479"></p><h3 id="面向CPU的双总线结构图"><a href="#面向CPU的双总线结构图" class="headerlink" title="面向CPU的双总线结构图"></a>面向CPU的双总线结构图</h3><p><img src="/../images/image-20230304163555276.png" alt="image-20230304163555276"></p><h3 id="存储器为中心的双总线结构图"><a href="#存储器为中心的双总线结构图" class="headerlink" title="存储器为中心的双总线结构图"></a>存储器为中心的双总线结构图</h3><p><img src="/../images/image-20230304163629228.png" alt="image-20230304163629228"></p><h2 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h2><h3 id="片内总线"><a href="#片内总线" class="headerlink" title="片内总线"></a>片内总线</h3><p>芯片内部的总线</p><h3 id="系统总线-1"><a href="#系统总线-1" class="headerlink" title="系统总线"></a>系统总线</h3><p>计算机各部件之间的信息传输线，根据系统传输信息的不同分为：数据总线、地址总线、控制总线。</p><ul><li>  数据总线：是双向传输总线，其位数与机器字长、存储字长有关。</li><li>  地址总线：用来指明CPU欲访问的存储单元或者I/O端口的地址，由CPU输出，单向传输。地址线的位数和存储单元个数有关。</li><li>  控制总线：对任一控制线来说，传输是单向的，但是对于控制总线总体来说，可以认为是双向的。</li></ul><h3 id="通信总线"><a href="#通信总线" class="headerlink" title="通信总线"></a>通信总线</h3><p>用于计算机系统之间或计算机系统与其他系统（如控制仪表、移动通信等）之间的通信。</p><p>传输方式分为：串行通信和并行通信。</p><h2 id="总线特性及性能指标"><a href="#总线特性及性能指标" class="headerlink" title="总线特性及性能指标"></a>总线特性及性能指标</h2><h3 id="总线特性"><a href="#总线特性" class="headerlink" title="总线特性"></a>总线特性</h3><ul><li><p>机械特性</p><p>  尺寸、形状、管脚数 及 排列顺序</p></li><li><p>电气特性</p><p>  传输方向和有效的电平范围</p></li><li><p>功能特性</p><p>  每根传输线的功能：地址、数据、控制。</p></li><li><p>时间特性</p><p>  信号的时序关系</p></li></ul><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ol><li> 总线宽度：数据线的根数</li><li> 标准传输率：每秒传输的最大字节数（MBps）。</li><li> 时钟同步/异步</li><li> 总线复用</li><li> 信号线数</li><li> 总线控制方式</li><li> 负载能力等</li></ol><h3 id="总线标准"><a href="#总线标准" class="headerlink" title="总线标准"></a>总线标准</h3><p><img src="/../images/image-20230304165618416.png" alt="image-20230304165618416"></p><h2 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h2><p>总线结构通常分为<strong>单总线结构</strong>和<strong>多总线结构</strong>。</p><h3 id="单总线结构"><a href="#单总线结构" class="headerlink" title="单总线结构"></a>单总线结构</h3><p><img src="/../images/image-20230304165947100.png" alt="image-20230304165947100"></p><p>这种结构将CPU、主存、IO设备全部挂在一组总线上，这样的设计简单，也易于扩充。这类总线大多被小型计算机或者微型计算机使用。</p><h3 id="多总线结构"><a href="#多总线结构" class="headerlink" title="多总线结构"></a>多总线结构</h3><h4 id="双总线结构"><a href="#双总线结构" class="headerlink" title="双总线结构"></a>双总线结构</h4><p><img src="/../images/image-20230304170744467.png" alt="image-20230304170744467"></p><p>双总线结构的特点是将速度较低的IO设备分离出来，对IO设备进行统一的管理，系统的吞吐量可以相当大，这种结构大多用在大中型计算机系统。</p><h4 id="三总线结构"><a href="#三总线结构" class="headerlink" title="三总线结构"></a>三总线结构</h4><p><img src="/../images/image-20230304170711430.png" alt="image-20230304170711430"></p><p>三总线主要是将高速IO设备和低速IO设备进行了分离。主存总线和DMA总线不能够同时对主存进行存取，IO总线只有CPU执行IO指令才可以用到。</p><h4 id="三总线结构的又一式"><a href="#三总线结构的又一式" class="headerlink" title="三总线结构的又一式"></a>三总线结构的又一式</h4><p><img src="/../images/image-20230304171132456.png" alt="image-20230304171132456"></p><p>主要变化就是1、加上了Cache和局部总线，使得CPU可以与Cache和更多的局部IO设备连接。IO设备与主存的传输也不用经过CPU。2、还有一条扩展总线。</p><h4 id="四总线结构"><a href="#四总线结构" class="headerlink" title="四总线结构"></a>四总线结构</h4><p><img src="/../images/image-20230304171742212.png" alt="image-20230304171742212"></p><p>增加了一条高速总线，这种结构对于高速设备而言，其自身的工作很少依赖CPU，同时它们又比扩展总线上的设备更贴近CPU。</p><h3 id="总线结构举例"><a href="#总线结构举例" class="headerlink" title="总线结构举例"></a>总线结构举例</h3><h4 id="传统微型机总线结构"><a href="#传统微型机总线结构" class="headerlink" title="传统微型机总线结构"></a>传统微型机总线结构</h4><p><img src="/../images/image-20230304172032186.png" alt="image-20230304172032186"></p><h4 id="VL-UUS局部总线结构"><a href="#VL-UUS局部总线结构" class="headerlink" title="VL-UUS局部总线结构"></a>VL-UUS局部总线结构</h4><p><img src="/../images/image-20230304172054686.png" alt="image-20230304172054686"></p><h4 id="PCI总线结构"><a href="#PCI总线结构" class="headerlink" title="PCI总线结构"></a>PCI总线结构</h4><p><img src="/../images/image-20230304172115549.png" alt="image-20230304172115549"></p><h4 id="多层PCI总线结构"><a href="#多层PCI总线结构" class="headerlink" title="多层PCI总线结构"></a>多层PCI总线结构</h4><p><img src="/../images/image-20230304172140150.png" alt="image-20230304172140150"></p><h2 id="总线控制"><a href="#总线控制" class="headerlink" title="总线控制"></a>总线控制</h2><p>对于这么多的部件，在总线的争夺上，按照各部件的优先级来解决谁占用总线。</p><h3 id="总线判优控制"><a href="#总线判优控制" class="headerlink" title="总线判优控制"></a>总线判优控制</h3><p>主设备：<strong>对总线有</strong> <strong>控制权</strong></p><p>从设备：<strong>响应</strong> <strong>从主设备发来的总线命令</strong></p><p>总线判优控制：集中式、分布式。</p><p>常见的集中式有以下三种：</p><h4 id="链式查找"><a href="#链式查找" class="headerlink" title="链式查找"></a>链式查找</h4><p><img src="/../images/image-20230304173406070.png" alt="image-20230304173406070"></p><p>链式查找如果BG到达的接口有BR，BG信号就不会传递下去，并显示BS，也就是意味着该接口获得了总线使用权。</p><p>这种方式的特点是：</p><ul><li><p>  只需要很少的几根线就能够按一定优先级实现总线控制，并且很容易扩容。</p></li><li><p>  对电路故障很敏感</p></li><li><p>  优先级低的设备很难获得总线控制。</p></li></ul><p><strong>这种查找方式一般应用于微型计算机和嵌入式机器中。</strong></p><h4 id="计数器定时查询"><a href="#计数器定时查询" class="headerlink" title="计数器定时查询"></a>计数器定时查询</h4><p><img src="/../images/image-20230304174018910.png" alt="image-20230304174018910"></p><p>特点：</p><ul><li>  计数从0开始，按0-n的顺序降序排列，固定不动</li><li>  计数也可以从上一次计数终止点开始</li><li>  计数器的初始值可以由程序设置，优先次序可以改变</li></ul><h4 id="独立请求方式"><a href="#独立请求方式" class="headerlink" title="独立请求方式"></a>独立请求方式</h4><p><img src="/../images/image-20230304174335912.png" alt="image-20230304174335912"></p><p>特点：</p><ul><li>  响应速度快</li><li>  优先次序控制灵活</li><li>  控制线数量多</li><li>  总线控制复杂</li></ul><h3 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h3><p><strong>总线周期：</strong></p><p>①申请分配阶段：<strong>主模块申请</strong>，总线仲裁决定</p><p>②寻址阶段：<strong>主模块向从模块</strong> <strong>给出地址</strong> <strong>和</strong> <strong>命令</strong></p><p>③传数阶段：<strong>主模块和从模块</strong> <strong>交换数据</strong></p><p>④结束阶段：<strong>主模块</strong> <strong>撤消有关信息</strong></p><p>总线通信方式：同步通信、异步通信、半同步通信、分离式通信</p><h4 id="同步通信"><a href="#同步通信" class="headerlink" title="同步通信"></a>同步通信</h4><p><img src="/../images/image-20230304174940013.png" alt="image-20230304174940013"></p><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><p><img src="/../images/image-20230304175008087.png" alt="image-20230304175008087"></p><h4 id="半同步通信"><a href="#半同步通信" class="headerlink" title="半同步通信"></a>半同步通信</h4><p>同步：<strong>发送方</strong> <strong>用系统</strong> <strong>时钟前沿</strong> <strong>发信号</strong>、<strong>接收方</strong> <strong>用系统</strong> <strong>时钟后沿</strong> <strong>判断、识别</strong></p><p>异步：<strong>允许不同速度的模块和谐工作</strong>，增加一条“等待”响应信号** <strong>WAIT</strong></p><p><img src="/../images/image-20230304175143039.png" alt="image-20230304175143039"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机系统概论</title>
    <link href="/2024/02/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
    <url>/2024/02/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-1计算机系统简介"><a href="#1-1计算机系统简介" class="headerlink" title="1.1计算机系统简介"></a>1.1计算机系统简介</h1><p><img src="/../images/image-20230302103818677-1707501992494.png" alt="image-20230302103818677"></p><p><img src="/../images/image-20230302103832207-1707501997417.png" alt="image-20230302103832207"></p><p>计算机体系结构和计算机组成的区别：</p><ul><li>  计算机体系结构在于有无乘法指令</li><li>  计算机组成在于如何实现乘法指令</li></ul><h1 id="1-2计算机的基本组成"><a href="#1-2计算机的基本组成" class="headerlink" title="1.2计算机的基本组成"></a>1.2计算机的基本组成</h1><h2 id="冯·诺依曼计算机的特点"><a href="#冯·诺依曼计算机的特点" class="headerlink" title="冯·诺依曼计算机的特点"></a><strong>冯·诺依曼计算机的特点</strong></h2><ul><li><p>  计算机由五大部件组成</p></li><li><p>  指令和数据以同等地位存于存储器，可按地址寻访。</p></li><li><p>  指令和数据用二进制表示</p></li><li><p>  指令由操作码和地址码组成</p></li><li><p>  存储程序</p></li><li><p>  <strong>以运算器为中心</strong></p></li></ul><h2 id="硬件框图"><a href="#硬件框图" class="headerlink" title="硬件框图"></a>硬件框图</h2><p><img src="/../images/image-20230302193920259-1707502001479.png" alt="image-20230302193920259"></p><img src="../images/image-20230302193933581-1707502004326.png" alt="image-20230302193933581" style="zoom:80%;" /><h2 id="系统复杂性管理的方法"><a href="#系统复杂性管理的方法" class="headerlink" title="系统复杂性管理的方法"></a>系统复杂性管理的方法</h2><ul><li>  层次化</li><li>  模块化</li><li>  规则性</li></ul><h2 id="计算机的工作步骤"><a href="#计算机的工作步骤" class="headerlink" title="计算机的工作步骤"></a>计算机的工作步骤</h2><h3 id="1、上机前的准备"><a href="#1、上机前的准备" class="headerlink" title="1、上机前的准备"></a>1、上机前的准备</h3><ul><li><p>  建立数学模型</p></li><li><p>  确定计算方法</p></li><li><p>  编制解题程序</p></li></ul><p>计算机在编制解题程序的时候使用的操作码表示机器所执行的各种操作，如取数、存数、加、减、乘、除、停机、打印等。地址码表示参与运算的数在存储器中的位置。机器指令的操作码和地址码都是由0和1代码组合来表示。</p><h3 id="2、计算机工作过程"><a href="#2、计算机工作过程" class="headerlink" title="2、计算机工作过程"></a>2、计算机工作过程</h3><h4 id="（1）主存储器"><a href="#（1）主存储器" class="headerlink" title="（1）主存储器"></a>（1）主存储器</h4><img src="../images/image-20230303100710572.png" alt="image-20230303100710572" style="zoom:50%;" /><p><strong>存储器是由存储体+存储单元+存储元件构成。</strong></p><ul><li>  存储元件：存储一位0或者1二进制代码</li><li>  存储单元：存放一串二进制代码</li><li>  存储字：存储单元中二进制代码的组合</li><li>  存储字长：存储单元中二进制代码的位数，每个存储单元都赋予一个地址号。</li></ul><p><strong>为了实现按地址访问的方式，主存中还配备 了两个寄存器MAR和MDR。</strong></p><ul><li>  MAR：存储器地址寄存器反映存储单元的个数。</li><li>  MDR：存储器数据寄存器反映存储字长。</li></ul><h4 id="（2）运算器"><a href="#（2）运算器" class="headerlink" title="（2）运算器"></a>（2）运算器</h4><p>运算器最少包含3个寄存器和一个算术逻辑单元<strong>（ALU）</strong>。<strong>ACC</strong>为累加器、<strong>MQ</strong>为乘商寄存器、<strong>X</strong>为操作数寄存器。</p><p><img src="/../images/image-20230303101703776.png" alt="image-20230303101703776"></p><h4 id="（3）控制器"><a href="#（3）控制器" class="headerlink" title="（3）控制器"></a>（3）控制器</h4><ol><li> 功能：</li></ol><ul><li>  解释指令</li><li>  保证指令的按序执行</li></ul><ol start="2"><li> 基本组成：</li></ol><img src="../images/image-20230303102117752.png" alt="image-20230303102117752" style="zoom:50%;" /><p><strong>完成一条指令的过程：1、取指令PC；2、分析指令IR；3、执行指令CU。</strong></p><p>PC存放当前要执行指令的地址，具有计数功能（）PC）+1=PC；</p><p>IR存放当前欲执行的指令。</p><h4 id="（4）主机完成一条指令的过程"><a href="#（4）主机完成一条指令的过程" class="headerlink" title="（4）主机完成一条指令的过程"></a>（4）主机完成一条指令的过程</h4><ul><li>  取数指令</li></ul><p><img src="/../images/image-20230303102611032.png" alt="image-20230303102611032"></p><p>分析取数指令：</p><p>①PC用来存放当前欲执行指令的地址，有一条和MAR的直接通路，并且具有自动加1的功能。</p><p>②命令主存做读的操作，将读到的地址</p><p>③将主存中读到的内容送入MDR</p><p>④然后由MDR送至控制器的IR中，完成指令的取指过程</p><p>⑤经过CU分析，操作数是取数指令</p><p>⑥于是CU又将IR中的地址送入MAR</p><p>⑦命令存储器进行读操作</p><p>⑧将该地址单元操作数x送至MDR。</p><p>⑧再由MDR送至运算器的ACC，完成执行过程。</p><h4 id="（5）例题"><a href="#（5）例题" class="headerlink" title="（5）例题"></a>（5）例题</h4><p> **ax^2 **+ <strong>bx</strong> <strong>+</strong> <strong>c</strong> <strong>程序的运行过程</strong> ？</p><p><img src="/../images/image-20230303104023706.png" alt="image-20230303104023706"></p><h1 id="1-3计算机硬件的主要技术指标"><a href="#1-3计算机硬件的主要技术指标" class="headerlink" title="1.3计算机硬件的主要技术指标"></a>1.3计算机硬件的主要技术指标</h1><p>（1）机器字长</p><p>是指CPU一次能够处理的数据的位数，通常和CPU的寄存器位数有关。</p><p>（2）存储容量</p><p><img src="/../images/image-20230303105109921.png" alt="image-20230303105109921"></p><p>（3）运算速度</p><p><img src="/../images/image-20230303105133747.png" alt="image-20230303105133747"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机组成原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户级线程</title>
    <link href="/2024/02/01/%E7%94%A8%E6%88%B7%E7%BA%A7%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/02/01/%E7%94%A8%E6%88%B7%E7%BA%A7%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="用户级线程"><a href="#用户级线程" class="headerlink" title="用户级线程"></a>用户级线程</h1><blockquote><p>  首先什么是用户级线程？</p></blockquote><p>在回答这个问题之前我们需要先搞清楚什么是线程，线程就是指令切换，进程是指令加上资源。也就是线程是将资源分离了，分而治之。既保留了并发的优点又避免了进程切换的代价。线程的切换实质上就是映射表不变PC指针改变。那什么是用户级线程呢，我们后面再讲。</p><h2 id="线程的价值"><a href="#线程的价值" class="headerlink" title="线程的价值"></a>线程的价值</h2><p> 上面我们讲过了，线程就是只有切换指令而没有切换资源，这样的好处是什么？</p><p><img src="../images/image-20230421125943191.png" alt="image-20230421125943191" style="zoom: 25%;" /><img src="../images/image-20230421130000706.png" alt="image-20230421130000706" style="zoom:25%;" /></p><p>如上面的两幅图，如果没有用到多线程，加载所有资源都要用到一个线程，那么可能就会造成一开始网站上一点东西都没有，但是突然一下全部加载好了，这会造成用户体验极差。</p><p>多线程是利用同一张映射表，也就是资源是一样的。</p><h2 id="Yield"><a href="#Yield" class="headerlink" title="Yield()"></a>Yield()</h2><p>yield()函数就是用来切换线程的。函数在调用Yield()函数的时候并不知道自己要切换到哪个线程中，只是表明放弃对CPU的占有。Yield()函数是用户主动调用的，而不是放到内核中执行。</p><p>下面我们就通过代码的方式来说明Yield()的使用。</p><h3 id="两个执行序列一个栈"><a href="#两个执行序列一个栈" class="headerlink" title="两个执行序列一个栈"></a>两个执行序列一个栈</h3><img src="../images/image-20230421131029754.png" alt="image-20230421131029754" style="zoom:50%;" /><p>如上面的代码执行过程如下：</p><p>1、从A()函数开始，调用B()函数，并将104压入栈中。</p><p>2、进入B函数，调用Yield()函数，将204压入栈中，此时的csp是：<img src="../images/image-20230421131308941.png" alt="image-20230421131308941" style="zoom:50%;" />然后调用Yield()函数跳转到300。</p><img src="../images/image-20230421131344430.png" alt="image-20230421131344430" style="zoom:67%;" /><p>3、执行300处的C函数，调用D()，并将304压入栈中，最后调用D()执行Yield()函数，压入404，此时的csp为<img src="../images/image-20230421131529404.png" alt="image-20230421131529404" style="zoom:50%;" />。</p><p>4、也就是返回到了B函数的}。</p><blockquote><p>  思考：再往下执行会出现什么问题？</p></blockquote><p>在C语言中}表示ret也就是从栈中pop出元素。那么pop出的第一个元素就是404，也就是又回到了404所在的函数D中。但是我们预期设想的是希望返回到A中结束程序。</p><blockquote><p>  思考：上面暴露出了什么问题，怎么解决？</p></blockquote><p>上面暴露出了当两个执行序列公用一个栈的话，会造成栈中数据混乱的情况。那么我们就用两个栈保存线程的数据。</p><h3 id="两个栈解决问题"><a href="#两个栈解决问题" class="headerlink" title="两个栈解决问题"></a>两个栈解决问题</h3><p>两个栈和一个栈的Yield代码区别就在于引入了TCB，这个TCB和PCB相似，在这里TCB用于存栈顶地址，当调用了Yield(），首相先将csp中的值存入TCB中的esp也就是保存栈的信息。</p><img src="../images/image-20230421135319512.png" alt="image-20230421135319512" style="zoom:50%;" /><p>上面的jmp204应该去除，因为跳转地址保存在栈中。</p><blockquote><p>  现在我们对于两个线程的切换就是两个TCB、两个栈、切换的PC在栈中。也就是我们需要做到这几件事，那么谁帮我们来做，那就是ThreadCreate来创建线程并且初始化这些。</p></blockquote><h2 id="ThreadCreate"><a href="#ThreadCreate" class="headerlink" title="ThreadCreate()"></a>ThreadCreate()</h2><img src="../images/image-20230421135950096.png" alt="image-20230421135950096" style="zoom:67%;" /><p>通过上面的代码我们可以看出：ThreadCreate就是创建了一个TCB，并且创建了一个新的栈，来保存新线程的信息。</p><h2 id="为什么叫用户级线程"><a href="#为什么叫用户级线程" class="headerlink" title="为什么叫用户级线程"></a>为什么叫用户级线程</h2><img src="../images/image-20230421140642940.png" alt="image-20230421140642940" style="zoom:67%;" /><p>如果当线程需要调用硬件时，如果进程阻塞，就会切换到另一个进程，那么在原来进程上的所有线程将会处于宕机状态。因为操作系统感知不到用户级线程。</p><h2 id="引出内核级线程"><a href="#引出内核级线程" class="headerlink" title="引出内核级线程"></a>引出内核级线程</h2><img src="../images/image-20230421141024704.png" alt="image-20230421141024704" style="zoom:67%;" /><p>如果TCB在核心的话，再分配CPU调度的时候会更加有优势。</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统调用</title>
    <link href="/2024/02/01/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <url>/2024/02/01/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统的接口"><a href="#操作系统的接口" class="headerlink" title="操作系统的接口"></a>操作系统的接口</h1><p>在讲系统调用之前，谈一谈什么是操作系统的接口。学过高级语言的都知道所谓的接口就是API，比如我们需要调用支付宝付款的接口，那我们只要去查询支付宝开放的接口，我们就可以利用这个接口来联通支付宝的支付功能。（当然实际中没有这么简单）。</p><h2 id="命令是什么"><a href="#命令是什么" class="headerlink" title="命令是什么"></a>命令是什么</h2><p>在操作系统中，一条命令就是一段用C语言写的程序，那我们平时使用的图形界面都是什么呢，也就是一个包含画图功能的C程序。</p><h2 id="什么是操作系统接口"><a href="#什么是操作系统接口" class="headerlink" title="什么是操作系统接口"></a>什么是操作系统接口</h2><p>操作系统接口是连接操作系统和应用软件的连接者。通过普通的C代码加上一些重要的函数连接。</p><h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><p>例如实现一个whoami的系统调用：</p><img src="../images/image-20230417134526684.png" alt="image-20230417134526684" style="zoom:50%;" /><p>例如上面的函数，蓝色部分是用户程序，红色部分是内核程序。思考：为什么不能直接调用（以上的代码是错误的）？</p><p>因为如果可以自由的调用，那么操作系统内部的数据就非常容易被窃取，会造成电脑的不安全。所以操作系统将内核数据和用户数据隔离开来。也就是用户代码称为<strong>用户态</strong>，系统代码称为<strong>内核态</strong>。</p><p>继续思考，为什么内核态不能访问到，明明都是在一个内存中。</p><p>这就需要引出权限级的作用了，由于CS：IP是当前命令，所以用CS的最低两位来表示：0是内核态，3是用户态。</p><p>当CPL=3时，用户态不能够访问内核数据；当CPL=0时，内核态可以访问任何的数据。</p><p>但是难道就这样？我们没有办法进入内核吗？</p><h2 id="硬件提供了主动进入内核的方法。"><a href="#硬件提供了主动进入内核的方法。" class="headerlink" title="硬件提供了主动进入内核的方法。"></a>硬件提供了主动进入内核的方法。</h2><p>对于x86计算机，提供中断指令int。int指令使得CS中的CPL置为0，也就是获得最高的权限级。由此进入内核。</p><p>这也是用户程序调用内核程序的唯一办法。</p><p>所以我们到这里就可以引出系统<strong>调用的核心</strong>：</p><ul><li>  用户程序中包含着一段有int指令的代码（在库函数中）。</li><li>  操作系统写中断处理，获取想调程序的编号。</li><li>  操作系统根据编号执行相关的代码</li></ul><p><strong>注：在操作系统内部设计的时候还没有用到封装的思想，所以这些都是一种硬件设计。</strong></p><h2 id="系统调用的具体实现"><a href="#系统调用的具体实现" class="headerlink" title="系统调用的具体实现"></a>系统调用的具体实现</h2><p>先说说大概思路：</p><img src="../images/image-20230417140642368.png" alt="image-20230417140642368" style="zoom:50%;" /><p>这里调用的是write函数。</p><p>（1）</p><p><img src="/../images/image-20230417140905868.png" alt="image-20230417140905868"></p><p>_syscall3是一个宏，其中有3个参数。</p><p>_NR_write是一个系统调用号，放在eax中。同时eax也存放返回值，ebx，ecx，edx存放3个参数。</p><p>（2）int 0x80中断的处理</p><p>set_system_gate是用来设置0x80的中断处理：</p><p><img src="/../images/image-20230417141528411.png" alt="image-20230417141528411"></p><p>（3）中断处理程序</p><p><img src="/../images/image-20230417141622063.png" alt="image-20230417141622063"></p><p>其中**_sys_call_table+4*%eax**就是相应系统调用处理函数入口</p><p>（4）_sys_call_table</p><p><img src="/../images/image-20230417141711351.png" alt="image-20230417141711351"></p><p><strong>call _sys_call_table(,%eax,4)<strong>就是</strong>call sys_write</strong></p><p>总结整个的调用过程：</p><p><img src="/../images/image-20230417141835449.png" alt="image-20230417141835449"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内核级线程</title>
    <link href="/2024/02/01/%E5%86%85%E6%A0%B8%E7%BA%A7%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/02/01/%E5%86%85%E6%A0%B8%E7%BA%A7%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="内核级线程"><a href="#内核级线程" class="headerlink" title="内核级线程"></a>内核级线程</h1><h2 id="在多核处理器中内核级线程的作用"><a href="#在多核处理器中内核级线程的作用" class="headerlink" title="在多核处理器中内核级线程的作用"></a>在多核处理器中内核级线程的作用</h2><p><img src="/../images/image-20230421141717209.png" alt="image-20230421141717209"></p><p>在多核的处理器中，多线程可以使用多核硬件并行使用。</p><h2 id="内核级线程的栈实现"><a href="#内核级线程的栈实现" class="headerlink" title="内核级线程的栈实现"></a>内核级线程的栈实现</h2><p>ThreadCreate是系统调用，内核管理TCB，内核负责切换线程。那在用户级线程中我们通过TCB将一个栈关联进行切换栈操作。</p><img src="../images/image-20230421142422797.png" alt="image-20230421142422797" style="zoom:67%;" /><p>在内核级线程中我们通过将用户栈和内核栈关联的方式将一个栈变为一套栈来使用。</p><h3 id="用户栈和内核栈之间关联。"><a href="#用户栈和内核栈之间关联。" class="headerlink" title="用户栈和内核栈之间关联。"></a>用户栈和内核栈之间关联。</h3><img src="../images/image-20230421143219079.png" alt="image-20230421143219079" style="zoom:67%;" /><p>用户栈通过int中断进入内核栈，内核栈通过iret返回到用户栈。</p><img src="../images/image-20230421143336742.png" alt="image-20230421143336742" style="zoom:67%;" /><p>我们分析一下上面的代码：首先用户态中执行A、B函数将104、204压入用户栈中，然后执行read函数时，执行int中断程序进入内核态。此时SS记录用户栈的栈基地址，SP记录用户栈的栈顶。CS记录段基址。然后执行1000，执行sys_read()执行内核函数。</p><p>一旦启动内核读就会造成磁盘阻塞，就要开始调度，找到next线程。switch_to(cur,next);这里的switch_to 交换的是线程的TCB。</p><p><img src="../images/image-20230421144813924.png" alt="image-20230421144813924" style="zoom: 33%;" /><img src="../images/image-20230421144726508.png" alt="image-20230421144726508" style="zoom: 50%;" /></p><p>其中？？？中应该是：sys_read函数的某一个地方。</p><p>？？：interrupt之前的某一个地方</p><p>线程T创建的CS=？？中填写线程T的开始地址。？？？？是一段能完成二级返回的包含iret的代码。</p><h2 id="内核线程switch-to的五段论"><a href="#内核线程switch-to的五段论" class="headerlink" title="内核线程switch_to的五段论"></a>内核线程switch_to的五段论</h2><p><img src="/../images/image-20230421145522689.png" alt="image-20230421145522689"></p><p>五段论的执行过程：</p><p>1、首先是进入切换，也就是进入中断入口。利用int函数进入内核。调用call中断处理程序。</p><p>2、然后在中断处理程序中，如果程序启动磁盘或者时钟中断则引发切换，调用schedule()函数。</p><p>3、进入schedule函数中，next找到下一个TCB。也就是记录下一个线程控制块。然后调用switch_to函数。</p><p>4、进入switch_to函数，将esp寄存器中的数据保存在TCB中，然后将下一个TCB中的csp盖到esp寄存器上。然后ret。</p><p>5、中断出口，带有iret指令的代码。</p><h2 id="ThreadCreate（）"><a href="#ThreadCreate（）" class="headerlink" title="ThreadCreate（）"></a>ThreadCreate（）</h2><img src="../images/image-20230421145550347.png" alt="image-20230421145550347" style="zoom:67%;" /><p><img src="/../images/image-20230421145634488.png" alt="image-20230421145634488"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程图像</title>
    <link href="/2024/02/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9B%BE%E5%83%8F/"/>
    <url>/2024/02/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9B%BE%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程图像"><a href="#多线程图像" class="headerlink" title="多线程图像"></a>多线程图像</h1><h2 id="引入进程的概念"><a href="#引入进程的概念" class="headerlink" title="引入进程的概念"></a>引入进程的概念</h2><p>我们都是到CPU的工作原理就是通过取指执行，我们需要做的就是给CPU一个PC指针指向要执行的指令，CPU就会自己执行下去，那这样会不会有什么问题出现？</p><p>例如下面的一段代码：</p><img src="../images/image-20230418122852332.png" alt="image-20230418122852332" style="zoom: 80%;" /><p>如果CPU要去执行这段代码，我们就知道设定PC初值指向第一个C语句。然后cpu一条一条执行下去，可以执行，但是分析CPU这样一条一条的执行下去会出现什么问题？</p><p>注意看fprintf语句，这是一条IO指令，IO指令意味着什么，意味着CPU需要请求IO设备也就是这个过程中CPU是处于空闲的状态的。那我们怎么提高CPU的利用效率？</p><p><img src="/../images/image-20230418123427216.png" alt="image-20230418123427216"></p><p>利用并行的方式，也就是<strong>多道程序、交替执行</strong>。</p><p><strong>思考：</strong>那怎么切换到另一个程序上呢？</p><p>答案也很简单就只要修改PC的值就好了，但是这里如果只修改PC的值之后会出现很多问题，我们之后再作讨论。</p><p><strong>思考：</strong>修改了PC就好了吗？</p><p>当然不是，要把正在运行的程序进行保存，等到切回来的时候不会出现什么错误。所以这里就需要引出一个概念，Linux0.11 设计了一个结构体：<code>struct task_struct&#123;...&#125;</code>，用于记录进程的“样子”，每个进程都有一个该结构体的对象——PCB（进程控制块）。</p><p><strong>思考：</strong>那么进程是什么呢？</p><p>进程就是进行中的程序，用户控制操作系统核心就是控制进程。</p><h2 id="多进程图像"><a href="#多进程图像" class="headerlink" title="多进程图像"></a>多进程图像</h2><h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><p>main中的fork()创建了一个子进程，fork()的执行过程如下：</p><ul><li>  fork()内执行int 0x80，进入内核</li><li>  执行system_call程序</li><li>  执行sys_fork程序</li><li>  执行copy_process()函数</li></ul><p>其中copy_process()才是创建子进程的地方。</p><p>创建了一个fork()以后就是会执行init()，执行了init()后会执行一个shell（就如同windows桌面程序被弹出）。也就是一个命令启动一个进程，返回shell然后再启动其他的进程。</p><p><strong>思考：</strong>多进程怎么进行存放？</p><p>前面我们说过，利用PCB来存放一个进程的所有信息。那么很多个进程就可以利用队列的方式，多进程的组织就是：PCB+状态+队列。</p><p><img src="/../images/image-20230418131911801.png" alt="image-20230418131911801"></p><p>上面的图称为<strong>进程状态图</strong>。</p><h3 id="进程的交替"><a href="#进程的交替" class="headerlink" title="进程的交替"></a>进程的交替</h3><p>进程是如何进行交替的，这也是多线程图像的核心部分</p><p><img src="/../images/image-20230418132430676.png" alt="image-20230418132430676"></p><p>例如上面的例子：</p><p>假如程序运行到了启动磁盘读写，则将该进程的状态置为W(阻塞)，然后将该进程放入阻塞队列中，然后执行schedule()进行切换。schedule中先进行了线程的调度，然后利用switch_to将当前进程的寄存器状态保存起来，然后将下一个进程的内容扣在CPU寄存器中。</p><p><strong>进程交替三个部分:</strong></p><p>队列操作+调度+切换。</p><p>进程的调度可以是FIFO或者按照Priority。</p><h3 id="进程之间的影响"><a href="#进程之间的影响" class="headerlink" title="进程之间的影响"></a>进程之间的影响</h3><p>多个进程如果同时存在于内存会出现以下问题：</p><p><img src="/../images/image-20230418133621694.png" alt="image-20230418133621694"></p><p>也就是进程1调用了进程2的代码。</p><p>解决的方法就是：限制对地址100的读写，而通过映射的方式进行读写。如下图。</p><p><img src="/../images/image-20230418133753672.png" alt="image-20230418133753672"></p><h3 id="多进程怎么合作"><a href="#多进程怎么合作" class="headerlink" title="多进程怎么合作"></a>多进程怎么合作</h3><p><img src="/../images/image-20230418134536626.png" alt="image-20230418134536626"></p><p>现在有两个进程同时操作一个共享数据。</p><p><strong>思考</strong>：会出现什么问题？</p><p>如果我们执行以下的操作：</p><p><img src="/../images/image-20230418134641511.png" alt="image-20230418134641511"></p><p><img src="/../images/image-20230418134708475.png" alt="image-20230418134708475"></p><p>那么一个可能的执行序列会是这样的：</p><p><img src="/../images/image-20230418134735512.png" alt="image-20230418134735512"></p><p><strong>解决：</strong></p><p>利用进程同步，也就是给进程加锁。</p><p><img src="/../images/image-20230418134834512.png" alt="image-20230418134834512"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDT和LDT</title>
    <link href="/2024/02/01/GDT%E5%92%8CLDT/"/>
    <url>/2024/02/01/GDT%E5%92%8CLDT/</url>
    
    <content type="html"><![CDATA[<h1 id="GDT和LDT"><a href="#GDT和LDT" class="headerlink" title="GDT和LDT"></a>GDT和LDT</h1><p>从前面的操作系统加载过程中我们知道了操作系统在加载中会改变寻址方式，也就是实模式和保护模式下的寻址方式的改变。</p><p>下面我们就通过寻址方式展开说一下背后的原理以及GDT和LDT的工作内容。</p><h2 id="内存寻址"><a href="#内存寻址" class="headerlink" title="内存寻址"></a>内存寻址</h2><h3 id="实模式下的内存寻址"><a href="#实模式下的内存寻址" class="headerlink" title="实模式下的内存寻址"></a>实模式下的内存寻址</h3><p>实模式下的内存寻址就是如下的公式：</p><blockquote><p>  段首地址*16+偏移地址=物理地址</p></blockquote><p>因为在8086CPU内部有20条地址线，但是寄存器的大小都是16位的，也就是寻址范围是64KB，如果要用到20条地址线就需要通过地址加法器来将两个16位的地址合成一个20位的地址。</p><h3 id="保护模式下分段机制的内存寻址"><a href="#保护模式下分段机制的内存寻址" class="headerlink" title="保护模式下分段机制的内存寻址"></a>保护模式下分段机制的内存寻址</h3><p>保护模式下的内存寻址范围是4G，能达到这么广范围的寻址，靠原来的实模式下的内存寻址肯定是满足不了，但是可以通过GDT来实现，什么是GDT，GDT在哪里，GDT又是怎么实现这么多的地址寻址的，我们一个一个讲。</p><p>先说说寻址的规则：</p><p>了解几个概念先：</p><ul><li>  段选择子：对应的就是段地址，只是把ds和cs等段寄存器当作段选择子，也就是不通过直接利用`段地址：偏移地址来定位内存单元。</li><li>  段描述表（GDT）：我们解决了什么是GDT，是一张表，也就是可以理解成数组，而段选择子就是它的索引。</li><li>  段描述符：我们拿到GDT要干什么，那一定是要把里面的只拿出来当作我们的段地址，所以GDT中保存的内容就是段描述符，也就相当于数组中的值。</li></ul><p>说完了概念我们讲一下在保护模式下怎么寻址：</p><blockquote><p>  段描述符中的段基址+偏移量=物理地址</p></blockquote><h2 id="什么是GDT"><a href="#什么是GDT" class="headerlink" title="什么是GDT"></a>什么是GDT</h2><p>上面我们只是浅浅的说了一下什么是GDT，现在我们深入了解一下。</p><p>GDT称为全局描述符表，只有一张且全局可见，存放在内存中的任何地方</p><p><img src="/../images/5021220a0a4241c59c7c94f41eb29dc7.png" alt="图2.1 段描述符"></p><p>看到上面的这幅图一定非常的😵。下面我解读一下：</p><ul><li>  G：颗粒度。当G=0时，段限长的20位为实际段限长，最大限长为2^20=1MB；当G=1时，实际段限长为20位段限长乘以2^12=4KB，最大限长达到4GB。</li><li>  DPL：特权级。0表示最高特权级，3表示最低特权级，和CPL相比，CPL是当前的进程特权级，如果CPL(权级)&gt;DPL，则可以通行，反之不能通行。</li><li>  基地址：基地址总共32位，寻址范围为4G。</li></ul><h2 id="GDT在哪"><a href="#GDT在哪" class="headerlink" title="GDT在哪"></a>GDT在哪</h2><p>GDT存放在内存中，但是我们怎么找到它呢？</p><p>当然是有一个入口去记录GDT的地址，那么这个入口就是一个叫做GDTR的寄存器（48bits）来存放入口地址。下面是GDTR的结构：</p><p><img src="/../images/20200101200022770.png" alt="图3.1 GDT结构图"></p><p>指令LGDT和SGDT分别用于加载和保存GDTR寄存器的内容。</p><h2 id="什么是LDT"><a href="#什么是LDT" class="headerlink" title="什么是LDT"></a>什么是LDT</h2><p>LDT是局部段描述符表，和GDT的结构相似。</p><p>在内存中可以有好多个LDT，但是在一个任务中最多只有一个LDT，并且每个LDT又是当作一个段记录在GDT中。</p><p>如果每个任务都有LDT那么切换任务时就需要修改LDTR，修改的方式就是通过LLDT指令将下一个任务的LDT的段描述符的段选择子装入此寄存器。</p><p><img src="/../images/13d1a9632c714a3ca1e96c1e07e937b9.png" alt="图4.1 Linux0.11中的 GDT 和 LDT"></p><h2 id="段选择子"><a href="#段选择子" class="headerlink" title="段选择子"></a>段选择子</h2><p>段选择子就是原来的各个段寄存器，但是并不是每一个段选择子都是段寄存器，而是根据汇编语言来控制的，例如jmpi 0 8。就是利用常数表示选择子。</p><p>段选择子大小为 16bit。段选择子包括三部分：描述符索引（index）、TI、请求特权级（RPL）。其中index占13位、TI占1位、RPL占2位。</p><ul><li><p>  TI 值只有一位0或1，0代表选择子是在 GDT 中索引，1代表选择子是在 LDT 中索引。</p></li><li><p>  请求特权级（RPL）则代表选择子的特权级，共有4个特权级（0级、1级、2级、3级）。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="访问-GDT"><a href="#访问-GDT" class="headerlink" title="访问 GDT"></a>访问 GDT</h3><p><img src="/../images/20200101203309645.png" alt="图6.1 通过访问 GDT 寻址"></p><h3 id="访问-LDT"><a href="#访问-LDT" class="headerlink" title="访问 LDT"></a>访问 LDT</h3><p><img src="/../images/20200101203425902.png" alt="图6.2 通过访问 LDT 寻址"></p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>80x86保护模式</title>
    <link href="/2024/02/01/80x86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/02/01/80x86%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="80x86保护模式"><a href="#80x86保护模式" class="headerlink" title="80x86保护模式"></a>80x86保护模式</h1><p>通过这一篇文章可以了解到x86保护模式的内存管理、各种保护措施、中断和异常处理、任务管理、保护模式编程的初始化，最后就是一个简单的内核案例。</p><p>注意：写在前面，我们研究x86保护模式实际上还没有进入操作系统的内核，这都是CPU已经设定好的一些功能，但是我们必须掌握这种架构的设计与使用，Linux系统中虽然有一些功能并没有使用到，但是了解一个体系结构永远都不会是过时的。</p><p>以下是总结式笔记，内容不全</p><h2 id="系统寄存器"><a href="#系统寄存器" class="headerlink" title="系统寄存器"></a>系统寄存器</h2><ul><li>  标志寄存器</li><li>  内存管理寄存器</li><li>  控制寄存器</li></ul><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p>简单来说，标志寄存器EFLAGS中的系统标志和IOPL字段是用来控制IO访问、可屏蔽硬件中断、调试、任务切换、虚拟8086模式</p><h3 id="内存管理寄存器"><a href="#内存管理寄存器" class="headerlink" title="内存管理寄存器"></a>内存管理寄存器</h3><p>GDTR、IDTR、LDTR、TR。首先这4个寄存器都是段基址寄存器。</p><h4 id="全局描述符表寄存器GDTR"><a href="#全局描述符表寄存器GDTR" class="headerlink" title="全局描述符表寄存器GDTR"></a>全局描述符表寄存器GDTR</h4><p>GDTR看名字就知道是用来存储GDT表的地址。用于保存全局描述符表GDT的32位线性基地址和16位的表限长度。</p><p>在保护模式初始化过程中必须要给GDTR加载一个新值。</p><h4 id="中断描述符表寄存器IDTR"><a href="#中断描述符表寄存器IDTR" class="headerlink" title="中断描述符表寄存器IDTR"></a>中断描述符表寄存器IDTR</h4><p>其中记录的是IDT表的32位的线性基地址和16位表限长度。</p><h4 id="局部描述符表寄存器LDTR"><a href="#局部描述符表寄存器LDTR" class="headerlink" title="局部描述符表寄存器LDTR"></a>局部描述符表寄存器LDTR</h4><p>同样是记录LDT表的32位基地址和16位的表限长度。</p><h4 id="任务寄存器TR"><a href="#任务寄存器TR" class="headerlink" title="任务寄存器TR"></a>任务寄存器TR</h4><p>用于存储当前任务的TSS段的16位段选择符和32位基地址和16位段长度和描述符属性值</p><h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><p>控制寄存器（CR0-CR3）用于控制和确定处理器的操作模式以及当前执行任务的特性。</p><p>这里重点讲一下CR0。</p><h4 id="CR0"><a href="#CR0" class="headerlink" title="CR0"></a>CR0</h4><p>CR0中含有控制处理器操作模式和状态的系统控制标志。</p><p>CR0中的保护控制位：</p><ul><li>  PE：启动保护标志。当设置PE=0时，表示处于实地址模式，当设置位1时表示运行在保护模式下。PE是用来控制分段机制。</li><li>  PG：用来控制分页机制，分段机制和分页机制我会在后面讲解，分段和分页对于x86寻址起到了非常大的作用。PG=1时，开启了分页机制，反之关闭。有一个特例就是当PE=0,PG=1时因为不在保护模式下不能够开启分页机制。</li></ul><h2 id="保护模式内存管理"><a href="#保护模式内存管理" class="headerlink" title="保护模式内存管理"></a>保护模式内存管理</h2><p>0</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统是怎么启动的</title>
    <link href="/2024/02/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E6%80%8E%E4%B9%88%E5%90%AF%E5%8A%A8%E7%9A%84/"/>
    <url>/2024/02/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E6%80%8E%E4%B9%88%E5%90%AF%E5%8A%A8%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统的启动"><a href="#操作系统的启动" class="headerlink" title="操作系统的启动"></a>操作系统的启动</h1><p>引入：在下面这块开机启动界面的背后发生了什么，倒是我们可以在这块冰冷的屏幕上面显示精彩的内容，操作系统在里面起到什么样的角色，又是任何从机器中读取代码和解释代码的呢？</p><p><img src="/../images/image-20230414135655373.png" alt="image-20230414135655373"></p><h2 id="计算机上电"><a href="#计算机上电" class="headerlink" title="计算机上电"></a>计算机上电</h2><ul><li>  刚开机，内存中没有任何的程序，只有BIOS可以执行。X86PC处于实模式（和保护模式相对，实模式的寻址CS:IP，和保护模式不同），寻址方式和我们学过的8086一样，寻址范围为20位也就是1M。开机时 <code>CS = 0xFFFF； IP = 0x0000</code>，那么就是寻址<code>0xFFFF0</code>地址，而这个地址存储的就是ROM BIOS映射区（计算机初始化过程中会把BIOS代码复制到ROMBIOS映射区）。</li></ul><p>以上内容就是在将CPU首先从ROＭ BIOS映射区开始执行。那么BIOS是用来干嘛的呢</p><ul><li>  该程序主要负责检测系统硬件是否正常，并建立中断向量表（这只是供操作系统使用，操作系统初始化以后就会覆盖，并且建立新的中断向量表）。</li><li>  在ROM BIOS映射区的代码执行到最后，就会将操作系统启动程序（bootsect.s）从0磁盘0扇区复制到内存<code>0X07C00</code>处，并且设置CS=<code>0X07C0</code>,IP=<code>0x0000</code></li><li>  最后cpu转移到bootsect.s开始执行。</li></ul><p><img src="/../images/image-20230414103136676.png" alt="image-20230414103136676"></p><p>操作系统程序在磁盘中的分布情况：</p><p><img src="/../images/image-20230414103359727.png" alt="image-20230414103359727"></p><h2 id="引导扇区代码-bootsect-s（实模式下运行的16位汇编代码程序，8086汇编语言）"><a href="#引导扇区代码-bootsect-s（实模式下运行的16位汇编代码程序，8086汇编语言）" class="headerlink" title="引导扇区代码:bootsect.s（实模式下运行的16位汇编代码程序，8086汇编语言）"></a>引导扇区代码:bootsect.s（实模式下运行的16位汇编代码程序，8086汇编语言）</h2><p>bootsect.s是操作系统的引导程序，是操作系统执行的第一个程序，bootsect.s工作如下：</p><p>1、将自己的程序搬运到0x9000开始的位置（为后续的system的挪用腾出位置），也就是将0x07c0:0x0000处的256个字全部移动到0x9000，然后跳转到0x90000+go处执行程序，bootsect.s的大小不会超过一个扇区，磁盘的0扇区只存bootsect.s。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">_start:   ！第46行<br>movax,#BOOTSEG<br>movds,ax<br>movax,#INITSEG<br>moves,ax<br>movcx,#256<br>subsi,si<br>subdi,di<br>rep   <br>movw    ！将自己搬到0X90000处<br>jmpigo,INITSEG    ！跳转至0X90000+go 处执行程序<br>go:movax,cs<br></code></pre></td></tr></table></figure><p>注：jmpi     ip，cs</p><p>2、将setup从磁盘第2块扇区开始到第4块扇区加载到内存0x90200位置处，也就是紧接着bootsect。然后利用BIOS中断(int 0x13) 取磁盘参数表中当前启动引导盘的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">load_setup:     ！第67行<br>movdx,#0x0000! drive 0, head 0<br>movcx,#0x0002! sector 2, track 0<br>movbx,#0x0200! address = 512, in INITSEG<br>movax,#0x0200+SETUPLEN! service 2, nr of sectors<br>int0x13! read it<br>jncok_load_setup! ok - continue<br></code></pre></td></tr></table></figure><p>注：0x13是BIOS读磁盘扇区的中断。</p><p>3、接着在屏幕上显示”Loading system“</p><p>4、读入setup模块以后：ok_load_setup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">Ok_load_setup: //载入setup模块<br>    mov dl,#0x00 mov ax,#0x0800 //ah=8获得磁盘参数<br>    int 0x13 mov ch,#0x00 mov sectors,cx<br>    mov ah,#0x03 xor bh,bh int 0x10 //读光标<br>    mov cx,#24 mov bx,#0x0007<br>    mov bp,#msg1 mov ax,#1301 int 0x10 //显示字符<br>    mov ax,#SYSSEG //SYSSEG=0x1000 <br>    mov es,ax <br>    call read_it //读入system模块<br>    jmpi 0,SETUPSEG<br></code></pre></td></tr></table></figure><p>5、读入system模块</p><p>将 system 模块的代码从磁盘搬到内存0x10000开始的位置。SYSSIZE = 0x3000 is 0x30000 bytes = 196kB 。Linux0.11中默认内核大小不会超过196KB。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">movax,#SYSSEG   ！第107行<br>moves,ax! segment of 0x010000<br>callread_it<br>...<br>read_it:<br>...<br>read_track:<br>...<br>mov dx,head  ！head.s是system模块的第一个程序<br>mov dh,dl<br>mov dl,#0<br>and dx,#0x0100<br>mov ah,#2<br>int 0x13   !这才是正式开始搬运system模块。<br>...<br></code></pre></td></tr></table></figure><p>因为system模块可能很大，要跨越磁道，所以需要定义一个函数。</p><p>6、确定根文件系统的设备号。</p><p>7、跳转至setup执行，移交控制权</p><p><strong>bootsect.s的工作总结:bootsect.s主要就是加载setup和读system</strong></p><h2 id="操作系统的启动setup-s（实模式下运行的-16-位汇编代码程序，8086-汇编语言）"><a href="#操作系统的启动setup-s（实模式下运行的-16-位汇编代码程序，8086-汇编语言）" class="headerlink" title="操作系统的启动setup.s（实模式下运行的 16 位汇编代码程序，8086 汇编语言）"></a>操作系统的启动setup.s（实模式下运行的 16 位汇编代码程序，8086 汇编语言）</h2><p>setup是一个操作系统加载程序，就是完成OS启动前的设置，setup的工作如下：</p><p>1、利用BIOS的中断获取计算机参数（内存大小，磁盘参数、显示器参数等），并将参数存入0X90000开始的位置（将bootsect.s覆盖掉）。获取的参数如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/17731575-630c494ee7d7cf66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/766/format/webp" alt="img"></p><p>2、将system模块从 0x10000 - 0x8ffff (当时认为内核系统模块 system 的长度不会超过此值 512KB) 整块向下移动到内存绝对地址 0x00000 处。这意味着原来的 BIOS 中断向量表被覆盖了（问题：中断向量表是用来干什么的）。</p><p>3、接下来加载中断描述符表寄存器（idtr）和全局描述符寄存器（gdtr），建立idt和gdt，但是这只是个临时表，之后会重新设置gdt和idt，这里是为了方便cpu进入保护模式时能正确寻址（这里主要是为了保证能跳到system模块执行）。设置8259芯片，重新设置中断向量表。</p><p>4、设置CPU控制寄存器CR0（称为机器状态字），CPU进入32位保护模式，程序跳转到物理内存起始位置开始执行。保护模式下和实模式下的int n和cs:ip解释不同。</p><p>5、最后跳转到位于system模块最前面的head.s程序继续执行。</p><p><strong>补充1：cr0寄存器</strong></p><ul><li>  PE端=0 为实模式</li><li>  PE端=1 为保护模式</li><li>  PG端=1 启动分页</li></ul><p><strong>补充2：32位的寻址方式</strong></p><p>因为20位地址只能够寻址1M的寻址范围，所以需要32位寻址范围为4G。</p><ul><li>  CS成为选择子：放置查表索引</li><li>  根据表项产生地址</li><li>  <strong>setup需初始化GDT表</strong></li><li>  使用GDT表项，将jmp 0,8（setup.s末句）寻址为0地址</li></ul><p><strong>补充3：中断处理IDT</strong>(待补充)</p><h2 id="执行head-s（运行在保护模式下的-32-位汇编代码程序，AT-amp-T-语法的汇编语言程序）"><a href="#执行head-s（运行在保护模式下的-32-位汇编代码程序，AT-amp-T-语法的汇编语言程序）" class="headerlink" title="执行head.s（运行在保护模式下的 32 位汇编代码程序，AT&amp;T 语法的汇编语言程序）"></a>执行head.s（运行在保护模式下的 32 位汇编代码程序，AT&amp;T 语法的汇编语言程序）</h2><p>它将进一步进行操作系统的初始化，head.s 程序在被编译生成目标文件后会与内核其他程序一起被链接成 system 模块，位于 system 模块的最前面开始部分。从这里开始内核就完全在保护模式下运行了，该程序位于内存绝对地址为0处开始。</p><p>工作内容：</p><p>1、首先加载各个数据段寄存器，重新设置IDT</p><p>2、重新设置GDT</p><p>3、检查A20地址线是否打开</p><p>4、设置管理内存的分页处理机制，将页目录表放在绝对物理地址0开始处。</p><p>5、最后heads程序返回指令将预先放置在堆栈中的main.c程序入口弹出，运行main()。</p><p><strong>补充1：</strong></p><p>heads怎么跳到main函数的？从汇编语言跳到c语言要经过怎么样的操作？</p><p>答：首先先将参数、返回值、main压入栈，然后通过ret一个一个出栈，如下图所示：</p><p><img src="/../images/image-20230414144150917.png" alt="image-20230414144150917"></p><p>main是一个永远都不会退出的程序，因为退出就会造成死机。</p><p><strong>补充2</strong>：</p><p>mem_init初始化过程</p><p><img src="/../images/image-20230414144613600.png" alt="image-20230414144613600"></p><p>以上的代码就是初始化了一个称为mem_map的表结构，有些表不为空就说明是存放操作系统的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>操作系统启动加载的过程简单来说就是：以加载mem_init()为例子：bootsect.s-&gt;setup.s-&gt;head.s-&gt;main()-&gt;mem_init()</p><h1 id="实验一：操作系统的引导"><a href="#实验一：操作系统的引导" class="headerlink" title="实验一：操作系统的引导"></a>实验一：操作系统的引导</h1>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伙伴匹配项目笔记</title>
    <link href="/2024/01/31/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/01/31/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="鱼泡-伙伴匹配系统"><a href="#鱼泡-伙伴匹配系统" class="headerlink" title="鱼泡 - 伙伴匹配系统"></a>鱼泡 - 伙伴匹配系统</h1><p>介绍：帮助大家找到志同道合的伙伴，移动端 H5 网页（尽量兼容 PC 端）</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>用户去添加标签，标签的分类（要有哪些标签、怎么把标签进行分类）学习方向 java / c++，工作 / 大学</li><li>主动搜索：允许用户根据标签去搜索其他用户<ol><li>Redis 缓存</li></ol></li><li>组队<ol><li>创建队伍</li><li>加入队伍</li><li>根据标签查询队伍</li><li>邀请其他人</li></ol></li><li>允许用户去修改标签</li><li>推荐<ol><li>相似度计算算法 + 本地分布式计算</li></ol></li></ol><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol><li>Vue 3 开发框架（提高页面开发的效率）</li><li>Vant UI（基于 Vue 的移动端组件库）（React 版 Zent）</li><li>Vite 2（打包工具，快！）</li><li>Nginx 来单机部署</li></ol><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol><li>Java 编程语言 + SpringBoot 框架</li><li>SpringMVC + MyBatis + MyBatis Plus（提高开发效率）</li><li>MySQL 数据库</li><li>Redis 缓存</li><li>Swagger + Knife4j 接口文档</li></ol><h2 id="第一期计划"><a href="#第一期计划" class="headerlink" title="第一期计划"></a>第一期计划</h2><ol><li>前端项目初始化 15 min √</li><li>前端主页 + 组件概览 15 min √</li><li>数据库表设计 15 min √<ol><li>标签表</li><li>用户表</li></ol></li><li>初始化后端项目</li><li>开发后端 - 根据标签搜索用户 30 min</li><li>开发前端 - 根据标签搜索用户 20 min</li></ol><h2 id="前端项目初始化"><a href="#前端项目初始化" class="headerlink" title="前端项目初始化"></a>前端项目初始化</h2><p>用脚手架初始化项目</p><ul><li>Vue CLI <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></li><li><strong>Vite 脚手架</strong> ：<a href="https://vitejs.cn/guide/#scaffolding-your-first-vite-project">https://vitejs.cn/guide/#scaffolding-your-first-vite-project</a></li></ul><p>整合组件库 Vant：</p><ul><li>安装 Vant</li><li>按需引入 npm i <a href="mailto:&#x76;&#105;&#116;&#x65;&#45;&#112;&#x6c;&#117;&#x67;&#x69;&#x6e;&#45;&#x73;&#x74;&#x79;&#108;&#101;&#x2d;&#105;&#109;&#x70;&#x6f;&#114;&#x74;&#x40;&#49;&#46;&#x34;&#46;&#x31;">&#x76;&#105;&#116;&#x65;&#45;&#112;&#x6c;&#117;&#x67;&#x69;&#x6e;&#45;&#x73;&#x74;&#x79;&#108;&#101;&#x2d;&#105;&#109;&#x70;&#x6f;&#114;&#x74;&#x40;&#49;&#46;&#x34;&#46;&#x31;</a> -D</li></ul><p>开发页面经验：</p><ol><li>多参考</li><li>从整体到局部</li><li>先想清楚页面要做成什么样子，再写代码</li></ol><h2 id="前端主页-组件概览-15-min"><a href="#前端主页-组件概览-15-min" class="headerlink" title="前端主页 + 组件概览 15 min"></a>前端主页 + 组件概览 15 min</h2><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>导航条：展示当前页面名称</p><p>主页搜索框 =&gt; 搜索页 =&gt; 搜索结果页（标签筛选页）</p><p>内容</p><p>tab 栏：</p><ul><li>主页（推荐页 + <strong>广告</strong> ）<ul><li>搜索框</li><li>banner</li><li>推荐信息流</li></ul></li><li>队伍页</li><li>用户页（消息 - 暂时考虑发邮件）</li></ul><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>很多页面要复用组件 / 样式，重复写很麻烦、不利于维护，所以抽象一个通用的布局（Layout）</p><p>组件化</p><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><p>标签的分类（要有哪些标签、怎么把标签进行分类）</p><h3 id="新增标签表（分类表）"><a href="#新增标签表（分类表）" class="headerlink" title="新增标签表（分类表）"></a>新增标签表（分类表）</h3><p>建议用标签，不要用分类，更灵活。</p><p>性别：男、女</p><p>方向：Java、C++、Go、前端</p><p>正在学：Spring</p><p>目标：考研、春招、秋招、社招、考公、竞赛（蓝桥杯）、转行、跳槽</p><p>段位：初级、中级、高级、王者</p><p>身份：小学、初中、高中、大一、大二、大三、大四、学生、待业、已就业、研一、研二、研三</p><p>状态：乐观、有点丧、一般、单身、已婚、有对象</p><p><strong>【用户自己定义标签】？</strong></p><p>字段：</p><p>id int 主键</p><p>标签名 varchar 非空（必须唯一，唯一索引）</p><p>上传标签的用户 userId int（如果要根据 userId 查已上传标签的话，最好加上，普通索引）</p><p>父标签 id ，parentId，int（分类）</p><p>是否为父标签 isParent, tinyint（0 不是父标签、1 - 父标签）</p><p>创建时间 createTime，datetime</p><p>更新时间 updateTime，datetime</p><p>是否删除 isDelete， tinyint（0、1）</p><p>怎么查询所有标签，并且把标签分好组？按父标签 id 分组，能实现 √</p><p>根据父标签查询子标签？根据 id 查询，能实现 √</p><p>SQL 语言分类：</p><p>DDL define 建表、操作表</p><p>DML manage 更新删除数据，影响实际表里的内容</p><p>DCL control 控制，权限</p><p>DQL query 查询，select</p><p><a href="https://www.cnblogs.com/fan-yuan/p/7879353.html">https://www.cnblogs.com/fan-yuan/p/7879353.html</a></p><h3 id="修改用户表"><a href="#修改用户表" class="headerlink" title="修改用户表"></a>修改用户表</h3><p>用户有哪些标签？</p><p><strong>根据自己的实际需求来！！！</strong> 此处选择第一种</p><ol><li><p>直接在用户表补充 tags 字段，**[‘Java’, ‘男’] 存 json 字符串 ** </p><p> 优点：查询方便、不用新建关联表，标签是用户的固有属性（除了该系统、其他系统可能要用到，标签是用户的固有属性）节省开发成本</p><p> <strong>查询用户列表，查关系表拿到这 100 个用户有的所有标签 id，再根据标签 id 去查标签表。</strong></p><p> 哪怕性能低，可以用缓存。</p><p> 缺点：用户表多一列，会有点</p></li><li><p>加一个关联表，记录用户和标签的关系</p><p> 关联表的应用场景：查询灵活，可以正查反查</p><p> 缺点：要多建一个表、多维护一个表</p><p> 重点：企业大项目开发中尽量减少关联查询，很影响扩展性，而且会影响查询性能</p></li></ol><h3 id="开发后端接口"><a href="#开发后端接口" class="headerlink" title="开发后端接口"></a>开发后端接口</h3><h4 id="搜索标签"><a href="#搜索标签" class="headerlink" title="搜索标签"></a>搜索标签</h4><ol><li>允许用户传入多个标签，多个标签都存在才搜索出来 and。like ‘%Java%’ and like ‘%C++%’。</li><li>允许用户传入多个标签，有任何一个标签存在就能搜索出来 or。like ‘%Java%’ or like ‘%C++%’</li></ol><p>两种方式：</p><ol><li>SQL 查询（实现简单，可以通过拆分查询进一步优化）</li><li>内存查询（灵活，可以通过并发进一步优化）</li></ol><ul><li><p>如果参数可以分析，根据用户的参数去选择查询方式，比如标签数</p></li><li><p>如果参数不可分析，并且数据库连接足够、内存空间足够，可以并发同时查询，谁先返回用谁。</p></li><li><p>还可以 SQL 查询与内存计算相结合，比如先用 SQL 过滤掉部分 tag</p></li></ul><p>建议通过实际测试来分析哪种查询比较快，数据量大的时候验证效果更明显！</p><p>解析 JSON 字符串：</p><p>序列化：java对象转成 json</p><p>反序列化：把 json 转为 java 对象</p><p>java  json 序列化库有很多：</p><ol><li><p><strong>gson</strong>（google 的）</p></li><li><p>fastjson alibaba（ali 出品，快，但是漏洞太多）</p></li><li><p>jackson</p></li><li><p>kryo</p></li></ol><h2 id="用户中心来集中提供用户的检索、操作、注册、登录、鉴权"><a href="#用户中心来集中提供用户的检索、操作、注册、登录、鉴权" class="headerlink" title="用户中心来集中提供用户的检索、操作、注册、登录、鉴权"></a>用户中心来集中提供用户的检索、操作、注册、登录、鉴权</h2><h2 id="中-2022-05-29"><a href="#中-2022-05-29" class="headerlink" title="中 2022-05-29"></a>中 2022-05-29</h2><p>本次直播内容（计划）： </p><ol><li><strong>上次的标签接口调试</strong> 5 min √</li><li>前端整合路由 5min √</li><li>前端开发（搜索页面、用户信息页、用户信息修改页）30 - 50min √</li><li>后端整合 Swagger + Knife4j 接口文档 10 - 15min</li><li>存量用户信息导入及同步（爬虫） 40 min</li></ol><h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h3><ol><li>stream / parallelStream 流失处理</li><li>Optional 可选类</li></ol><h3 id="前端整合路由"><a href="#前端整合路由" class="headerlink" title="前端整合路由"></a>前端整合路由</h3><p>Vue-Router：<a href="https://router.vuejs.org/zh/guide/#html%EF%BC%8C%E7%9B%B4%E6%8E%A5%E7%9C%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%BC%95%E5%85%A5">https://router.vuejs.org/zh/guide/#html，直接看官方文档引入</a></p><p>Vue-Router 其实就是帮助你根据不同的 url 来展示不同的页面（组件），不用自己写 if / else</p><p>路由配置影响整个项目，所以建议单独用 config 目录、单独的配置文件去集中定义和管理。</p><p>有些组件库可能自带了和 Vue-Router 的整合，所以尽量先看组件文档、省去自己写的时间。</p><h2 id="下-2022-06-05"><a href="#下-2022-06-05" class="headerlink" title="下 2022-06-05"></a>下 2022-06-05</h2><ol><li>Java 后端整合 Swagger + Knife4j 接口文档 10 min √</li><li>存量用户信息导入及同步（爬虫） 30 min - 40 min</li><li></li><li>前后端联调：搜索页面、用户信息页、用户信息修改页 30 - 40 min</li><li>标签内容整理 15 min</li><li>部分细节优化  todo</li></ol><h2 id="后端整合-Swagger-Knife4j-接口文档"><a href="#后端整合-Swagger-Knife4j-接口文档" class="headerlink" title="后端整合 Swagger + Knife4j 接口文档"></a>后端整合 Swagger + Knife4j 接口文档</h2><p>什么是接口文档？写接口信息的文档，每条接口包括：</p><ul><li>请求参数</li><li>响应参数<ul><li>错误码</li></ul></li><li>接口地址</li><li>接口名称</li><li>请求类型</li><li>请求格式</li><li>备注</li></ul><p>who 谁用？一般是后端或者负责人来提供，后端和前端都要使用</p><p>为什么需要接口文档？</p><ul><li>有个书面内容（背书或者归档），便于大家参考和查阅，便于 <strong>沉淀和维护</strong> ，拒绝口口相传</li><li>接口文档便于前端和后端开发对接，前后端联调的 <strong>介质</strong> 。后端 =&gt; 接口文档 &lt;= 前端</li><li>好的接口文档支持在线调试、在线测试，可以作为工具提高我们的开发测试效率</li></ul><p>怎么做接口文档？</p><ul><li>手写（比如腾讯文档、Markdown 笔记）</li><li>自动化接口文档生成：自动根据项目代码生成完整的文档或在线调试的网页。Swagger，Postman（侧重接口管理）（国外）；apifox、apipost、eolink（国产）</li></ul><p>接口文档有哪些技巧？</p><p>Swagger 原理：</p><ol><li>引入依赖（Swagger 或 Knife4j：<a href="https://doc.xiaominfo.com/knife4j/documentation/get_start.html%EF%BC%89">https://doc.xiaominfo.com/knife4j/documentation/get_start.html）</a></li><li>自定义 Swagger 配置类</li><li>定义需要生成接口文档的代码位置（Controller）</li><li>千万注意：线上环境不要把接口暴露出去！！！可以通过在 SwaggerConfig 配置文件开头加上 <code>@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</code> 限定配置仅在部分环境开启</li><li>启动即可</li><li>可以通过在 controller 方法上添加 @Api、@ApiImplicitParam(name = “name”,value = “姓名”,required = true)    @ApiOperation(value = “向客人问好”) 等注解来自定义生成的接口描述信息</li></ol><p>如果 springboot version &gt;= 2.6，需要添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>  <span class="hljs-attr">pathmatch:</span><br>      <span class="hljs-attr">matching-strategy:</span> <span class="hljs-string">ANT_PATH_MATCHER</span><br></code></pre></td></tr></table></figure><p>todo 怎么隐藏</p><h2 id="存量用户信息导入及同步"><a href="#存量用户信息导入及同步" class="headerlink" title="存量用户信息导入及同步"></a>存量用户信息导入及同步</h2><ol><li>把所有星球用户的信息导入</li><li>把写了自我介绍的同学的标签信息导入</li></ol><p>FeHelper 前端辅助插件，推荐安装</p><h3 id="看上了网页信息，怎么抓到？"><a href="#看上了网页信息，怎么抓到？" class="headerlink" title="看上了网页信息，怎么抓到？"></a>看上了网页信息，怎么抓到？</h3><ol><li>分析原网站是怎么获取这些数据的？哪个接口？</li></ol><p>按 F 12 打开控制台，查看网络请求，复制 curl 代码便于查看和执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;https://api.zsxq.com/v2/hashtags/48844541281228/topics?count=20&quot;</span> ^<br>  -H <span class="hljs-string">&quot;authority: api.zsxq.com&quot;</span> ^<br>  -H <span class="hljs-string">&quot;accept: application/json, text/plain, */*&quot;</span> ^<br>  -H <span class="hljs-string">&quot;accept-language: zh-CN,zh;q=0.9&quot;</span> ^<br>  -H <span class="hljs-string">&quot;cache-control: no-cache&quot;</span> ^<br>  -H <span class="hljs-string">&quot;origin: https://wx.zsxq.com&quot;</span> ^<br>  -H <span class="hljs-string">&quot;pragma: no-cache&quot;</span> ^<br>  -H <span class="hljs-string">&quot;referer: https://wx.zsxq.com/&quot;</span> ^<br>  --compressed<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>用程序去调用接口</strong> （java okhttp httpclient / python 都可以）</li><li>处理（清洗）一下数据，之后就可以写到数据库里</li></ol><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>从 excel 中导入全量用户数据，<strong>判重</strong> 。 easy excel：<a href="https://alibaba-easyexcel.github.io/index.html">https://alibaba-easyexcel.github.io/index.html</a></li><li>抓取写了自我介绍的同学信息，提取出用户昵称、用户唯一 id、自我介绍信息</li><li>从自我介绍中提取信息，然后写入到数据库中</li></ol><h4 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h4><p>两种读对象的方式：</p><ol><li>确定表头：建立对象，和表头形成映射关系</li><li>不确定表头：每一行数据映射为 Map&lt;String, Object&gt;</li></ol><p>两种读取模式：</p><ol><li>监听器：先创建监听器、在读取文件时绑定监听器。单独抽离处理逻辑，代码清晰易于维护；一条一条处理，适用于数据量大的场景。</li><li>同步读：无需创建监听器，一次性获取完整数据。方便简单，但是数据量大时会有等待时常，也可能内存溢出。</li></ol><h2 id="2022-06-12-【4】"><a href="#2022-06-12-【4】" class="headerlink" title="2022-06-12 【4】"></a>2022-06-12 【4】</h2><ol><li>页面和功能开发<ol><li>搜索页面</li><li>用户信息</li><li>用户修改页面</li></ol></li><li>改造用户中心，把单机登录改为分布式 session 登录</li><li>标签的整理、细节的优化</li></ol><h3 id="前端页面跳转传值"><a href="#前端页面跳转传值" class="headerlink" title="前端页面跳转传值"></a>前端页面跳转传值</h3><ol><li>query =&gt; url searchParams，url 后附加参数，传递的值长度有限</li><li>vuex（全局状态管理），搜索页将关键词塞到状态中，搜索结果页从状态取值</li></ol><h2 id="Session-共享"><a href="#Session-共享" class="headerlink" title="Session 共享"></a>Session 共享</h2><p>种 session 的时候注意范围，cookie.domain</p><p>比如两个域名：</p><p>aaa.yupi.com</p><p>bbb.yupi.com</p><p>如果要共享 cookie，可以种一个更高层的公共域名，比如 yupi.com</p><h3 id="为什么服务器-A-登录后，请求发到服务器-B，不认识该用户？"><a href="#为什么服务器-A-登录后，请求发到服务器-B，不认识该用户？" class="headerlink" title="为什么服务器 A 登录后，请求发到服务器 B，不认识该用户？"></a>为什么服务器 A 登录后，请求发到服务器 B，不认识该用户？</h3><p>用户在 A 登录，所以 session（用户登录信息）存在了 A 上</p><p>结果请求 B 时，B 没有用户信息，所以不认识。</p><p><img src="https://qiniuyun.code-nav.cn/img/image-20220612234247152.png"></p><p>解决方案：<strong>共享存储</strong> ，而不是把数据放到单台服务器的内存中</p><p><img src="https://qiniuyun.code-nav.cn/img/image-20220612234335539.png"></p><p>如何共享存储？</p><ol><li>Redis（基于内存的 K / V 数据库）此处选择 Redis，因为用户信息读取 / 是否登录的判断极其<strong>频繁</strong> ，Redis 基于内存，读写性能很高，简单的数据单机 qps 5w - 10w</li><li>MySQL </li><li>文件服务器 ceph</li></ol><h3 id="Session-共享实现"><a href="#Session-共享实现" class="headerlink" title="Session 共享实现"></a>Session 共享实现</h3><h4 id="1-安装-Redis"><a href="#1-安装-Redis" class="headerlink" title="1. 安装 Redis"></a>1. 安装 Redis</h4><p>官网：<a href="https://redis.io/">https://redis.io/</a></p><p>windows 下载：</p><p>Redis 5.0.14 下载：</p><p>链接：<a href="https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg">https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg</a> </p><p>提取码：vkoi </p><p>redis 管理工具 quick redis：<a href="https://quick123.net/">https://quick123.net/</a></p><ol start="2"><li>引入 redis，能够操作 redis：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>引入 spring-session 和 redis 的整合，使得自动将 session 存储到 redis 中：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>修改 spring-session 存储配置 <code>spring.session.store-type</code></p><p> 默认是 none，表示存储在单台服务器</p><p> store-type: redis，表示从 redis 读写 session</p></li></ol><p>JWT 的优缺点：<a href="https://zhuanlan.zhihu.com/p/108999941">https://zhuanlan.zhihu.com/p/108999941</a></p><h2 id="todo-待优化"><a href="#todo-待优化" class="headerlink" title="todo 待优化"></a>todo 待优化</h2><p>前端：动态展示页面标题、微调格式</p><h2 id="2022-07-03-伙伴匹配系统-5"><a href="#2022-07-03-伙伴匹配系统-5" class="headerlink" title="2022-07-03 伙伴匹配系统 5"></a>2022-07-03 伙伴匹配系统 5</h2><ol><li>用户修改页面前端、后端开发和联调</li></ol><h2 id="2022-07-17-伙伴匹配系统-6"><a href="#2022-07-17-伙伴匹配系统-6" class="headerlink" title="2022-07-17 伙伴匹配系统 6"></a>2022-07-17 伙伴匹配系统 6</h2><ol><li>开发主页（默认推荐和自己兴趣相当的用户）</li><li>优化主页的性能（缓存 + 定时任务 + 分布式锁）</li></ol><h3 id="开发主页"><a href="#开发主页" class="headerlink" title="开发主页"></a>开发主页</h3><p>最简单：直接 list 列表</p><p>模拟 1000 万个用户，再去查询</p><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><ol><li><p>用可视化界面：适合一次性导入、数据量可控</p></li><li><p>写程序：for 循环，建议分批，不要一把梭哈（可以用接口来控制）<strong>要保证可控、幂等，注意线上环境和测试环境是有区别的</strong></p><p> 导入 1000 万条，for i 1000w</p></li><li><p>执行 SQL 语句：适用于小数据量</p></li></ol><h4 id="编写一次性任务"><a href="#编写一次性任务" class="headerlink" title="编写一次性任务"></a>编写一次性任务</h4><p>for 循环插入数据的问题：</p><ol><li>建立和释放数据库链接（批量查询解决）</li><li>for 循环是绝对线性的（并发）</li></ol><p>并发要注意执行的先后顺序无所谓，不要用到非并发类的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">16</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">10000</span>, TimeUnit.MINUTES, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">10000</span>));<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> CPU 密集型：分配的核心线程数 = CPU - <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span> IO 密集型：分配的核心线程数可以大于 CPU 核数<br></code></pre></td></tr></table></figure><p>数据库慢？预先把数据查出来，放到一个更快读取的地方，不用再查数据库了。（缓存）</p><p>预加载缓存，定时更新缓存。（定时任务）</p><p>多个机器都要执行任务么？（分布式锁：控制同一时间只有一台机器去执行定时任务，其他机器不用重复执行了）</p><h2 id="数据查询慢怎么办？"><a href="#数据查询慢怎么办？" class="headerlink" title="数据查询慢怎么办？"></a>数据查询慢怎么办？</h2><p>用缓存：提前把数据取出来保存好（通常保存到读写更快的介质，比如内存），就可以更快地读写。</p><h3 id="缓存的实现"><a href="#缓存的实现" class="headerlink" title="缓存的实现"></a>缓存的实现</h3><ul><li>Redis（分布式缓存）</li><li>memcached（分布式）</li><li>Etcd（云原生架构的一个分布式存储，<strong>存储配置</strong>，扩容能力）</li></ul><hr><ul><li><p>ehcache（单机）</p></li><li><p>本地缓存（Java 内存 Map）</p></li><li><p>Caffeine（Java 内存缓存，高性能）</p></li><li><p>Google Guava</p></li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>NoSQL 数据库</p></blockquote><p>key - value 存储系统（区别于 MySQL，他存储的是键值对）</p><h3 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h3><p>String 字符串类型： name: “yupi”</p><p>List 列表：names: [“yupi”, “dogyupi”, “yupi”]</p><p>Set 集合：names: [“yupi”, “dogyupi”]（值不能重复）</p><p>Hash 哈希：nameAge: {  “yupi”: 1, “dogyupi”: 2 }</p><p>Zset 集合：names: {  yupi - 9,   dogyupi - 12  }（适合做排行榜）</p><hr><p>bloomfilter（布隆过滤器，主要从大量的数据中快速过滤值，比如邮件黑名单拦截）</p><p>geo（计算地理位置）</p><p>hyperloglog（pv / uv）</p><p>pub / sub（发布订阅，类似消息队列）</p><p>BitMap （1001010101010101010101010101）</p><h3 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yupi.yupao.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTemplateConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(connectionFactory);<br>        redisTemplate.setKeySerializer(RedisSerializer.string());<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>引入一个库时，先写测试类</p></blockquote><h3 id="Java-里的实现方式"><a href="#Java-里的实现方式" class="headerlink" title="Java 里的实现方式"></a>Java 里的实现方式</h3><h4 id="Spring-Data-Redis（推荐）"><a href="#Spring-Data-Redis（推荐）" class="headerlink" title="Spring Data Redis（推荐）"></a>Spring Data Redis（推荐）</h4><p>Spring Data：通用的数据访问框架，定义了一组 <strong>增删改查</strong> 的接口</p><p>mysql、redis、jpa</p><p><a href="https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis">spring-data-redis</a></p><p>1）引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）配置 Redis 地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># redis 配置</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>独立于 Spring 操作 Redis 的 Java 客户端</p><p>要配合 Jedis Pool 使用</p><h4 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h4><p><strong>高阶</strong> 的操作 Redis 的 Java 客户端</p><p>异步、连接池</p><h4 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h4><p>分布式操作 Redis 的 Java 客户端，让你像在使用本地的集合一样操作 Redis（分布式 Redis 数据网格）</p><h4 id="JetCache"><a href="#JetCache" class="headerlink" title="JetCache"></a>JetCache</h4><p>对比</p><ol><li>如果你用的是 Spring，并且没有过多的定制化要求，可以用 Spring Data Redis，最方便</li><li>如果你用的不是 SPring，并且追求简单，并且没有过高的性能要求，可以用 Jedis + Jedis Pool</li><li>如果你的项目不是 Spring，并且追求高性能、高定制化，可以用 Lettuce，支持异步、连接池</li></ol><hr><ul><li>如果你的项目是分布式的，需要用到一些分布式的特性（比如分布式锁、分布式集合），推荐用 redisson</li></ul><h3 id="设计缓存-key"><a href="#设计缓存-key" class="headerlink" title="设计缓存 key"></a>设计缓存 key</h3><p>不同用户看到的数据不同</p><p>systemId:moduleId:func:options（不要和别人冲突）</p><p>yupao:user:recommed:userId</p><p><strong>redis 内存不能无限增加，一定要设置过期时间！！！</strong></p><h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><p>问题：第一个用户访问还是很慢（加入第一个老板），也能一定程度上保护数据库</p><p>缓存预热的优点：</p><ol><li>解决上面的问题，可以让用户始终访问很快</li></ol><p>缺点：</p><ol><li>增加开发成本（你要额外的开发、设计）</li><li>预热的时机和时间如果错了，有可能你缓存的数据不对或者太老</li><li>需要占用额外空间</li></ol><h4 id="怎么缓存预热？"><a href="#怎么缓存预热？" class="headerlink" title="怎么缓存预热？"></a>怎么缓存预热？</h4><ol><li>定时</li><li>模拟触发（手动触发）</li></ol><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>用定时任务，每天刷新所有用户的推荐列表</p><p>注意点：</p><ol><li>缓存预热的意义（新增少、总用户多）</li><li>缓存的空间不能太大，要预留给其他缓存空间</li><li>缓存数据的周期（此处每天一次）</li></ol><blockquote><p>分析优缺点的时候，要打开思路，从整个项目从 0 到 1 的链路上去分析</p></blockquote><h3 id="定时任务实现"><a href="#定时任务实现" class="headerlink" title="定时任务实现"></a>定时任务实现</h3><ol><li><strong>Spring Scheduler（spring boot 默认整合了）</strong> </li><li>Quartz（独立于 Spring 存在的定时任务框架）</li><li>XXL-Job 之类的分布式任务调度平台（界面 + sdk）</li></ol><p>第一种方式：</p><ol><li>主类开启 @EnableScheduling</li><li>给要定时执行的方法添加 @Scheduling 注解，指定 cron 表达式或者执行频率</li></ol><p>不要去背 cron 表达式！！！！！</p><ul><li><a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></li><li><a href="https://www.matools.com/crontab/">https://www.matools.com/crontab/</a></li></ul><hr><h3 id="控制定时任务的执行"><a href="#控制定时任务的执行" class="headerlink" title="控制定时任务的执行"></a>控制定时任务的执行</h3><p>为啥？</p><ol><li>浪费资源，想象 10000 台服务器同时 “打鸣”</li><li>脏数据，比如重复插入</li></ol><p><strong>要控制定时任务在同一时间只有 1 个服务器能执行。</strong></p><p>怎么做？</p><ol><li><p>分离定时任务程序和主程序，只在 1 个服务器运行定时任务。成本太大</p></li><li><p>写死配置，每个服务器都执行定时任务，但是只有 ip 符合配置的服务器才真实执行业务逻辑，其他的直接返回。成本最低；但是我们的 IP 可能是不固定的，把 IP 写的太死了</p></li><li><p>动态配置，配置是可以轻松的、很方便地更新的（<strong>代码无需重启</strong>），但是只有 ip 符合配置的服务器才真实执行业务逻辑。</p><ul><li>数据库</li><li>Redis</li><li>配置中心（Nacos、Apollo、Spring Cloud Config）</li></ul><p> 问题：服务器多了、IP 不可控还是很麻烦，还是要人工修改</p></li><li><p>分布式锁，只有抢到锁的服务器才能执行业务逻辑。坏处：增加成本；好处：不用手动配置，多少个服务器都一样。</p></li></ol><p><strong>单机就会存在单点故障。</strong></p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>有限资源的情况下，控制同一时间（段）只有某些线程（用户 / 服务器）能访问到资源。</p><p>Java 实现锁：synchronized 关键字、并发包的类</p><p>问题：只对单个 JVM 有效</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>为啥需要分布式锁？</p><ol><li>有限资源的情况下，控制同一时间（段）只有某些线程（用户 / 服务器）能访问到资源。</li><li>单个锁只对单个 JVM 有效</li></ol><h3 id="分布式锁实现的关键"><a href="#分布式锁实现的关键" class="headerlink" title="分布式锁实现的关键"></a>分布式锁实现的关键</h3><h4 id="抢锁机制"><a href="#抢锁机制" class="headerlink" title="抢锁机制"></a>抢锁机制</h4><p>怎么保证同一时间只有 1 个服务器能抢到锁？</p><p><strong>核心思想</strong> 就是：先来的人先把数据改成自己的标识（服务器 ip），后来的人发现标识已存在，就抢锁失败，继续等待。</p><p>等先来的人执行方法结束，把标识清空，其他的人继续抢锁。</p><p>MySQL 数据库：select for update 行级锁（最简单）</p><p>（乐观锁）</p><p>✔ Redis 实现：内存数据库，<strong>读写速度快</strong> 。支持 <strong>setnx</strong>、lua 脚本，比较方便我们实现分布式锁。</p><p>setnx：set if not exists 如果不存在，则设置；只有设置成功才会返回 true，否则返回 false</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>用完锁要释放（腾地方）√</p></li><li><p><strong>锁一定要加过期时间 √</strong></p></li><li><p>如果方法执行时间过长，锁提前过期了？</p><p> 问题：</p><ol><li>连锁效应：释放掉别人的锁</li><li>这样还是会存在多个方法同时执行的情况</li></ol></li></ol><p>​    解决方案：续期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!end)&#125;&#123;<br>    续期<br>&#125;)<br><br>end = <span class="hljs-literal">true</span>;<br><br></code></pre></td></tr></table></figure><ol start="4"><li><p>释放锁的时候，有可能先判断出是自己的锁，但这时锁过期了，最后还是释放了别人的锁</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 原子操作</span><br><span class="hljs-keyword">if</span>(get lock == A) &#123;<br>    <span class="hljs-comment">// set lock B</span><br>    del lock<br>&#125;<br></code></pre></td></tr></table></figure><p> Redis + lua 脚本实现</p></li><li><p>Redis 如果是集群（而不是只有一个 Redis），如果分布式锁的数据不同步怎么办？</p></li></ol><p><a href="https://blog.csdn.net/feiying0canglang/article/details/113258494">https://blog.csdn.net/feiying0canglang/article/details/113258494</a></p><h4 id="拒绝自己写！！！"><a href="#拒绝自己写！！！" class="headerlink" title="拒绝自己写！！！"></a>拒绝自己写！！！</h4><h3 id="Redisson-实现分布式锁"><a href="#Redisson-实现分布式锁" class="headerlink" title="Redisson 实现分布式锁"></a>Redisson 实现分布式锁</h3><p>Java 客户端，数据网格</p><p>实现了很多 Java 里支持的接口和数据结构</p><p>Redisson 是一个 java 操作 Redis 的客户端，<strong>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis，完全感知不到 Redis 的存在。</strong></p><h4 id="2-种引入方式"><a href="#2-种引入方式" class="headerlink" title="2 种引入方式"></a>2 种引入方式</h4><ol><li>spring boot starter 引入（不推荐，版本迭代太快，容易冲突）<a href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter">https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter</a></li><li>直接引入：<a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></li></ol><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs setnx">// list，数据存在本地 JVM 内存中<br>List&lt;String&gt; list = new ArrayList&lt;&gt;();<br>list.add(&quot;yupi&quot;);<br>System.out.println(&quot;list:&quot; + list.get(0));<br><br>list.remove(0);<br><br>// 数据存在 redis 的内存中<br>RList&lt;String&gt; rList = redissonClient.getList(&quot;test-list&quot;);<br>rList.add(&quot;yupi&quot;);<br>System.out.println(&quot;rlist:&quot; + rList.get(0));<br>rList.remove(0);<br></code></pre></td></tr></table></figure><h3 id="定时任务-锁"><a href="#定时任务-锁" class="headerlink" title="定时任务  + 锁"></a>定时任务  + 锁</h3><ol><li>waitTime 设置为 0，只抢一次，抢不到就放弃</li><li>注意释放锁要写在 finally 中</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void test<span class="hljs-constructor">WatchDog()</span> &#123;<br>    RLock lock = redissonClient.get<span class="hljs-constructor">Lock(<span class="hljs-string">&quot;yupao:precachejob:docache:lock&quot;</span>)</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 只有一个线程能获取到锁</span><br>        <span class="hljs-keyword">if</span> (lock.<span class="hljs-keyword">try</span><span class="hljs-constructor">Lock(0, -1, TimeUnit.MILLISECONDS)</span>) &#123;<br>            <span class="hljs-comment">// todo 实际要执行的方法</span><br>            <span class="hljs-keyword">do</span><span class="hljs-constructor">SomeThings()</span>;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getLock: &quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Id()</span>);<br>        &#125;<br>    &#125; catch (InterruptedException e) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e.get<span class="hljs-constructor">Message()</span>);<br>    &#125; finally &#123;<br>        <span class="hljs-comment">// 只能释放自己的锁</span><br>        <span class="hljs-keyword">if</span> (lock.is<span class="hljs-constructor">HeldByCurrentThread()</span>) &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;unLock: &quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Id()</span>);<br>            lock.unlock<span class="hljs-literal">()</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="看门狗机制"><a href="#看门狗机制" class="headerlink" title="看门狗机制"></a>看门狗机制</h3><blockquote><p>redisson 中提供的续期机制</p></blockquote><p>开一个监听线程，如果方法还没执行完，就帮你重置 redis 锁的过期时间。</p><p>原理：</p><ol><li>监听当前线程，默认过期时间是 30 秒，每 10 秒续期一次（补到 30 秒）</li><li>如果线程挂掉（注意 debug 模式也会被它当成服务器宕机），则不会续期</li></ol><p><a href="https://blog.csdn.net/qq_26222859/article/details/79645203">https://blog.csdn.net/qq_26222859/article/details/79645203</a></p><hr><p>Zookeeper 实现（不推荐）</p><h3 id="组队功能-1h"><a href="#组队功能-1h" class="headerlink" title="组队功能 1h"></a>组队功能 1h</h3><p>理解为王者荣耀</p><h4 id="理想的应用场景"><a href="#理想的应用场景" class="headerlink" title="理想的应用场景"></a>理想的应用场景</h4><p>我要跟别人一起参加竞赛或者做项目，可以发起队伍或者加入别人的队伍</p><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户可以 <strong>创建</strong> 一个队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0</p><blockquote><p>队长、剩余的人数</p><p>聊天？</p><p>公开 或 private 或加密</p><p><strong>用户创建队伍最多 5 个</strong></p></blockquote><p>展示队伍列表，根据名称搜索队伍  P0，信息流中不展示已过期的队伍</p><p>修改队伍信息 P0 ~ P1</p><p>用户可以加入队伍（其他人、未满、未过期），允许加入多个队伍，但是要有个上限  P0</p><blockquote><p>是否需要队长同意？筛选审批？</p></blockquote><p>用户可以退出队伍（如果队长退出，权限转移给第二早加入的用户 —— 先来后到） P1</p><p>队长可以解散队伍 P0</p><hr><p>分享队伍 =》 邀请其他用户加入队伍 P1</p><p>业务流程：</p><ol><li>生成分享链接（分享二维码）</li><li>用户访问链接，可以点击加入</li></ol><p>队伍人满后发送消息通知 P1</p><h4 id="系统（接口）设计"><a href="#系统（接口）设计" class="headerlink" title="系统（接口）设计"></a>系统（接口）设计</h4><h5 id="1、创建队伍"><a href="#1、创建队伍" class="headerlink" title="1、创建队伍"></a>1、创建队伍</h5><p>用户可以 <strong>创建</strong> 一个队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0</p><blockquote><p>队长、剩余的人数</p><p>聊天？</p><p>公开 或 private 或加密</p><p>信息流中不展示已过期的队伍</p></blockquote><ol><li>请求参数是否为空？</li><li>是否登录，未登录不允许创建</li><li>校验信息<ol><li>队伍人数 &gt; 1 且 &lt;= 20</li><li>队伍标题 &lt;= 20</li><li>描述 &lt;= 512</li><li>status 是否公开（int）不传默认为 0（公开）</li><li>如果 status 是加密状态，一定要有密码，且密码 &lt;= 32</li><li>超时时间 &gt; 当前时间</li><li>校验用户最多创建 5 个队伍</li></ol></li><li>插入队伍信息到队伍表</li><li>插入用户  =&gt; 队伍关系到关系表</li></ol><h5 id="2、查询队伍列表"><a href="#2、查询队伍列表" class="headerlink" title="2、查询队伍列表"></a>2、查询队伍列表</h5><p>分页展示队伍列表，根据名称、最大人数等搜索队伍  P0，信息流中不展示已过期的队伍</p><ol><li>从请求参数中取出队伍名称等查询条件，如果存在则作为查询条件</li><li>不展示已过期的队伍（根据过期时间筛选）</li><li>可以通过某个<strong>关键词</strong>同时对名称和描述查询</li><li><strong>只有管理员才能查看加密还有非公开的房间</strong></li><li>关联查询已加入队伍的用户信息</li><li><strong>关联查询已加入队伍的用户信息（可能会很耗费性能，建议大家用自己写 SQL 的方式实现）</strong></li></ol><p><strong>实现方式</strong></p><p>1）自己写 SQL</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>. 自己写 SQL<br><span class="hljs-regexp">//</span> 查询队伍和创建人的信息<br><span class="hljs-regexp">//</span> select * from team t left join user u on t.userId = u.id<br><span class="hljs-regexp">//</span> 查询队伍和已加入队伍成员的信息<br><span class="hljs-regexp">//</span> select *<br><span class="hljs-regexp">//</span> from team t<br><span class="hljs-regexp">//</span>         left join user_team ut on t.id = ut.teamId<br><span class="hljs-regexp">//</span>         left join user u on ut.userId = u.id;<br></code></pre></td></tr></table></figure><h5 id="3-修改队伍信息"><a href="#3-修改队伍信息" class="headerlink" title="3. 修改队伍信息"></a>3. 修改队伍信息</h5><ol><li>判断请求参数是否为空</li><li>查询队伍是否存在</li><li>只有管理员或者队伍的创建者可以修改</li><li>如果用户传入的新值和老值一致，就不用 update 了（可自行实现，降低数据库使用次数）</li><li><strong>如果队伍状态改为加密，必须要有密码</strong></li><li>更新成功</li></ol><h5 id="4-用户可以加入队伍"><a href="#4-用户可以加入队伍" class="headerlink" title="4. 用户可以加入队伍"></a>4. 用户可以加入队伍</h5><p>其他人、未满、未过期，允许加入多个队伍，但是要有个上限  P0</p><ol><li>用户最多加入 5 个队伍</li><li>队伍必须存在，只能加入未满、未过期的队伍</li><li>不能加入自己的队伍，不能重复加入已加入的队伍（幂等性）</li><li>禁止加入私有的队伍</li><li>如果加入的队伍是加密的，必须密码匹配才可以</li><li>新增队伍 - 用户关联信息</li></ol><p><strong>注意，一定要加上事务注解！！！！</strong></p><h5 id="5-用户可以退出队伍"><a href="#5-用户可以退出队伍" class="headerlink" title="5. 用户可以退出队伍"></a>5. 用户可以退出队伍</h5><p>请求参数：队伍 id</p><ol><li><p>校验请求参数</p></li><li><p>校验队伍是否存在</p></li><li><p>校验我是否已加入队伍</p></li><li><p>如果队伍</p><ol><li><p>只剩一人，队伍解散</p></li><li><p>还有其他人</p><ol><li><p>如果是队长退出队伍，权限转移给第二早加入的用户 —— 先来后到</p><blockquote><p>只用取 id 最小的 2 条数据</p></blockquote></li><li><p>非队长，自己退出队伍</p></li></ol></li></ol></li></ol><h5 id="6-队长可以解散队伍"><a href="#6-队长可以解散队伍" class="headerlink" title="6. 队长可以解散队伍"></a>6. 队长可以解散队伍</h5><p>请求参数：队伍 id</p><p>业务流程：</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验你是不是队伍的队长</li><li>移除所有加入队伍的关联信息</li><li>删除队伍</li></ol><h5 id="7-获取当前用户已加入的队伍"><a href="#7-获取当前用户已加入的队伍" class="headerlink" title="7. 获取当前用户已加入的队伍"></a>7. 获取当前用户已加入的队伍</h5><h5 id="8-获取当前用户创建的队伍"><a href="#8-获取当前用户创建的队伍" class="headerlink" title="8. 获取当前用户创建的队伍"></a>8. 获取当前用户创建的队伍</h5><p>复用 listTeam 方法，只新增查询条件，不做修改（开闭原则）</p><hr><h4 id="事务注解"><a href="#事务注解" class="headerlink" title="事务注解"></a>事务注解</h4><p>@Transactional(rollbackFor = Exception.class)</p><p>要么数据操作都成功，要么都失败</p><h3 id="数据库表设计-1"><a href="#数据库表设计-1" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p>队伍表 team</p><p>字段：</p><ul><li>id 主键 bigint（最简单、连续，放 url 上比较简短，但缺点是爬虫）</li><li>name 队伍名称</li><li>description 描述</li><li>maxNum 最大人数</li><li>expireTime 过期时间</li><li>userId 创建人 id</li><li>status 0 - 公开，1 - 私有，2 - 加密</li><li>password 密码</li><li>createTime 创建时间</li><li>updateTime 更新时间</li><li>isDelete 是否删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> team<br>(<br>    id           <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    name   <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>)                   <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;队伍名称&#x27;</span>,<br>    description <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>)                      <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;描述&#x27;</span>,<br>    maxNum    <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;最大人数&#x27;</span>,<br>    expireTime    datetime  <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;过期时间&#x27;</span>,<br>    userId            <span class="hljs-type">bigint</span> comment <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    status    <span class="hljs-type">int</span>      <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;0 - 公开，1 - 私有，2 - 加密&#x27;</span>,<br>    password <span class="hljs-type">varchar</span>(<span class="hljs-number">512</span>)                       <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;密码&#x27;</span>,<br>    <br>        createTime   datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime   datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>    isDelete     tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;队伍&#x27;</span>;<br></code></pre></td></tr></table></figure><p>用户  - 队伍表 user_team</p><p>字段：</p><ul><li>id 主键</li><li>userId 用户 id</li><li>teamId 队伍 id</li><li>joinTime 加入时间</li><li>createTime 创建时间</li><li>updateTime 更新时间</li><li>isDelete 是否删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> user_team<br>(<br>    id           <span class="hljs-type">bigint</span> auto_increment comment <span class="hljs-string">&#x27;id&#x27;</span><br>        <span class="hljs-keyword">primary</span> key,<br>    userId            <span class="hljs-type">bigint</span> comment <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>    teamId            <span class="hljs-type">bigint</span> comment <span class="hljs-string">&#x27;队伍id&#x27;</span>,<br>    joinTime datetime  <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;加入时间&#x27;</span>,<br>    createTime   datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    updateTime   datetime <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">update</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>    isDelete     tinyint  <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>                 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;是否删除&#x27;</span><br>)<br>    comment <span class="hljs-string">&#x27;用户队伍关系&#x27;</span>;<br></code></pre></td></tr></table></figure><p>两个关系：</p><ol><li>用户加了哪些队伍？</li><li>队伍有哪些用户？</li></ol><p>方式：</p><ol><li>建立用户 - 队伍关系表 teamId userId（便于修改，查询性能高一点，可以选择这个，不用全表遍历）</li><li>用户表补充已加入的队伍字段，队伍表补充已加入的用户字段（便于查询，不用写多对多的代码，可以直接根据队伍查用户、根据用户查队伍）</li></ol><h4 id="为什么需要请求参数包装类？"><a href="#为什么需要请求参数包装类？" class="headerlink" title="为什么需要请求参数包装类？"></a>为什么需要请求参数包装类？</h4><ol><li><p>请求参数名称 / 类型和实体类不一样</p></li><li><p>有一些参数用不到，如果要自动生成接口文档，会增加理解成本</p></li><li><p>对个实体类映射到同一个对象</p></li></ol><h4 id="为什么需要包装类？"><a href="#为什么需要包装类？" class="headerlink" title="为什么需要包装类？"></a>为什么需要包装类？</h4><p>可能有些字段需要隐藏，不能返回给前端</p><p>或者有些字段某些方法是不关心的</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>库表设计 5 - 10min</p><p>增删改查 5 - 10 min</p><p>业务逻辑开发（P0）30 min</p><h2 id="2022-09-18-12-期"><a href="#2022-09-18-12-期" class="headerlink" title="2022-09-18 12 期"></a>2022-09-18 12 期</h2><ol><li>开发前端的功能<ol><li>搜索队伍 √</li><li>更新队伍（仅队伍的创始人可见） √</li><li>查看个人已加入队伍 √</li><li>查看个人创建的队伍 √</li><li>解散队伍 √</li><li>退出队伍 √</li></ol></li><li>随机匹配 30 - 40 min</li><li>完成之前的遗留问题 todo</li></ol><h3 id="前端不同页面怎么传递数据？"><a href="#前端不同页面怎么传递数据？" class="headerlink" title="前端不同页面怎么传递数据？"></a>前端不同页面怎么传递数据？</h3><ol><li><strong>url querystring（xxx?id=1）</strong> 比较适用于页面跳转</li><li><strong>url（/team/:id，xxx/1）</strong></li><li>hash (/team#1)</li><li>localStorage</li><li><strong>context（全局变量，同页面或整个项目要访问公共变量）</strong></li></ol><h3 id="随机匹配"><a href="#随机匹配" class="headerlink" title="随机匹配"></a>随机匹配</h3><blockquote><p>为了帮大家更快地发现和自己兴趣相同的朋友</p></blockquote><p>匹配 1 个还是匹配多个？</p><p>答：匹配多个，并且按照匹配的相似度从高到低排序</p><p>怎么匹配？（根据什么匹配）</p><p>答：标签 tags</p><blockquote><p>还可以根据 user_team 匹配加入相同队伍的用户</p></blockquote><p>本质：找到有相似标签的用户</p><p>举例：</p><p>用户 A：[Java, 大一, 男]</p><p>用户 B：[Java, 大二, 男]</p><p>用户 C：[Python, 大二, 女]</p><p>用户 D：[Java, 大一, 女]</p><h4 id="1-怎么匹配"><a href="#1-怎么匹配" class="headerlink" title="1. 怎么匹配"></a>1. 怎么匹配</h4><ol><li>找到有共同标签最多的用户（TopN）</li><li>共同标签越多，分数越高，越排在前面</li><li>如果没有匹配的用户，随机推荐几个（降级方案）</li></ol><p>编辑距离算法：<a href="https://blog.csdn.net/DBC_121/article/details/104198838">https://blog.csdn.net/DBC_121/article/details/104198838</a></p><blockquote><p>最小编辑距离：字符串 1 通过最少多少次增删改字符的操作可以变成字符串 2</p></blockquote><p>余弦相似度算法：<a href="https://blog.csdn.net/m0_55613022/article/details/125683937%EF%BC%88%E5%A6%82%E6%9E%9C%E9%9C%80%E8%A6%81%E5%B8%A6%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97%EF%BC%8C%E6%AF%94%E5%A6%82%E5%AD%A6%E4%BB%80%E4%B9%88%E6%96%B9%E5%90%91%E6%9C%80%E9%87%8D%E8%A6%81%EF%BC%8C%E6%80%A7%E5%88%AB%E7%9B%B8%E5%AF%B9%E6%AC%A1%E8%A6%81%EF%BC%89">https://blog.csdn.net/m0_55613022/article/details/125683937（如果需要带权重计算，比如学什么方向最重要，性别相对次要）</a></p><h4 id="2-怎么对所有用户匹配，取-TOP"><a href="#2-怎么对所有用户匹配，取-TOP" class="headerlink" title="2. 怎么对所有用户匹配，取 TOP"></a>2. 怎么对所有用户匹配，取 TOP</h4><p>直接取出所有用户，依次和当前用户计算分数，取 TOP N（54 秒）</p><p>优化方法：</p><ol><li><p>切忌不要在数据量大的时候循环输出日志（取消掉日志后 20 秒）</p></li><li><p>Map 存了所有的分数信息，占用内存</p><p> 解决：维护一个固定长度的有序集合（sortedSet），只保留分数最高的几个用户（时间换空间）</p><p> e.g.【3, 4, 5, 6, 7】取 TOP 5，id 为 1 的用户就不用放进去了</p></li><li><p>细节：剔除自己 √</p></li><li><p>尽量只查需要的数据：</p><ol><li>过滤掉标签为空的用户 √</li><li>根据部分标签取用户（前提是能区分出来哪个标签比较重要）</li><li>只查需要的数据（比如 id 和 tags） √（7.0s）</li></ol></li><li><p>提前查？（定时任务）</p><ol><li>提前把所有用户给缓存（不适用于经常更新的数据）</li><li>提前运算出来结果，缓存（针对一些重点用户，提前缓存）</li></ol></li></ol><p>大数据推荐，比如说有几亿个商品，难道要查出来所有的商品？</p><p>难道要对所有的数据计算一遍相似度？</p><p>检索 =&gt; 召回 =&gt; 粗排 =&gt; 精排 =&gt; 重排序等等</p><p>检索：尽可能多地查符合要求的数据（比如按记录查）</p><p>召回：查询可能要用到的数据（不做运算）</p><p>粗排：粗略排序，简单地运算（运算相对轻量）</p><p>精排：精细排序，确定固定排位</p><h3 id="分表学习建议"><a href="#分表学习建议" class="headerlink" title="分表学习建议"></a>分表学习建议</h3><p>mycat、sharding sphere 框架</p><p>一致性 hash</p><h3 id="队伍操作权限控制"><a href="#队伍操作权限控制" class="headerlink" title="队伍操作权限控制"></a>队伍操作权限控制</h3><p>加入队伍： 仅非队伍创建人、且未加入队伍的人可见</p><p>更新队伍：仅创建人可见</p><p>解散队伍：仅创建人可见</p><p>退出队伍：创建人不可见，仅已加入队伍的人可见</p><p>加载骨架屏特效 ✔</p><p>解决：van-skeleton 组件</p><p>仅加入队伍和创建队伍的人能看到队伍操作按钮（listTeam 接口要能获取我加入的队伍状态） ✔</p><p>方案 1：前端查询我加入了哪些队伍列表，然后判断每个队伍 id 是否在列表中（前端要多发一次请求）</p><p>方案 2：在后端去做上述事情（推荐）</p><p>前端导航栏死【标题】问题 ✔</p><p>解决：使用 router.beforeEach，根据要跳转页面的 url 路径 匹配 config/routes 配置的 title 字段。</p><h2 id="14-优化、上线"><a href="#14-优化、上线" class="headerlink" title="14 优化、上线"></a>14 优化、上线</h2><p>1、强制登录，自动跳转到登录页</p><p>解决：axios 全局配置响应拦截、并且添加重定向</p><p>2、区分公开和加密房间；加入有密码的房间，要指定密码</p><p>3、展示已加入队伍人数</p><p>4、重复加入队伍的问题（加锁、分布式锁）并发请求时可能出现问题</p><p><strong>分布式锁</strong></p><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>先区分多环境：前端区分开发和线上接口，后端 prod 改为用线上公网可访问的数据库</p><p>前端：Vercel（免费）</p><p><a href="https://vercel.com/">https://vercel.com/</a></p><p>后端：微信云托管（部署容器的平台，付费）</p><p><a href="https://cloud.weixin.qq.com/cloudrun/service">https://cloud.weixin.qq.com/cloudrun/service</a></p><p><strong>（免备案！！！）</strong></p><h2 id="如何改造成小程序？"><a href="#如何改造成小程序？" class="headerlink" title="如何改造成小程序？"></a>如何改造成小程序？</h2><p><strong>cordova、跨端开发框架 taro、uniapp</strong></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欲速则不达（春招准备）</title>
    <link href="/2024/01/29/%E6%AC%B2%E9%80%9F%E5%88%99%E4%B8%8D%E8%BE%BE%EF%BC%88%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87%EF%BC%89/"/>
    <url>/2024/01/29/%E6%AC%B2%E9%80%9F%E5%88%99%E4%B8%8D%E8%BE%BE%EF%BC%88%E6%98%A5%E6%8B%9B%E5%87%86%E5%A4%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="欲速则不达"><a href="#欲速则不达" class="headerlink" title="欲速则不达"></a>欲速则不达</h1><p>一个月想要好的成绩，必须要放弃一些东西，比如追求所有代码都是自己写，我觉得这是不可能的事情了，一个项目最多一个星期要完成。</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
      <category>春招</category>
      
    </categories>
    
    
    <tags>
      
      <tag>春招</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>anaconda创建虚拟环境</title>
    <link href="/2024/01/26/anaconda%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/01/26/anaconda%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Anaconda-创建Python3-6，Python3-7虚拟环境"><a href="#Anaconda-创建Python3-6，Python3-7虚拟环境" class="headerlink" title="Anaconda 创建Python3.6，Python3.7虚拟环境"></a>Anaconda 创建Python3.6，Python3.7虚拟环境</h1><p>（1）查看当前的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> list<br></code></pre></td></tr></table></figure><p>（2）查看下载源,设置镜像</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">conda config --show-sources<br><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/free<br><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/main<br></code></pre></td></tr></table></figure><p>（3）创建虚拟空间</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">conda create -n env_name <span class="hljs-attribute">python</span>=xxx<br></code></pre></td></tr></table></figure><p>（4）激活虚拟空间</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">activate</span> your_env_name<br></code></pre></td></tr></table></figure><p>（5）退出虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">deactivate env_name</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习（一）</title>
    <link href="/2024/01/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/01/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p><img src="/../images/image-20240125162129581.png" alt="image-20240125162129581"></p><p><img src="/../images/image-20240125162237364.png" alt="image-20240125162237364"></p><p>可视化</p><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>Python 虚拟环境用于将软件包安装与系统隔离开来。</p><p>（1）创建一个虚拟空间</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">python</span> -m venv --<span class="hljs-keyword">system</span>-site-packages .\venv<br></code></pre></td></tr></table></figure><p>（2）激活虚拟环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">.\venv\Scripts\<span class="hljs-built_in">activate</span><br></code></pre></td></tr></table></figure><p>（3）安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bsh">pip install --upgrade tensorflow<br></code></pre></td></tr></table></figure><p>（4）检验安装</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;</span><br></code></pre></td></tr></table></figure><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p><img src="/../images/image-20240126100457833.png" alt="image-20240126100457833"></p><p>通过梯度下降寻找代价函数的最优解（局部），即每次走的都是下降梯度最陡的。</p><p><strong>实现：</strong></p><p><img src="/../images/image-20240126101206245.png" alt="image-20240126101206245"> </p><p><img src="/../images/image-20240126101352489.png" alt="image-20240126101352489"></p><p>注意该问题中w的赋值问题，α是学习率，影响梯度下降率。</p><p><img src="/../images/image-20240126102120090.png" alt="image-20240126102120090"></p><p><strong>学习率：</strong></p><p><img src="/../images/image-20240126102418197.png" alt="image-20240126102418197"></p><p>如果学习率过大可能越过最小值</p><h2 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h2><p><img src="/../images/image-20240202090959378.png" alt="image-20240202090959378"></p><p>归一化：</p><p><img src="/../images/image-20240202091114388.png" alt="image-20240202091114388"></p><p><strong>检查梯度下降是否收敛</strong></p><p><strong>学习曲线</strong></p><p><img src="/../images/image-20240202091759089.png" alt="image-20240202091759089"></p><h2 id="学习率的选择"><a href="#学习率的选择" class="headerlink" title="学习率的选择"></a>学习率的选择</h2><p><img src="/../images/image-20240202092136545.png" alt="image-20240202092136545"></p><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>多项式函数</p><p><img src="/../images/image-20240202092742075.png" alt="image-20240202092742075"></p><h2 id="分类算法"><a href="#分类算法" class="headerlink" title="分类算法"></a>分类算法</h2><p><img src="/../images/image-20240202093159615.png" alt="image-20240202093159615"> </p><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>是一个介于0到1之间的分类算法，而不是回归算法。用来解决二分类问题。</p><p><img src="/../images/image-20240202094009869.png" alt="image-20240202094009869"></p><p><strong>sigmoid function</strong></p><p><img src="/../images/image-20240202094409000.png" alt="image-20240202094409000"></p><p>sigmoid function 是由线性回归而来的。</p><h3 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h3><p><strong>直线型</strong></p><p><img src="/../images/image-20240202095228728.png" alt="image-20240202095228728"></p><p><strong>non-linear型</strong></p><p><img src="/../images/image-20240202095408779.png" alt="image-20240202095408779"></p><p>决策边界的求法：</p><p>令z=0求出边界函数。</p><h3 id="逻辑回归的代价函数"><a href="#逻辑回归的代价函数" class="headerlink" title="逻辑回归的代价函数"></a>逻辑回归的代价函数</h3><p><img src="/../images/image-20240202102624554.png" alt="image-20240202102624554"></p><p><strong>简易版：</strong></p><p><img src="/../images/image-20240202103146956.png" alt="image-20240202103146956"></p><h3 id="梯度下降实现"><a href="#梯度下降实现" class="headerlink" title="梯度下降实现"></a>梯度下降实现</h3><p><img src="/../images/image-20240202103612017.png" alt="image-20240202103612017"></p><h2 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h2><p><img src="/../images/image-20240202104401115.png" alt="image-20240202104401115"></p><p><img src="/../images/image-20240202104552044.png" alt="image-20240202104552044"></p><p>减少过拟合问题 ：</p><ul><li>  减少特征</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaAPI快速索引</title>
    <link href="/2024/01/25/JavaAPI%E5%BF%AB%E9%80%9F%E7%B4%A2%E5%BC%95/"/>
    <url>/2024/01/25/JavaAPI%E5%BF%AB%E9%80%9F%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h1 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"> List&lt;Person&gt; personList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Person&gt;();<br>        personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">8900</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;male&quot;</span>,<span class="hljs-string">&quot;New York&quot;</span>));<br>        personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">7000</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;male&quot;</span>,<span class="hljs-string">&quot;Washington&quot;</span>));<br>        personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Lily&quot;</span>,<span class="hljs-number">7800</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;female&quot;</span>,<span class="hljs-string">&quot;Washington&quot;</span>));<br>        personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Anni&quot;</span>,<span class="hljs-number">8200</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&quot;female&quot;</span>,<span class="hljs-string">&quot;New York&quot;</span>));<br>        personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Owen&quot;</span>,<span class="hljs-number">9500</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;male&quot;</span>,<span class="hljs-string">&quot;New York&quot;</span>));<br>        personList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Alisa&quot;</span>,<span class="hljs-number">7900</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;female&quot;</span>,<span class="hljs-string">&quot;New York&quot;</span>));<br><br>        <span class="hljs-comment">//匹配条件并输出</span><br>        personList.parallelStream().filter(s -&gt; s.getAge() &gt; <span class="hljs-number">19</span>).forEach(System.out::println);<br>        Optional&lt;Person&gt; optionalPerson = personList.stream().filter(s -&gt; s.getAge() &gt; <span class="hljs-number">20</span>).findFirst();<br>        Optional&lt;Person&gt; optionalPerson1 = personList.parallelStream().filter(s -&gt; s.getAge() &gt; <span class="hljs-number">21</span>).findAny();<br><br><span class="hljs-comment">//        Object a=hrRightService.getAllDataScope(&quot;1&quot;);</span><br>        <span class="hljs-comment">//流的种类有顺序流和并行流</span><br>        <span class="hljs-comment">//1.顺序流</span><br>        Stream&lt;Person&gt; stream = personList.stream();<br>        <span class="hljs-comment">//2,并行流数据量大是提示效率</span><br>        Stream&lt;Person&gt; stream1 = personList.parallelStream();<br>        Stream&lt;Person&gt; stream2 = personList.stream().parallel();<br>        <span class="hljs-comment">//遍历stream流</span><br>        personList.stream().forEach(System.out::println);<br>        <span class="hljs-comment">//获取员工工资最高的人</span><br>        Optional&lt;Person&gt; maxOptional = personList.stream().max(Comparator.comparing(Person::getSalary));<br>        System.out.println(<span class="hljs-string">&quot;工资最高的人员&quot;</span> + JsonUtil.toJson(maxOptional));<br>        <span class="hljs-comment">//计算工资大于8000的员工个数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> personList.stream().filter(e-&gt;e.getSalary()&gt;<span class="hljs-number">8000</span>).count();<br>        System.out.println(<span class="hljs-string">&quot;计算工资大于8000的员工个数&quot;</span> + count);<br>        <span class="hljs-comment">//去除元素中重复的值</span><br>        List&lt;Integer&gt; personList1 = personList.stream().distinct().map(Person::getAge).collect(Collectors.toList());<br>        System.out.println(<span class="hljs-string">&quot;去除元素中重复的值&quot;</span> + JsonUtil.toJson(personList1));<br>        <span class="hljs-comment">//筛选</span><br>        List&lt;String&gt; engNameList = personList.stream().filter(e -&gt; e.getSalary() &gt; <span class="hljs-number">8000</span>).map(Person::getName).collect(Collectors.toList());<br>        System.out.println(<span class="hljs-string">&quot;员工工资高于8000的人员名字列表&quot;</span> + JsonUtil.toJson(engNameList));<br>        <span class="hljs-comment">//映射</span><br>        <span class="hljs-comment">//把sex中英文字符串数组的元素全部改为大写。(这里相当于把这个sex元素变成了字符串类型可以调用String的任何方法</span><br>        List&lt;String&gt; sexList = personList.stream().map(e -&gt; e.getSex().toUpperCase()).collect(Collectors.toList());<br>        System.out.println(<span class="hljs-string">&quot;把sex中英文字符串数组的元素全部改为大写&quot;</span> + JsonUtil.toJson(sexList));<br>        <span class="hljs-comment">//年龄整都整体+3岁。</span><br>        List&lt;Integer&gt; ageList = personList.stream().map(e-&gt;e.getAge()+<span class="hljs-number">3</span>).collect(Collectors.toList());<br>        System.out.println(<span class="hljs-string">&quot;年龄整都整体+3岁。&quot;</span> + JsonUtil.toJson(ageList));<br>        <span class="hljs-comment">//list转map用名字作为key</span><br>        Map&lt;String, Person&gt; map = personList.stream().collect(Collectors.toMap(Person::getName, person -&gt; person));<br>        System.out.println(<span class="hljs-string">&quot;list转map的结果&quot;</span> + JsonUtil.toJson(map));<br>        <span class="hljs-comment">//list转set</span><br>        Set&lt;Person&gt; peopleSet = personList.stream().collect(Collectors.toSet());<br>        <span class="hljs-comment">//list条件筛选工资大于8000的人生成新的map</span><br>        Map&lt;String, Person&gt; maps = personList.stream().filter(p -&gt; p.getSalary() &gt; <span class="hljs-number">8000</span>).collect(Collectors.toMap(Person::getName, p -&gt; p));<br>        System.out.println(<span class="hljs-string">&quot;list条件筛选工资大于8000的人生成新的map&quot;</span> + JsonUtil.toJson(maps));<br>        <span class="hljs-comment">//将名字和工作地合并成一起生成新的字符串</span><br>        List&lt;String&gt; nameWorkList = personList.stream().map(e -&gt; e.getName() + e.getArea()).collect(Collectors.toList());<br>        System.out.println(<span class="hljs-string">&quot;将名字和工作地合并成一起生成新的字符串&quot;</span> + JsonUtil.toJson(nameWorkList));<br>        <span class="hljs-comment">//分组</span><br>        <span class="hljs-comment">//按照员工薪资高于8000的分组</span><br>        Map&lt;Boolean, List&lt;Person&gt;&gt; map1 = personList.stream().collect(Collectors.partitioningBy(e -&gt; e.getSalary() &gt; <span class="hljs-number">8000</span>));<br>        <span class="hljs-comment">//按员工性别分组</span><br>        Map&lt;String, List&lt;Person&gt;&gt; map2 = personList.stream().collect(Collectors.groupingBy(Person::getSex));<br>        <span class="hljs-comment">//员工先按性别再按照地区分组</span><br>        Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));<br>        <span class="hljs-comment">//接合(joining)函数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">engName</span> <span class="hljs-operator">=</span> personList.stream().map(Person::getName).collect(Collectors.joining(<span class="hljs-string">&quot;,&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;所有的名字拼接在一起生成新的字符串&quot;</span> + engName);<br>        <span class="hljs-comment">//排序按照工资自然排序</span><br>        List&lt;Person&gt; sortList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).collect(Collectors.toList());<br>        <span class="hljs-comment">//排序按照工资倒序排序</span><br>        List&lt;Person&gt; sortList1 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed()).collect(Collectors.toList());<br>        <span class="hljs-comment">//排序</span><br>        <span class="hljs-comment">//提取组合</span><br>        <span class="hljs-comment">//Collectors提供了一系列用于数据统计的静态方法：</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//计数：count</span><br>        <span class="hljs-comment">//平均值：averagingInt、averagingLong、averagingDouble</span><br>        <span class="hljs-comment">//最值：maxBy、minBy</span><br>        <span class="hljs-comment">//求和：summingInt、summingLong、summingDouble</span><br>        <span class="hljs-comment">//统计以上所有：summarizingInt、summarizingLong、summarizingDouble</span><br>        <span class="hljs-comment">// 求总数</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count1</span> <span class="hljs-operator">=</span> personList.stream().collect(Collectors.counting());<br>        <span class="hljs-comment">// 求平均工资</span><br>        <span class="hljs-type">Double</span> <span class="hljs-variable">average</span> <span class="hljs-operator">=</span> personList.stream().collect(Collectors.averagingDouble(Person::getSalary));<br>        <span class="hljs-comment">// 求最高工资</span><br>        Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));<br>        <span class="hljs-comment">// 求工资之和</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> personList.stream().collect(Collectors.summingInt(Person::getSalary));<br>        <span class="hljs-comment">// 一次性统计所有信息</span><br>        <span class="hljs-type">DoubleSummaryStatistics</span> <span class="hljs-variable">collect</span> <span class="hljs-operator">=</span> personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));<br>        <span class="hljs-comment">//遍历多重list取出子list集合</span><br>        List&lt;List&lt;Person&gt;&gt; personLists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Person&gt;&gt;();<br>        personLists.add(personList);<br>        List&lt;Person&gt; = personLists.stream()<br>        .flatMap(person-&gt; person.stream())<br>        .collect(Collectors.toList());<br><br></code></pre></td></tr></table></figure><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><ul><li>  构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//public StringBuffer()  构造一个没有字符的字符串缓冲区，初始容量为16个字符。</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    System.out.println(<span class="hljs-string">&quot;sb1:&quot;</span> + sb1); <span class="hljs-comment">//StringBuffer重写了toString方法</span><br>    <span class="hljs-comment">//如何获取StringBuffer的容量</span><br>    <span class="hljs-comment">//public int capacity()返回当前容量。</span><br>    System.out.println(<span class="hljs-string">&quot;当前StringBuffer的容量为：&quot;</span> + sb1.capacity());<br>    <span class="hljs-comment">//public int length()返回长度（字符数）。</span><br>    System.out.println(<span class="hljs-string">&quot;StringBuffer中字符串的长度为：&quot;</span> + sb1.length());<br> <br>    System.out.println(<span class="hljs-string">&quot;===================================================&quot;</span>);<br>    <span class="hljs-comment">//public StringBuffer(int capacity)  构造一个没有字符的字符串缓冲区和指定的初始容量。</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">50</span>);<br>    System.out.println(<span class="hljs-string">&quot;sb2:&quot;</span> + sb2); <span class="hljs-comment">//StringBuffer重写了toString方法</span><br>    <span class="hljs-comment">//如何获取StringBuffer的容量</span><br>    <span class="hljs-comment">//public int capacity()返回当前容量。</span><br>    System.out.println(<span class="hljs-string">&quot;当前StringBuffer的容量为：&quot;</span> + sb2.capacity());<br>    <span class="hljs-comment">//public int length()返回长度（字符数）。</span><br>    System.out.println(<span class="hljs-string">&quot;StringBuffer中字符串的长度为：&quot;</span> + sb2.length());<br> <br>    System.out.println(<span class="hljs-string">&quot;===================================================&quot;</span>);<br>    <span class="hljs-comment">//public StringBuffer(String str) 构造一个初始化为指定字符串内容的字符串缓冲区。</span><br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;sb3:&quot;</span> + sb3); <span class="hljs-comment">//StringBuffer重写了toString方法</span><br>    <span class="hljs-comment">//如何获取StringBuffer的容量</span><br>    <span class="hljs-comment">//public int capacity()返回当前容量。</span><br>    System.out.println(<span class="hljs-string">&quot;当前StringBuffer的容量为：&quot;</span> + sb3.capacity()); <span class="hljs-comment">// 21 = 16 + 5</span><br>    <span class="hljs-comment">//public int length()返回长度（字符数）。</span><br>    System.out.println(<span class="hljs-string">&quot;StringBuffer中字符串的长度为：&quot;</span> + sb3.length()); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><ul><li>  添加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个StringBuffer对象</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br> <br>        <span class="hljs-comment">//public StringBuffer append(String str)</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> sb.append(<span class="hljs-string">&quot;hello&quot;</span>);<br> <br><span class="hljs-comment">//        sb.append(10);</span><br><span class="hljs-comment">//        sb.append(&#x27;a&#x27;);</span><br><span class="hljs-comment">//        sb.append(true);</span><br><span class="hljs-comment">//        sb.append(12.34);</span><br><span class="hljs-comment">//        //无论追加的数据是什么类型，一旦进入到StringBuffer中就是成了字符串</span><br><span class="hljs-comment">//        System.out.println(sb);</span><br><span class="hljs-comment">//        System.out.println(stringBuffer);</span><br> <br>        <span class="hljs-comment">//链式编程追加</span><br>        sb.append(<span class="hljs-number">10</span>).append(<span class="hljs-string">&#x27;a&#x27;</span>).append(<span class="hljs-literal">true</span>).append(<span class="hljs-number">12.34</span>);<br>        System.out.println(sb);<br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        <span class="hljs-comment">//hello10atrue12.34</span><br>        <span class="hljs-comment">//public StringBuffer insert(int offset,String str)</span><br>        <span class="hljs-comment">// 将字符串插入到此字符序列中。返回的是字符串缓冲区本身</span><br>        <span class="hljs-comment">//String参数的String按顺序插入到指定偏移量的该序列中，向上移动原始位于该位置的任何字符，</span><br>        <span class="hljs-comment">// 并将该序列的长度增加到参数的长度。</span><br>        sb.insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;hadoop&quot;</span>);<br>        System.out.println(sb);<br>        <span class="hljs-comment">// 如果str是null ，则四个字符&quot;null&quot;被插入到该序列中。</span><br><span class="hljs-comment">//        sb.insert(5,null);</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        sb.insert(<span class="hljs-number">5</span>, o);<br>        System.out.println(sb);<br> <br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用带参数的构造方法创建StringBuffer对象</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;bigdata&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;未做删除操作之前的StringBuffer:&quot;</span> + sb);<br><span class="hljs-comment">//        StringBuffer sb2 = sb.deleteCharAt(3); // 操作的是同一个StringBuffer对象</span><br><span class="hljs-comment">//        System.out.println(sb);</span><br><span class="hljs-comment">//        System.out.println(sb2);</span><br><span class="hljs-comment">//        System.out.println(sb==sb2);</span><br>        sb.deleteCharAt(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;做删除操作之后的StringBuffer:&quot;</span> + sb);<br>        <span class="hljs-comment">//如果 index为负数或大于或等于length() 。</span><br>        <span class="hljs-comment">//index的值最大可以取到实际存储字符串的长度-1</span><br><span class="hljs-comment">//        sb.deleteCharAt(30);</span><br><span class="hljs-comment">//        sb.deleteCharAt(6);</span><br> <br>        System.out.println(<span class="hljs-string">&quot;===============================================&quot;</span>);<br>        <span class="hljs-comment">//public StringBuffer delete(int start,int end)</span><br>        <span class="hljs-comment">//删除此序列的子字符串中的字符。</span><br>        <span class="hljs-comment">// 子串开始于指定start并延伸到字符索引end - 1 ，或如果没有这样的字符存在的序列的结束。</span><br>        <span class="hljs-comment">// 如果start等于end ，则不作任何更改。</span><br>        <span class="hljs-comment">//  start&lt;=index&lt;end</span><br>        <span class="hljs-comment">//bigata</span><br><span class="hljs-comment">//       sb.delete(2,5);</span><br><span class="hljs-comment">//        sb.delete(2,6);</span><br><span class="hljs-comment">//        sb.delete(2,10);</span><br>        <span class="hljs-comment">//注意开始位置一定是已经存在的索引，否则报错</span><br><span class="hljs-comment">//        sb.delete(8,10);</span><br>        System.out.println(sb);<br> <br>        <span class="hljs-comment">//需求：删除StringBuffer中的所有字符</span><br>        sb.delete(<span class="hljs-number">0</span>, sb.length());<br>        System.out.println(<span class="hljs-string">&quot;删除StringBuffer中的所有字符：&quot;</span> + sb);<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  替换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个StringBuffer对象</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-comment">//往StringBuffer中添加一些内容</span><br>        sb.append(<span class="hljs-string">&quot;java&quot;</span>).append(<span class="hljs-string">&quot;mysql&quot;</span>).append(<span class="hljs-string">&quot;hadoop&quot;</span>).append(<span class="hljs-string">&quot;hive&quot;</span>).append(<span class="hljs-string">&quot;spark&quot;</span>).append(<span class="hljs-string">&quot;flink&quot;</span>);<br>        System.out.println(sb);<br>        <span class="hljs-comment">//public StringBuffer replace(int start,int end,String str)</span><br>        sb.replace(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&quot;数加学院真好&quot;</span>);<br>        System.out.println(sb);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  反转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        sb.append(<span class="hljs-string">&quot;我爱你中国&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;反转之前：&quot;</span> + sb);<br> <br>        System.out.println(<span class="hljs-string">&quot;反转之后：&quot;</span>);<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb2</span> <span class="hljs-operator">=</span> sb.reverse(); <span class="hljs-comment">// 操作的是同一个StringBuffer对象</span><br>        System.out.println(sb);<br>        System.out.println(sb2);<br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  截取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringDemo</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        sb.append(<span class="hljs-string">&quot;java&quot;</span>)<br>                .append(<span class="hljs-string">&quot;mysql&quot;</span>)<br>                .append(<span class="hljs-string">&quot;hive&quot;</span>)<br>                .append(<span class="hljs-string">&quot;ETL&quot;</span>)<br>                .append(<span class="hljs-string">&quot;spark&quot;</span>);<br>        System.out.println(sb);<br> <br>        <span class="hljs-comment">//public String substring(int start)</span><br>        <span class="hljs-comment">//不会改变原来StringBuffer中的数据</span><br>        <span class="hljs-comment">//返回值是一个String类型的数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> sb.substring(<span class="hljs-number">4</span>);<br>        System.out.println(<span class="hljs-string">&quot;截取的内容是：&quot;</span>+s1);<br><span class="hljs-comment">//        mysqlhiveETLspark</span><br>        System.out.println(<span class="hljs-string">&quot;StringBuffer的内容为：&quot;</span>+sb);<br><span class="hljs-comment">//StringBuffer的内容为：javamysqlhiveETLspark</span><br> <br>        <span class="hljs-comment">//public String substring(int start,int end) 含头不含尾 [start,end)</span><br>        <span class="hljs-comment">//javamysqlhiveETLspark</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> sb.substring(<span class="hljs-number">9</span>, <span class="hljs-number">13</span>);<br>        System.out.println(<span class="hljs-string">&quot;截取的内容是：&quot;</span>+s2);<br><span class="hljs-comment">//        截取的内容是：hive</span><br>        System.out.println(<span class="hljs-string">&quot;StringBuffer的内容为：&quot;</span>+sb);<br><span class="hljs-comment">//StringBuffer的内容为：javamysqlhiveETLspark</span><br> <br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  String与StringBuffer之间的转换:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//String --&gt; StringBuffer</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">//        StringBuffer sb = s;</span><br>        <span class="hljs-comment">//java: 不兼容的类型: java.lang.String无法转换为java.lang.StringBuffer</span><br><span class="hljs-comment">//        StringBuffer sb = &quot;hello&quot;;</span><br>        <span class="hljs-comment">//方式1：通过构造方法转换</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(s);<br>        System.out.println(s);<br>        System.out.println(sb1);<br>        <span class="hljs-comment">//方式2：通过append()</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        sb2.append(s);<br>        System.out.println(s);<br>        System.out.println(sb2);<br> <br>        System.out.println(<span class="hljs-string">&quot;==============================================&quot;</span>);<br>        <span class="hljs-comment">//StringBuffer --&gt; String</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;bigdata&quot;</span>);<br>        <span class="hljs-comment">//方式1：toString()方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> sb3.toString();<br>        System.out.println(sb3);<br>        System.out.println(s1);<br>        <span class="hljs-comment">//方式2：subString</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> sb3.substring(<span class="hljs-number">0</span>);<br>        System.out.println(s2);<br>        System.out.println(sb3);<br>        <span class="hljs-comment">//方式3：String类的构造方法</span><br>        <span class="hljs-comment">//String(StringBuffer buffer)</span><br>        <span class="hljs-comment">//分配一个新的字符串，其中包含当前包含在字符串缓冲区参数中的字符序列。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(sb3);<br>        System.out.println(s3);<br>        System.out.println(sb3);<br> <br> <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h1><p>BeanUtils.copyProperties(source,target);,属性名和属性类型都相同的属性才能被成功拷贝赋值</p><h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Optional</span>.ofNullable<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希表</title>
    <link href="/2024/01/25/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2024/01/25/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="49字母异位词分组"><a href="#49字母异位词分组" class="headerlink" title="49字母异位词分组"></a>49<a href="https://leetcode.cn/problems/group-anagrams/">字母异位词分组</a></h2><p><strong>思路</strong></p><ul><li>  字母异位词可以利用统计每个字母出现的次数，利用map进行映射，或者通过将每个字符串排序，然后通过hashmap进行映射。</li></ul><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        Map&lt;String,List&lt;String&gt;&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,List&lt;String&gt;&gt;();<br><br>        <span class="hljs-comment">//对每一个字符串进行排序，排序后的进行比对，</span><br>       <span class="hljs-keyword">for</span>(String s:strs)&#123;<br>           <span class="hljs-type">char</span>[] array=s.toCharArray();<br>           Arrays.sort(array);<br>            String key=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(array);<br>            List&lt;String&gt; list=map.getOrDefault(key,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;());<br>            list.add(s);<br>            map.put(key,list);<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a></h2><p><strong>错误作答：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">findAnagrams</span><span class="hljs-params">(String s, String p)</span> &#123;<br>        <span class="hljs-comment">//思路：遍历，进函数返回对错</span><br>        <span class="hljs-type">int</span> sn=s.length();<br>        <span class="hljs-type">int</span> pn=p.length();<br>        List&lt;Integer&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sn-pn+<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(isRight(s.substring(i,i+pn-<span class="hljs-number">1</span>),p))&#123;<br>                list.add(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">//判断两者是否是异位词</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRight</span><span class="hljs-params">(String a,String b)</span>&#123;<br>        <span class="hljs-type">char</span>[] arraya=a.toCharArray();<br>        Arrays.sort(arraya);<br>        String sa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arraya);<br>        <span class="hljs-type">char</span>[] arrayb=b.toCharArray();<br>        Arrays.sort(arrayb);<br>        String sb=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arrayb);<br>        <span class="hljs-keyword">return</span> sa==sb;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h2><p><strong>思路：</strong></p><p>首先把第一个数组加入到set中，利用set中的元素不会重复的原则，然后遍历查找第二个数组中的元素是否在第一个set中，如果在就加入set2中，最后用stream把set变为int数组。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>       <br>       Set&lt;Integer&gt; set1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br>       Set&lt;Integer&gt; set2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums1.length;i++)&#123;<br>           set1.add(nums1[i]);<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums2.length;i++)&#123;<br>           <span class="hljs-keyword">if</span>(set1.contains(nums2[i]))&#123;<br>                set2.add(nums2[i]);<br>           &#125;<br>       &#125;<br>        <span class="hljs-keyword">return</span> set2.stream().mapToInt(x-&gt;x).toArray();<span class="hljs-comment">//需要注意的点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></h2><p><strong>思路：</strong></p><p>快乐数的寻找主要要把握住，如果是无限循环，那么这个sum一定会反复出现。也就是需要一个set去监控这个sum有没有重复出现。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">//如果无限循环，那么sum是会重复的。</span><br>        Set&lt;Integer&gt; set=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">1</span>&amp;&amp;!set.contains(n))&#123;<br>            <br>            set.add(n);<br>            n=sum(n);<br>           <br>        &#125;<br>        <span class="hljs-keyword">return</span> n==<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>            sum+=(n%<span class="hljs-number">10</span>)*(n%<span class="hljs-number">10</span>);<br>            n/=<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h2><p><strong>思路：</strong></p><p>本题不能使用哈希表，可以用双指针。其中a,b,c是nums[i],nums[j],nums[k],要注意的是a，b，c是可以重复的，而a不能和自己重复，首先可以对nums进行排序，然后对a进行去重，用left和right双指针遍历当sum=0时，分别对left和right进行去重。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; ans=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Arrays.sort(nums);<br>        <span class="hljs-comment">//去重逻辑：只要找到以后就判断后面和前面有么有重复的。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-comment">//如果排序以后第一个就比0大，直接返回</span><br>            <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>]&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>            <span class="hljs-comment">//去重a</span><br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]==nums[i-<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-type">int</span> left=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> right=nums.length-<span class="hljs-number">1</span>;<br><br>           <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>               <span class="hljs-type">int</span> sum=nums[i]+nums[left]+nums[right];<br>               <span class="hljs-keyword">if</span>(sum&lt;<span class="hljs-number">0</span>)&#123;<br>                   left++;<br>               &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&gt;<span class="hljs-number">0</span>)&#123;<br>                   right--;<br><br>               &#125;<span class="hljs-keyword">else</span> &#123;<br>                   ans.add(Arrays.asList(nums[i],nums[left],nums[right]));<br>                   <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="hljs-number">1</span>])left++;<br>                   <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="hljs-number">1</span>])right--;<br>                   left++;<br>                   right--;<br>               &#125;<br>           &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a></h2><p>思路：和上面的三数之和一样，只不过多列一层for循环。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">fourSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; ans =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]==nums[i-<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            <span class="hljs-keyword">if</span>(nums[i]&gt;<span class="hljs-number">0</span>&amp;&amp;nums[i]&gt;target)&#123;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;nums.length;j++)&#123;<br>                <span class="hljs-keyword">if</span>(j&gt;i+<span class="hljs-number">1</span>&amp;&amp;nums[j]==nums[j-<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> left=j+<span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> right=nums.length-<span class="hljs-number">1</span>;<br><br>                <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>                    <span class="hljs-type">long</span> sum=(<span class="hljs-type">long</span>)nums[i]+nums[j]+nums[left]+nums[right];<br>                    <span class="hljs-keyword">if</span>(sum&gt;target)&#123;<br>                        right--;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&lt;target)&#123;<br>                        left++;<br>                    &#125;<br><br>                    <span class="hljs-keyword">else</span>&#123;<br>                        ans.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));<br>                        <span class="hljs-keyword">while</span>(left&lt;right &amp;&amp;nums[left]==nums[left+<span class="hljs-number">1</span>])&#123;<br>                            left++;<br>                        &#125;<br>                        <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp; nums[right]==nums[right-<span class="hljs-number">1</span>])&#123;<br>                            right--;<br>                        &#125;<br>                        left++;<br>                        right--;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454. 四数相加 II"></a><a href="https://leetcode.cn/problems/4sum-ii/">454. 四数相加 II</a></h2><p><strong>思路：</strong></p><p>本题和上面的又不一样，本题中是分为了4个数组,其中分别表示a,b,,c,d。如果a+b+c+d=0则为一个元组，不需要考虑重复。统计有多少个taple。把a,b的和作为key，value为出现的次数。然后遍历后面两个数组，如果后面c+d=0-（a+b）那么次数加一，并且统计到count中，也就是最终数量。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fourSumCount</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span>[] nums3, <span class="hljs-type">int</span>[] nums4)</span> &#123;<br>        <span class="hljs-comment">//思路：遍历n次</span><br>        Map&lt;Integer,Integer&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:nums1)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j:nums2)&#123;<br>                map.put(i+j,map.getOrDefault(i+j,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:nums3)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j:nums4)&#123;<br>                count+=map.getOrDefault(<span class="hljs-number">0</span>-i-j,<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常见API（JAVA）"><a href="#常见API（JAVA）" class="headerlink" title="常见API（JAVA）"></a>常见API（JAVA）</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p> 1：put方法：put(key，value)，我们经常用存储一些常用的数据，比如flag、百分比之类的，我们就可以返回map结构，如果key相同则值会覆盖，允许key和value为null。</p><p> 2：get方法：get(key)，主要用来取map中存储的数据，我们根据其key值，可以取到对应的value值，没有该key对应的值则返回null。</p><p>  3：remove方法：remove(key)，主要用来删除map中对应的key及其value值。</p><p>4：clear方法，用法：clear()，会清空map中的数据。</p><p>5：containsKey(key)，判断map集合中是否包含某个key。</p><p>6：containsKey(value)，判断map集合中是否包含某个value。</p><p>7：entrySet()：hashmap.entrySet().iterator()，entrySet()的效率比keySet()要高。key和value存储在entry对象里面，遍历的时候，拿到entry对象就可以取到value了。</p><p>8：keySet()：hashmap.keySet().iterator()，keySet是把key放到一个set集合中，通过迭代器遍历，再用hashmap.get(key)来取到value的值。  </p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>  1.add(Object obj)方法（详述）：</p><p>2.size() 方法：</p><p>3.remove(Object  obj)方法 ： </p><p>4.isEmpty()方法 ：</p><p>5.clear() 方法： </p><p>6.iterator() 迭代器：</p><p>7.contains(Object o)方法：</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>代码随想录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swagger使用指南</title>
    <link href="/2024/01/25/swagger%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2024/01/25/swagger%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="接口工具postman、swagger、knife4j"><a href="#接口工具postman、swagger、knife4j" class="headerlink" title="接口工具postman、swagger、knife4j"></a>接口工具postman、swagger、knife4j</h1><h2 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h2><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。postman被500万开发者和超100,000家公司用于每月访问1.3亿个API。</p><p>官方网址：<a href="https://www.postman.com/">https://www.postman.com/</a></p><p>解压资料文件夹中的软件，安装即可</p><p><img src="/../images/image-20210413162511873.png" alt="image-20210413162511873"></p><p>通常的接口测试查看请求和响应，下面是登录请求的测试</p><p><img src="/../images/image-20210413162558657.png" alt="image-20210413162558657"></p><h2 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h2><p>(1)简介</p><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务(<a href="https://swagger.io/">https://swagger.io/</a>)。 它的主要作用是：</p><ol><li><p>使得前后端分离开发更加方便，有利于团队协作</p></li><li><p>接口的文档在线自动生成，降低后端开发人员编写接口文档的负担</p></li><li><p>功能测试 </p><p> Spring已经将Swagger纳入自身的标准，建立了Spring-swagger项目，现在叫Springfox。通过在项目中引入Springfox ，即可非常简单快捷的使用Swagger。</p></li></ol><p>(2)SpringBoot集成Swagger</p><ul><li><p>引入依赖,在heima-leadnews-model和heima-leadnews-common模块中引入该依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>只需要在heima-leadnews-common中进行配置即可，因为其他微服务工程都直接或间接依赖即可。</p><ul><li>在heima-leadnews-common工程中添加一个配置类</li></ul><p>新增：com.heima.common.swagger.SwaggerConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.swagger;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfiguration</span> &#123;<br><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">buildDocket</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>              .apiInfo(buildApiInfo())<br>              .select()<br>              <span class="hljs-comment">// 要扫描的API(Controller)基础包</span><br>              .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.heima&quot;</span>))<br>              .paths(PathSelectors.any())<br>              .build();<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">buildApiInfo</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;黑马程序员&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>              .title(<span class="hljs-string">&quot;黑马头条-平台管理API文档&quot;</span>)<br>              .description(<span class="hljs-string">&quot;黑马头条后台api&quot;</span>)<br>              .contact(contact)<br>              .version(<span class="hljs-string">&quot;1.0.0&quot;</span>).build();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在heima-leadnews-common模块中的resources目录中新增以下目录和文件</p><p>文件：resources/META-INF/Spring.factories</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>  com.heima.common.swagger.SwaggerConfiguration<br></code></pre></td></tr></table></figure><p>（3）Swagger常用注解</p><p>在Java类中添加Swagger的注解即可生成Swagger接口文档，常用Swagger注解如下：</p><p>@Api：修饰整个类，描述Controller的作用  </p><p>@ApiOperation：描述一个类的一个方法，或者说一个接口  </p><p>@ApiParam：单个参数的描述信息  </p><p>@ApiModel：用对象来接收参数  </p><p>@ApiModelProperty：用对象接收参数时，描述对象的一个字段  </p><p>@ApiResponse：HTTP响应其中1个描述  </p><p>@ApiResponses：HTTP响应整体描述  </p><p>@ApiIgnore：使用该注解忽略这个API  </p><p>@ApiError ：发生错误返回的信息  </p><p>@ApiImplicitParam：一个请求参数  </p><p>@ApiImplicitParams：多个请求参数的描述信息</p><p> @ApiImplicitParam属性：</p><table><thead><tr><th>属性</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>paramType</td><td></td><td>查询参数类型</td></tr><tr><td></td><td>path</td><td>以地址的形式提交数据</td></tr><tr><td></td><td>query</td><td>直接跟参数完成自动映射赋值</td></tr><tr><td></td><td>body</td><td>以流的形式提交 仅支持POST</td></tr><tr><td></td><td>header</td><td>参数在request headers 里边提交</td></tr><tr><td></td><td>form</td><td>以form表单的形式提交 仅支持POST</td></tr><tr><td>dataType</td><td></td><td>参数的数据类型 只作为标志说明，并没有实际验证</td></tr><tr><td></td><td>Long</td><td></td></tr><tr><td></td><td>String</td><td></td></tr><tr><td>name</td><td></td><td>接收参数名</td></tr><tr><td>value</td><td></td><td>接收参数的意义描述</td></tr><tr><td>required</td><td></td><td>参数是否必填</td></tr><tr><td></td><td>true</td><td>必填</td></tr><tr><td></td><td>false</td><td>非必填</td></tr><tr><td>defaultValue</td><td></td><td>默认值</td></tr></tbody></table><p>我们在ApUserLoginController中添加Swagger注解，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/v1/login&quot;)</span><br><span class="hljs-meta">@Api(value = &quot;app端用户登录&quot;, tags = &quot;ap_user&quot;, description = &quot;app端用户登录API&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApUserLoginController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ApUserService apUserService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login_auth&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;用户登录&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginDto dto)</span>&#123;<br>        <span class="hljs-keyword">return</span> apUserService.login(dto);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>LoginDto</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginDto</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 手机号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;手机号&quot;,required = true)</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiModelProperty(value=&quot;密码&quot;,required = true)</span><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动user微服务，访问地址：<a href="http://localhost:51801/swagger-ui.html">http://localhost:51801/swagger-ui.html</a></p><h2 id="knife4j"><a href="#knife4j" class="headerlink" title="knife4j"></a>knife4j</h2><p>(1)简介</p><p>knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望它能像一把匕首一样小巧,轻量,并且功能强悍!</p><p>gitee地址：<a href="https://gitee.com/xiaoym/knife4j">https://gitee.com/xiaoym/knife4j</a></p><p>官方文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a></p><p>效果演示：<a href="http://knife4j.xiaominfo.com/doc.html">http://knife4j.xiaominfo.com/doc.html</a></p><p>(2)核心功能</p><p>该UI增强包主要包括两大核心功能：文档说明 和 在线调试</p><ul><li>文档说明：根据Swagger的规范说明，详细列出接口文档的说明，包括接口地址、类型、请求示例、请求参数、响应示例、响应参数、响应码等信息，使用swagger-bootstrap-ui能根据该文档说明，对该接口的使用情况一目了然。</li><li>在线调试：提供在线接口联调的强大功能，自动解析当前接口参数,同时包含表单验证，调用参数可返回接口响应内容、headers、Curl请求命令实例、响应时间、响应状态码等信息，帮助开发者在线调试，而不必通过其他测试工具测试接口是否正确,简介、强大。</li><li>个性化配置：通过个性化ui配置项，可自定义UI的相关显示信息</li><li>离线文档：根据标准规范，生成的在线markdown离线文档，开发者可以进行拷贝生成markdown接口文档，通过其他第三方markdown转换工具转换成html或pdf，这样也可以放弃swagger2markdown组件</li><li>接口排序：自1.8.5后，ui支持了接口排序功能，例如一个注册功能主要包含了多个步骤,可以根据swagger-bootstrap-ui提供的接口排序规则实现接口的排序，step化接口操作，方便其他开发者进行接口对接</li></ul><p>(3)快速集成</p><ul><li>在heima-leadnews-common模块中的<code>pom.xml</code>文件中引入<code>knife4j</code>的依赖,如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>创建Swagger配置文件</li></ul><p>在heima-leadnews-common模块中新建配置类</p><p>新建Swagger的配置文件<code>SwaggerConfiguration.java</code>文件,创建springfox提供的Docket分组对象,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.common.knife4j;<br><br><span class="hljs-keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><span class="hljs-keyword">import</span> springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@EnableKnife4j</span><br><span class="hljs-meta">@Import(BeanValidatorPluginsConfiguration.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Configuration</span> &#123;<br><br>    <span class="hljs-meta">@Bean(value = &quot;defaultApi2&quot;)</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">defaultApi2</span><span class="hljs-params">()</span> &#123;<br>        Docket docket=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                <span class="hljs-comment">//分组名称</span><br>                .groupName(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .select()<br>                <span class="hljs-comment">//这里指定Controller扫描包路径</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.heima&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>        <span class="hljs-keyword">return</span> docket;<br>    &#125;<br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;黑马头条API文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;黑马头条API文档&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上有两个注解需要特别说明，如下表：</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@EnableSwagger2</code></td><td>该注解是Springfox-swagger框架提供的使用Swagger注解，该注解必须加</td></tr><tr><td><code>@EnableKnife4j</code></td><td>该注解是<code>knife4j</code>提供的增强注解,Ui提供了例如动态参数、参数过滤、接口排序等增强功能,如果你想使用这些增强功能就必须加该注解，否则可以不用加</td></tr></tbody></table><ul><li>添加配置</li></ul><p>在Spring.factories中新增配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>  com.heima.common.swagger.Swagger2Configuration, \<br>  com.heima.common.swagger.SwaggerConfiguration<br></code></pre></td></tr></table></figure><ul><li>访问</li></ul><p>在浏览器输入地址：<code>http://host:port/doc.html</code></p><p><strong>常用api：</strong></p><p>@API</p><p>@ApiOperation</p><p>@ApiModelProperty</p><p>@ApilmplicitParam</p><p>@ApilmplicitParams</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>往数据库插入海量测试数据</title>
    <link href="/2024/01/24/%E5%BE%80%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%92%E5%85%A5%E6%B5%B7%E9%87%8F%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/"/>
    <url>/2024/01/24/%E5%BE%80%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%92%E5%85%A5%E6%B5%B7%E9%87%8F%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="插入海量数据"><a href="#插入海量数据" class="headerlink" title="插入海量数据"></a>插入海量数据</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量插入用户</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doInsertUsers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        stopWatch.start();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INSERT_NUM</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span>;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; INSERT_NUM; i++) &#123;<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>            user.setUsername(<span class="hljs-string">&quot;天空浮云&quot;</span>+i);<br>            user.setUserAccount(<span class="hljs-string">&quot;天空浮云&quot;</span>+i);<br>            user.setAvatarUrl(<span class="hljs-string">&quot;https://ts1.cn.mm.bing.net/th/id/R-C.0f934d32ccaec7313fe0c863ff837896?rik=xqgS9QMfOvgqxg&amp;riu=http%3a%2f%2fimage.hnol.net%2fc%2f2016-10%2f06%2f15%2f20161006151911351-2127595.jpg&amp;ehk=uWQPlN9EpXkxRsiGr6aqaoqEeUvn%2fp%2fVKeRyuoBJccI%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&quot;</span>);<br>            user.setGender(<span class="hljs-number">0</span>);<br>            user.setUserPassword(<span class="hljs-string">&quot;12345678&quot;</span>);<br>            user.setPhone(<span class="hljs-string">&quot;13450448027&quot;</span>);<br>            user.setEmail(<span class="hljs-string">&quot;123@qq.com&quot;</span>);<br>            user.setTags(<span class="hljs-string">&quot;[]&quot;</span>);<br>            user.setUserStatus(<span class="hljs-number">0</span>);<br>            user.setUserRole(<span class="hljs-number">0</span>);<br>            user.setPlanetCode(<span class="hljs-string">&quot;30000&quot;</span>+i);<br>            userList.add(user);<br>        &#125;<br>        <span class="hljs-comment">// 20 秒 10 万条</span><br>        userService.saveBatch(userList, <span class="hljs-number">10000</span>);<br>        stopWatch.stop();<br>        System.out.println(stopWatch.getTotalTimeMillis());<br>    &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIS-Family项目笔记</title>
    <link href="/2024/01/23/MIS-Family%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/01/23/MIS-Family%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MIS-Family"><a href="#MIS-Family" class="headerlink" title="MIS-Family"></a>MIS-Family</h1><h2 id="开发日记"><a href="#开发日记" class="headerlink" title="开发日记"></a>开发日记</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li>  [ ] 主页的动态页面</li><li>  [ ] 消息页面</li><li>  [ ] 按钮悬浮</li><li>  [ ] 检索组件封装</li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>  [x] 创建队伍</li><li>  [x] 修改队伍</li><li>  [x] 查询队伍列表</li><li>  [x] 加入队伍接口</li><li>  [x] 解散队伍</li><li>  [x] 退出队伍</li><li>  [x] 查询我创建的队伍</li><li>  [x] 查询我加入的队伍（所有队伍类型，加密的也是）</li><li>  [ ] 通过tag查找用户和队伍</li><li>  [ ] 发布动态</li><li>  [ ] 聊天（微信聊天类似）</li><li>  [ ] base数据插入进行封装</li></ul><h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><ul><li>  找伙伴（√）</li></ul><p><img src="/../images/image-20240124135036206.png" alt="image-20240124135036206"></p><p><img src="/../images/image-20240124135057394.png" alt="image-20240124135057394"></p><p>将主页和队伍放在一个页面，添加一个筛选器，要可以筛选队伍或者伙伴。</p><p><img src="/../images/image-20240124135433590.png" alt="image-20240124135433590"></p><p>搜索功能：既要可以搜索队伍名字、伙伴名字、标签。</p><p>当前只有搜索伙伴的名称功能</p><p><img src="/../images/image-20240124135714574.png" alt="image-20240124135714574"></p><p>主页修改成动态。</p><p><img src="/../images/image-20240124135745342.png" alt="image-20240124135745342"></p><p>添加一个消息（聊天功能）</p><h3 id="查找功能"><a href="#查找功能" class="headerlink" title="查找功能"></a>查找功能</h3><h3 id="用户功能"><a href="#用户功能" class="headerlink" title="用户功能"></a>用户功能</h3><p>用户可以选择自己是否可以被别人看到，</p><h3 id="队伍功能"><a href="#队伍功能" class="headerlink" title="队伍功能"></a>队伍功能</h3><p>找队伍应该 找的是没有加入的队伍</p><h3 id="聊天功能"><a href="#聊天功能" class="headerlink" title="聊天功能"></a>聊天功能</h3><h3 id="发布动态功能"><a href="#发布动态功能" class="headerlink" title="发布动态功能"></a>发布动态功能</h3><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>队伍表</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>用户表</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>用户标签表（×）</p><p>用户和标签是多对多，队伍和用户是多对多，一个队伍有多个标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="网课"><a href="#网课" class="headerlink" title="网课"></a>网课</h2><p>高级数据结构</p><p><img src="/../images/image-20240130131237731.png" alt="image-20240130131237731"></p><p>Java断言</p><p>redis默认序列化器，换序列化器</p><p>StringRedisTemplate</p><p><img src="/../images/image-20240130131911550.png" alt="image-20240130131911550"></p><p>ctrl+T快速包裹</p><p>f9debug中继续运行。</p><p>ctrl+p查看参数</p><p><img src="/../images/image-20240130133234547.png" alt="image-20240130133234547"></p><p>缓存预热（针对第一次）</p><p>定时任务</p><p><img src="/../images/image-20240130134733725.png" alt="image-20240130134733725"></p><p>每天刷新所有用户的推荐列表</p><p>新增少，总用户量多。</p><p>cron表达式</p><p>白名单不写死</p><h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h2><h1 id="MIS-Famliy2-0"><a href="#MIS-Famliy2-0" class="headerlink" title="MIS-Famliy2.0"></a>MIS-Famliy2.0</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>一个帮助大家找到志同道合的伙伴的移动端网站（APP 风格），包括用户登录注册、更新个人信息、按标签搜索用户、推荐相似用户、组队等功能。技术难点包括登录注册、批量数据导入、信息检索展示、定时任务、资源抢占等。并且涵盖了分布式、并发编程、锁、事务、缓存、性能优化、幂等性、数据一致性、大数据、算法。</p><p>另外提供一个管理员的入口，也就是后台管理，可以查看可视化数据，并且进行流量控制，程序监控。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h3><ul><li>  Vue 3</li><li>  Vite 脚手架</li><li>  Vant UI 移动端组件库</li><li>  Axios 请求库</li></ul><h3 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h3><ul><li>  JAVA SpringBoot 框架</li><li>  MySQL 数据库</li><li>  Mybatis-Plus</li><li>  Mybatis X</li><li>  Redis缓存</li><li>  Redisson 分布式锁</li><li>  Spring Scheduler 定时任务（或者Quartz）</li><li>  Swagger + Knife4j 接口文档</li><li>  Gson JSON序列化库</li><li>  最短编辑距离算法</li><li>  WebSocket（或者Netty）</li><li>  ElasticSearch</li><li>  SpringCloud</li><li>  RabbitMQ</li><li></li></ul><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>  [ ] 用户登录</li><li>  [ ] 用户注册</li><li>  [ ] 获取队伍信息</li><li>  [ ] 创建队伍</li><li>  [ ] 更新队伍</li><li>  [ ] 队员退出队伍</li><li>  [ ] 队长解散队伍</li><li>  [ ] <strong>推荐用户</strong>（推荐算法）</li></ul><p>TODO：</p><ul><li>  [x] 用户头像上传 </li><li>  [x] 滚动分页查询 </li><li>  [ ] 用户更新 </li><li>  [ ] 前端搜索结果页分页 </li><li>  [ ] 队伍页分页 </li><li>  [ ] token（为什么用token，记录在哪）</li><li>  [ ] <strong>用户自定义标签</strong> </li><li>  [ ] 前端tabbar更新 </li><li>  [ ] 公共聊天室 </li><li>  [ ] 用户加好友</li><li>  [ ] 用户关注 </li><li>  [ ] 用户间私聊 </li><li>  [ ] 用户博文发布 </li><li>  [ ] 用户点赞 </li><li>  [ ] 用户签到</li><li>  [ ] 缓存应用 </li><li>  [ ] 定时任务 </li><li>  [ ] 用户修改手机号和邮箱时需要验证 </li><li>  [ ] 文件上传时使用图片哈希作为文件名 </li><li>  [ ] 抽取成微服务</li><li>  [ ] 利用es进行用户查询，也就是关键字</li><li>  [ ] 福利模块（抽奖，可以用redis高并发处理）</li><li>  [ ] 队伍内打卡</li><li>  [ ] </li></ul>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题汇总</title>
    <link href="/2024/01/22/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2024/01/22/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合概况"><a href="#集合概况" class="headerlink" title="集合概况"></a>集合概况</h3><ul><li><p>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#java-%E9%9B%86%E5%90%88%E6%A6%82%E8%A7%88">Java 集合概览</a></p></li><li><p>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#%E8%AF%B4%E8%AF%B4-list-set-queue-map-%E5%9B%9B%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB">说说 List, Set, Queue, Map 四者的区别？</a></p></li><li><p>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93">集合框架底层数据结构总结</a></p></li><li><p>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#%E5%A6%82%E4%BD%95%E9%80%89%E7%94%A8%E9%9B%86%E5%90%88">如何选用集合?</a></p></li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#arraylist-%E5%92%8C-array-%E6%95%B0%E7%BB%84-%E7%9A%84%E5%8C%BA%E5%88%AB">ArrayList 和 Array（数组）的区别？</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#arraylist-%E5%92%8C-vector-%E7%9A%84%E5%8C%BA%E5%88%AB-%E4%BA%86%E8%A7%A3%E5%8D%B3%E5%8F%AF">ArrayList 和 Vector 的区别?（了解即可）</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#vector-%E5%92%8C-stack-%E7%9A%84%E5%8C%BA%E5%88%AB-%E4%BA%86%E8%A7%A3%E5%8D%B3%E5%8F%AF">Vector 和 Stack 的区别?（了解即可）</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#arraylist-%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0-null-%E5%80%BC%E5%90%97">ArrayList 可以添加 null 值吗？</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#arraylist-%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">ArrayList 插入和删除元素的时间复杂度？</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#linkedlist-%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">LinkedList 插入和删除元素的时间复杂度？</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#linkedlist-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E5%AE%9E%E7%8E%B0-randomaccess-%E6%8E%A5%E5%8F%A3">LinkedList 为什么不能实现 RandomAccess 接口？</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#arraylist-%E4%B8%8E-linkedlist-%E5%8C%BA%E5%88%AB">ArrayList 与 LinkedList 区别?</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#%E8%A1%A5%E5%85%85%E5%86%85%E5%AE%B9-randomaccess-%E6%8E%A5%E5%8F%A3">补充内容:RandomAccess 接口</a></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#comparable-%E5%92%8C-comparator-%E7%9A%84%E5%8C%BA%E5%88%AB">Comparable 和 Comparator 的区别</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#%E6%97%A0%E5%BA%8F%E6%80%A7%E5%92%8C%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E6%80%A7%E7%9A%84%E5%90%AB%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88">无序性和不可重复性的含义是什么</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#%E6%AF%94%E8%BE%83-hashset%E3%80%81linkedhashset-%E5%92%8C-treeset-%E4%B8%89%E8%80%85%E7%9A%84%E5%BC%82%E5%90%8C">比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同</a></li></ul><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><ul><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#queue-%E4%B8%8E-deque-%E7%9A%84%E5%8C%BA%E5%88%AB">Queue 与 Deque 的区别</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#arraydeque-%E4%B8%8E-linkedlist-%E7%9A%84%E5%8C%BA%E5%88%AB">ArrayDeque 与 LinkedList 的区别</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#%E8%AF%B4%E4%B8%80%E8%AF%B4-priorityqueue">说一说 PriorityQueue</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#%E4%BB%80%E4%B9%88%E6%98%AF-blockingqueue">什么是 BlockingQueue？</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-01.html#arrayblockingqueue-%E5%92%8C-linkedblockingqueue-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">ArrayBlockingQueue 和 LinkedBlockingQueue 有什么区别？</a></li></ul><h3 id="Map（重要）"><a href="#Map（重要）" class="headerlink" title="Map（重要）"></a>Map（重要）</h3><ul><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashmap-%E5%92%8C-hashtable-%E7%9A%84%E5%8C%BA%E5%88%AB">HashMap 和 Hashtable 的区别</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashmap-%E5%92%8C-hashset-%E5%8C%BA%E5%88%AB">HashMap 和 HashSet 区别</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashmap-%E5%92%8C-treemap-%E5%8C%BA%E5%88%AB">HashMap 和 TreeMap 区别</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashset-%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E9%87%8D%E5%A4%8D">HashSet 如何检查重复?</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashmap-%E7%9A%84%E9%95%BF%E5%BA%A6%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-2-%E7%9A%84%E5%B9%82%E6%AC%A1%E6%96%B9">HashMap 的长度为什么是 2 的幂次方</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashmap-%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0">HashMap 的底层实现</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashmap-%E7%9A%84%E9%95%BF%E5%BA%A6%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-2-%E7%9A%84%E5%B9%82%E6%AC%A1%E6%96%B9">HashMap 的长度为什么是 2 的幂次方</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashmap-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C%E5%AF%BC%E8%87%B4%E6%AD%BB%E5%BE%AA%E7%8E%AF%E9%97%AE%E9%A2%98">HashMap 多线程操作导致死循环问题</a></li><li>  <a href="https://javaguide.cn/java/collection/java-collection-questions-02.html#hashmap-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8">HashMap 为什么线程不安全？</a></li></ul><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>  <a href="https://xiaolincoding.com/network/1_base/tcp_ip_model.html#_2-1-tcp-ip-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E6%9C%89%E5%93%AA%E5%87%A0%E5%B1%82">TCP/IP 网络模型有哪几层？</a></li><li>  <a href="https://xiaolincoding.com/network/1_base/what_happen_url.html#_2-2-%E9%94%AE%E5%85%A5%E7%BD%91%E5%9D%80%E5%88%B0%E7%BD%91%E9%A1%B5%E6%98%BE%E7%A4%BA-%E6%9C%9F%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88">键入网址到网页显示，期间发生了什么？</a></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见配置检索</title>
    <link href="/2024/01/22/%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E6%A3%80%E7%B4%A2/"/>
    <url>/2024/01/22/%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E6%A3%80%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>(1)yml书写格式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#常见写法</span><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">maps:</span><br>   <span class="hljs-attr">key:</span> <span class="hljs-string">value</span><br><span class="hljs-comment">#数组</span><br><span class="hljs-attr">person:</span><br> <span class="hljs-attr">list:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-number">1</span><br> <span class="hljs-bullet">-</span> <span class="hljs-number">2</span><br> <span class="hljs-bullet">-</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>（2）yml多文档方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span> <span class="hljs-comment">#指定使用哪个环境</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span>  <span class="hljs-comment">#指定属于哪个环境</span><br><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span>  <span class="hljs-comment">#指定属于哪个环境</span><br></code></pre></td></tr></table></figure><h2 id="常用的yml"><a href="#常用的yml" class="headerlink" title="常用的yml"></a>常用的yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 公共配置文件</span><br><span class="hljs-comment"># @author &lt;a href=&quot;https://github.com/liyupi&quot;&gt;程序员鱼皮&lt;/a&gt;</span><br><span class="hljs-comment"># @from &lt;a href=&quot;https://yupi.icu&quot;&gt;编程导航知识星球&lt;/a&gt;</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">springboot-init</span><br>  <span class="hljs-comment"># 默认 dev 环境</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-comment"># 支持 swagger3</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">pathmatch:</span><br>      <span class="hljs-attr">matching-strategy:</span> <span class="hljs-string">ant_path_matcher</span><br>  <span class="hljs-comment"># session 配置</span><br>  <span class="hljs-attr">session:</span><br>    <span class="hljs-comment"># todo 取消注释开启分布式 session（须先配置 Redis）</span><br>    <span class="hljs-comment"># store-type: redis</span><br>    <span class="hljs-comment"># 30 天过期</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">2592000</span><br>  <span class="hljs-comment"># 数据库配置</span><br>  <span class="hljs-comment"># todo 需替换配置</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/my_db</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-comment"># Redis 配置</span><br>  <span class="hljs-comment"># todo 需替换配置，然后取消注释</span><br><span class="hljs-comment">#  redis:</span><br><span class="hljs-comment">#    database: 1</span><br><span class="hljs-comment">#    host: localhost</span><br><span class="hljs-comment">#    port: 6379</span><br><span class="hljs-comment">#    timeout: 5000</span><br><span class="hljs-comment">#    password: 123456</span><br>  <span class="hljs-comment"># Elasticsearch 配置</span><br>  <span class="hljs-comment"># todo 需替换配置，然后取消注释</span><br><span class="hljs-comment">#  elasticsearch:</span><br><span class="hljs-comment">#    uris: http://localhost:9200</span><br><span class="hljs-comment">#    username: root</span><br><span class="hljs-comment">#    password: 123456</span><br>  <span class="hljs-comment"># 文件上传</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-comment"># 大小限制</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">address:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8101</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/api</span><br>    <span class="hljs-comment"># cookie 30 天过期</span><br>    <span class="hljs-attr">session:</span><br>      <span class="hljs-attr">cookie:</span><br>        <span class="hljs-attr">max-age:</span> <span class="hljs-number">2592000</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">isDelete</span> <span class="hljs-comment"># 全局逻辑删除的实体字段名</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值（默认为 1）</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值（默认为 0）</span><br><span class="hljs-comment"># 微信相关</span><br><span class="hljs-attr">wx:</span><br>  <span class="hljs-comment"># 微信公众平台</span><br>  <span class="hljs-comment"># todo 需替换配置</span><br>  <span class="hljs-attr">mp:</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">aesKey:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">appId:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">secret:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">config-storage:</span><br>      <span class="hljs-attr">http-client-type:</span> <span class="hljs-string">HttpClient</span><br>      <span class="hljs-attr">key-prefix:</span> <span class="hljs-string">wx</span><br>      <span class="hljs-attr">redis:</span><br>        <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">Memory</span><br>  <span class="hljs-comment"># 微信开放平台</span><br>  <span class="hljs-comment"># todo 需替换配置</span><br>  <span class="hljs-attr">open:</span><br>    <span class="hljs-attr">appId:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">appSecret:</span> <span class="hljs-string">xxx</span><br><span class="hljs-comment"># 对象存储</span><br><span class="hljs-comment"># todo 需替换配置</span><br><span class="hljs-attr">cos:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">accessKey:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">secretKey:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">region:</span> <span class="hljs-string">xxx</span><br>    <span class="hljs-attr">bucket:</span> <span class="hljs-string">xxx</span><br><span class="hljs-comment"># 接口文档配置</span><br><span class="hljs-attr">knife4j:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">openapi:</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">&quot;接口文档&quot;</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-number">1.0</span><br>    <span class="hljs-attr">group:</span><br>      <span class="hljs-attr">default:</span><br>        <span class="hljs-attr">api-rule:</span> <span class="hljs-string">package</span><br>        <span class="hljs-attr">api-rule-resources:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">com.yupi.springbootinit.controller</span><br></code></pre></td></tr></table></figure><h2 id="Mybatis-Mysql"><a href="#Mybatis-Mysql" class="headerlink" title="Mybatis+Mysql"></a>Mybatis+Mysql</h2><p>（1）引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-comment">&lt;!--MySQL驱动--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--jdbc连接数据库--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Driud--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- MyBatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- junit测试依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>（2）编写yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/powernode</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-comment">#添加 Druid 配置，指定数据源</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*.xml</span><br>  <span class="hljs-comment">#目的是为了省略resultType里的代码量</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.chf.pojo</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br><br></code></pre></td></tr></table></figure><p>（3）构建实体类（在pojo包下），与表中字段一一对应</p><p><img src="/../images/image-20240122132808689.png" alt="image-20240122132808689"></p><p>（4）创建接口，用来写方法</p><p><img src="/../images/image-20240122132843961.png" alt="image-20240122132843961"></p><p>（5）每一个实体类对应一个<a href="https://so.csdn.net/so/search?q=mapper&spm=1001.2101.3001.7020">mapper</a>映射文件，在resources的mapper包下写映射文件</p><h2 id="MybatisPLus"><a href="#MybatisPLus" class="headerlink" title="MybatisPLus"></a>MybatisPLus</h2><p>（1）导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Mybatis-Plus 注意版本--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>（2）yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#控制台打印sql</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">【<span class="hljs-meta">@TableName</span> 】作用于类上<br>    <span class="hljs-meta">@TableName</span>               用于定义表名<br>注：<br>    常用属性：<br>        value                用于定义表名<br><br>【<span class="hljs-meta">@TableId</span>】作用于属性上<br>    <span class="hljs-meta">@TableId</span>                 用于定义表的主键<br>注：<br>    常用属性：<br>        value           用于定义主键字段名<br>        type            用于定义主键类型（主键策略 IdType）<br><br>   主键策略：<br>      IdType.AUTO          主键自增，系统分配，不需要手动输入<br>      IdType.NONE          未设置主键<br>      IdType.INPUT         需要自己输入 主键值。<br>      IdType.ASSIGN_ID     系统分配 ID，用于数值型数据（Long，对应 mysql 中 BIGINT 类型）。<br>      IdType.ASSIGN_UUID   系统分配 UUID，用于字符串型数据（String，对应 mysql 中 varchar(<span class="hljs-number">32</span>) 类型）。<br><br>【<span class="hljs-meta">@TableField</span>】  作用与属性上<br>    <span class="hljs-meta">@TableField</span>            用于定义表的非主键字段。<br>注：<br>    常用属性：<br>        value                用于定义非主键字段名<br>        exist                用于指明是否为数据表的字段， <span class="hljs-literal">true</span> 表示是，<span class="hljs-literal">false</span> 为不是。<br>        fill                 用于指定字段填充策略（FieldFill）。<br>        <br>    字段填充策略：（一般用于填充 创建时间、修改时间等字段）<br>        FieldFill.DEFAULT         默认不填充<br>        FieldFill.INSERT          插入时填充<br>        FieldFill.UPDATE          更新时填充<br>        FieldFill.INSERT_UPDATE   插入、更新时填充。<br><br>【<span class="hljs-meta">@TableLogic</span>】<br>    <span class="hljs-meta">@TableLogic</span>           用于定义表的字段进行逻辑删除（非物理删除）<br>注：<br>    常用属性：<br>        value            用于定义未删除时字段的值<br>        delval           用于定义删除时字段的值<br>        <br>【<span class="hljs-meta">@Version</span>】作用于属性上<br>    <span class="hljs-meta">@Version</span>             用于字段实现乐观锁<br><br></code></pre></td></tr></table></figure><h2 id="Swagger和Knife4j"><a href="#Swagger和Knife4j" class="headerlink" title="Swagger和Knife4j"></a>Swagger和Knife4j</h2><p>knife4j是swagger的增强</p><p>（1）添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加swagger的依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）创建Knife4j配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Swagger2配置信息</span><br><span class="hljs-comment"> * 这里分了两组显示</span><br><span class="hljs-comment"> * 第一组是api，当作用户端接口</span><br><span class="hljs-comment"> * 第二组是admin，当作后台管理接口</span><br><span class="hljs-comment"> * 也可以根据实际情况来减少或者增加组</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Eric</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023-07-30 22:17</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2WebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Config</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">adminApiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;Eric-SpringBoot整合Knife4j-API文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;本文档描述了SpringBoot如何整合Knife4j&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;Eric&quot;</span>, <span class="hljs-string">&quot;https://blog.csdn.net/weixin_47316183?type=blog&quot;</span>, <span class="hljs-string">&quot;ericsyn@foxmail.com&quot;</span>))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">webApiInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;Eric-SpringBoot整合Knife4j-API文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;本文档描述了SpringBoot如何整合Knife4j&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;Eric&quot;</span>, <span class="hljs-string">&quot;https://blog.csdn.net/weixin_47316183?type=blog&quot;</span>, <span class="hljs-string">&quot;ericsyn@foxmail.com&quot;</span>))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第一组：api</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">webApiConfig</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Parameter&gt; pars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ParameterBuilder</span> <span class="hljs-variable">tokenPar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterBuilder</span>();<br>        tokenPar.name(<span class="hljs-string">&quot;userId&quot;</span>)<br>                .description(<span class="hljs-string">&quot;用户token&quot;</span>)<br>                <span class="hljs-comment">//.defaultValue(JwtHelper.createToken(1L, &quot;admin&quot;))</span><br>                .defaultValue(<span class="hljs-string">&quot;1&quot;</span>)<br>                .modelRef(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelRef</span>(<span class="hljs-string">&quot;string&quot;</span>))<br>                .parameterType(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .build();<br>        pars.add(tokenPar.build());<br><br>        <span class="hljs-type">Docket</span> <span class="hljs-variable">webApi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;用户端接口&quot;</span>)<br>                .apiInfo(webApiInfo())<br>                .select()<br>                <span class="hljs-comment">//只显示api路径下的页面</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.eric.springbootknife4j&quot;</span>))<br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;/api/.*&quot;</span>))<br>                .build()<br>                .globalOperationParameters(pars);<br>        <span class="hljs-keyword">return</span> webApi;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第二组：admin</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">adminApiConfig</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Parameter&gt; pars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ParameterBuilder</span> <span class="hljs-variable">tokenPar</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterBuilder</span>();<br>        tokenPar.name(<span class="hljs-string">&quot;adminId&quot;</span>)<br>                .description(<span class="hljs-string">&quot;用户token&quot;</span>)<br>                .defaultValue(<span class="hljs-string">&quot;1&quot;</span>)<br>                .modelRef(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelRef</span>(<span class="hljs-string">&quot;string&quot;</span>))<br>                .parameterType(<span class="hljs-string">&quot;header&quot;</span>)<br>                .required(<span class="hljs-literal">false</span>)<br>                .build();<br>        pars.add(tokenPar.build());<br><br>        <span class="hljs-type">Docket</span> <span class="hljs-variable">adminApi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;后台接口&quot;</span>)<br>                .apiInfo(adminApiInfo())<br>                .select()<br>                <span class="hljs-comment">//只显示admin路径下的页面</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.eric.springbootknife4j&quot;</span>))<br>                .paths(PathSelectors.regex(<span class="hljs-string">&quot;/admin/.*&quot;</span>))<br>                .build()<br>                .globalOperationParameters(pars);<br>        <span class="hljs-keyword">return</span> adminApi;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>（3）使用Knife4J</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 菜单实体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(value = &quot;菜单实体&quot;,description = &quot;菜单实体&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> &#123;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;主键&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;菜单名称&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <br> <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户控制器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;用户控制器&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/getUsers&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;查询所有用户&quot;, notes = &quot;查询所有用户信息&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">100</span>);<br>        user.setName(<span class="hljs-string">&quot;itcast&quot;</span>);<br>        user.setAge(<span class="hljs-number">20</span>);<br>        user.setAddress(<span class="hljs-string">&quot;bj&quot;</span>);<br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(user);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3实现移动端的pdf、docx、xlsx、ppt的预览</title>
    <link href="/2024/01/19/Vue3%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84pdf%E3%80%81docx%E3%80%81xlsx%E3%80%81ppt%E7%9A%84%E9%A2%84%E8%A7%88/"/>
    <url>/2024/01/19/Vue3%E5%AE%9E%E7%8E%B0%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84pdf%E3%80%81docx%E3%80%81xlsx%E3%80%81ppt%E7%9A%84%E9%A2%84%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><p>利用pdfh5实现，原链接<a href="https://gitee.com/gjTool/pdfh5">https://gitee.com/gjTool/pdfh5</a></p><p>(1)添加依赖</p><p><img src="/../images/image-20240119104238387.png" alt="image-20240119104238387"></p><p>(2)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div id=&quot;app&quot;&gt;<br>      &lt;div id=&quot;pdfdemo&quot;&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>  &lt;script&gt;<br>    import Pdfh5 from &quot;pdfh5&quot;;<br>    export default &#123;<br>      name: &#x27;FjPdf&#x27;,<br>      data() &#123;<br>        return &#123;<br>          pdfh5: null<br>        &#125;;<br>      &#125;,<br>      mounted() &#123;<br>          //实例化<br>        this.pdfh5 = new Pdfh5(&quot;#pdfdemo&quot;, &#123;<br>          pdfurl: &quot;http://115.231.196.26:8001/ZC_LGKY/UploadFiles/2024-01/DM8 Install_202411617610408.pdf&quot;,<br>        &#125;);<br>        //监听完成事件<br>        this.pdfh5.on(&quot;complete&quot;, function (status, msg, time) &#123;<br>          console.log(&quot;状态：&quot; + status + &quot;，信息：&quot; + msg + &quot;，耗时：&quot; + time + &quot;毫秒，总页数：&quot; + this.totalNum)<br>          //禁止手势缩放<br>          this.pdfh5.zoomEnable(false);<br>        &#125;)<br>      &#125;<br>    &#125;<br>  &lt;/script&gt;<br>  <br>  &lt;style&gt;<br>      @import &quot;pdfh5/css/pdfh5.css&quot;;<br>      *&#123;<br>      padding: 0;<br>      margin: 0;<br>      &#125;<br>      html,body,#app &#123;<br>      width: 100%;<br>      height: 100%;<br>      &#125;<br>  &lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="word"><a href="#word" class="headerlink" title="word"></a>word</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cnpm <span class="hljs-keyword">install</span> docx-preview<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileRef&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;preview-container&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref, onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Axios</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> fileRef = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">getPdfCode</span>();</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getPdfCode</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Axios</span>.<span class="hljs-title function_">get</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&quot;http://115.231.196.26:8001/ZC_ZJIET/UploadFiles/2024-01/12312312_202412314182559.docx&quot;</span>,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">responseType</span>: <span class="hljs-string">&quot;blob&quot;</span>,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    );</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> data = response.<span class="hljs-property">data</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (fileRef.<span class="hljs-property">value</span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> &#123; renderAsync &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;docx-preview&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-title function_">renderAsync</span>(data, fileRef.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Invalid DOM element:&quot;</span>, fileRef.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Error fetching or rendering docx:&quot;</span>, error);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.preview-container</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">&#125;</span><br><span class="language-css">::v-deep .docx-wrapper&#123;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">::v-deep .docx-wrapper&gt;section.docx &#123;</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">72pt</span> <span class="hljs-number">171pt</span>;</span><br><span class="language-css">  <span class="hljs-attribute">width</span>: <span class="hljs-number">595.3pt</span>;</span><br><span class="language-css">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">841.9pt</span>;</span><br><span class="language-css">  <span class="hljs-attribute">column-count</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">  <span class="hljs-attribute">column-gap</span>: <span class="hljs-number">21.25pt</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>存在问题：首先docx-preview是一个网页项目，移动端显示不好，无法调节样式。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>垂死挣扎——PAT备考进行时（八）</title>
    <link href="/2023/09/13/%E5%9E%82%E6%AD%BB%E6%8C%A3%E6%89%8E%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <url>/2023/09/13/%E5%9E%82%E6%AD%BB%E6%8C%A3%E6%89%8E%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="LAST-TIME"><a href="#LAST-TIME" class="headerlink" title="LAST TIME"></a>LAST TIME</h1><p>本篇文章是对23年秋季PAT的赛题进行预测，通过分析最近几年的试卷，第一题主要就是模拟题、数学问题或者字符串处理，第二三题就是经典的数据结构，最近特别喜欢考树的遍历（重点看、最喜欢考了，每年基本都有而且出现在后面两题，分值大）、链表、并查集。最后一题基本上要不就是图论（最短路径Dijkstra+DFS）、要不就是DFS、要不就是高级数据结构（最近考树的遍历很多很多一定要重视再重视）。</p><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h2 id="Dijkstra-DFS"><a href="#Dijkstra-DFS" class="headerlink" title="Dijkstra+DFS"></a>Dijkstra+DFS</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构专题——PAT备考进行时（七）</title>
    <link href="/2023/09/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%93%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <url>/2023/09/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%93%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="简单计算器"><a href="#简单计算器" class="headerlink" title="简单计算器"></a>简单计算器</h2><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="1032-Sharing（静态链表）（⭐）"><a href="#1032-Sharing（静态链表）（⭐）" class="headerlink" title="1032 Sharing（静态链表）（⭐）"></a><strong>1032 Sharing</strong>（静态链表）（⭐）</h2><p><strong>题目：</strong></p><blockquote><p>To store English words, one method is to use linked lists and store a word letter by letter. To save some space, we may let the words share the same sublist if they share the same suffix. For example, <code>loading</code> and <code>being</code> are stored as showed in Figure 1.</p><p><img src="https://images.ptausercontent.com/ef0a1fdf-3d9f-46dc-9a27-21f989270fd4.jpg" alt="fig.jpg"></p><p>Figure 1</p><p>You are supposed to find the starting position of the common suffix (e.g. the position of <code>i</code> in Figure 1).</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains two addresses of nodes and a positive <em>N</em> (≤105), where the two addresses are the addresses of the first nodes of the two words, and <em>N</em> is the total number of nodes. The address of a node is a 5-digit positive integer, and NULL is represented by −1.</p><p>Then <em>N</em> lines follow, each describes a node in the format:</p><figure class="highlight purebasic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs purebasic">&gt;Address <span class="hljs-keyword">Data</span> <span class="hljs-keyword">Next</span><br></code></pre></td></tr></table></figure><p>where<code>Address</code> is the position of the node, <code>Data</code> is the letter contained by this node which is an English letter chosen from { a-z, A-Z }, and <code>Next</code> is the position of the next node.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each case, simply output the 5-digit starting position of the common suffix. If the two words have no common suffix, output <code>-1</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs in">&gt;11111 22222 9<br>&gt;67890 i 00002<br>&gt;00010 a 12345<br>&gt;00003 g -1<br>&gt;12345 D 67890<br>&gt;00002 n 00003<br>&gt;22222 B 23456<br>&gt;11111 L 00001<br>&gt;23456 e 67890<br>&gt;00001 o 00010<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">&gt;67890<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs in">&gt;00001 00002 4<br>&gt;00001 a 10001<br>&gt;10001 s -1<br>&gt;00002 a 10002<br>&gt;10002 t -1<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">&gt;-1<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  本题因为地址范围小利用静态链表就可以完成操作。</li><li>  步骤一：在定义结构体的时候要加上一个flag用于说明该节点在第一条链表中已经出现过。</li><li>  步骤二：从第一条链表的首个地址出发，遍历一遍链表记录flag=1；然后从第二条链表的收个地址出发，遍历一边链表，判断flag是否等于1；如果是就退出遍历，输出该节点。如果最后遍历完没有发现共同节点，就返回-1.</li><li>  注意节点遍历完的判断条件是next节点是否为-1.</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br><span class="hljs-type">char</span> data;<br><span class="hljs-type">int</span> next;<br><span class="hljs-type">bool</span> flag;<br>&#125;vn[MAXN];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> f,s,n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;f,&amp;s,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;MAXN;i++)&#123;<br>vn[i].flag=<span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-type">int</span> address,next;<br><span class="hljs-type">char</span> data;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %c %d&quot;</span>,&amp;address,&amp;data,&amp;next);<br>vn[address].data=data;<br>vn[address].next=next;<br><br>&#125;<br><span class="hljs-type">int</span> p;<br><span class="hljs-keyword">for</span>(p=f;p!=<span class="hljs-number">-1</span>;p=vn[p].next)&#123;<br>vn[p].flag=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(p=s;p!=<span class="hljs-number">-1</span>;p=vn[p].next)&#123;<br><span class="hljs-keyword">if</span>(vn[p].flag==<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(p!=<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>,p);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1052-Linked-List-Sorting（链表）（⭐⭐）"><a href="#1052-Linked-List-Sorting（链表）（⭐⭐）" class="headerlink" title="1052 Linked List Sorting（链表）（⭐⭐）"></a><strong>1052 Linked List Sorting</strong>（链表）（⭐⭐）</h2><p><strong>题目：</strong></p><blockquote><p>  A linked list consists of a series of structures, which are not necessarily adjacent in memory. We assume that each structure contains an integer <code>key</code> and a <code>Next</code> pointer to the next structure. Now given a linked list, you are supposed to sort the structures according to their key values in increasing order.</p><h3 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case. For each case, the first line contains a positive <em>N</em> (&lt;105) and an address of the head node, where <em>N</em> is the total number of nodes in memory and the address of a node is a 5-digit positive integer. NULL is represented by −1.</p><p>  Then <em>N</em> lines follow, each describes a node in the format:</p>  <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Address</span> <span class="hljs-built_in">Key</span> <span class="hljs-built_in">Next</span><br></code></pre></td></tr></table></figure><p>  where <code>Address</code> is the address of the node in memory, <code>Key</code> is an integer in [−105,105], and <code>Next</code> is the address of the next node. It is guaranteed that all the keys are distinct and there is no cycle in the linked list starting from the head node.</p><h3 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  For each test case, the output format is the same as that of the input, where <em>N</em> is the total number of nodes in the list and all the nodes must be sorted order.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs in">5 00001<br>11111 100 -1<br>00001 0 22222<br>33333 100000 11111<br>12345 -1 33333<br>22222 1000 12345<br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs out">5 12345<br>12345 -1 00001<br>00001 0 11111<br>11111 100 22222<br>22222 1000 33333<br>33333 100000 -1<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  题目意思：对链表排序，然后输出升序。</li><li>  步骤一：同样的我们需要定义一个struct，然后里面需要有一个flag用于判断该节点是否在链表中，因为给的数据中会有一些节点不在链表中，所以我们需要将链表中的那些有效的值排序到数组的前面，然后将有效的值按照data进行排序。</li><li>  注意点：输出的格式需要用到%05d，但是要注意-1要进行特判。</li><li>  当数据里面全部都是无效的时候就需要进行特判处理，输出“0 -1”.</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">100010</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> address;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-type">int</span> next;<br>    <span class="hljs-type">bool</span> flag;<span class="hljs-comment">//节点是否在链表上</span><br>&#125;node[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Node a,Node b)</span></span>&#123;<br>    <span class="hljs-comment">//有效的放在前面，然后按照data进行排序</span><br>    <span class="hljs-keyword">if</span>(a.flag==<span class="hljs-literal">false</span>||b.flag==<span class="hljs-literal">false</span>)&#123;<br>    <span class="hljs-keyword">return</span> a.flag&gt;b.flag;<br>&#125;<br>        <br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> a.data&lt;b.data;<br>    &#125;<br><br><br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;MAXN;i++)&#123;<br>        node[i].flag=<span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> n,head;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;head);<br>    <span class="hljs-type">int</span> address,data,next;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;address,&amp;data,&amp;next);<br>        node[address].address=address;<br>        node[address].data=data;<br>        node[address].next=next;<br>    &#125;<br>    <span class="hljs-type">int</span> p=head;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-number">-1</span>)&#123;<br>        node[p].flag=<span class="hljs-literal">true</span>;<br>        count++;<br>        p=node[p].next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 -1&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">sort</span>(node,node+MAXN,cmp);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %05d\n&quot;</span>,count,node[<span class="hljs-number">0</span>].address);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;count;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i!=count<span class="hljs-number">-1</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d %05d\n&quot;</span>,node[i].address,node[i].data,node[i+<span class="hljs-number">1</span>].address);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d -1\n&quot;</span>,node[i].address,node[i].data);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表题的模板"><a href="#链表题的模板" class="headerlink" title="链表题的模板"></a>链表题的模板</h2><ul><li><p>首先是struct结构体的定义：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> address;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-type">int</span> next;<br>    XXX xxx;<span class="hljs-comment">//该位是记录该链表的特点，例如可以用来判断节点是否是在链表中，注意要初始化。</span><br>&#125;node[MAXN];<br></code></pre></td></tr></table></figure></li><li><p>对特殊变量的初始化：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;MAXN;i++)&#123;<br>       node[i].flag=<span class="hljs-literal">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>对特殊变量的赋值：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(p!=<span class="hljs-number">-1</span>)&#123;<br>       node[p].flag=<span class="hljs-literal">true</span>;<br>       count++;<br>       p=node[p].next;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>疯狂的刷题——PAT备考进行时（六）</title>
    <link href="/2023/09/04/%E7%96%AF%E7%8B%82%E7%9A%84%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2023/09/04/%E7%96%AF%E7%8B%82%E7%9A%84%E5%88%B7%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="打表技巧"><a href="#打表技巧" class="headerlink" title="打表技巧"></a>打表技巧</h1><h2 id="1093-Count-PAT’s（空间换时间）（⭐⭐）"><a href="#1093-Count-PAT’s（空间换时间）（⭐⭐）" class="headerlink" title="1093 Count PAT’s（空间换时间）（⭐⭐）"></a><strong>1093 Count PAT’s</strong>（空间换时间）（⭐⭐）</h2><p><strong>题目：</strong></p><blockquote><p>  The string <code>APPAPT</code> contains two <code>PAT</code>‘s as substrings. The first one is formed by the 2nd, the 4th, and the 6th characters, and the second one is formed by the 3rd, the 4th, and the 6th characters.</p><p>  Now given any string, you are supposed to tell the number of <code>PAT</code>‘s contained in the string.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case. For each case, there is only one line giving a string of no more than 105 characters containing only <code>P</code>, <code>A</code>, or <code>T</code>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  For each test case, print in one line the number of <code>PAT</code>‘s contained in the string. Since the result may be a huge number, you only have to output the result moded by 1000000007.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">APPAPT<br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">2<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  题目要求我们统计其中按照顺序排列的PAT有几个，</li><li>  通过分析我们如果直接用暴力会超时，那么就需要利用空间换时间，利用数组记录每一个A的左边有几个P，右边有几个T，然后把P和T的数相乘得到每个位子上的A有几个组合，然后把每个A上的数据相加。</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD=<span class="hljs-number">1000000007</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>string str;<br>cin&gt;&gt; str;<br><span class="hljs-type">int</span> len=str.<span class="hljs-built_in">length</span>(),ans=<span class="hljs-number">0</span>,countp=<span class="hljs-number">0</span>,countt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;T&#x27;</span>)&#123;<br>countt++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;P&#x27;</span>)countp++;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;T&#x27;</span>)countt--;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;A&#x27;</span>)ans=(ans+(countt*countp)%MOD)%MOD;<br><br>&#125;<br>cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>给出的代码利用countt，countp记录该位子上的T和P有几个然后相乘。</p><h2 id="1101-Quick-Sort（打表，快速排序）（⭐⭐）"><a href="#1101-Quick-Sort（打表，快速排序）（⭐⭐）" class="headerlink" title="1101 Quick Sort（打表，快速排序）（⭐⭐）"></a><strong>1101 Quick Sort</strong>（打表，快速排序）（⭐⭐）</h2><p><strong>题目：</strong></p><blockquote><p>  There is a classical process named <strong>partition</strong> in the famous quick sort algorithm. In this process we typically choose one element as the pivot. Then the elements less than the pivot are moved to its left and those larger than the pivot to its right. Given <em>N</em> distinct positive integers after a run of partition, could you tell how many elements could be the selected pivot for this partition?</p><p>  For example, given <em>N</em>=5 and the numbers 1, 3, 2, 4, and 5. We have:</p><ul><li>  1 could be the pivot since there is no element to its left and all the elements to its right are larger than it;</li><li>  3 must not be the pivot since although all the elements to its left are smaller, the number 2 to its right is less than it as well;</li><li>  2 must not be the pivot since although all the elements to its right are larger, the number 3 to its left is larger than it as well;</li><li>  and for the similar reason, 4 and 5 could also be the pivot.</li></ul><p>  Hence in total there are 3 pivot candidates.</p><h3 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case. For each case, the first line gives a positive integer <em>N</em> (≤105). Then the next line contains <em>N</em> distinct positive integers no larger than 109. The numbers in a line are separated by spaces.</p><h3 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  For each test case, output in the first line the number of pivot candidates. Then in the next line print these candidates in increasing order. There must be exactly 1 space between two adjacent numbers, and no extra space at the end of each line.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">5<br>1 3 2 4 5<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">3<br>1 4 5<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  题目要求我们找出所有的符合作为主元的元素（主元就是左边的所有小于右边所有）。</li><li>  和上面一题相似，我们可以用数组记录下该位子左边最大的数和右边最小的数，然后进行比较，如果符合就加入结果中。</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">1000000000</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-type">int</span> num[n];<br><span class="hljs-type">int</span> left[n];<br><span class="hljs-type">int</span> right[n];<br><span class="hljs-type">int</span> ans[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num[i]);<br>&#125;<br>left[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>left[i]=<span class="hljs-built_in">max</span>(left[i<span class="hljs-number">-1</span>],num[i<span class="hljs-number">-1</span>]);<br>&#125;<br>right[n<span class="hljs-number">-1</span>]=INF;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>right[i]=<span class="hljs-built_in">min</span>(right[i+<span class="hljs-number">1</span>],num[i+<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(num[i]&gt;left[i]&amp;&amp;num[i]&lt;right[i])&#123;<br>ans[count++]=num[i];<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,count);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;count;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans[i]);<br><span class="hljs-keyword">if</span>(i!=count<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>  第一位最大值为0，最后一位最小值为INF。</li></ul><hr><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="1062-Talent-and-Virtue（重写sort-cmp）-⭐⭐⭐"><a href="#1062-Talent-and-Virtue（重写sort-cmp）-⭐⭐⭐" class="headerlink" title="1062 Talent and Virtue（重写sort-cmp）(⭐⭐⭐)"></a><strong>1062 Talent and Virtue</strong>（重写sort-cmp）(⭐⭐⭐)</h2><p><strong>题目：</strong></p><blockquote><p>  About 900 years ago, a Chinese philosopher Sima Guang wrote a history book in which he talked about people’s talent and virtue. According to his theory, a man being outstanding in both talent and virtue must be a “sage（圣人）”; being less excellent but with one’s virtue outweighs talent can be called a “nobleman（君子）”; being good in neither is a “fool man（愚人）”; yet a fool man is better than a “small man（小人）” who prefers talent than virtue.</p><p>  Now given the grades of talent and virtue of a group of people, you are supposed to rank them according to Sima Guang’s theory.</p><h3 id="Input-Specification-2"><a href="#Input-Specification-2" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case. Each case first gives 3 positive integers in a line: <em>N</em> (≤105), the total number of people to be ranked; <em>L</em> (≥60), the lower bound of the qualified grades – that is, only the ones whose grades of talent and virtue are both not below this line will be ranked; and <em>H</em> (&lt;100), the higher line of qualification – that is, those with both grades not below this line are considered as the “sages”, and will be ranked in non-increasing order according to their total grades. Those with talent grades below <em>H</em> but virtue grades not are considered as the “noblemen”, and are also ranked in non-increasing order according to their total grades, but they are listed after the “sages”. Those with both grades below <em>H</em>, but with virtue not lower than talent are considered as the “fool men”. They are ranked in the same way but after the “noblemen”. The rest of people whose grades both pass the <em>L</em> line are ranked after the “fool men”.</p><p>  Then <em>N</em> lines follow, each gives the information of a person in the format:</p>  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ID_Number Virtue_Grade Talent_Grade</span><br></code></pre></td></tr></table></figure><p>  where <code>ID_Number</code> is an 8-digit number, and both grades are integers in [0, 100]. All the numbers are separated by a space.</p><h3 id="Output-Specification-2"><a href="#Output-Specification-2" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  The first line of output must give <em>M</em> (≤<em>N</em>), the total number of people that are actually ranked. Then <em>M</em> lines follow, each gives the information of a person in the same format as the input, according to the ranking rules. If there is a tie of the total grade, they must be ranked with respect to their virtue grades in non-increasing order. If there is still a tie, then output in increasing order of their ID’s.</p><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs in">14 60 80<br>10000001 64 90<br>10000002 90 60<br>10000011 85 80<br>10000003 85 80<br>10000004 80 85<br>10000005 82 77<br>10000006 83 76<br>10000007 90 78<br>10000008 75 79<br>10000009 59 90<br>10000010 88 45<br>10000012 80 100<br>10000013 90 99<br>10000014 66 60<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs out">12<br>10000013 90 99<br>10000012 80 100<br>10000003 85 80<br>10000011 85 80<br>10000004 80 85<br>10000007 90 78<br>10000006 83 76<br>10000005 82 77<br>10000002 90 60<br>10000014 66 60<br>10000008 75 79<br>10000001 64 90<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  要求进行对一列人的排序，根据德才的分数。</li><li>  如果要排序我们可以自然而然的想到用sort函数，本题的重点也就是对sort函数进行重写。</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">1、给出一行人来进行德才排序，根据她们的成绩</span><br><span class="hljs-comment">进行降序 </span><br><span class="hljs-comment">2、 sages：智商情商都高于 H；</span><br><span class="hljs-comment"> noblemen：情商高H智商低于H。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br><span class="hljs-type">int</span> name;<br><span class="hljs-type">int</span> v;<br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> sum;<br><span class="hljs-type">int</span> flag;<br>&#125;; <br>vector&lt;Node&gt; vn;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Node a,Node b)</span></span>&#123;<br><span class="hljs-keyword">if</span>(a.flag!=b.flag)&#123;<br><span class="hljs-keyword">return</span> a.flag&lt;b.flag;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.sum!=b.sum)&#123;<br><span class="hljs-keyword">return</span> a.sum&gt;b.sum;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.v!=b.v)&#123;<br><span class="hljs-keyword">return</span> a.v&gt;b.v;<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.name&lt;b.name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,l,h;<br><span class="hljs-type">int</span> zero=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;l,&amp;h);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>Node node;<br>node.flag=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;node.name,&amp;node.v,&amp;node.t);<br>node.sum=node.v+node.t;<br>vn.<span class="hljs-built_in">push_back</span>(node);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(vn[i].v&gt;=l&amp;&amp;vn[i].t&gt;=l)&#123;<br><span class="hljs-keyword">if</span>(vn[i].v&gt;=h&amp;&amp;vn[i].t&gt;=h)&#123;<br>vn[i].flag=<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vn[i].v&gt;=h&amp;&amp;vn[i].t&lt;h)&#123;<br>vn[i].flag=<span class="hljs-number">2</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(vn[i].v&gt;=vn[i].t)&#123;<br>vn[i].flag=<span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>vn[i].flag=<span class="hljs-number">4</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>zero++;<br>&#125;<br>&#125;<br><span class="hljs-built_in">sort</span>(vn.<span class="hljs-built_in">begin</span>(),vn.<span class="hljs-built_in">end</span>(),cmp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n-zero);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=zero;i&lt;n;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,vn[i].name,vn[i].v,vn[i].t);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>  注意else if语句的书写。</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>PAT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1172-1175套题——PAT备考进行时（五）</title>
    <link href="/2023/09/03/1172-1175%E5%A5%97%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2023/09/03/1172-1175%E5%A5%97%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1172-Panda-and-PP-Milk"><a href="#1172-Panda-and-PP-Milk" class="headerlink" title="1172 Panda and PP Milk"></a><strong>1172 Panda and PP Milk</strong></h1>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图论——PAT备考进行时（四）</title>
    <link href="/2023/08/26/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2023/08/26/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h2><p>利用邻接矩阵或者邻接表进行实现。</p><p>对于无向图来说，邻接矩阵是对称矩阵，矩阵比较好写，但是如果定点数太大，会超出内存限制，所以一般只用于1000以下的题目。</p><p>在C++中可以利用vector实现邻接表，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; Adj[N];<br></code></pre></td></tr></table></figure><p>Adj[]数组是一个vector&lt;int&gt;数组，数组的下标代表几号顶点，vector可以看成一个链表。</p><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><ul><li>  利用邻接表实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt;  Adj[MAXN];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">bool</span> vis[MAXN]=&#123;<span class="hljs-literal">false</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> depth)</span></span>&#123;<br>    vis[u]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;Adj[u].<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-type">int</span> v=Adj[u][i];<br>        <span class="hljs-keyword">if</span>(vis[v]==<span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-built_in">DFS</span>(v,depth+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p>广度优先搜索，每次以外扩的方式访问顶点。</p><ul><li>  用邻接矩阵实现BFS</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n,G[MAXN][MAXN];<br><span class="hljs-type">bool</span> inq[MAXN]=&#123;<span class="hljs-literal">false</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<span class="hljs-comment">//u表示所在的连通块</span><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(u);<br>    inq[u]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> u=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v=<span class="hljs-number">0</span>;v&lt;n;v++)&#123;<br>            <span class="hljs-keyword">if</span>(inq[v]==<span class="hljs-literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;<br>                q.<span class="hljs-built_in">push</span>(v);<br>                inq[v]=<span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFSTrave</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u=<span class="hljs-number">0</span>;u&lt;n;u++)&#123;<br><span class="hljs-keyword">if</span>(inq[u]==<span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-built_in">BFS</span>(u);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  用邻接表实现BFS</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; Adj[MAXN];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">bool</span> inq[MAXN]=&#123;<span class="hljs-literal">false</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(u);<br>    inq[u]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> u=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;Adj[u].<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-type">int</span> v=Adj[u][i];<br>            q.<span class="hljs-built_in">push</span>(v);<br>            inq[v]=<span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1034-Head-of-a-Gang（图的深度遍历，STL）（⭐⭐⭐⭐）"><a href="#1034-Head-of-a-Gang（图的深度遍历，STL）（⭐⭐⭐⭐）" class="headerlink" title="1034 Head of a Gang（图的深度遍历，STL）（⭐⭐⭐⭐）"></a><strong>1034 Head of a Gang</strong>（图的深度遍历，STL）（⭐⭐⭐⭐）</h2><p><strong>题目：</strong></p><blockquote><p>One way that the police finds the head of a gang is to check people’s phone calls. If there is a phone call between <em>A</em> and <em>B</em>, we say that <em>A</em> and <em>B</em> is related. The weight of a relation is defined to be the total time length of all the phone calls made between the two persons. A “Gang” is a cluster of more than 2 persons who are related to each other with total relation weight being greater than a given threshold <em>K</em>. In each gang, the one with maximum total weight is the head. Now given a list of phone calls, you are supposed to find the gangs and the heads.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains two positive numbers <em>N</em> and <em>K</em> (both less than or equal to 1000), the number of phone calls and the weight threthold, respectively. Then <em>N</em> lines follow, each in the following format:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&gt;<span class="hljs-symbol">Name1</span> <span class="hljs-symbol">Name2</span> Time<br></code></pre></td></tr></table></figure><p>where <code>Name1</code> and <code>Name2</code> are the names of people at the two ends of the call, and <code>Time</code> is the length of the call. A name is a string of three capital letters chosen from <code>A</code>-<code>Z</code>. A time length is a positive integer which is no more than 1000 minutes.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in a line the total number of gangs. Then for each gang, print in a line the name of the head and the total number of the members. It is guaranteed that the head is unique for each gang. The output must be sorted according to the alphabetical order of the names of the heads.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs in">&gt;8 59<br>&gt;AAA BBB 10<br>&gt;BBB AAA 20<br>&gt;AAA CCC 40<br>&gt;DDD EEE 5<br>&gt;EEE DDD 70<br>&gt;FFF GGG 30<br>&gt;GGG HHH 20<br>&gt;HHH FFF 10<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">&gt;2<br>&gt;AAA 3<br>&gt;GGG 3<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs in">&gt;8 70<br>&gt;AAA BBB 10<br>&gt;BBB AAA 20<br>&gt;AAA CCC 40<br>&gt;DDD EEE 5<br>&gt;EEE DDD 70<br>&gt;FFF GGG 30<br>&gt;GGG HHH 20<br>&gt;HHH FFF 10<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">&gt;0<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  本题作为压轴题，但其实并不是很难，只要掌握了图的深度搜索遍历就可以非常轻松的做出来。</li><li>  首先题目要求我们最终输出的是犯罪团伙的头目和人数，那么我们先考虑一下要怎么样去输出，是不是可以用<code>map&lt;string,int&gt;</code>保存头目和人数信息。这题非常明显的就是图的遍历，但是如果没有定位是图的遍历，那就没话说了，自己先去学习深搜。</li><li>  如果定位了图的遍历，那就可以用图的深度搜索的代码模板了，只不过要在遍历单连通图的时候通过比较记录下谁是头目（用点权进行比较）和人数以及总权数（要&gt;k）才是犯罪团伙，输入到gang团伙map中，等待最后的输出。</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">2010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">1000000000</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">数据存储准备：</span><br><span class="hljs-comment">用于将邻接矩阵的编号和名字对应，当然需要通过名字查找编号。 </span><br><span class="hljs-comment">map&lt;int,string&gt; intToString;</span><br><span class="hljs-comment">map&lt;string,int&gt; stringToInt;</span><br><span class="hljs-comment">记录头目和人数：</span><br><span class="hljs-comment">map&lt;string,int&gt;  gang;</span><br><span class="hljs-comment">一个记录点权值的数组：</span><br><span class="hljs-comment">int weight[maxn]=&#123;0&#125;; </span><br><span class="hljs-comment">一个记录边权值的矩阵:</span><br><span class="hljs-comment">int G[maxn][maxn]=&#123;0&#125;;</span><br><span class="hljs-comment">一个用于遍历图的判断数组：</span><br><span class="hljs-comment">bool vis[max]=&#123;false&#125;;</span><br><span class="hljs-comment">int k;下限</span><br><span class="hljs-comment">int peopleNum;记录人数，在输入的时候进行记录。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">思路：主要就是先将输入的东西先进行人名和编号对应放到G矩阵中，</span><br><span class="hljs-comment">人名对应的时候要同时更新编号和人名对应。</span><br><span class="hljs-comment"> 一共有三个函数：</span><br><span class="hljs-comment"> 1、输入：屏幕中的一系列人名的对应关系，记录到两个map中，</span><br><span class="hljs-comment"> 并且要将边权值记录到 G矩阵中,记录点权值。 </span><br><span class="hljs-comment"> 2、遍历整个图，获取每个连通图的信息，如果vis为false就是未被访问则进入dfs</span><br><span class="hljs-comment"> 遍历，寻找单联通区域的头目、人数和总边权，和k进行比较。</span><br><span class="hljs-comment"> 3、遍历单连通区域，记录 头目、人数、总边权、weight数组 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span> <br>map&lt;<span class="hljs-type">int</span>,string&gt; intToString;<br>map&lt;string,<span class="hljs-type">int</span>&gt; stringToInt;<br>map&lt;string,<span class="hljs-type">int</span>&gt;  gang;<br><span class="hljs-type">int</span> weight[maxn]=&#123;<span class="hljs-number">0</span>&#125;; <br> <span class="hljs-type">int</span> G[maxn][maxn]=&#123;<span class="hljs-number">0</span>&#125;;<br> <span class="hljs-type">bool</span> vis[maxn]=&#123;<span class="hljs-literal">false</span>&#125;;<br> <span class="hljs-type">int</span> k;<br> <span class="hljs-type">int</span> peopleNum;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> nowVisit,<span class="hljs-type">int</span>&amp; head,<span class="hljs-type">int</span>&amp; numMember,<span class="hljs-type">int</span>&amp; totalValue)</span></span>&#123;<br> numMember++;<br> vis[nowVisit]=<span class="hljs-literal">true</span>;<br> <span class="hljs-keyword">if</span>(weight[nowVisit]&gt;weight[head])&#123;<br> head=nowVisit;<br> <br> &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;peopleNum;i++)&#123;<br><span class="hljs-keyword">if</span>(G[nowVisit][i]&gt;<span class="hljs-number">0</span>)&#123;<br>totalValue+=G[nowVisit][i];<br>G[nowVisit][i]=G[i][nowVisit]=<span class="hljs-number">0</span>;<span class="hljs-comment">//删除已经统计过的边。</span><br><span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-literal">false</span>)&#123;<br><span class="hljs-built_in">DFS</span>(i,head,numMember,totalValue);<br>&#125;<br>        &#125;<br>    &#125;<br>  &#125;<br> <br> <br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTrave</span><span class="hljs-params">()</span></span>&#123;<br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;peopleNum;i++)&#123;<br> <span class="hljs-keyword">if</span>(vis[i]==<span class="hljs-literal">false</span>)&#123;<br> <span class="hljs-type">int</span> head=i,numMember=<span class="hljs-number">0</span>,totalValue=<span class="hljs-number">0</span>;<br> <span class="hljs-built_in">DFS</span>(i,head,numMember,totalValue);<br><span class="hljs-keyword">if</span>(numMember&gt;<span class="hljs-number">2</span> &amp;&amp; totalValue&gt;k)&#123;<br>gang[intToString[head]]=numMember;<br>&#125;<br> &#125;<br> &#125;<br> &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(string str)</span></span>&#123;<br> <span class="hljs-keyword">if</span>(stringToInt.<span class="hljs-built_in">find</span>(str)!=stringToInt.<span class="hljs-built_in">end</span>())&#123;<br> <span class="hljs-keyword">return</span> stringToInt[str];<br> &#125;<br> <span class="hljs-keyword">else</span> &#123;<br> stringToInt[str] =peopleNum;<br> intToString[peopleNum]=str; <br> <span class="hljs-keyword">return</span> peopleNum++;<br> &#125; <br> &#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n&gt;&gt;k;<br>string s1,s2;<br><span class="hljs-type">int</span> temp;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;temp;<br><span class="hljs-type">int</span> l1=<span class="hljs-built_in">change</span>(s1);<br><span class="hljs-type">int</span> l2=<span class="hljs-built_in">change</span>(s2);<br>weight[l1]+=temp;<br>weight[l2]+=temp;<br>G[l1][l2]+=temp;<br>G[l2][l1]+=temp;<br><br>&#125;<br><br><span class="hljs-built_in">DFSTrave</span>();<br>cout&lt;&lt;gang.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<br>map&lt;string,<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-keyword">for</span>(it=gang.<span class="hljs-built_in">begin</span>();it!=gang.<span class="hljs-built_in">end</span>();it++)&#123;<br>cout&lt;&lt;it-&gt;first&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意点：</strong></p><ul><li>  需要注意的是在进行单连通遍历的时候记录totalValue时要及时对已经记录过的边权进行删除，不然会重复统计。</li><li>  最后map输出的时候利用迭代器。</li></ul><h3 id="思考：如何利用邻接表实现。"><a href="#思考：如何利用邻接表实现。" class="headerlink" title="思考：如何利用邻接表实现。"></a>思考：如何利用邻接表实现。</h3><p><strong>代码：</strong></p><h2 id="1076-Forwards-on-Weibo（图的BFS遍历）（⭐⭐⭐）"><a href="#1076-Forwards-on-Weibo（图的BFS遍历）（⭐⭐⭐）" class="headerlink" title="1076 Forwards on Weibo（图的BFS遍历）（⭐⭐⭐）"></a><strong>1076 Forwards on Weibo</strong>（图的BFS遍历）（⭐⭐⭐）</h2><p><strong>题目：</strong></p><blockquote><p>Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is formed with followers relations. When a user makes a post on Weibo, all his/her followers can view and forward his/her post, which can then be forwarded again by their followers. Now given a social network, you are supposed to calculate the maximum potential amount of forwards for any specific user, assuming that only <em>L</em> levels of indirect followers are counted.</p><h3 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: <em>N</em> (≤1000), the number of users; and <em>L</em> (≤6), the number of levels of indirect followers that are counted. Hence it is assumed that all the users are numbered from 1 to <em>N</em>. Then <em>N</em> lines follow, each in the format:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&gt;M<span class="hljs-selector-attr">[i]</span> user_list<span class="hljs-selector-attr">[i]</span><br></code></pre></td></tr></table></figure><p>where <code>M[i]</code> (≤100) is the total number of people that <code>user[i]</code> follows; and <code>user_list[i]</code> is a list of the <code>M[i]</code> users that followed by <code>user[i]</code>. It is guaranteed that no one can follow oneself. All the numbers are separated by a space.</p><p>Then finally a positive <em>K</em> is given, followed by <em>K</em> <code>UserID</code>‘s for query.</p><h3 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each <code>UserID</code>, you are supposed to print in one line the maximum potential amount of forwards this user can trigger, assuming that everyone who can view the initial post will forward it once, and that only <em>L</em> levels of indirect followers are counted.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs in">&gt;7 3<br>&gt;3 2 3 4<br>&gt;0<br>&gt;2 5 6<br>&gt;2 3 1<br>&gt;2 3 4<br>&gt;1 4<br>&gt;1 5<br>&gt;2 2 6<br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs out">&gt;4<br>&gt;5<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  本题主要难点在于读懂题目，说实话我觉得现在我最大的问题就是不会读题目，题目中要求我们在给定N个用户和L层找到一个微博用户发送的信息最多可以被转发多少次。</li><li>  解题的关键是在于建立有向图，那么代码中我利用的是邻接表记录，注意的是如果一个图中有权值，并且需要用到邻接表进行记录，那么邻接表中可以利用定义一个struct记录节点的编号和权重。</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">1010</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">数据存储：</span><br><span class="hljs-comment">邻接表，记录图 </span><br><span class="hljs-comment">vector&lt;int&gt; Adj[MAXN];</span><br><span class="hljs-comment">层数：</span><br><span class="hljs-comment">int lever;</span><br><span class="hljs-comment">最大转发数：</span><br><span class="hljs-comment">int count;</span><br><span class="hljs-comment">查询列表：</span><br><span class="hljs-comment">vector&lt;int&gt; ans; </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">解题步骤：</span><br><span class="hljs-comment">1、建立图，注意箭头指向是从被关注者到关注者。</span><br><span class="hljs-comment">2、输入查询的节点，从该节点开始寻找，记录层数</span><br><span class="hljs-comment">和转发量。返回转发量，存入查询列表中。 </span><br><span class="hljs-comment">*/</span> <br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">int</span> layer;<br>&#125;;<br>vector&lt;Node&gt; Adj[MAXN];<br><span class="hljs-type">bool</span> inq[MAXN]=&#123;<span class="hljs-literal">false</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> L)</span></span>&#123;<br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>queue&lt;Node&gt; q;<br>Node start;<br>start.id=u;<br>start.layer=<span class="hljs-number">0</span>;<br>q.<span class="hljs-built_in">push</span>(start);<br>inq[start.id]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>Node node=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> s=node.id;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;Adj[s].<span class="hljs-built_in">size</span>();i++)&#123;<br>Node next=Adj[s][i];<br>next.layer=node.layer+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(inq[next.id]==<span class="hljs-literal">false</span>&amp;&amp;next.layer&lt;=L)&#123;<br>q.<span class="hljs-built_in">push</span>(next);<br>inq[next.id]=<span class="hljs-literal">true</span>;<br>count++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> N,L;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;N,&amp;L);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)&#123;<br><span class="hljs-type">int</span> nums;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;nums);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;nums;j++)&#123;<br><span class="hljs-type">int</span> num;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num);<br>Node newNode;<br>newNode.id=i;<br>newNode.layer=<span class="hljs-number">0</span>;<br>Adj[num].<span class="hljs-built_in">push_back</span>(newNode);<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> searchNum;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;searchNum);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;searchNum;i++)&#123;<br><span class="hljs-built_in">memset</span>(inq,<span class="hljs-literal">false</span>,<span class="hljs-built_in">sizeof</span>(inq));<span class="hljs-comment">//为何要这句？？？ </span><br><span class="hljs-type">int</span> start;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;start);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">BFS</span>(start,L));<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>  因为每次进入BFS之前inq数组可能已经有上一次遍历的信息所以可以在进入BFS之前先对inq进行一个重置。</li></ul><h2 id="最短路问题"><a href="#最短路问题" class="headerlink" title="最短路问题"></a>最短路问题</h2><h2 id="1003-Emergency（Dijkstra）（⭐⭐⭐⭐）"><a href="#1003-Emergency（Dijkstra）（⭐⭐⭐⭐）" class="headerlink" title="1003 Emergency（Dijkstra）（⭐⭐⭐⭐）"></a><strong>1003 Emergency</strong>（Dijkstra）（⭐⭐⭐⭐）</h2><p><strong>题目：</strong></p><blockquote><p>  As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p><h3 id="Input-Specification-2"><a href="#Input-Specification-2" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case. For each test case, the first line contains 4 positive integers: <em>N</em> (≤500) - the number of cities (and the cities are numbered from 0 to <em>N</em>−1), <em>M</em> - the number of roads, <em>C</em>1 and <em>C</em>2 - the cities that you are currently in and that you must save, respectively. The next line contains <em>N</em> integers, where the <em>i</em>-th integer is the number of rescue teams in the <em>i</em>-th city. Then <em>M</em> lines follow, each describes a road with three integers <em>c</em>1, <em>c</em>2 and <em>L</em>, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from <em>C</em>1 to <em>C</em>2.</p><h3 id="Output-Specification-2"><a href="#Output-Specification-2" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  For each test case, print in one line two numbers: the number of different shortest paths between <em>C</em>1 and <em>C</em>2, and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs in">5 6 0 2<br>1 2 1 5 3<br>0 1 1<br>0 2 2<br>0 3 1<br>1 2 1<br>2 4 1<br>3 4 1<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">2 4<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  本题我个人感觉难度还是比较大的，首先是题目的理解，主要是要把题目中的城市中的救援队抽象成点权，把路抽象成边权，所以我们应该是在找最短路的同时将点权之和进行记录，也就是更新每个点的点权值之和，具体的内容就是在Dijkstra算法中修改，其实这么分析下来就不难了，最后输出的时候是输出条数而不是权值，这是一个小陷阱，以后得认真读题。</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">1000000000</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">数据存储：</span><br><span class="hljs-comment">用于记录城市的数量n,路的条数m,开始的城市c1</span><br><span class="hljs-comment">结束的城市c2.</span><br><span class="hljs-comment">int n,m,c1,c2;</span><br><span class="hljs-comment">记录图信息，</span><br><span class="hljs-comment">int G[MAXN][MAXN];</span><br><span class="hljs-comment">记录点权：</span><br><span class="hljs-comment">int weigh[MAXN]; </span><br><span class="hljs-comment">记录每点到起始点的边权值。</span><br><span class="hljs-comment">int d[MAXN];</span><br><span class="hljs-comment">记录点权之和</span><br><span class="hljs-comment">int w[MAXN]; </span><br><span class="hljs-comment">记录是否访问</span><br><span class="hljs-comment">bool vis[MAXN]=&#123;false&#125;; </span><br><span class="hljs-comment">记录最短路径的条数 </span><br><span class="hljs-comment">int num[MAXN]; </span><br><span class="hljs-comment">解题思路：</span><br><span class="hljs-comment">1、处理图利用邻接矩阵存储。weight记录点权 </span><br><span class="hljs-comment">2、利用Dijkstra算法计算d数组、在更新d数组</span><br><span class="hljs-comment">的时候更新w数组、num数组、.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> n,m,c1,c2;<br><span class="hljs-type">int</span> G[MAXN][MAXN];<br><span class="hljs-type">int</span> weight[MAXN]; <br><span class="hljs-type">int</span> d[MAXN];<br><span class="hljs-type">int</span> w[MAXN]; <br><span class="hljs-type">int</span> num[MAXN];<br><span class="hljs-type">bool</span> vis[MAXN]=&#123;<span class="hljs-literal">false</span>&#125;; <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br><span class="hljs-built_in">fill</span>(d,d+MAXN,INF);<br><span class="hljs-built_in">fill</span>(w,w+MAXN,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">fill</span>(num,num+MAXN,<span class="hljs-number">0</span>);<br>d[s]=<span class="hljs-number">0</span>;<br>w[s]=weight[s];<br>num[s]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-type">int</span> u=<span class="hljs-number">-1</span>,MIN=INF;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br><span class="hljs-keyword">if</span>(vis[j]==<span class="hljs-literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;<br>u=j;<br>MIN=d[j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(u==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> ;<br>vis[u]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v=<span class="hljs-number">0</span>;v&lt;n;v++)&#123;<br><span class="hljs-keyword">if</span>(vis[v]==<span class="hljs-literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;<br><span class="hljs-keyword">if</span>(d[u]+G[u][v]&lt;d[v])&#123;<br>d[v]=d[u]+G[u][v];<br>w[v]=w[u]+weight[v];<br>num[v]=num[u];<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[u]+G[u][v]==d[v])&#123;<br><span class="hljs-keyword">if</span>(w[u]+weight[v]&gt;w[v])&#123;<br>w[v]=w[u]+weight[v];<br><br>&#125;<br>num[v]+=num[u];<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;n,&amp;m,&amp;c1,&amp;c2);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;weight[i]);<br>&#125;<br><span class="hljs-built_in">fill</span>(G[<span class="hljs-number">0</span>],G[<span class="hljs-number">0</span>]+MAXN*MAXN,INF);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br><span class="hljs-type">int</span> a,b,c;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>G[a][b]=c;<br>G[b][a]=c;<br>&#125;<br><span class="hljs-built_in">Dijkstra</span>(c1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,num[c2],w[c2]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意点</strong>：</p><ul><li>  对二维数组进行fill()操作的时候需要<code>fill(G[0],G[0]+MAXN*MAXN,INF);</code>。</li><li>  记住Dijkstra算法可以同时维护多个标尺。</li></ul><h2 id="利用DFS改进1003"><a href="#利用DFS改进1003" class="headerlink" title="利用DFS改进1003"></a>利用DFS改进1003</h2><p>上面的题目只是给出了简单的计算权值的方法，要是稍微复杂一点可能就无法得到正确的结果，因为不一定满足最优子结构。所以我们可以利用DFS加持。</p><p>上面我们的思路是用pre数组记录下最短路，这需要在进行Dijkstra算法的时候进行严密的逻辑。其实有一个更加简单的方式：<strong>先在Dijkstra算法中记录下所有最短路经（只考虑距离），然后从这些最短路径中选出一条第二标尺最优的路径。</strong></p><p>①使用Dijkstra算法记录下所有的最短路径。</p><p>之前我们是使用pre数组进行记录，但是记录下所有路径，使用<code>vector&lt;int&gt; pre[MAXN]</code>，（如果需要查询某个顶点u是否在顶点v的前驱中，可以使用<code>set&lt;int&gt;</code>，此时使用<code>pre[v].count()</code>查询比较方便）</p><ul><li>  Pre数组的求解代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; pre[MAXN];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br><span class="hljs-built_in">fill</span>(d,d+MAXN,INF);<br>    d[s]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-type">int</span> u=<span class="hljs-number">-1</span>;MIN=INF;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>            <span class="hljs-keyword">if</span>(vis[j]==<span class="hljs-literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;<br>                u=j;<br>                MIN=d[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(u==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> ;<br>        vis[u]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v=<span class="hljs-number">0</span>;v&lt;n;v++)&#123;<br><span class="hljs-keyword">if</span>(vis[v]==<span class="hljs-literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;<br>                <span class="hljs-keyword">if</span>(d[u]+G[u][v]&lt;d[v])&#123;<br>                    d[v]=d[u]+G[u][v];<br>                    pre[v].<span class="hljs-built_in">clear</span>();<br>                    pre[v].<span class="hljs-built_in">push_back</span>(u);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[u]+G[u][v]==d[v])&#123;<br>                    pre[v].<span class="hljs-built_in">push_back</span>(u);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>②遍历所有最短路径，找出一条第二标尺最优的路径</p><p>现在我们已经pre数组，记录了每个节点中所有的最短路径的前驱节点，在每个pre[]中记录的是所有前前驱，故需要用到DFS进行求解。</p><p>必须要有的是：</p><ul><li>  作为全局变量的第二标尺最优值optValue。</li><li>  记录最优路径的数组path（使用vector记录）</li><li>  临时记录DFS遍历到叶子节点的路径tempPath（使用vector数组存储）</li></ul><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> optValue;<br>vector&lt;<span class="hljs-type">int</span>&gt; pre[MAXN];<br>vector&lt;<span class="hljs-type">int</span>&gt; path,tempPath;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>&#123;<br><span class="hljs-keyword">if</span>(v==st)&#123;<br>        tempPath.<span class="hljs-built_in">push_back</span>(v);<br>        <span class="hljs-type">int</span> value;<br>        <span class="hljs-keyword">if</span>(value优于optValue)&#123;<br>            optValue=value;<br>            path=tempPath;<br>        &#125;<br>        tempPath.<span class="hljs-built_in">pop_back</span>();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    tempPath.<span class="hljs-built_in">push_back</span>(v);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;pre[v].<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-built_in">DFS</span>(pre[v][i]);<br>    &#125;<br>    tempPath.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>  题目中的第二标尺比较简单的情况下使用第一种题解比较方便。</li></ul><h2 id="1030-Travel-Plan（Dijkstra）（⭐⭐⭐⭐）"><a href="#1030-Travel-Plan（Dijkstra）（⭐⭐⭐⭐）" class="headerlink" title="1030 Travel Plan（Dijkstra）（⭐⭐⭐⭐）"></a><strong>1030 Travel Plan</strong>（Dijkstra）（⭐⭐⭐⭐）</h2><p><strong>题目：</strong></p><blockquote><p>  A traveler’s map gives the distances between cities along the highways, together with the cost of each highway. Now you are supposed to write a program to help a traveler to decide the shortest path between his/her starting city and the destination. If such a shortest path is not unique, you are supposed to output the one with the minimum cost, which is guaranteed to be unique.</p><h3 id="Input-Specification-3"><a href="#Input-Specification-3" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case. Each case starts with a line containing 4 positive integers <em>N</em>, <em>M</em>, <em>S</em>, and <em>D</em>, where <em>N</em> (≤500) is the number of cities (and hence the cities are numbered from 0 to <em>N</em>−1); <em>M</em> is the number of highways; <em>S</em> and <em>D</em> are the starting and the destination cities, respectively. Then <em>M</em> lines follow, each provides the information of a highway, in the format:</p>  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">City1 City2 <span class="hljs-built_in">Distance</span> Cost<br></code></pre></td></tr></table></figure><p>  where the numbers are all integers no more than 500, and are separated by a space.</p><h3 id="Output-Specification-3"><a href="#Output-Specification-3" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  For each test case, print in one line the cities along the shortest path from the starting point to the destination, followed by the total distance and the total cost of the path. The numbers must be separated by a space and there must be no extra space at the end of output.</p><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs in">4 5 0 3<br>0 1 1 20<br>1 3 2 30<br>0 3 4 10<br>0 2 2 20<br>2 3 1 20<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">0 2 3 3 40<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><p>本题就是一个规规矩矩的利用Dijkstra算法进行求解，如果不熟练Dijkstra，没有办法在10分钟内写出完整的DK算法的话本题具有一定难度，Dijksta算法的模板较为单一，同时如果遇到多个标尺可以使用DFS进行求解，总之如果不懂，就背下来。</p><p><strong>代码：</strong>（利用DFS求解）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">1000000000</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">数据存储：</span><br><span class="hljs-comment">用于存储城市、路、起点和重点。</span><br><span class="hljs-comment">int n,m,s,e;</span><br><span class="hljs-comment">用于存储图结构</span><br><span class="hljs-comment">int G[MAXN][MAXN];</span><br><span class="hljs-comment">用于记录最优路径节点的前驱。</span><br><span class="hljs-comment">vector&lt;int&gt; pre;</span><br><span class="hljs-comment">用于存储 </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">int</span> m,n,st,e;<br><span class="hljs-type">int</span> G[MAXN][MAXN],cost[MAXN][MAXN];<br><span class="hljs-type">int</span> d[MAXN];<br><br><span class="hljs-type">int</span> minCost=INF;<br><span class="hljs-type">bool</span> vis[MAXN]=&#123;<span class="hljs-literal">false</span>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt; path,tempPath;<br>vector&lt;<span class="hljs-type">int</span>&gt; pre[MAXN];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br><span class="hljs-built_in">fill</span>(d,d+MAXN,INF);<br>d[s]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-type">int</span> u=<span class="hljs-number">-1</span>,MIN=INF;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br><span class="hljs-keyword">if</span>(vis[j]==<span class="hljs-literal">false</span>&amp;&amp;d[j]&lt;MIN)&#123;<br>MIN=d[j];<br>u=j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(u==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span>;<br>vis[u]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v=<span class="hljs-number">0</span>;v&lt;n;v++)&#123;<br><span class="hljs-keyword">if</span>(vis[v]==<span class="hljs-literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;<br><span class="hljs-keyword">if</span>(d[u]+G[u][v]&lt;d[v])&#123;<br>d[v]=d[u]+G[u][v];<br>pre[v].<span class="hljs-built_in">clear</span>();<br>pre[v].<span class="hljs-built_in">push_back</span>(u);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[u]+G[u][v]==d[v])&#123;<br>pre[v].<span class="hljs-built_in">push_back</span>(u);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>&#123;<br><span class="hljs-keyword">if</span>(v==st)&#123;<br>tempPath.<span class="hljs-built_in">push_back</span>(v);<br><span class="hljs-type">int</span> tempCost=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=tempPath.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-type">int</span> id=tempPath[i],idNext=tempPath[i<span class="hljs-number">-1</span>];<br>tempCost+=cost[id][idNext];<br>&#125;<br><span class="hljs-keyword">if</span>(tempCost&lt;minCost)&#123;<br>minCost=tempCost;<br>path=tempPath;<br>&#125;<br>tempPath.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>tempPath.<span class="hljs-built_in">push_back</span>(v);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;pre[v].<span class="hljs-built_in">size</span>();i++)&#123;<br><span class="hljs-built_in">DFS</span>(pre[v][i]);<br>&#125;<br>tempPath.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;n,&amp;m,&amp;st,&amp;e);<br><span class="hljs-type">int</span> u,v;<br><span class="hljs-built_in">fill</span>(G[<span class="hljs-number">0</span>],G[<span class="hljs-number">0</span>]+MAXN*MAXN,INF);<br><span class="hljs-built_in">fill</span>(cost[<span class="hljs-number">0</span>],cost[<span class="hljs-number">0</span>]+MAXN*MAXN,INF);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;G[u][v],&amp;cost[u][v]);<br>G[v][u]=G[u][v];<br>cost[v][u]=cost[u][v];<br>&#125;<br><span class="hljs-built_in">Dijkstra</span>(st);<br><span class="hljs-built_in">DFS</span>(e);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=path.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,path[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,d[e],minCost);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="1018-Public-Bike-Management（Dijkstra）-⭐⭐⭐⭐⭐"><a href="#1018-Public-Bike-Management（Dijkstra）-⭐⭐⭐⭐⭐" class="headerlink" title="1018 Public Bike Management（Dijkstra）(⭐⭐⭐⭐⭐)"></a><strong>1018 Public Bike Management</strong>（Dijkstra）(⭐⭐⭐⭐⭐)</h2><p><strong>题目：（原题看官网）</strong></p><blockquote><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs in">10 3 3 5<br>6 7 0<br>0 1 1<br>0 2 1<br>0 3 3<br>1 3 1<br>2 3 1<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">3 0-&gt;2-&gt;3 0<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><ul><li>  利用Dijkstra算法加上DFS进行求解会方便一些。</li><li>  首先利用Dijkstra算法先把pre数组和最短路进行求解，然后利用</li></ul><p><strong>代码：</strong>(不是满分·)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">1000000000</span>;<br><br><span class="hljs-type">int</span> G[MAXN][MAXN];<br><span class="hljs-type">int</span> d[MAXN];<br><span class="hljs-type">bool</span> vis[MAXN]=&#123;<span class="hljs-literal">false</span>&#125;;<br><span class="hljs-type">int</span> weight[MAXN];<br>vector&lt;<span class="hljs-type">int</span>&gt; pre[MAXN];<br>vector&lt;<span class="hljs-type">int</span>&gt; path,tempPath;<br><br><span class="hljs-type">int</span> c_max,n,sp,m;<br><span class="hljs-type">int</span> minNeed=INF,minRemain=INF;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br><span class="hljs-built_in">fill</span>(d,d+MAXN,INF);<br>d[s]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-type">int</span> u=<span class="hljs-number">-1</span>,min=INF;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br><span class="hljs-keyword">if</span>(d[j]&lt;min&amp;&amp;vis[j]==<span class="hljs-literal">false</span>)&#123;<br>min=d[j];<br>u=j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(u==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> ;<br>vis[u]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v=<span class="hljs-number">0</span>;v&lt;=n;v++)&#123;<br><span class="hljs-keyword">if</span>(vis[v]==<span class="hljs-literal">false</span>&amp;&amp;G[u][v]!=INF)&#123;<br><span class="hljs-keyword">if</span>(d[u]+G[u][v]&lt;d[v])&#123;<br>d[v]=d[u]+G[u][v];<br>pre[v].<span class="hljs-built_in">clear</span>();<br>pre[v].<span class="hljs-built_in">push_back</span>(u);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[u]+G[u][v]==d[v])&#123;<br>pre[v].<span class="hljs-built_in">push_back</span>(u);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span>&#123;<br><span class="hljs-keyword">if</span>(v==<span class="hljs-number">0</span>)&#123;<br>tempPath.<span class="hljs-built_in">push_back</span>(v);<br><span class="hljs-type">int</span> need=<span class="hljs-number">0</span>,remain=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=tempPath.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-type">int</span> id=tempPath[i];<br><span class="hljs-keyword">if</span>(weight[id]&gt;<span class="hljs-number">0</span>)&#123;<br>remain+=weight[id];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(remain&gt;<span class="hljs-built_in">abs</span>(weight[id]))&#123;<br>remain-=<span class="hljs-built_in">abs</span>(weight[id]);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>need+=(<span class="hljs-built_in">abs</span>(weight[i])-remain);<br>remain=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(need&lt;minNeed)&#123;<br>minNeed=need;<br>minRemain=remain;<br>path=tempPath; <br>&#125; <span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(need==minNeed&amp;&amp;remain&lt;minRemain)&#123;<br>minRemain=remain;<br>path=tempPath;<br>&#125;<br>tempPath.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-keyword">return</span>;<br>&#125;<br>tempPath.<span class="hljs-built_in">push_back</span>(v);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;pre[v].<span class="hljs-built_in">size</span>();i++)&#123;<br><span class="hljs-built_in">DFS</span>(pre[v][i]);<br>&#125;<br>tempPath.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;c_max,&amp;n,&amp;sp,&amp;m);<br><span class="hljs-type">int</span> u,v;<br><span class="hljs-built_in">fill</span>(G[<span class="hljs-number">0</span>],G[<span class="hljs-number">0</span>]+MAXN*MAXN,INF);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;weight[i]);<br>weight[i]-=c_max/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;u,&amp;v);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;G[u][v]);<br>G[v][u]=G[u][v]; <br>&#125;<br><span class="hljs-built_in">Dijkstra</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">DFS</span>(sp);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,minNeed);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=path.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,path[i]);<br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,minRemain);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Bellman-ford算法"><a href="#Bellman-ford算法" class="headerlink" title="Bellman-ford算法"></a>Bellman-ford算法</h2><p>Dijkstra算法可以很好的解决无负权的最短路问题，但是对于有负权边，就需要使用Bellman算法。</p><p>Bellman算法需要设置一个数组d用来记录源点到达各个顶点的最短距离。并且将Bellman算法返回一个bool值，如果存在从源点可达的负环，那么函数将返回false。松弛操作不超过V-1次。</p><p><strong>代码：（利用邻接表实现）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> v,dis;<br>&#125;<br>vector&lt;Node&gt; Adj[MAXN];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> d[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Bellman</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br>    <span class="hljs-built_in">fill</span>(d,d+MAXN,INf);<br>    d[s]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u=<span class="hljs-number">0</span>;u&lt;n;u++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;Adj[u].<span class="hljs-built_in">size</span>();j++)&#123;<br>                <span class="hljs-type">int</span> v=Adj[u][j].v;<br>                <span class="hljs-type">int</span> dis=Adj[u][j].dis;<br>                <span class="hljs-keyword">if</span>(d[u]+dis&lt;d[v])&#123;<br>                    d[v]=d[u]+dis;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u=<span class="hljs-number">0</span>;u&lt;n;u++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;Adj[u].<span class="hljs-built_in">size</span>();j++)&#123;<br>            <span class="hljs-type">int</span> v=Adj[u][j].v;<br>            <span class="hljs-type">int</span> dis=Adj[u][j].dis;<br>            <span class="hljs-keyword">if</span>(d[u]+dis&lt;d[v])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="利用Bellman-Ford编写A1003"><a href="#利用Bellman-Ford编写A1003" class="headerlink" title="利用Bellman-Ford编写A1003"></a>利用Bellman-Ford编写A1003</h2><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">1000000000</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> v,dis;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> _v,<span class="hljs-type">int</span> _dis) :<span class="hljs-built_in">v</span>(_v),<span class="hljs-built_in">dis</span>(_dis)&#123;&#125;<br>&#125;<br><span class="hljs-type">int</span> n,m,c1,c2;<br>vector&lt;Node&gt; Adj[MAXN];<br><span class="hljs-type">int</span> weight[MAXN]; <br><span class="hljs-type">int</span> d[MAXN];<br><span class="hljs-type">int</span> w[MAXN]; <br><span class="hljs-type">int</span> num[MAXN];<br><span class="hljs-type">bool</span> vis[MAXN]=&#123;<span class="hljs-literal">false</span>&#125;; <br>set&lt;<span class="hljs-type">int</span>&gt; pre[MAXN];<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Bellman</span> <span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br>    <span class="hljs-built_in">fill</span>(d,d+MAXN.INF);<br>    <span class="hljs-built_in">fill</span>(num,num+MAXN,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">fill</span>(w,w+MAXN,<span class="hljs-number">0</span>);<br>    d[s]=<span class="hljs-number">0</span>;<br>    w[s]=weight[s];<br>    num[s]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u=<span class="hljs-number">0</span>;u&lt;n;u++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;Adj[u].<span class="hljs-built_in">size</span>();j++)&#123;<br>                <span class="hljs-type">int</span> v=Adj[u][j].v;<br>                <span class="hljs-type">int</span> dis=Adj[u][j].dis;<br>                <span class="hljs-keyword">if</span>(d[u]+dis&lt;d[v])&#123;<br>                    d[v]=d[u]+dis;<br>                    w[v]=w[u]+weight[v];<br>                    num[v]=num[u];<br>                    pre[v].<span class="hljs-built_in">clear</span>();<br>                    pre[v].<span class="hljs-built_in">insert</span>(u);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d[u]+dis==d[v])&#123;<br>                    <span class="hljs-keyword">if</span>(w[u]+weight[v]&gt;w[v])&#123;<br>                        w[v]=w[u]+weight[v];<br>                    &#125;<br>                    pre[v].<span class="hljs-built_in">insert</span>(u);<br>                    num[v]=<span class="hljs-number">0</span>;<br>                    set&lt;<span class="hljs-type">int</span>&gt;::isterator it;<br>                    <span class="hljs-keyword">for</span>(it=pre[v].<span class="hljs-built_in">begin</span>();it!=pre[v].<span class="hljs-built_in">end</span>();it++)&#123;<br>                        num[v]+=num[*it];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br><br><br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;n,&amp;m,&amp;c1,&amp;c2);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;weight[i]);<br>&#125;<br><span class="hljs-built_in">fill</span>(G[<span class="hljs-number">0</span>],G[<span class="hljs-number">0</span>]+MAXN*MAXN,INF);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br><span class="hljs-type">int</span> a,b,c;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;c);<br>Adj[a].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">Node</span>(b,c));<br>        Adj[b].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">Node</span>(a,c));<br>&#125;<br><span class="hljs-built_in">Bellman</span>(c1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,num[c2],w[c2]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h2><p>通过上面的作答发现只有当某个点的d[u]值发生变化的时候，从它出发的边的邻接点v的d[v]值才可能变化，所以可以建立一个队列，每次将队头u取出，然后对u出发的所有u-v边进行松弛处理，如果松弛处理后，也就是d[v]获得了更优的值，但是此时v不在队列中，就把v加入队列，这样操作直到队列为空或者某个顶点的入队次数超过了V-1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;Node&gt; Adj[MAXN];<br><span class="hljs-type">int</span> n,d[MAXN],num[MAXN];<br><span class="hljs-type">bool</span> inq[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SPFA</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br>    <span class="hljs-built_in">fill</span>(inq,inq+MAXN,<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">fill</span>(num,num+MAXN,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">fill</span>(d,d+MAXN,INF);<br>    queue&lt;<span class="hljs-type">int</span>&gt; Q;<br>    Q.<span class="hljs-built_in">push</span>(s);<br>    inq[s]=<span class="hljs-literal">true</span>;<br>    num[s]++;<br>    d[s]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!Q.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> u=Q.<span class="hljs-built_in">front</span>();<br>        Q.<span class="hljs-built_in">pop</span>();<br>        inq[u]=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;Adj[u].<span class="hljs-built_in">size</span>();j++)&#123;<br>            <span class="hljs-type">int</span> v=Adj[u][j].v;<br>            <span class="hljs-type">int</span> dis=Adj[u][j].dis;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>客观评价模型——数学建模（四）</title>
    <link href="/2023/08/26/%E5%AE%A2%E8%A7%82%E8%AF%84%E4%BB%B7%E6%A8%A1%E5%9E%8B%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2023/08/26/%E5%AE%A2%E8%A7%82%E8%AF%84%E4%BB%B7%E6%A8%A1%E5%9E%8B%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="客观评价"><a href="#客观评价" class="headerlink" title="客观评价"></a>客观评价</h1><p>在数学建模中，经常会遇到评价类问题，在评价类模型的选择中要尽量规避主观模型，如层次分析法、模糊综合评价法、灰色关联分析法。潜台词是如果用这三种，评委老师是绝对不会给你高分。</p><p>那么在客观评价方面，我们也有许多模型可以使用，如主成分分析法、因子分析法、Topsis分析法、神经网络分析法等，接下去我将一一进行介绍和实际案例。</p><h2 id="主成分分析法"><a href="#主成分分析法" class="headerlink" title="主成分分析法"></a>主成分分析法</h2><p>**主成分分析（PCA)**是一种比较基础的数据降维方法，也是多元统计中的重要部分，在数据分析、机器学习等方面具有广泛应用。主成分分析目的是用较少的变量来代替原来较多的变量，并可以反映原来多个变量的大部分信息。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>评价类赛题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>竞赛C++使用——PAT备考进行时（二）</title>
    <link href="/2023/08/26/%E7%AB%9E%E8%B5%9BC-%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/08/26/%E7%AB%9E%E8%B5%9BC-%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="C-C-使用指南"><a href="#C-C-使用指南" class="headerlink" title="C/C++使用指南"></a>C/C++使用指南</h1><ul><li>  基本数据类型</li></ul><table><thead><tr><th>类型</th><th>大致范围</th></tr></thead><tbody><tr><td>int</td><td>$-2<em>10^9$~$2</em>10^9$</td></tr><tr><td>longlong</td><td>$-9<em>10^{18}$~$9</em>10^{18}$</td></tr><tr><td>float</td><td>实际精度在6~7位</td></tr><tr><td>double</td><td>实际精度在15~16位</td></tr><tr><td>char</td><td>-128~+127</td></tr><tr><td>bool</td><td>0 or 1</td></tr></tbody></table><ul><li><p><strong>注：</strong></p><ul><li>  绝对值在$10^9$之内的整数都可以定义为int。</li><li>  不要用float，浮点数都用double。</li><li>  字符常量要用‘’括起来。</li></ul></li><li><p>  强制类型转换</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">（新类型）变量名<br></code></pre></td></tr></table></figure><ul><li><p>  getchar和putchar用来输入输出单个字符。</p></li><li><p>  数组的大小在$10^6$数量级的时候需要定义在主函数外面。</p></li><li><p>  memset用法：对数组中的每一个元素赋相同的值。memset需要加上cstring。使用memset赋值0或者-1，如果要赋值其他数字用fill函数。</p></li><li><p>  cstring和string不是同一个。</p></li><li><p>  gets和puts用来输入输出一行字符串。</p></li><li><p>cstring中的函数：</p><table><thead><tr><th>函数名</th><th>用法</th></tr></thead><tbody><tr><td>strlen()</td><td>得到字符串数组中第一个’\0’前的字符个数。</td></tr><tr><td>strcmp(s1,s2)</td><td>比较两个字符串</td></tr><tr><td>strcpy(s1,s2)</td><td>2复制到1</td></tr><tr><td>strcat(s1,s2)</td><td>2接到1后</td></tr></tbody></table></li><li><p>  sscanf和sprintf，sscanf是把字符数组中的内容传到n中，sprintf就是将值传入数组中。</p></li><li><p>  只有在string和vector中可以用vi.begin()+i这种迭代器加上整数的写法。</p></li><li><p>  除了vector和string之外的STL容器都不支持*(it+i)的访问方式。</p></li><li><p>  除了string的迭代器可以不写内部的容器，其他都要写：string ::iterator ,vector&lt;int&gt;::iterator。</p></li><li><p>  输入输出整个字符串，只能用cin,cout</p></li><li><p>  但是printf可以用c_str()函数将string类型转换为字符数组进行输出。</p></li><li><p>  map的键值对是唯一对应的，如果要一键对应多个值可以使用multimap。unorder_map速度比map速度要块。</p></li><li><p>priority_queue优先队列的用法：</p><ul><li><p>```c++<br>  priority_queue<int> q;<br>  priority_queue&lt;int ,vector<int>,less<int> &gt; q;//&gt;&gt;要分开</p><p>  默认优先级是数字大优先级越高，less<int>表示数字大的优先级的大，greater<int>表示数字小的优先级越大。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>-   对于结构体的优先级：<br><br>    ```c++<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">fruit</span>&#123;<br>        string name;<br>        <span class="hljs-type">int</span> price;<br>        <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (fruit f1,fruit f2)&#123;<br>            <span class="hljs-keyword">return</span> f1.price&lt;f2.price;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>  重载&lt;，不可以重载&gt;，return里和cmp函数相反，也就是&lt;表示价格高优先级高，&gt;表示价格高度优先级低。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学问题</title>
    <link href="/2023/08/22/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2023/08/22/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数学问题"><a href="#数学问题" class="headerlink" title="数学问题"></a>数学问题</h1><h2 id="1069"><a href="#1069" class="headerlink" title="1069"></a>1069</h2><p><strong>题目：</strong></p><blockquote><p>  For any 4-digit integer except the ones with all the digits being the same, if we sort the digits in non-increasing order first, and then in non-decreasing order, a new number can be obtained by taking the second number from the first one. Repeat in this manner we will soon end up at the number <code>6174</code> – the <strong>black hole</strong> of 4-digit numbers. This number is named Kaprekar Constant.</p><p>  For example, start from <code>6767</code>, we’ll get:</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">7766</span> <span class="hljs-bullet">-</span> <span class="hljs-number">6677</span> <span class="hljs-string">=</span> <span class="hljs-number">1089</span><br><span class="hljs-number">9810</span> <span class="hljs-bullet">-</span> <span class="hljs-number">0189</span> <span class="hljs-string">=</span> <span class="hljs-number">9621</span><br><span class="hljs-number">9621</span> <span class="hljs-bullet">-</span> <span class="hljs-number">1269</span> <span class="hljs-string">=</span> <span class="hljs-number">8352</span><br><span class="hljs-number">8532</span> <span class="hljs-bullet">-</span> <span class="hljs-number">2358</span> <span class="hljs-string">=</span> <span class="hljs-number">6174</span><br><span class="hljs-number">7641</span> <span class="hljs-bullet">-</span> <span class="hljs-number">1467</span> <span class="hljs-string">=</span> <span class="hljs-number">6174</span><br><span class="hljs-string">...</span> <span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>  Given any 4-digit number, you are supposed to illustrate the way it gets into the black hole.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case which gives a positive integer <em>N</em> in the range (0,104).</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  If all the 4 digits of <em>N</em> are the same, print in one line the equation <code>N - N = 0000</code>. Else print each step of calculation in a line until <code>6174</code> comes out as the difference. All the numbers must be printed as 4-digit numbers.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">6767<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs out">7766 - 6677 = 1089<br>9810 - 0189 = 9621<br>9621 - 1269 = 8352<br>8532 - 2358 = 6174<br></code></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">2222<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">2222 - 2222 = 0000<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><p>这是一个简单题，但是坑还是挺多的，对于我这种菜鸡用了半小时，首先直接看到例子，都不用看题目，给出一个4位数，然后要求将其排序，要求一个将该数递增-该数递减，求出的数字用于作为下一个数字。</p><p>首先看到要用到排序，但是现在没法排序，因为也就是要把int转换为int[]，但是int[]又没法进行比较。所以还要转换成int进行比较。那么这样一来就需要先写两个函数，一个用于整数转整形数组，一个将数组转换成整数。</p><p>第二步，用一个循环判断number数是否是7641或者0，如果不是就一直循环下去。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br><span class="hljs-keyword">return</span> a&gt;b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">to_number</span><span class="hljs-params">(<span class="hljs-type">int</span> array[])</span></span>&#123;<br><span class="hljs-type">int</span> number=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>number=number*<span class="hljs-number">10</span>+array[i];<br>&#125;<br><span class="hljs-keyword">return</span> number;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">to_array</span><span class="hljs-params">(<span class="hljs-type">int</span> number,<span class="hljs-type">int</span> array[])</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>array[i]=number%<span class="hljs-number">10</span>;<br>number/=<span class="hljs-number">10</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> number,max,min;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;number);<br><span class="hljs-type">int</span> array[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">to_array</span>(number,array);<br><span class="hljs-built_in">sort</span>(array,array+<span class="hljs-number">4</span>,cmp);<span class="hljs-comment">//指向数组首地址 </span><br> max=<span class="hljs-built_in">to_number</span>(array);<br> <span class="hljs-built_in">sort</span>(array,array+<span class="hljs-number">4</span>);<br> min=<span class="hljs-built_in">to_number</span>(array);<br> number=max-min;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%04d - %04d = %04d\n&quot;</span>,max,min,number);<br> <span class="hljs-keyword">if</span>(number==<span class="hljs-number">6174</span>||number==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li>  将数组传入函数体时，只需要传入数组首地址就可以，用数组形式接收。</li><li>  注意输出形式，如果要求4位，并且补全0，即为<code>%04d</code></li></ul><hr><h2 id="最大公约数和最小公倍数"><a href="#最大公约数和最小公倍数" class="headerlink" title="最大公约数和最小公倍数"></a>最大公约数和最小公倍数</h2><p>记住以下结论和代码就可以了：</p><ul><li>  <strong>最大公约数：</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> !b?a:<span class="hljs-built_in">gcd</span>(b,a%b);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>  <strong>最小公倍数</strong>就是<code>ab/d</code>（d为最大公约数）</li></ul><hr><h2 id="分数的表示和简化"><a href="#分数的表示和简化" class="headerlink" title="分数的表示和简化"></a>分数的表示和简化</h2><p>用一个结构体存储分数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Fraction</span>&#123;<br>    <span class="hljs-type">int</span> up,down;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>规则如下：</strong></p><ul><li>  down为非负数，如果分数为负数，令up为负数。</li><li>  如果该分数为0，那么规定分子为0，分母为1。</li><li>  分子和分母没有除了1以外的公约数。</li></ul><p><strong>分母简化的代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Fraction <span class="hljs-title">reduction</span><span class="hljs-params">(Fraction result)</span></span>&#123;<br><span class="hljs-keyword">if</span>(result.down&lt;<span class="hljs-number">0</span>)&#123;<br>result.up=-result.up;<br>result.down=-result.down;<br>&#125;<br><span class="hljs-keyword">if</span>(result.up=<span class="hljs-number">0</span>)&#123;<br>result.down=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">int</span> d=<span class="hljs-built_in">gcd</span>(<span class="hljs-built_in">abs</span>(result.up),<span class="hljs-built_in">abs</span>(result.down));<br>result.up/=d;<br>result.down/=d;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分数加法：</strong><br>$$<br>result=\frac{f1.up<em>f2.down+f2.up</em>f1.down}{f1.down*f2.down}<br>$$<br><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//分数加法</span><br><span class="hljs-function">Fraction <span class="hljs-title">add</span><span class="hljs-params">(Fraction f1,Fraction f2)</span></span>&#123;<br>Fraction result;<br>result.up=f1.up*f2.down+f2.up*f1.down;<br>result.down=f1.down*f2.down;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">reduction</span>(result);<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>分数的输出：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showResult</span><span class="hljs-params">(Fraction r)</span></span>&#123;<br>r=<span class="hljs-built_in">reduction</span>(r);<br><span class="hljs-keyword">if</span>(r.down==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,r.up);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(r.up)&gt;r.down)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d/%d&quot;</span>,r.up /r.down,<span class="hljs-built_in">abs</span>(r.up)%r.down,r.down);<br><br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d/%d&quot;</span>,r.up,r.down);<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>注意：分子分母最好用longlong存储。</strong></p><hr><h2 id="素数和质因子"><a href="#素数和质因子" class="headerlink" title="素数和质因子"></a>素数和质因子</h2><p><strong>素数：</strong></p><ul><li>  素数的判断到$\sqrt{n}$即可。</li><li>  如果是用<code>i*i</code>作为上界判断，注意用longlong。</li><li>  利用筛法进行求解素数。</li></ul><p><strong>质因子：</strong></p><ul><li><p>  1不是素数，没有质因子。</p></li><li><p>fac数组只需要开到10</p><ul><li><p>fac数组的结构体：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">factor</span>&#123;<br>    <span class="hljs-type">int</span> x,cnt;<br>&#125;fac[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure></li></ul></li><li><p>  如果存在1和本身之外的因子，一定实在sqrt(n)的左右成对出现。</p></li><li><p>解题思路：</p><ul><li>  枚举1-sqrt(n)的所有质因子p，判断p是否是n的因子。</li><li>  如果p是n的因子，就给fac数组增加质因子p，并且初始化个数为0，然后，只要p还是n的因子，就让n不断的除以p，每次操作p 的个数+1，知道p不再是n的因子。</li><li>  如果p不是n的因子，就直接跳过。</li><li>  如果上面步骤结束以后n还是&gt;1,说明n有且仅有一个大于sqrt(n)的质因子，这时候把这个质因子加入fac数组，并且令其个数为1。</li></ul></li></ul><h2 id="1059"><a href="#1059" class="headerlink" title="1059"></a>1059</h2><p><strong>题目：</strong></p><blockquote><p>  Given any positive integer <em>N</em>, you are supposed to find all of its prime factors, and write them in the format <em>N</em> = $p1^{k1}<em>p2^{k2}</em>…*pm^{km}$</p><h3 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case which gives a positive integer <em>N</em> in the range of <strong>long int</strong>.</p><h3 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  Factor <em>N</em> in the format <em>N</em> <code>=</code> <em>p</em>1<code>^</code><em>k</em>1<code>*</code><em>p</em>2<code>^</code><em>k</em>2<code>*</code>…<code>*</code><em>p**m</em><code>^</code><em>k**m</em>, where <em>p**i</em>‘s are prime factors of <em>N</em> in increasing order, and the exponent <em>k**i</em> is the number of <em>p**i</em> – hence when there is only one <em>p**i</em>, <em>k**i</em> is 1 and must <strong>NOT</strong> be printed out.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs in">97532468<br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">97532468=2^2*11*17*101*1291<br></code></pre></td></tr></table></figure></blockquote><p><strong>单词积累：</strong></p><p>prime factors——素因子</p><p><strong>分析：</strong></p><ul><li>  题目中给的素数的范围是int范围，所以素数表只需要$10^5$就可以。</li><li>  当n==1的时候，需要特判。</li><li>   在处理完质因子后要判断n是否是1，如果不是1，则需要处理大于sqrt(n)的部分。</li></ul><p><strong>步骤：</strong></p><p>（1）生成素数表。</p><p>（2）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">100010</span>;<br><br><span class="hljs-comment">//判断是否是素数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> sqr=(<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span>*n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=sqr;i++)&#123;<br><br><span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <br><br><span class="hljs-comment">//素数表</span><br><span class="hljs-type">int</span> prime[maxn],pNum=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Find_Prime</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;maxn;i++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">is_prime</span>(i)==<span class="hljs-literal">true</span>)&#123;<br>prime[pNum++]=i;<br>&#125;<br>&#125;<br>&#125; <br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">factor</span>&#123;<br><span class="hljs-type">int</span> x,cnt;<br>&#125;fac[<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">Find_Prime</span>();<br><span class="hljs-type">int</span> n , num =<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1=1&quot;</span>);<br><span class="hljs-keyword">else</span> &#123;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d=&quot;</span>,n);<br><span class="hljs-type">int</span> sqr=(<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1.0</span>*n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;pNum&amp;&amp;prime[i]&lt;=sqr;i++)&#123;<br><span class="hljs-keyword">if</span>(n%prime[i]==<span class="hljs-number">0</span>)&#123;<br>fac[num].x=prime[i];<br>fac[num].cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(n%prime[i]==<span class="hljs-number">0</span>)&#123;<br>fac[num].cnt++;<br>n/=prime[i];<br>&#125;<br>num++;<br>&#125;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;<br><br>&#125;<br><span class="hljs-keyword">if</span>(n!=<span class="hljs-number">1</span>)&#123;<br>fac[num].x=n;<br>fac[num++].cnt=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,fac[i].x);<br><span class="hljs-keyword">if</span>(fac[i].cnt&gt;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;^%d&quot;</span>,fac[i].cnt);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>  <code>int sqr=(int)sqrt(1.0*n);</code>平方根的时候要这么写，记住就好。</li></ul><hr><h2 id="大整数运算"><a href="#大整数运算" class="headerlink" title="大整数运算"></a>大整数运算</h2><ul><li>  大整数使用数组进行记录即可。整数的高位存储在数组的高位，整数的低位存储在数组的低位。但是在读入的时候需要进行反转。</li></ul><p><strong>代码：（A+B）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bignum</span>&#123;<br><span class="hljs-type">int</span> nums[<span class="hljs-number">1000</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-built_in">bignum</span>()&#123;<br><span class="hljs-built_in">memset</span>(nums,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(nums));<br>len=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function">bignum <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span>&#123;<br>bignum a;<br>a.len=<span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.len;i++)&#123;<br>a.nums[i]=str[a.len-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function">bignum <span class="hljs-title">add</span><span class="hljs-params">(bignum a,bignum b)</span></span>&#123;<br>bignum c;<br><span class="hljs-type">int</span> carry=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.len||i&lt;b.len;i++)&#123;<br><span class="hljs-type">int</span> temp=a.nums[i]+b.nums[i]+carry;<br>c.nums[c.len++]=temp%<span class="hljs-number">10</span>;<br>carry=temp/<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(carry!=<span class="hljs-number">0</span>)&#123;<br>c.nums[c.len++]=carry;<br><br>&#125;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(bignum a)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a.nums[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span> str1[<span class="hljs-number">1000</span>],str2[<span class="hljs-number">1000</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>,str1,str2);<br>bignum a=<span class="hljs-built_in">change</span>(str1);<br>bignum b=<span class="hljs-built_in">change</span>(str2);<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">add</span>(a,b));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据预处理——数学建模（三）</title>
    <link href="/2023/08/17/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2023/08/17/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><h2 id="数据归一化处理"><a href="#数据归一化处理" class="headerlink" title="数据归一化处理"></a>数据归一化处理</h2><p>数据归一化是为了使得不同量纲通过归一化调整到同一量纲，寻求最优解的过程会变得平缓，可以更快速的收敛到最优解。</p><h3 id="归一化方法"><a href="#归一化方法" class="headerlink" title="归一化方法"></a>归一化方法</h3><p>1、<em>Min-max normalization</em> (Rescaling)：<br>$$<br>x’=\frac{x-min(x)}{max(x)-min(x)}<br>$$<br>归一化后的数据范围为 [0, 1]，其中 min(x)、max(x)分别求样本数据的最小值和最大值。</p><p>2、Mean normalization：<br>$$<br>x’=\frac{x-mean(x)}{max(x)-min(x)}<br>$$<br>归一化后的数据范围为 [-1, 1]，其中 mean(x)为样本数据的平均值。</p><p>3、Z-score normalization (Standardization)：<br>$$<br>x’=\frac{x-\mu}{\sigma}<br>$$<br>归一化后的数据范围为实数集，其中 μ、σ 分别为样本数据的均值和标准差。</p><ol><li><p>非线性归一化：</p><ul><li>  对数归一化：</li></ul><p> $$<br>x’=\frac{\lg x}{\lg max(x)}<br> $$</p><ul><li>  反正切函数归一化：</li></ul><p> $$<br> x’=\arctan(x)*\frac{2}{\pi}<br> $$</p><p> 归一化后的数据范围为 [-1, 1]。</p><ul><li>  小数定标标准化:</li></ul><p> $$<br> x’=\frac{x}{10^j}<br> $$</p><p> 归一化后的数据范围为 [-1, 1]，j为使max(|x′|)&lt;1的最小整数。</p></li></ol><h3 id="归一化和标准化总结"><a href="#归一化和标准化总结" class="headerlink" title="归一化和标准化总结"></a>归一化和标准化总结</h3><ul><li><p>  Min-max归一化和mean归一化适合在<strong>最大最小值明确不变</strong>的情况下使用。如果有过大或过小的异常值存在，min-max归一化和mean归一化的效果也不会很好。</p></li><li><p>  Z-score归一化也可称为标准化，经过处理的数据呈均值为0，标准差为1的分布。在数据存在异常值、最大最小值不固定的情况下，可以使用标准化。</p></li><li><p>  standardization其实就是z-score normalization，所以标准化就是归一化的一种。</p></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://paddlepedia.readthedocs.io/en/latest/tutorials/deep_learning/normalization/basic_normalization.html">https://paddlepedia.readthedocs.io/en/latest/tutorials/deep_learning/normalization/basic_normalization.html</a></p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>数据预处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>相关性分析方法——数学建模（二）</title>
    <link href="/2023/08/17/%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/08/17/%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="相关性分析"><a href="#相关性分析" class="headerlink" title="相关性分析"></a>相关性分析</h1><p>相关分析是统计学和数据分析领域中常用的方法，用于确定两个或多个变量之间的关系以及它们之间的相互影响程度。以下是一些常见的相关分析方法：</p><ol><li> <strong>皮尔逊相关系数：</strong> 皮尔逊相关系数衡量了两个连续变量之间的线性关系强度和方向。它的取值范围在 -1 到 1 之间，其中 -1 表示完全负相关，1 表示完全正相关，0 表示无相关性。</li><li> <strong>斯皮尔曼等级相关系数：</strong> 斯皮尔曼相关系数是一种用于衡量两个变量之间的单调关系的方法，而不仅仅是线性关系。它基于变量的等级而不是具体的数值，因此对于非线性关系也适用。</li><li> <strong>判定系数（R²）：</strong> 判定系数是用于衡量一个回归模型对观测数据的拟合程度。它的取值范围在0到1之间，越接近1表示模型拟合得越好。</li><li> <strong>卡方检验：</strong> 卡方检验主要用于分析分类变量之间的关系，特别是在两个或多个分类变量之间是否存在统计显著的关联。</li><li> <strong>ANOVA（方差分析）：</strong> 方差分析用于比较多个组之间的均值差异是否显著，适用于一个因变量和一个或多个分类变量的情况。</li><li> <strong>回归分析：</strong> 回归分析用于建立一个或多个自变量与因变量之间的关系模型，可以帮助预测因变量的值。</li><li> <strong>因子分析：</strong> 因子分析用于确定隐藏在观测数据背后的潜在因子，从而帮助简化数据集并揭示变量之间的模式。</li><li> <strong>主成分分析：</strong> 主成分分析旨在将高维数据降维到较低维度，同时保留尽可能多的原始数据变异性。</li></ol><h2 id="皮尔逊相关系数"><a href="#皮尔逊相关系数" class="headerlink" title="皮尔逊相关系数"></a>皮尔逊相关系数</h2><p>Pearson相关系数公式如下：</p><p><img src="/../images/95c7b4484dc46f28390c4de96c83b915_1440w.webp" alt="img"></p><p>协方差是一个反映两个<strong>随机变量</strong>相关程度的指标：<br><img src="https://picx.zhimg.com/80/0dfac74fd0cc7e4670fc04e15a5d79e2_1440w.webp?source=1940ef5c" alt="img"></p><p>pearson是一个介于-1和1之间的值，当两个变量的线性关系增强时，相关系数趋于1或-1；当一个变量增大，另一个变量也增大时，表明它们之间是正相关的，相关系数大于0；如果一个变量增大，另一个变量却减小，表明它们之间是负相关的，相关系数小于0；如果相关系数等于0，表明它们之间不存在线性相关关系。</p><p>pearson系数通常同于两个连续性变量之间的相关性。</p><h2 id="斯皮尔曼等级相关系数"><a href="#斯皮尔曼等级相关系数" class="headerlink" title="斯皮尔曼等级相关系数"></a>斯皮尔曼等级相关系数</h2><p>若两变量中包含等级变量，或变量不符合正态分布，或变量分布类型未知时，可以采用另一种相关性分析方法——Spearman等级相关性分析。</p><p><strong>适用条件</strong></p><ul><li>  变量包含等级变量、或变量不服从正态分布或分布类型未知。</li><li>  两变量之间存在单调关系。</li></ul><p><strong>统计量计算</strong></p><p>计算Spearman相关系数$r_{s}$的过程为:</p><ul><li>  先将变量<em>X</em>、<em>Y</em>分别从小到大排序编秩，用秩次<em>RX</em>和<em>RY</em>表示。</li></ul><p><img src="/../images/image-20230824103217446.png" alt="image-20230824103217446"></p><ul><li>  与Pearson相关系数的计算公式对比， Spearman相关系数的计算公式只是将Pearson相关系数公式中的<em>X</em>、<em>Y</em>替换为了<em>R**X</em>、<em>R**Y</em>.</li></ul><p><strong>假设检验</strong></p><p>样本含量<em>n</em>的大小有两种方法,查表法和t检验。</p><p><strong>参考文献：</strong></p><p><a href="https://mengte.online/archives/1879">https://mengte.online/archives/1879</a></p><h2 id="决定系数（R²）"><a href="#决定系数（R²）" class="headerlink" title="决定系数（R²）"></a>决定系数（R²）</h2><p>对于简单线性回归而言，决定系数为样本相关系数的平方。当加入其他回归自变量后，决定系数相应地变为多重相关系数的平方。</p><p><img src="/../images/image-20230824104619549.png" alt="image-20230824104619549"></p><h2 id="卡方检验"><a href="#卡方检验" class="headerlink" title="卡方检验"></a>卡方检验</h2><p><strong>什么是独立性卡方检验？</strong></p><p>独立性卡方检验是一种统计学上的假设检验，用于确定两个分类型或名义型变量是否可能相关。</p><p><strong>何时可以使用该检验？</strong></p><p>当您有两个分类型变量的值计数时，您可以使用独立性卡方检验。</p><p><strong>如果有一个频数计数表格，是否可以使用该检验？</strong></p><p>是的。如果您只有一个表格，其中的值显示频数计数，您可以使用独立性卡方检验。</p><p><strong>参考文献：</strong></p><p><a href="https://www.jmp.com/zh_cn/statistics-knowledge-portal/chi-square-test/chi-square-test-of-independence.html">https://www.jmp.com/zh_cn/statistics-knowledge-portal/chi-square-test/chi-square-test-of-independence.html</a></p><h2 id="ANOVA（方差分析）"><a href="#ANOVA（方差分析）" class="headerlink" title="ANOVA（方差分析）"></a>ANOVA（方差分析）</h2><h3 id="单因素方差分析（one-way-ANOVA"><a href="#单因素方差分析（one-way-ANOVA" class="headerlink" title="单因素方差分析（one-way ANOVA)"></a>单因素方差分析（one-way ANOVA)</h3>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>相关性分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>层次分析法——数学建模（一）</title>
    <link href="/2023/08/13/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/08/13/%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95%E2%80%94%E2%80%94%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h1><p><img src="/../images/fb4a24c19b1bb68aab3ccea101551815.png" alt="img"></p><h2 id="AHP层次分析法过程"><a href="#AHP层次分析法过程" class="headerlink" title="AHP层次分析法过程"></a>AHP层次分析法过程</h2><p>层次分析法就是将一个决策事件分解为<em>目标层</em>（例如选择旅游地），<em>准则层</em>（影响决策的因素，例如景色、交通、费用等）以及<em>方案层</em>（指的是方案，例如去广州、桂林等地旅游）。</p><p><img src="/../images/30dd8e4cdafed2d56d337794fa610dcb.png" alt="img"></p><p><strong>建立步骤：</strong></p><ol><li> 层次结构模型的构建。</li><li> 构造判断矩阵</li><li> 层次单排序及其一致性检验</li><li> <em>层次总排序</em>及其一致性检验</li></ol><p><strong>PS:</strong></p><p>一致性检验的含义用于确定构建的判断矩阵是否存在逻辑问题。</p><h3 id="1-层次结构模型的构建。"><a href="#1-层次结构模型的构建。" class="headerlink" title="1.层次结构模型的构建。"></a>1.层次结构模型的构建。</h3><p>确认整个决策事件的<em>目标层、准则层、方案层</em></p><p><img src="/../images/6e02b047d20c941c29e57c4a356f7571.png" alt="img"></p><p>目标层：最优旅游地选择</p><p>准则层：景色、费用、居住、饮食、旅途</p><p>方案层：西安、云南、西藏、青海</p><p>如果有多层：</p><p><img src="/../images/d476b972c13221d3e1223b1fd5d6782b.png" alt="img"></p><h3 id="2-构造判断矩阵"><a href="#2-构造判断矩阵" class="headerlink" title="2.构造判断矩阵"></a>2.构造判断矩阵</h3><p>通过各要素之间相互两两比较，并确定各准则层对目标层的权重。</p><p><img src="/../images/ea5d74f7b48afd3f446c78866c212d09.png" alt="img"></p><p>建立一个矩阵：</p><p><img src="/../images/25047e173e25a3d231b007b305247000.png" alt="img"></p><p>A中元素满足：</p><img src="../images/f92cd151513ab425201d920e35c56b98.png" alt="img" style="zoom: 50%;" /><h3 id="3-层次单排序与一致性检验"><a href="#3-层次单排序与一致性检验" class="headerlink" title="3.层次单排序与一致性检验"></a>3.层次单排序与一致性检验</h3><ul><li>  <strong>step1：层次单排序</strong></li></ul><p>指针对上一层某元素将本层中所有元素两两评比，并开展层次排序， 进行重要顺序的排列。</p><p>具体计算可依据判断矩阵 A 进行，计算中确保其能够符合 <strong>AW=𝜆𝑚𝑎𝑥𝑊</strong>的特征根和特征向量条件。在此，A 的最大特征根为<strong>λmax</strong>，对应λmax的正规化的特征向量为 <strong>W</strong>，𝑤𝑖为 W 的分量，其指的是权值，与其相应元素单排序对应。 利用判断矩阵计算各因素𝑎𝑖𝑗对目标层的权重（权系数）。</p><p><img src="/../images/f8b7627588f5b4c005b46c91ddcc5762.png" alt="img"></p><ul><li>  step2：求解最大特征根与CI值</li></ul><p><img src="/../images/8f9edf32bb6445d16b6c8009929d4868.png" alt="img"></p><p>C.I.=0 表示判断矩阵完全一致，C.I.越大，判断矩阵的不一致性程度越严重。</p><ul><li>  step3：根据CI、RI值求解CR值，判断其一致性是否通过</li></ul><p> 模拟 1000 次得到的随机一致性指标 R.I.取值表：</p><p><img src="/../images/ea5f4db7cb5744c1fc697ee8ca95c4f2.png" alt="img"></p><p>当 C.R.&lt;0.1 时，表明判断矩阵 A 的一致性程度被认为在容许的范围内，此时可 用 A 的特征向量开展权向量计算；若 C.R.≥0.1, 则应考虑对判断矩阵 A 进行修正。</p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>层次分析法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>秒杀模拟题——PAT备考进行时（一）</title>
    <link href="/2023/08/11/%E7%A7%92%E6%9D%80%E6%A8%A1%E6%8B%9F%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/08/11/%E7%A7%92%E6%9D%80%E6%A8%A1%E6%8B%9F%E9%A2%98%E2%80%94%E2%80%94PAT%E5%A4%87%E8%80%83%E8%BF%9B%E8%A1%8C%E6%97%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="模拟题不简单"><a href="#模拟题不简单" class="headerlink" title="模拟题不简单"></a>模拟题不简单</h1><h2 id="1042-Shuffling-Machine"><a href="#1042-Shuffling-Machine" class="headerlink" title="1042 Shuffling Machine"></a><strong>1042 Shuffling Machine</strong></h2><p><strong>题目：</strong></p><blockquote><p>  Shuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid “inside jobs” where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ <strong>automatic shuffling machines</strong>. Your task is to simulate a shuffling machine.</p><p>  The machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:</p>  <figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">S1</span></span>, S2, ..., S13, <br><span class="hljs-function"><span class="hljs-title">H1</span></span>, H2, ..., H13, <br><span class="hljs-function"><span class="hljs-title">C1</span></span>, C2, ..., C13, <br><span class="hljs-function"><span class="hljs-title">D1</span></span>, D2, ..., D13, <br>J1, J2<br></code></pre></td></tr></table></figure><p>  where “S” stands for “Spade”, “H” for “Heart”, “C” for “Club”, “D” for “Diamond”, and “J” for “Joker”. A given order is a permutation of distinct integers in [1, 54]. If the number at the <em>i</em>-th position is <em>j</em>, it means to move the card from position <em>i</em> to position <em>j</em>. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>  Each input file contains one test case. For each case, the first line contains a positive integer <em>K</em> (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>  For each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs in">2<br>36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47<br></code></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs out">S7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><p>首先是英语的阅读，会造成一定的困扰，所以一开始读题目就可以去看给的例子，然后代入题目去理解，注意所有细节，包括但是不限于数据格式，大小。</p><p>这题的难度其实不大，就是一个简单的模拟题，但是，找准next和end数组非常关键。要注意花色和编号的对应关系，，并且注意格式输出，包括空格。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> size=<span class="hljs-number">54</span>;<br><span class="hljs-type">char</span> flower[<span class="hljs-number">5</span>]=&#123;<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;H&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;J&#x27;</span>&#125;;<br><span class="hljs-type">int</span> start[size+<span class="hljs-number">1</span>],next[size+<span class="hljs-number">1</span>],end[size+<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=size;i++)&#123;<br>        start[i]=i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=size;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;next[i]);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=size;i++)&#123;<br>        end[next[i]]=start[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=size;i++)&#123;<br>            start[i]=end[i];<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=size;i++)&#123;<br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        start[i]--;<span class="hljs-comment">//看这里</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%d&quot;</span>,flower[start[i]/<span class="hljs-number">13</span>],start[i]%<span class="hljs-number">13</span>+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中主要注意标记处，为什么要start[i]–;因为举个例子，标号为13的对应是S13,但是如果进行start[i]/13,就会得到1。不过也可以进行下面的操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%d&quot;</span>,flower[(start[i]<span class="hljs-number">-1</span>)/<span class="hljs-number">13</span>],(start[i]<span class="hljs-number">-1</span>)%<span class="hljs-number">13</span>+<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="1046-Shortest-Distance"><a href="#1046-Shortest-Distance" class="headerlink" title="1046 Shortest Distance"></a><strong>1046 Shortest Distance</strong></h2><p><strong>题目：</strong></p><blockquote><p>The task is really simple: given <em>N</em> exits on a highway which forms a simple cycle, you are supposed to tell the shortest distance between any pair of exits.</p><h3 id="Input-Specification-1"><a href="#Input-Specification-1" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains an integer <em>N</em> (in [3,105]), followed by <em>N</em> integer distances <em>D</em>1 <em>D</em>2 ⋯ <em>D**N</em>, where <em>D**i</em> is the distance between the <em>i</em>-th and the (<em>i</em>+1)-st exits, and <em>D**N</em> is between the <em>N</em>-th and the 1st exits. All the numbers in a line are separated by a space. The second line gives a positive integer <em>M</em> (≤104), with <em>M</em> lines follow, each contains a pair of exit numbers, provided that the exits are numbered from 1 to <em>N</em>. It is guaranteed that the total round trip distance is no more than 107.</p><h3 id="Output-Specification-1"><a href="#Output-Specification-1" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print your results in <em>M</em> lines, each contains the shortest distance between the corresponding given pair of exits.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs in">&gt;5 1 2 4 14 9<br>&gt;3<br>&gt;1 3<br>&gt;2 5<br>&gt;4 1<br></code></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs out">&gt;3<br>&gt;10<br>&gt;7<br></code></pre></td></tr></table></figure></blockquote><p><strong>分析：</strong></p><p>一个圆中要找到两个点之间最近的路无非是两个路径看看谁的长，但是本题中数据较大，所以需要对数据进行预处理，否则拿不了最后一个测试点。</p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">100005</span>;<br><span class="hljs-type">int</span> dis[MAXN],A[MAXN];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>,query,n,left,right;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;A[i]);<br>        sum+=A[i];<br>        dis[i]=sum;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;query);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;query;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;left,&amp;right);<br>        <span class="hljs-keyword">if</span>(left&gt;right)<span class="hljs-built_in">swap</span>(left,right);<br>        <span class="hljs-type">int</span> temp=dis[right<span class="hljs-number">-1</span>]-dis[left<span class="hljs-number">-1</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">min</span>(temp,sum-temp));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="1001-A-B-Format"><a href="#1001-A-B-Format" class="headerlink" title="1001 A+B Format"></a>1001 <strong>A+B Format</strong></h2>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>PAT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PAT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学模型与常用算法汇总</title>
    <link href="/2023/07/03/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <url>/2023/07/03/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>数学建模常用算法汇总</p><h2 id="常见模型"><a href="#常见模型" class="headerlink" title="常见模型"></a>常见模型</h2><p><img src="https://img-blog.csdnimg.cn/ff05f94f8a7d4f3790dac84aa43b2b3a.png" alt="ff05f94f8a7d4f3790dac84aa43b2b3a.png"></p><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><p><img src="https://img-blog.csdnimg.cn/20200831100037916.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200831100112161.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模2023--知耻而后勇</title>
    <link href="/2023/06/29/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A12023-%E7%9F%A5%E8%80%BB%E8%80%8C%E5%90%8E%E5%8B%87/"/>
    <url>/2023/06/29/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A12023-%E7%9F%A5%E8%80%BB%E8%80%8C%E5%90%8E%E5%8B%87/</url>
    
    <content type="html"><![CDATA[<h1 id="2023数学建模国赛预备"><a href="#2023数学建模国赛预备" class="headerlink" title="2023数学建模国赛预备"></a>2023数学建模国赛预备</h1><h2 id="总结失败"><a href="#总结失败" class="headerlink" title="总结失败"></a>总结失败</h2><p>从上一年的比赛中，看出了非常多的问题，首先是队友配合不默契，加上前期的准备不充分，造成了从开始比赛到结束的整一个过程中都非常的混乱。最后只有一个小奖。下面就是我对上一年的失败总结。</p><p>关于团队，如果一个团队没有一个好的领导能力的人进行统筹兼顾，那将会造成一个非常严重的问题，那就是做事没有节奏和秩序。关于队员的分工，按照论文手、建模手、编程手来分会造成严重的错误，那就是各自不知道对方在说什么，同时也会造成论文表达的错误，在之前一次的数学建模比赛中我们就出现了这样类似的严重的错误。所以本次比赛，我想的是最好采用各分其职，但是互相交互。也就是论文手也需要准备算法的了解，但是可以不必深入，只是需要知道这个算法是干什么的。当然，这里我们不详细讨论分工，下文会详细说明。</p><p>还有就是在比赛的时候的时间分配以及题目的选择，关于题目，最好选自己最熟悉的或者有思路的题目，一旦开始解题就不要轻易改变，绝对一点，别改题目，会出大事。这就需要前期的大量练习来得知自己最熟练哪些题目。</p><h2 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h2><p>既然是一个团队比赛，那就必须要进行一个合理的分工，前面我讲到不能够分而治之，而是要互相交互。同样的，总的来说来说还是要进行明确的分工，也就是建模手、编程手、论文手。接下去我就讲讲我认为每个职位对应的职责。</p><h3 id="论文手"><a href="#论文手" class="headerlink" title="论文手"></a>论文手</h3><p>虽然我没有当过论文手，但是我足以知道一个好的论文手需要具备哪些能力。论文其实大家都没怎么写过，当然佬除外。先说说数学建模中一篇好论文意味着什么？</p><p>好吧，意味着一切。因为评分就是看论文（手动狗头）。</p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
      <tag>大学比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>还分不清Session、Cookie、Token？进来看</title>
    <link href="/2023/06/27/%E8%BF%98%E5%88%86%E4%B8%8D%E6%B8%85Session%E3%80%81Cookie%E3%80%81Token%EF%BC%9F%E8%BF%9B%E6%9D%A5%E7%9C%8B/"/>
    <url>/2023/06/27/%E8%BF%98%E5%88%86%E4%B8%8D%E6%B8%85Session%E3%80%81Cookie%E3%80%81Token%EF%BC%9F%E8%BF%9B%E6%9D%A5%E7%9C%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaIO机制全解——Java基础篇（七）</title>
    <link href="/2023/06/18/JavaIO%E6%9C%BA%E5%88%B6%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <url>/2023/06/18/JavaIO%E6%9C%BA%E5%88%B6%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>IO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java接口和内部类全解——Java基础篇（六）</title>
    <link href="/2023/06/18/Java%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2023/06/18/Java%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ul><li>接口是由全局常量和公共抽象方法组成，接口中集合了抽象方法，在java8之前，我们可以把接口理解为100%的抽象类，即接口中的方法都是抽象方法，Java设计接口的目的在于解决Java无法多继承，但是接口在实际的使用中常常是用来制定标准的。</li><li>一个接口也能够拥有方法和属性，但是在接口中声明的方法默认是抽象的。</li><li>接口不能被实例，但是可以被实现，实现类需要100%实现一个接口中所有的方法。</li><li>如果一个类实现了一个接口中要求的所有的方法，然而没有提供方法体而仅仅只有方法标识，那么这个类一定是一个抽象类。（必须记住：<strong>抽象方法只能存在于抽象类或者接口中，但抽象类中却能存在非抽象方法，即有方法体的方法。接口是百分之百的抽象类</strong>）</li><li>接口被用来实现抽象，而抽象类也被用来实现抽象，为什么一定要用接口呢？接口和抽象类之间又有什么区别呢？原因是抽象类内部可能包含非final的变量，但是在接口中存在的变量一定是final，public,static的。</li><li>一个类可以实现多个接口。</li><li>一个接口可以继承另一个接口，或者另一些接口，也就是可以多继承。</li><li>接口也可以用来实现解耦。</li></ul><h2 id="接口中的多态"><a href="#接口中的多态" class="headerlink" title="接口中的多态"></a>接口中的多态</h2><p>举一个小例子：</p><p>​    现在我们要对空调进行接口统一的管理，有一个“节能”的功能，或者说”节能”就是一个接口，这个接口中有一个方法叫做”变频方法“，任何节能空调，都需要实现这个接口，并且要实现”变频方法“这个方法。当某个空调实现了这样一个”节能“接口后，该空调就具有节能的功能。这时候，我们不需要用空调类引用指向空调对象，而是可以用“节能接口”引用的遥控器去指向空调对象。也就是多态，通过向上转型，我们去通过操作遥控器的“变频方法”去命令空调调用“变频”方法。</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>内部类顾名思义就是在类里的类。</p><h2 id="为什么使用内部类"><a href="#为什么使用内部类" class="headerlink" title="为什么使用内部类"></a>为什么使用内部类</h2><ul><li>内部类方法可以访问该类定义所在的作用域的数据，包括私有的数据。</li><li>内部类可以对同一个包中的其他类隐藏起来。</li><li>当想要定义一个回调函数且不想编写大量代码的时候，使用匿名内部类比较便捷。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>接口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java继承全解——Java基础篇（五）</title>
    <link href="/2023/06/18/Java%E7%BB%A7%E6%89%BF%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2023/06/18/Java%E7%BB%A7%E6%89%BF%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承是面向对象编程的三大特性之一。继承主要就是子类从父类继承特性与行为使得子类对象拥有父类的实例方法和属性。</p><h2 id="继承的作用"><a href="#继承的作用" class="headerlink" title="继承的作用"></a>继承的作用</h2><p>通过继承可以快速创建新的类，实现代码的重用，提高程序的可维护性，节省大量创建新类的时间，提高开发效率和开发质量。</p><h2 id="继承的注意事项"><a href="#继承的注意事项" class="headerlink" title="继承的注意事项"></a>继承的注意事项</h2><ul><li>子类不能选择性继承父类，子类会继承父类的所有方法和属性。</li><li>Java没有C++的多继承，但是Java中可以进行多级继承，并且Java提供了接口用于克服单继承的缺点，一个类的可以实现多个接口。</li><li>构造方法不会被继承，但是子类可以调用父类的构造方法。</li><li>final类或者方法不可以被继承或者重写。将类或者方法名定义为final的目的是确保他们不会在子类中改变语义。例如Calendar类中的getTime和setTime都声明为final。这表明Calendar类不允许子类处理和Date类之间的转换。</li><li>将一个子类的引用赋给一个父类变量，编译器是允许的。但是把一个父类的引用赋给一个子类变量，必须进行类型转换。</li><li>在进行类型转换前，需要进行instanceof检验看看能否成功转换，不然会产生一个ClassCastException异常。一般情况下，应该少用类型转换和instanceof运算符。</li><li>子类不能访问父类的私有域或者私有方法。</li><li>父类受保护的域或者方法可以直接被子类调用，详见Object类中的clone方法。</li></ul><h2 id="Object类：所有类的超类"><a href="#Object类：所有类的超类" class="headerlink" title="Object类：所有类的超类"></a>Object类：所有类的超类</h2><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p> 简单来说，equals方法是用来判断两个对象是否相等。Object类提供的判断依据是两个对象的引用地址是否相同。所以一般引用类型的比较都是用equals()方法。</p><p>equals方法具有以下几个特点(在自行编写的类中如果要覆盖Object类的equals方法，要求都符合以下特征)：</p><p>1、自反性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x.equals(x); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>2、对称性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x.equals(y) == y.equals(x); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>3、传递性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (x.equals(y) &amp;&amp; y.equals(z))<br>    x.equals(z); <span class="hljs-comment">// true;</span><br></code></pre></td></tr></table></figure><p>4、一致性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x.equals(y) == x.equals(y); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>5、对于任意非空引用x，x.equals(null)应该返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">x.equals(<span class="hljs-literal">null</span>); <span class="hljs-comment">// false;</span><br></code></pre></td></tr></table></figure><p>注意：TimeStamp类继承java.utils.Date，但是后者的equals方法使用一个instanceof测试，这样使得无法覆盖equals使之同时做到对称性。也就是不能用TimeStamp类中的equals方法去和Date比较。</p><p><strong>如何编写equals</strong>：</p><p>1、检查this和otherObject是否引用同一个对象。</p><p>2、检查otherObject是否为null，如果为null返回false。</p><p>3、比较this和otherObject是否属于同一个类。如果equals的语义在每个子类中有所改动则用getClass检测，如果所有的子类都拥有统一的语义就用instanceof检测。</p><p>4、将otherObject转换为相应的类变量。</p><p>5、对所有需要比较的域进行比较。使用==比较基本类型域，使用equals比较对象域。如果匹配就返回true，否则返回false。</p><p><strong>提示</strong>：对于数组类型的域，可以利用静态的Arrays.equals方法进行检测。</p><p><strong>例子</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object otherObject)</span> &#123;<br>      <span class="hljs-comment">//1、检查this和otherObject是否引用同一个对象。</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == otherObject) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      <span class="hljs-comment">//2、检查otherObject是否为null，如果为null返回false。</span><br>      <span class="hljs-keyword">if</span> (otherObject == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      <span class="hljs-comment">//3、比较this和otherObject是否属于同一个类。</span><br>     <span class="hljs-keyword">if</span> (getClass() != otherObject.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//每个子类中有所改动</span><br>     <span class="hljs-keyword">if</span> (!(otherObject <span class="hljs-keyword">instanceof</span> EqualExample)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//所有的子类都拥有统一的语义</span><br>      <span class="hljs-comment">//4、将otherObject转换为相应的类变量。</span><br>      <span class="hljs-type">EqualExample</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (EqualExample) otherObject;<br>      <span class="hljs-comment">//5、对所有需要比较的域进行比较。</span><br><span class="hljs-keyword">return</span> x=other.x &amp;&amp; Objects.equals(y,other.y);<br>  &#125;<br><br></code></pre></td></tr></table></figure><h3 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h3><p>hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。</p><p>在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。</p><h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><p>默认输出ClassName@散列码的无符号十六进制表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="clone方法"><a href="#clone方法" class="headerlink" title="clone方法"></a>clone方法</h3><p>clone() 是 Object 的 protected 方法，如果要调用该类实例的clone()方法，必须要去显示的重写。</p><p>应该注意的是，clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 CloneNotSupportedException。</p><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a><strong>浅拷贝</strong></h4><p>拷贝对象和原始对象的引用类型引用同一个对象。</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a><strong>深拷贝</strong></h4><p>拷贝对象和原始对象的引用类型引用不同对象。需要将对象里所有的元素全部克隆到新的空间。</p><h4 id="clone-的替代方案"><a href="#clone-的替代方案" class="headerlink" title="clone() 的替代方案"></a><strong>clone() 的替代方案</strong></h4><p>使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。</p><h2 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h2><p>将int，long，float，double等基础类型转换成类的手段叫做<strong>对象包装器</strong>。对象包装器是不可变的，对象包装器类是final。</p><p>有一个对象数组列表ArrayList&lt;&gt;，因为尖括号中不能有基础类型，所以这里就用到了Integer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-comment">//Java SE 5.0改进了添加元素的操作，下面的调用</span><br>list.add(<span class="hljs-number">3</span>);<br><span class="hljs-comment">//将自动变换为</span><br>list.add(Integer.valueOf(<span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><p>这种变换叫<strong>自动装箱</strong>，自动装箱那就有自动拆箱。</p><p>注意：自动装箱和自动拆箱是编译器认可的，而不是JVM。</p><h2 id="参数数量可变"><a href="#参数数量可变" class="headerlink" title="参数数量可变"></a>参数数量可变</h2><ul><li>一个方法只能有一个可变的参数,并且这个参数必须是该方法的最后一个参数</li><li>如果重载了可变参数的方法, 优先调用匹配定长参数的方法,不定参数的那个重载方法是最后被选中的。</li><li>对于可变参数的方法,既可以接受多个形式参数类型的参数,也可以接受形式参数类型的数组; 但是方法参数为数组只能接受数组.</li><li>方法调用时,同时满足两个方法,编译器将会产生错误</li><li>对于继承,子类将父类方法的参数列表数组形式改为可变参数数量属于重写,但是指向子类的父类调用该方法是形参列表由父类决定.</li><li>如果向可变长参数的方法传入空参的话,将会new一个对应类型的数组,且长度为0.</li></ul><h2 id="枚举类-需要补充进阶枚举"><a href="#枚举类-需要补充进阶枚举" class="headerlink" title="枚举类(需要补充进阶枚举)"></a>枚举类(需要补充进阶枚举)</h2><p>枚举类主要是为了进行信息分类，枚举是一种特殊类。枚举是有固定实例个数的类型，我们可以把枚举理解成有固定个数实例的多例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//枚举类型，使用关键字enum</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Day</span> &#123;<br>    MONDAY, TUESDAY, WEDNESDAY,<br>    THURSDAY, FRIDAY, SATURDAY, SUNDAY<br>&#125;<br><span class="hljs-keyword">enum</span> 枚举名 &#123;<br>    第一行都是罗列枚举实例,这些枚举实例直接写大写名字即可。<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>继承</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java异常处理全解——Java基础篇（四）</title>
    <link href="/2023/06/18/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2023/06/18/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>Java异常是Java提供的一种识别及响应错误的一致性机制，保证程序的健壮性。</p><h2 id="异常是什么？"><a href="#异常是什么？" class="headerlink" title="异常是什么？"></a>异常是什么？</h2><p>异常在Java中是以类的形式存在的，每一个异常类都可以创建异常对象，并且也可以自定义异常类。</p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p><img src="/../images/20210503143543377.png" alt="在这里插入图片描述"></p><p>从异常的结构图中可以看出，所有异常都是由Throwable继承而来，但是在下一层分为了<strong>Error</strong>和<strong>Exception</strong>。</p><h4 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h4><p>Throwable 是 Java 语言中所有错误与异常的超类。</p><p>Throwable 包含两个子类：Error（错误）和 Exception（异常），它们通常用于指示发生了异常情况。</p><p>Throwable 包含了其线程创建时线程执行堆栈的快照，它提供了 printStackTrace() 等接口用于获取堆栈跟踪数据等信息。</p><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>Error类层次结构范畴描述的是Java在运行时系统内部错误和资源消耗，遇到Error，除了通告用户，并且尽力使程序安全地终止外，在没有办法，但是这种情况出现的概率很低。</p><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><p>我们作为程序员就关注Exception层次结构就可以了，这个层次分为两个分支：<strong>RuntimeException</strong>和<strong>其他异常</strong>。这两个分支对应的异常种类就是<strong>运行时异常</strong>和<strong>编译时异常</strong>。</p><ul><li><p><strong>运行时异常</strong></p><p>  如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。如果出现这类异常，那一定是程序员的问题。</p></li><li><p><strong>编译时异常</strong></p><p>  从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p></li></ul><p>Java语言规范将派生于Error类或RuntimeException类的所有异常称为<strong>未检查异常</strong>，所有其他的异常成为<strong>已检查异常</strong>。</p><h4 id="已检查异常"><a href="#已检查异常" class="headerlink" title="已检查异常"></a>已检查异常</h4><p>一个方法必须声明所有可能抛出的已检查异常，而未检查异常要么不可控（Error），要么就应该避免发生（RuntimeException），如果方法没有声明所有可能发生的已检验异常，编译器就会给出一个错误信息，在IDE中就是直接报错提醒。</p><h2 id="异常基础"><a href="#异常基础" class="headerlink" title="异常基础"></a>异常基础</h2><ul><li><strong>try</strong> – 用于监听。将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常时，异常就被抛出。</li><li><strong>catch</strong> – 用于捕获异常。catch用来捕获try语句块中发生的异常。</li><li><strong>finally</strong> – finally语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络连接和磁盘文件)。只有finally块，执行完成之后，才会回来执行try或者catch块中的return或者throw语句，如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。</li><li><strong>throw</strong> – 用于抛出异常。</li><li><strong>throws</strong> – 用在方法签名中，用于声明该方法可能抛出的异常。</li></ul><h3 id="异常的声明"><a href="#异常的声明" class="headerlink" title="异常的声明"></a>异常的声明</h3><p>异常的声明是当程序运行时，如果方法存在异常，但是在方法并没有对其进行捕获，那必须在方法头中显示声明该异常，以便告知方法调用者此方法有问题。具体的操作就是在方法头使用关键字throws，后面加上要声明的异常。若声明多个异常，则使用逗号分割。通常，应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, FileNotFoundException&#123;<br>    <span class="hljs-comment">//something statements</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Throws抛出异常的规则：</p><ul><li>如果是不可查异常（unchecked exception），即Error、RuntimeException或它们的子类，那么可以不使用throws关键字来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。</li><li>必须声明方法可抛出的任何可查异常（checked exception）。即如果一个方法可能出现受可查异常，要么用try-catch语句捕获，要么用throws子句声明将它抛出，否则会导致编译错误</li><li>仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。</li><li>调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。</li></ul><h3 id="异常的抛出"><a href="#异常的抛出" class="headerlink" title="异常的抛出"></a>异常的抛出</h3><p>大部分情况下都不需要手动抛出异常，因为Java的大部分方法要么已经处理异常，要么已声明异常。所以一般都是捕获异常或者再往上抛。有时我们会从 catch 中抛出一个异常，目的是为了改变异常的类型。多用于在多系统集成时，当某个子系统故障，异常类型可能有多种，可以用统一的异常类型向外暴露，不需暴露太多内部异常细节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span>(value == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>(<span class="hljs-string">&quot;参数不能为0&quot;</span>); <span class="hljs-comment">//抛出一个运行时异常</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">5.0</span> / value;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>习惯上，定义一个异常类应包含两个构造函数，一个无参构造函数和一个带有详细描述信息的构造函数（Throwable 的 toString 方法会打印这些详细信息，调试时很有用）, 比如上面用到的自定义MyException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">()</span>&#123; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-built_in">super</span>(msg);<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h3><p>异常捕获处理的方法通常有：</p><ul><li>try-catch</li><li>try-catch-finally</li><li>try-finally</li><li>try-with-resource</li></ul><h4 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h4><ul><li>在一个 try-catch 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理</li><li>同一个 catch 也可以捕获多种类型异常，用 | 隔开</li></ul><h4 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h4><p><img src="/../images/java-basic-exception-2.jpg" alt="img"></p><h4 id="try-finally"><a href="#try-finally" class="headerlink" title="try-finally"></a>try-finally</h4><p>try-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。</p><p>finally遇见如下情况不会执行</p><ul><li>在前面的代码中用了System.exit()退出程序。</li><li>finally语句块中发生了异常。</li><li>程序所在的线程死亡。</li><li>关闭CPU。</li></ul><h4 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h4><p>上面例子中，finally 中的 close 方法也可能抛出 IOException, 从而覆盖了原始异常。JAVA 7 提供了更优雅的方式来实现资源的自动释放，自动释放的资源需要是实现了 AutoCloseable 接口的类。</p><ul><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryWithResourceTest</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;c:/abc&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>))&#123;<br>        <span class="hljs-comment">// code</span><br>    &#125; <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>        <span class="hljs-comment">// handle exception</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>看下Scanner</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Scanner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;String&gt;, Closeable &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Closeable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AutoCloseable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br>&#125;<br></code></pre></td></tr></table></figure><p>try 代码块退出时，会自动调用 scanner.close 方法，和把 scanner.close 方法放在 finally 代码块中不同的是，若 scanner.close 抛出异常，则会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。</p><h2 id="常用的异常"><a href="#常用的异常" class="headerlink" title="常用的异常"></a>常用的异常</h2><ul><li><strong>RuntimeException</strong><ul><li>java.lang.ArrayIndexOutOfBoundsException 数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出。</li><li>java.lang.ArithmeticException 算术条件异常。譬如：整数除零等。</li><li>java.lang.NullPointerException 空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等</li><li>java.lang.ClassNotFoundException 找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常。</li><li>java.lang.NegativeArraySizeException 数组长度为负异常</li><li>java.lang.ArrayStoreException 数组中包含不兼容的值抛出的异常</li><li>java.lang.SecurityException 安全性异常</li><li>java.lang.IllegalArgumentException 非法参数异常</li></ul></li><li><strong>IOException</strong><ul><li>IOException：操作输入流和输出流时可能出现的异常。</li><li>EOFException 文件已结束异常</li><li>FileNotFoundException 文件未找到异常</li></ul></li><li><strong>其他</strong><ul><li>ClassCastException 类型转换异常类</li><li>ArrayStoreException 数组中包含不兼容的值抛出的异常</li><li>SQLException 操作数据库异常类</li><li>NoSuchFieldException 字段未找到异常</li><li>NoSuchMethodException 方法未找到抛出的异常</li><li>NumberFormatException 字符串转换为数字抛出的异常</li><li>StringIndexOutOfBoundsException 字符串索引超出范围抛出的异常</li><li>IllegalAccessException 不允许访问某类异常</li><li>InstantiationException 当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常</li></ul></li></ul><h2 id="异常注意事项"><a href="#异常注意事项" class="headerlink" title="异常注意事项"></a>异常注意事项</h2><h3 id="只针对不正常的情况才使用异常"><a href="#只针对不正常的情况才使用异常" class="headerlink" title="只针对不正常的情况才使用异常"></a>只针对不正常的情况才使用异常</h3><p>《阿里手册》中：【强制】Java 类库中定义的可以通过预检查方式规避的RuntimeException异常不应该通过catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException等等。</p><p>主要原因有三点：</p><ul><li>异常机制的设计初衷是用于不正常的情况，所以很少会会JVM实现试图对它们的性能进行优化。所以，创建、抛出和捕获异常的开销是很昂贵的。</li><li>把代码放在try-catch中返回阻止了JVM实现本来可能要执行的某些特定的优化。</li><li>对数组进行遍历的标准模式并不会导致冗余的检查，有些现代的JVM实现会将它们优化掉。</li></ul><h3 id="在-finally-块中清理资源或者使用-try-with-resource-语句"><a href="#在-finally-块中清理资源或者使用-try-with-resource-语句" class="headerlink" title="在 finally 块中清理资源或者使用 try-with-resource 语句"></a>在 finally 块中清理资源或者使用 try-with-resource 语句</h3><ul><li>方法一：使用 finally 代码块</li></ul><p>与前面几行 try 代码块不同，finally 代码块总是会被执行。不管 try 代码块成功执行之后还是你在 catch 代码块中处理完异常后都会执行。因此，你可以确保你清理了所有打开的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeResourceInFinally</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./tmp.txt&quot;</span>);<br>        inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-comment">// use the inputStream to read a file</span><br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        log.error(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                log.error(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>方法二：Java 7 的 try-with-resource 语法</li></ul><p>如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">automaticallyCloseResource</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./tmp.txt&quot;</span>);<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);) &#123;<br>        <span class="hljs-comment">// use the inputStream to read a file</span><br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        log.error(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        log.error(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尽量使用标准的异常"><a href="#尽量使用标准的异常" class="headerlink" title="尽量使用标准的异常"></a>尽量使用标准的异常</h3><p>Java标准异常中有几个是经常被使用的异常。如下表格：</p><table><thead><tr><th>异常</th><th>使用场合</th></tr></thead><tbody><tr><td>IllegalArgumentException</td><td>参数的值不合适</td></tr><tr><td>IllegalStateException</td><td>参数的状态不合适</td></tr><tr><td>NullPointerException</td><td>在null被禁止的情况下参数值为null</td></tr><tr><td>IndexOutOfBoundsException</td><td>下标越界</td></tr><tr><td>ConcurrentModificationException</td><td>在禁止并发修改的情况下，对象检测到并发修改</td></tr><tr><td>UnsupportedOperationException</td><td>对象不支持客户请求的方法</td></tr></tbody></table><h3 id="对异常进行文档说明"><a href="#对异常进行文档说明" class="headerlink" title="对异常进行文档说明"></a>对异常进行文档说明</h3><blockquote><p>当在方法上声明抛出异常时，也需要进行文档说明。目的是为了给调用者提供尽可能多的信息，从而可以更好地避免或处理异常。</p></blockquote><h3 id="优先捕获最具体的异常"><a href="#优先捕获最具体的异常" class="headerlink" title="优先捕获最具体的异常"></a>优先捕获最具体的异常</h3><p>但问题在于，只有匹配异常的第一个 catch 块会被执行。 因此，如果首先捕获 IllegalArgumentException ，则永远不会到达应该处理更具体的 NumberFormatException 的 catch 块，因为它是 IllegalArgumentException 的子类。</p><p>总是优先捕获最具体的异常类，并将不太具体的 catch 块添加到列表的末尾。</p><p>你可以在下面的代码片断中看到这样一个 try-catch 语句的例子。 第一个 catch 块处理所有 NumberFormatException 异常，第二个处理所有非 NumberFormatException 异常的IllegalArgumentException 异常。</p><h3 id="不要捕获-Throwable-类"><a href="#不要捕获-Throwable-类" class="headerlink" title="不要捕获 Throwable 类"></a>不要捕获 Throwable 类</h3><p>如果在 catch 子句中使用 Throwable ，它不仅会捕获所有异常，也将捕获所有的错误。JVM 抛出错误，指出不应该由应用程序处理的严重问题。 典型的例子是 OutOfMemoryError 或者 StackOverflowError 。两者都是由应用程序控制之外的情况引起的，无法处理。</p><h3 id="不要忽略异常"><a href="#不要忽略异常" class="headerlink" title="不要忽略异常"></a>不要忽略异常</h3><p>现实是经常会出现无法预料的异常，或者无法确定这里的代码未来是不是会改动(删除了阻止异常抛出的代码)，而此时由于异常被捕获，使得无法拿到足够的错误信息来定位问题。</p><p>合理的做法是至少要记录异常的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logAnException</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>        log.error(<span class="hljs-string">&quot;This should never happen: &quot;</span> + e); <span class="hljs-comment">// see this line</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不要记录并抛出异常"><a href="#不要记录并抛出异常" class="headerlink" title="不要记录并抛出异常"></a>不要记录并抛出异常</h3><p>仅仅当想要处理异常时才去捕获，否则只需要在方法签名中声明让调用者去处理。</p><h3 id="包装异常时不要抛弃原始的异常"><a href="#包装异常时不要抛弃原始的异常" class="headerlink" title="包装异常时不要抛弃原始的异常"></a>包装异常时不要抛弃原始的异常</h3><p>捕获标准异常并包装为自定义异常是一个很常见的做法。这样可以添加更为具体的异常信息并能够做针对的异常处理。 在你这样做时，请确保将原始异常设置为原因（注：参考下方代码 NumberFormatException e 中的原始异常 e ）。Exception 类提供了特殊的构造函数方法，它接受一个 Throwable 作为参数。否则，你将会丢失堆栈跟踪和原始异常的消息，这将会使分析导致异常的异常事件变得困难。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wrapException</span><span class="hljs-params">(String input)</span> <span class="hljs-keyword">throws</span> MyBusinessException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBusinessException</span>(<span class="hljs-string">&quot;A message that describes the error.&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不要使用异常控制程序的流程"><a href="#不要使用异常控制程序的流程" class="headerlink" title="不要使用异常控制程序的流程"></a>不要使用异常控制程序的流程</h3><p>不应该使用异常控制应用的执行流程，例如，本应该使用if语句进行条件判断的情况下，你却使用异常处理，这是非常不好的习惯，会严重影响应用的性能。</p><h3 id="不要在finally块中使用return。"><a href="#不要在finally块中使用return。" class="headerlink" title="不要在finally块中使用return。"></a>不要在finally块中使用return。</h3><p>try块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则在此直接返回，无情丢弃掉try块中的返回点。</p><p>如下是一个反例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">checkReturn</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// x等于1，此处不返回</span><br>        <span class="hljs-keyword">return</span> ++x;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 返回的结果是2</span><br>        <span class="hljs-keyword">return</span> ++x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>异常处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射全解——Java基础篇（三）</title>
    <link href="/2023/06/18/Java%E5%8F%8D%E5%B0%84%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2023/06/18/Java%E5%8F%8D%E5%B0%84%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射就是把java类中的各种成分映射成一个个的Java对象。在了解反射机制之前我们需要先明白Class类这个概念。</p><h2 id="反射优点和缺点"><a href="#反射优点和缺点" class="headerlink" title="反射优点和缺点"></a>反射优点和缺点</h2><p>优点：可以动态的创建和使用对象，使用灵活，反射机制是框架的灵魂。</p><p>缺点：使用反射基本上是解释执行，对执行速度有影响。</p><h2 id="反射调优"><a href="#反射调优" class="headerlink" title="反射调优"></a>反射调优</h2><p>反射调用优化-关闭访问检查</p><p>Method和Field、Constructor对象都有setAccessible()方法，通过设置访问安全检查的开关实现关闭访问检查，参数值为true是关闭访问检查。</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><ul><li>Class类是一个实实在在的类，存在于JDK的java.lang包中。</li><li>Class对象表示某个类加载在堆中的对象。</li><li>Class类对象不是new出来的，而是系统创建出来的。</li><li>对于某个类的Class类对象，在内存中只有一份，因为类加载只发生一次。</li><li>每个Java类实例都会记得自己是由哪一个Class实例生成。</li><li>通过Class对象可以完整的得到一个类的完整结构，也就是通过Class类对象去创建对象、Method、Constructor、Field类对象，通过一系列API来操作类。</li><li>类的字节码二进制数据是存放在方法区的，</li><li>Class类对象创建和new对象是一样的都是通过ClassLoader类加载。</li></ul><h3 id="获得Class对象"><a href="#获得Class对象" class="headerlink" title="获得Class对象"></a>获得Class对象</h3><ol><li><p><strong>前提</strong>：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获得，可能会抛出<code>ClassNotFoundException</code>。</p><p> <strong>实例</strong>：<code>Class cls=Class.forName(&quot;java.lang.Cat&quot;);</code></p><p> <strong>应用场景</strong>：多用于配置文件，读取类全路径，加载类。</p></li><li><p><strong>前提</strong>：若已知具体的类，通过类的class获得，该方式最为安全可靠，程序性能最高。</p><p> <strong>实例</strong>：<code>Class cls2=Cat.class;</code></p><p> <strong>应用场景</strong>：对用于参数传递，比如通过反射得到对应构造器对象。</p></li><li><p><strong>前提</strong>：已知某个类的实例，调用该类的getClass()方法获取Class对象。</p><p> <strong>实例</strong>：Class cls3=对象。getClass();</p><p> <strong>应用场景</strong>：通过创建好的对象，获取Class对象。</p></li><li><p><strong>其他方法</strong>：</p><p> ClassLoader cl=对象.getClass().getClassLoader();</p><p> Class cls=cl.loadClass(“类的全类名”)；</p></li></ol><p><img src="/../images/image-20230111225922995-1687074638374.png" alt="image-20230111225922995"></p><p>如下类型有Class对象：</p><p><img src="/../images/image-20230111230013149-1687074638374.png" alt="image-20230111230013149"></p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>反射机制是java实现动态语言的关键，也就是通过反射实现类动态加载。</p><ul><li><p>静态加载：编译时加载相关的类，如果则报错，依赖性太强。</p></li><li><p>动态加载：运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性。</p>  <img src="../../../../../相册/typora/image-20230111231713708.png" alt="image-20230111231713708" style="zoom: 67%;" /></li></ul><p>类加载过程图：</p><p><img src="/../images/image-20230111231015989-1687074638374.png" alt="image-20230111231015989"></p><p><img src="/../images/image-20230111231901886-1687074638375.png" alt="image-20230111231901886"></p><h3 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h3><p>JVM在该阶段的主要目的时将字节码从不同的数据源（可能是class文件、jar包、网络文件）转化成二进制字节流加载到内存中，并生成一个代表该类的Class对象。</p><h3 id="连接阶段-验证"><a href="#连接阶段-验证" class="headerlink" title="连接阶段-验证"></a>连接阶段-验证</h3><ul><li>目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的安全。</li><li>验证包括：文件格式验证（是否以魔数oxcafebabe开头）、元数据验证、字节码验证和符号引用验证。</li><li><strong>注意</strong>：可以用-Xverify：none参数来关闭大部分的类验证措施，缩短虚拟机加载时间。</li></ul><h3 id="连接阶段-准备"><a href="#连接阶段-准备" class="headerlink" title="连接阶段-准备"></a>连接阶段-准备</h3><p>JVM会在该阶段对静态变量，分配内存并且默认初始化（如：0，0L，null，false等）。这些变量所使用的内存都将在方法区中进行分配。</p><p><strong>注意</strong>：实例变量在这个阶段不会分配内存，静态变量会分配内存并且默认初始值（这个初始化不是给静态变量赋值，真正的赋值是在初始化阶段），static final静态常量在这个阶段会初始化，也就是赋值就不变了。</p><h3 id="连接阶段-解析"><a href="#连接阶段-解析" class="headerlink" title="连接阶段-解析"></a>连接阶段-解析</h3><p>虚拟机将常量池内的符号引用替换为直接引用的过程。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>此阶段才是真正的执行类中定义的Java程序代码，此阶段是执行&lt;clinit&gt;方法的过程。</li><li>&lt;clinit&gt;方法是由编译器按语句出现的顺序，依次将类中的所有静态变量的赋值和静态代码块的合并。</li><li>JVM会保证一个类的&lt;clinit&gt;方法在多线程的环境下被正确的加锁，同步，如果多个线程同时去初始化一个类，那么只有一个线程去执行这个方法，其他线程需要阻塞等待，直到线程执行完毕。</li></ul><h2 id="通过反射获取类的结构信息"><a href="#通过反射获取类的结构信息" class="headerlink" title="通过反射获取类的结构信息"></a>通过反射获取类的结构信息</h2><h3 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>forName()</td><td>(1)获取Class对象的一个引用，但引用的类还没有加载(该类的第一个对象没有生成)就加载了这个类。</td></tr><tr><td></td><td>(2)为了产生Class引用，forName()立即就进行了初始化。</td></tr><tr><td>Object-getClass()</td><td>获取Class对象的一个引用，返回表示该对象的实际类型的Class引用。</td></tr><tr><td>getName()</td><td>得到<strong>全类名</strong>，即类的完整名字。</td></tr><tr><td>getSimpleName()</td><td>获取类名(<strong>不包括包名</strong>)</td></tr><tr><td>getCanonicalName()</td><td>获取全限定的类名(包括包名)</td></tr><tr><td>isInterface()</td><td>判断Class对象是否是表示一个接口</td></tr><tr><td>getInterfaces()</td><td>返回Class对象数组，表示Class对象所引用的类所实现的所有接口。</td></tr><tr><td>getSupercalss()</td><td>返回Class对象，表示Class对象所引用的类所继承的直接基类。应用该方法可在运行时发现一个对象完整的继承结构。</td></tr><tr><td>newInstance()</td><td>返回一个Oject对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器。</td></tr><tr><td>getFields()</td><td>获得某个类的所有的公共（public）的字段，包括继承自父类的所有公共字段。 类似的还有getMethods和getConstructors。</td></tr><tr><td>getDeclaredFields</td><td>获得某个类的自己声明的字段，即包括public、private和proteced，默认但是不包括父类声明的任何字段。类似的还有getDeclaredMethods和getDeclaredConstructors。</td></tr></tbody></table><p><strong>getName、getCanonicalName与getSimpleName的区别</strong>：</p><ul><li><code>getSimpleName</code>：只获取类名</li><li><code>getName</code>：类的全限定名，jvm中Class的表示，可以用于动态加载Class对象，例如<code>Class.forName</code>。</li><li><code>getCanonicalName</code>：返回更容易理解的表示，主要用于输出（toString）或log打印，大多数情况下和getName一样，但是在内部类、数组等类型的表示形式就不同了。</li></ul><h3 id="Constructor类及其用法"><a href="#Constructor类及其用法" class="headerlink" title="Constructor类及其用法"></a>Constructor类及其用法</h3><p>Constructor类存在于反射包(java.lang.reflect)中，反映的是Class 对象所表示的类的构造方法。</p><p>获取Constructor对象是通过Class类中的方法获取的，Class类与Constructor相关的主要方法如下：</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>static Class&lt;?&gt;</td><td>forName(String className)</td><td>返回与带有给定字符串名的类或接口相关联的 Class 对象。</td></tr><tr><td>Constructor</td><td>getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、具有public访问权限的构造函数对象</td></tr><tr><td>Constructor&lt;?&gt;[]</td><td>getConstructors()</td><td>返回所有具有public访问权限的构造函数的Constructor对象数组</td></tr><tr><td>Constructor</td><td>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回指定参数类型、所有声明的（包括private）构造函数对象</td></tr><tr><td>Constructor&lt;?&gt;[]</td><td>getDeclaredConstructors()</td><td>返回所有声明的（包括private）构造函数对象</td></tr><tr><td>T</td><td>newInstance()</td><td>调用无参构造器创建此 Class 对象所表示的类的一个新实例。</td></tr></tbody></table><p><strong>Constructor类本身一些常用方法</strong>如下：</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Class</td><td>getDeclaringClass()</td><td>返回 Class 对象，该对象表示声明由此 Constructor 对象表示的构造方法的类,其实就是返回真实类型（不包含参数）</td></tr><tr><td>Type[]</td><td>getGenericParameterTypes()</td><td>按照声明顺序返回一组 Type 对象，返回的就是 Constructor对象构造函数的形参类型。</td></tr><tr><td>String</td><td>getName()</td><td>以字符串形式返回此构造方法的名称。</td></tr><tr><td>Class&lt;?&gt;[]</td><td>getParameterTypes()</td><td>按照声明顺序返回一组 Class 对象，即返回Constructor 对象所表示构造方法的形参类型</td></tr><tr><td>T</td><td>newInstance(Object… initargs)</td><td>使用此 Constructor对象表示的构造函数来创建新实例</td></tr><tr><td>String</td><td>toGenericString()</td><td>返回描述此 Constructor 的字符串，其中包括类型参数。</td></tr></tbody></table><h3 id="Field类及其用法"><a href="#Field类及其用法" class="headerlink" title="Field类及其用法"></a>Field类及其用法</h3><p>Field 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。</p><p>Class类与Field对象相关方法如下：</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Field</td><td>getDeclaredField(String name)</td><td>获取指定name名称的(包含private修饰的)字段，不包括继承的字段</td></tr><tr><td>Field[]</td><td>getDeclaredFields()</td><td>获取Class对象所表示的类或接口的所有(包含private修饰的)字段,不包括继承的字段</td></tr><tr><td>Field</td><td>getField(String name)</td><td>获取指定name名称、具有public修饰的字段，包含继承字段</td></tr><tr><td>Field[]</td><td>getFields()</td><td>获取修饰符为public的字段，包含继承字段</td></tr></tbody></table><p><strong>注意</strong>：如果我们不期望获取其父类的字段，则需使用Class类的getDeclaredField/getDeclaredFields方法来获取字段即可，倘若需要连带获取到父类的字段，那么请使用Class类的getField/getFields，但是也只能获取到public修饰的的字段，无法获取父类的私有字段。</p><p>Field类还有其他常用的方法如下：</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>void</td><td>set(Object obj, Object value)</td><td>将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</td></tr><tr><td>Object</td><td>get(Object obj)</td><td>返回指定对象上此 Field 表示的字段的值</td></tr><tr><td>Class&lt;?&gt;</td><td>getType()</td><td>返回一个 Class 对象，它标识了此Field 对象所表示字段的声明类型。</td></tr><tr><td>boolean</td><td>isEnumConstant()</td><td>如果此字段表示枚举类型的元素则返回 true；否则返回 false</td></tr><tr><td>String</td><td>toGenericString()</td><td>返回一个描述此 Field（包括其一般类型）的字符串</td></tr><tr><td>String</td><td>getName()</td><td>返回此 Field 对象表示的字段的名称</td></tr><tr><td>Class&lt;?&gt;</td><td>getDeclaringClass()</td><td>返回表示类或接口的 Class 对象，该类或接口声明由此 Field 对象表示的字段</td></tr><tr><td>void</td><td>setAccessible(boolean flag)</td><td>将此对象的 accessible 标志设置为指示的布尔值,即设置其可访问性</td></tr></tbody></table><p>上述方法可能是较为常用的，事实上在设置值的方法上，Field类还提供了专门针对基本数据类型的方法，如<code>setInt()/getInt()</code>、<code>setBoolean()/getBoolean</code>、<code>setChar()/getChar()</code>等等方法。</p><h3 id="Method类及其用法"><a href="#Method类及其用法" class="headerlink" title="Method类及其用法"></a>Method类及其用法</h3><p>Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息，所反映的方法可能是类方法或实例方法（包括抽象方法）。</p><p>Class类获取Method对象相关的方法：</p><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Method</td><td>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个指定参数的Method对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</td></tr><tr><td>Method[]</td><td>getDeclaredMethods()</td><td>返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</td></tr><tr><td>Method</td><td>getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。</td></tr><tr><td>Method[]</td><td>getMethods()</td><td>返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。</td></tr></tbody></table><table><thead><tr><th>方法返回值</th><th>方法名称</th><th>方法说明</th></tr></thead><tbody><tr><td>Object</td><td>invoke(Object obj, Object… args)</td><td>对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。</td></tr><tr><td>Class&lt;?&gt;</td><td>getReturnType()</td><td>返回一个 Class 对象，该对象描述了此 Method 对象所表示的方法的正式返回类型,即方法的返回类型</td></tr><tr><td>Type</td><td>getGenericReturnType()</td><td>返回表示由此 Method 对象所表示方法的正式返回类型的 Type 对象，也是方法的返回类型。</td></tr><tr><td>Class&lt;?&gt;[]</td><td>getParameterTypes()</td><td>按照声明顺序返回 Class 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型。即返回方法的参数类型组成的数组</td></tr><tr><td>Type[]</td><td>getGenericParameterTypes()</td><td>按照声明顺序返回 Type 对象的数组，这些对象描述了此 Method 对象所表示的方法的形参类型的，也是返回方法的参数类型</td></tr><tr><td>String</td><td>getName()</td><td>以 String 形式返回此 Method 对象表示的方法名称，即返回方法的名称</td></tr><tr><td>boolean</td><td>isVarArgs()</td><td>判断方法是否带可变参数，如果将此方法声明为带有可变数量的参数，则返回 true；否则，返回 false。</td></tr><tr><td>String</td><td>toGenericString()</td><td>返回描述此 Method 的字符串，包括类型参数。</td></tr></tbody></table><p><code>getReturnType方法/getGenericReturnType方法</code>都是获取Method对象表示的方法的返回类型，只不过前者返回的Class类型后者返回的Type(前面已分析过)，Type就是一个接口而已，在Java8中新增一个默认的方法实现，返回的就参数类型信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Type</span> &#123;<br>    <span class="hljs-comment">//1.8新增</span><br>    <span class="hljs-keyword">default</span> String <span class="hljs-title function_">getTypeName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而<code>getParameterTypes/getGenericParameterTypes</code>也是同样的道理，都是获取Method对象所表示的方法的参数类型，其他方法与前面的Field和Constructor是类似的。</p><h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><ol><li>调用类中public无参构造器</li><li>调用类中指定构造器</li><li>Class类的相关方法<ul><li>newInstance：调用类中无参构造器，获取对应类的对象。</li><li>getConstructor(Class cls)：根据参数列表，获取对应的public构造器对象。</li><li>getDecalaredConstructor(Class cls)：根据参数列表，获取对应的所有构造器。</li></ul></li><li>Constructor类相关方法<ul><li>setAccessible：暴破</li><li>newInstance(Object obj)：调用构造器</li></ul></li></ol><p><strong>使用例子</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 先获取到 User 类的 Class 对象</span><br>Class&lt;?&gt; userClass = Class.forName(<span class="hljs-string">&quot;com.hspedu.reflection.User&quot;</span>);<br><span class="hljs-comment">//2. 通过 public 的无参构造器创建实例</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> userClass.newInstance();<br>System.out.println(o);<br><span class="hljs-comment">//3. 通过 public 的有参构造器创建实例</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">constructor 对象就是</span><br><span class="hljs-comment">public User(String name) &#123;//public 的有参构造器</span><br><span class="hljs-comment">this.name = name;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//3.1 先得到对应构造器</span><br>Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);<br><span class="hljs-comment">//3.2 创建实例，并传入实参</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">hsp</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;hsp&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;hsp=&quot;</span> + hsp);<br><span class="hljs-comment">//4. 通过非 public 的有参构造器创建实例</span><br><span class="hljs-comment">//4.1 得到 private 的构造器对象</span><br>Constructor&lt;?&gt; constructor1 = userClass.getDeclaredConstructor(<span class="hljs-type">int</span>.class, String.class);<br><span class="hljs-comment">//4.2 创建实例</span><br><span class="hljs-comment">//暴破【暴力破解】 , 使用反射可以访问 private 构造器/方法/属性, 反射面前，都是纸老虎</span><br>constructor1.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> constructor1.newInstance(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;张三丰&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;user2=&quot;</span> + user2);<br></code></pre></td></tr></table></figure><h3 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h3><p><img src="/../images/image-20230112002408993-1687074638375.png" alt="image-20230112002408993"></p><p><img src="/../images/image-20230112002419569-1687074638375.png" alt="image-20230112002419569"></p><h2 id="反射调用流程（具体内容看java全栈知识体系，待补充学习）"><a href="#反射调用流程（具体内容看java全栈知识体系，待补充学习）" class="headerlink" title="反射调用流程（具体内容看java全栈知识体系，待补充学习）"></a>反射调用流程（具体内容看java全栈知识体系，待补充学习）</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java泛型全解——Java基础篇（二）</title>
    <link href="/2023/06/18/Java%E6%B3%9B%E5%9E%8B%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/06/18/Java%E6%B3%9B%E5%9E%8B%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型的用处"><a href="#泛型的用处" class="headerlink" title="泛型的用处"></a>泛型的用处</h2><p>意义：适用于多种数据类型执行相同的代码。泛型主要的用途就是代码复用。</p><p>本质：泛型的本质是为了参数化类型，也就是通过泛型指定不同的类型来控制形参具体限制的类型。在使用中，操作的类型被指定为一个具体的参数，可以用在类、接口、方法中，被称为泛型类、泛型接口、泛型方法。</p><h3 id="用处一：减少代码的复用"><a href="#用处一：减少代码的复用" class="headerlink" title="用处一：减少代码的复用"></a>用处一：减少代码的复用</h3><p>减少代码的复用就是对于不同的数据类型，我们可以通过泛型的方式来复合的定义一个方法。</p><h3 id="用处二：不需要强制转换"><a href="#用处二：不需要强制转换" class="headerlink" title="用处二：不需要强制转换"></a>用处二：不需要强制转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list.add(<span class="hljs-string">&quot;xxString&quot;</span>);<br>list.add(<span class="hljs-number">100d</span>);<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>());<br></code></pre></td></tr></table></figure><p>如上的代码，如果按照这样的写法，会出现list元素的对象都是Object对象，所以当我们需要取其中的某一个元素时，我们需要将其强制转化为对应的类型，就会出现java.lang.ClassCastException的异常。</p><h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&lt;T&gt;&#123;         <span class="hljs-comment">// 此处可以随便写标识符号，T是type的简称  </span><br>    <span class="hljs-keyword">private</span> T <span class="hljs-keyword">var</span> ;     <span class="hljs-comment">// var的类型由T指定，即：由外部指定  </span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getVar</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">// 返回值的类型由外部决定  </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">var</span> ;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVar</span><span class="hljs-params">(T <span class="hljs-keyword">var</span>)</span>&#123;  <span class="hljs-comment">// 设置的类型也由外部决定  </span><br>        <span class="hljs-built_in">this</span>.<span class="hljs-keyword">var</span> = <span class="hljs-keyword">var</span> ;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="多元泛型"><a href="#多元泛型" class="headerlink" title="多元泛型"></a>多元泛型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Notepad</span>&lt;K,V&gt;&#123;       <span class="hljs-comment">// 此处指定了两个泛型类型  </span><br>    <span class="hljs-keyword">private</span> K key ;     <span class="hljs-comment">// 此变量的类型由外部决定  </span><br>    <span class="hljs-keyword">private</span> V value ;   <span class="hljs-comment">// 此变量的类型由外部决定  </span><br>    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.key ;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value ;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(K key)</span>&#123;  <br>        <span class="hljs-built_in">this</span>.key = key ;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(V value)</span>&#123;  <br>        <span class="hljs-built_in">this</span>.value = value ;  <br>    &#125;  <br>&#125; <br></code></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Info</span>&lt;T&gt;&#123;        <span class="hljs-comment">// 在接口上定义泛型  </span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getVar</span><span class="hljs-params">()</span> ; <span class="hljs-comment">// 定义抽象方法，抽象方法的返回值就是泛型类型  </span><br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><ul><li>  定义泛型方法</li></ul><p><img src="/../images/java-basic-generic-4.png" alt="img"></p><ul><li>  方法调用</li></ul><p><img src="/../images/java-basic-generic-5.png" alt="img"></p><p><strong>为什么要用变量c来创建对象呢？</strong></p><p>既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去new一个对象，但可以利用变量c的newInstance方法去创建对象，也就是利用反射创建对象。</p><h3 id="泛型的上下限"><a href="#泛型的上下限" class="headerlink" title="泛型的上下限"></a>泛型的上下限</h3><p>为了解决泛型中隐含的转换问题，Java泛型加入了类型参数的上下边界机制。<code>&lt;? extends A&gt;</code>表示该类型参数可以是A(上边界)或者A的子类类型。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>  <?> 无限制通配符 </li><li>  <? extends E>extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类 。</li><li>  <? super E>super 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类 </li></ul><p> <strong>使用原则《Effictive Java》：</strong></p><ul><li>  为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</li><li>  如果参数化类型表示一个 T 的生产者，使用 &lt; ? extends T&gt;;</li><li>  如果它表示一个 T 的消费者，就使用 &lt; ? super T&gt;； </li><li>  如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</li></ul><h4 id="看一个例子"><a href="#看一个例子" class="headerlink" title="看一个例子"></a>看一个例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span>  &lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;? <span class="hljs-built_in">super</span> E&gt;&gt; E <span class="hljs-title function_">max</span><span class="hljs-params">(List&lt;? extends E&gt; e1)</span> &#123;<br>    <span class="hljs-keyword">if</span> (e1 == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//迭代器返回的元素属于 E 的某个子类型</span><br>    Iterator&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">E</span>&gt; iterator = e1.iterator();<br>    <span class="hljs-type">E</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> iterator.next();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>        <span class="hljs-type">E</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>        <span class="hljs-keyword">if</span> (next.compareTo(result) &gt; <span class="hljs-number">0</span>)&#123;<br>            result = next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中E的参数范围是<code>&lt;E extends Comparable&lt;? super E&gt;&gt;</code>。以下进行分析：</p><ul><li><p>  首先E是可以进行比较的类所以需要 <code>extends Comparable&lt;…&gt;</code></p></li><li><p>  <code>Comparable&lt; ? super E&gt;</code> 要对 E 进行比较，即 E 的消费者，所以需要用 super</p></li><li><p>  而参数 <code>List&lt; ? extends E&gt;</code> 表示要操作的数据是 E 的子类的列表，指定上限，这样容器才够大</p></li></ul><h4 id="多个限制"><a href="#多个限制" class="headerlink" title="多个限制"></a>多个限制</h4><p>多个限制只用&amp;符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Staff</span>&amp;Passenger&gt;<br></code></pre></td></tr></table></figure><h3 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt;[] list11 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//编译错误，非法创建 </span><br>List&lt;String&gt;[] list12 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;?&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//编译错误，需要强转类型 </span><br>List&lt;String&gt;[] list13 = (List&lt;String&gt;[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;?&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//OK，但是会有警告 </span><br>List&lt;?&gt;[] list14 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//编译错误，非法创建 </span><br>List&lt;?&gt;[] list15 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;?&gt;[<span class="hljs-number">10</span>]; <span class="hljs-comment">//OK </span><br>List&lt;String&gt;[] list6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">//OK，但是会有警告</span><br></code></pre></td></tr></table></figure><h4 id="合理使用"><a href="#合理使用" class="headerlink" title="合理使用"></a>合理使用</h4>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>泛型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多态全解——Java基础篇（一）</title>
    <link href="/2023/06/18/Java%E5%A4%9A%E6%80%81%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/06/18/Java%E5%A4%9A%E6%80%81%E5%85%A8%E8%A7%A3%E2%80%94%E2%80%94Java%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态分为编译时多态和运行时多态:</p><ul><li>编译时多态主要指方法的重载</li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>在这里我们只要讲的是运行时多态。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>继承</li><li>要有方法的重写</li><li>父类引用指向子类对象：Animal a=new Cat();（向上转型）</li><li>多态中，编译看左，运行看右</li></ul><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.tedu.oop2;<br><span class="hljs-comment">/*本类用作多态的入门案例*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<span class="hljs-comment">//Cat类对象的地址值交给父类型变量a2来保存</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//Dog类对象的地址值交给父类型变量a3来保存</span><br>        <span class="hljs-comment">//8.测试多态对象</span><br>        <span class="hljs-comment">/*4.口诀2：编译看左边，运行看右边</span><br><span class="hljs-comment">        * 解释：必须要在父类定义这个方法，才能通过编译，把多态对象看作是父类类型</span><br><span class="hljs-comment">        *      必须要在子类重写这个方法，才能满足多态，实际干活的是子类*/</span><br>        a2.eat();<span class="hljs-comment">//小猫爱吃小鱼干~，多态对象使用的是父类的定义，子类的方法体</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*1.多态的前提：继承+重写*/</span><br><span class="hljs-comment">//1.创建父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-comment">//3.创建父类的普通方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小动物Animal吃啥都行~&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//2.1创建子类1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-comment">//4.1添加重写的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小猫爱吃小鱼干~&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//5.1添加子类的特有功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jump</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小猫Cat跳的老高啦~&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//2.2创建子类2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-comment">//4.2添加重写的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小狗爱吃肉骨头~&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//5.2添加子类的特有功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小狗Dog跑的老快啦~&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h2><ol><li>多态可以让我们不用关心某个对象到底具体是什么类型,就可以使用该对象的某些方法，也就是不用关心子类的具体方法，而是把子类看成父类进行使用。</li><li>提高了程序的可扩展性和可维护性</li><li>多态可以统一调用标准</li></ol><h2 id="向上转型和向下转型"><a href="#向上转型和向下转型" class="headerlink" title="向上转型和向下转型"></a>向上转型和向下转型</h2><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p><strong>本质</strong>：父类的引用指向子类对象。</p><p><strong>语法</strong>：父类类型 引用名 = new 子类类型()；</p><p><strong>特点</strong>：编译类型看左边，运行类型看右边。可以调用父类中的所有成员（须遵守访问权限），不能调用子类中特有成员，最终运行效果看子类的具体实现。</p><h3 id="向下转型（很少）"><a href="#向下转型（很少）" class="headerlink" title="向下转型（很少）"></a>向下转型（很少）</h3><p>语法：子类类型 引用名 = (子类类型) 父类引用；</p><p>特点：只能强转父类的引用，不能强转父类对象；要求父类的引用必须指向的是当前目标类型的对象；当向下转型后，可以调用子类类型中的所欲成员。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多态</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红黑树解析</title>
    <link href="/2023/06/15/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/15/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>红黑树是平衡二叉树的一种，可以保证在最坏的情况下基本动态集合操作的时间复杂度为O(lgn)。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>红黑树的每个节点包含有5个属性，color、key、left、right、parent。</p><p>红黑树满足的性质：</p><p>（1）每个节点或者是黑色，或者是红色。</p><p>（2）根节点是黑色。</p><p>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</p><p>（4）如果一个节点是红色的，则它的子节点必须是黑色的。</p><p>（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</p><p><img src="/../images/251730074203156.jpg" alt="img"></p><p>引理：一棵有n个内部节点的红黑树的高度至多为2lg(n+1)</p><p>通过这个引理可以知道，动态集合操作SEACHER、MINIMUM、MAXIMUM、SUCCESSOR、PREDECESSOR都可以在O(lgn)时间内操作。</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>旋转的实现代码和平衡二叉树很相似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 左旋</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> x</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(RBTNode&lt;T&gt; x)</span>&#123;<br>    <span class="hljs-comment">//y指向x的右孩子，之后用来交换两个位置</span><br>    RBTNode&lt;T&gt; y=x.right;<br>    x.right=y.left;<br>    <span class="hljs-comment">//如果y的左孩子不为空，那么左孩子的父节点就是x。</span><br>    <span class="hljs-keyword">if</span>(y.left!=<span class="hljs-literal">null</span>)&#123;<br>        y.left.parent=x;<br>    &#125;<br>    y.parent=x.parent;<br>    <span class="hljs-keyword">if</span>(x.parent==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-built_in">this</span>.mRoot=y;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//通过分析x是父节点的左孩子还是右孩子来判断y应该是什么孩子。</span><br>        <span class="hljs-keyword">if</span>(x.parent.left==x)x.parent.left=y;<br>        <span class="hljs-keyword">if</span>(x.parent.right==x)x.parent.right=y;<br><br>    &#125;<br>    y.left=x;<br>    x.parent=y;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 右旋，右旋的实现和左旋差不多。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> y</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(RBTNode&lt;T&gt; y)</span>&#123;<br>    <span class="hljs-comment">//y是x的父节点</span><br>    RBTNode&lt;T&gt; x=y.left;<br>    <span class="hljs-comment">//将x的右节点变成y的左节点。</span><br>    y.left=x.right;<br>    <span class="hljs-keyword">if</span>(x.right!=<span class="hljs-literal">null</span>)&#123;<br>        x.right.parent=y;<br>    &#125;<br>    x.parent=y.parent;<br>    <span class="hljs-keyword">if</span>(y.parent==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-built_in">this</span>.mRoot=x;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(y.parent.left==y)y.parent.left=x;<br>        <span class="hljs-keyword">if</span>(y.parent.right==y)y.parent.right=x;<br>    &#125;<br>    x.right=y;<br>    y.parent=x;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>关于红黑树的插入，就需要考虑不同种情况了。主要就是三步：</p><p>1、将红黑树当作一棵不同的二叉查找树，将节点插入。</p><p>2、将插入的节点着色为“红色”。</p><p>3、通过一系列旋转或者着色操作，使之重新称为一棵红黑树</p><p>众所周知，红黑树的具有5条性质，我们在插入的时候就是可以通过分析将新的节点插入后并且着色为红色，让哪几条性质失效了。</p><p>以下是具体分析：</p><ul><li>  第一步：将红黑树当作一棵二叉树的节点，插入到二叉树中。</li><li>  第二步：将插入的节点着色为红色。当着色红色的时候，不会违背第5条性质。</li><li>  第三步：对于性质1，3性质都不会违背，也就只有2、4性质会违背。违背的情况就是如果插入的z是根节点，那么就违背了2，如果z的父节点是红，就违背了性质4。</li></ul><p>首先，我们先把添加节点的代码写好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 插入操作</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(RBTNode&lt;T&gt; node)</span> &#123;<br>       RBTNode&lt;T&gt; y = <span class="hljs-literal">null</span>;<br>       RBTNode&lt;T&gt; x = <span class="hljs-built_in">this</span>.mRoot;<br>       <span class="hljs-keyword">while</span> (x != <span class="hljs-literal">null</span>) &#123;<br>           y = x;<br>           <span class="hljs-keyword">if</span> (node.key.compareTo(x.key) &lt; <span class="hljs-number">0</span>) &#123;<br>               x = x.left;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               x = x.right;<br>           &#125;<br>       &#125;<br>       node.parent = y;<br>       <span class="hljs-keyword">if</span> (y == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-built_in">this</span>.mRoot = node;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">if</span> (node.key.compareTo(y.key) &lt; <span class="hljs-number">0</span>) &#123;<br>               node.left = y;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               node.right = y;<br>           &#125;<br>       &#125;<br>       node.left = <span class="hljs-literal">null</span>;<br>       node.right = <span class="hljs-literal">null</span>;<br>       node.color = RED;<br>       insertFixUp(node);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T key)</span> &#123;<br>       RBTNode&lt;T&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RBTNode</span>&lt;&gt;(key, BLACK, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>       <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>           insert(node);<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>然后这个时候红黑树会因为插入一个红节点而破坏原有的结构，我们对其进行插入修正操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 插入修正</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFixUp</span><span class="hljs-params">(RBTNode&lt;T&gt; node)</span> &#123;<br>       RBTNode&lt;T&gt; parent, gparent, uncle;<br>       <span class="hljs-keyword">while</span> (node.parent != <span class="hljs-literal">null</span> &amp;&amp; node.parent.color == RED) &#123;<br>           parent = node.parent;<br>           gparent = parent.parent;<br>           <span class="hljs-comment">//当父节点是祖父节点的左孩子</span><br>           <span class="hljs-keyword">if</span> (parent == gparent.left) &#123;<br>               uncle = gparent.right;<br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">               case1:叔节点为red的时候，进行以下操作：</span><br><span class="hljs-comment">               1、将父节点变黑</span><br><span class="hljs-comment">               2、将叔叔节点变黑</span><br><span class="hljs-comment">               3、将祖父节点变红</span><br><span class="hljs-comment">               4、将祖父节点变成现在的节点</span><br><span class="hljs-comment">                */</span><br>               <span class="hljs-keyword">if</span> (uncle != <span class="hljs-literal">null</span> &amp;&amp; uncle.color == RED) &#123;<br>                   parent.color = BLACK;<br>                   uncle.color = BLACK;<br>                   gparent.color = RED;<br>                   node = gparent;<br>               &#125;<br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">               case2:叔叔是黑色，且当前是右孩子。</span><br><span class="hljs-comment">               1、将父节点作为当前节点。</span><br><span class="hljs-comment">               2、以新的节点作为支点进行左旋。</span><br><span class="hljs-comment">                */</span><br>               <span class="hljs-keyword">if</span>(node==parent.right)&#123;<br>                   node=parent;<br>                   leftRotate(node);<br>               &#125;<br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">               case3:叔叔是黑色，且当前是左孩子。</span><br><span class="hljs-comment">               1、将父节点变黑</span><br><span class="hljs-comment">               2、将祖父节点变为红色</span><br><span class="hljs-comment">               3、以祖父节点进行右旋</span><br><span class="hljs-comment">                */</span><br>               <span class="hljs-keyword">if</span>(node==parent.left)&#123;<br>                   parent.color=BLACK;<br>                   gparent.color=RED;<br>                   rightRotate(gparent);<br>               &#125;<br><br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               uncle = gparent.left;<br>               <span class="hljs-keyword">if</span> (uncle != <span class="hljs-literal">null</span> &amp;&amp; uncle.color == RED) &#123;<br>                   parent.color = BLACK;<br>                   uncle.color = BLACK;<br>                   gparent.color = RED;<br>                   node = gparent;<br>               &#125;<br>               <span class="hljs-keyword">if</span>(node==parent.left)&#123;<br>                   node=parent;<br>                   rightRotate(node);<br>               &#125;<br>               <span class="hljs-keyword">if</span>(node==parent.right)&#123;<br>                   parent.color=BLACK;<br>                   gparent.color=RED;<br>                   leftRotate(gparent);<br>               &#125;<br><br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>待补充。。。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一篇文章搞懂HashMap</title>
    <link href="/2023/06/15/HashMap%E5%85%A8%E8%A7%A3/"/>
    <url>/2023/06/15/HashMap%E5%85%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="从应用到底层看破HashMap（源码精讲一）"><a href="#从应用到底层看破HashMap（源码精讲一）" class="headerlink" title="从应用到底层看破HashMap（源码精讲一）"></a>从应用到底层看破HashMap（源码精讲一）</h1><blockquote><p>  作为面试中最喜欢考察的知识点之一和在实际中最常用到的Map集合，HashMap为什么这么让人着谜，对应的数据结构是什么，有哪些具体的应用场景，底层的实现逻辑是什么？下文的分析和源码都是来自于JDK8。</p></blockquote><h2 id="HashMap是什么"><a href="#HashMap是什么" class="headerlink" title="HashMap是什么"></a>HashMap是什么</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>HashMap是Java程序员使用频率最高的键值对集合，对应着哈希表这一数据结构，在学习HashMap之前，我们需要先复习一下哈希表的一些概念。</p><p>哈希表相较于其他数据结构，得力于它的添加、删除、查找等功能的性能强大，我们常用的Redis非关系型数据库就是利用典型的键值对的数据结构存储（怪不得Redis这么好用）。在不考虑哈希冲突的情况下，只需要时间复杂度为O(1)就能够定位。</p><p>但是哈希表有一个非常窒命的问题就是哈希冲突，解决哈希冲突有两个方法，一是开放寻址法（ThreadLocal就是利用这个，先挖一个坑），另一种就是我们今天要讲的HashMap的实现方法——链地址法。</p><h3 id="Map大家族"><a href="#Map大家族" class="headerlink" title="Map大家族"></a>Map大家族</h3><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2016/f7fe16a2.png" alt="Map大家庭"></p><p>从上面的图中我们可以看到，在Java.util.Map接口下，有四个常用的类，分别是HashMap、HashTable、LinkedHashMap、TreeMap。</p><p>下面讲一下它们之间的区别吧：</p><ul><li>  <strong>HashMap</strong>：根据键的hashcode来存储数据，访问速度快，但是遍历顺序不确定。HashMap是线程不安全的，下文会具体的介绍为什么线程不安全，如何需要满足线程安全， 可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</li><li>  <strong>HashTable</strong>：已经被淘汰可以不进行学习和使用。</li><li>  <strong>LinkedHashMap</strong>：是HashMap的一个子类，但是记录了插入的顺序，只要记住这一点就可以了。</li><li>  <strong>TreeMap</strong>：TreeMap实现了SortedMap接口，能将所有的记录根据key进行排序。默认升序。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。</li></ul><p>所以通过上面的介绍，大概就有了一个知识图谱，如果是需要线程安全就需要使用concurrentHashMap，如果需要记录记录顺序则使用linkedHashMap。如果需要key是有序的，则需要TreeMap。</p><h2 id="HashMap应用场景"><a href="#HashMap应用场景" class="headerlink" title="HashMap应用场景"></a>HashMap应用场景</h2><p>HashMap的使用场景就是如果你需要使用到键值对，并且需要非常高效的搜索能力的时候，例如存储用户信息、缓存、字段，但是HashMap线程不安全，这个需要注意一下。</p><h2 id="HashMap的重要方法"><a href="#HashMap的重要方法" class="headerlink" title="HashMap的重要方法"></a>HashMap的重要方法</h2><ul><li><p>创建HashMap对象</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String,Integer&gt; hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure></li><li><p>添加元素(put)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.put(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-number">123</span>);<br>hashMap.put(<span class="hljs-string">&quot;234&quot;</span>,<span class="hljs-number">234</span>);<br></code></pre></td></tr></table></figure></li><li><p>删除元素</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.remove(<span class="hljs-string">&quot;123&quot;</span>);<br>hashMap.remove(<span class="hljs-string">&quot;234&quot;</span>,<span class="hljs-number">234</span>);<br></code></pre></td></tr></table></figure></li><li><p>获取元素</p><ul><li>  get()</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.get(<span class="hljs-string">&quot;123&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>  getOrDefault()</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getOrDefault(<span class="hljs-string">&quot;123&quot;</span>,-<span class="hljs-number">1</span>);<span class="hljs-comment">//如果123不存在默认返回-1</span><br></code></pre></td></tr></table></figure></li><li><p>元素遍历(推荐写法)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator1</span> <span class="hljs-operator">=</span> hashMap.entrySet().iterator();<br>        <span class="hljs-keyword">while</span> (iterator1.hasNext())&#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) iterator1.next();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (String) entry.getKey();<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (Integer) entry.getValue();<br>            System.out.println(key+<span class="hljs-string">&quot;=&quot;</span>+value);<br>        &#125;<br></code></pre></td></tr></table></figure></li><li><p>判断key或者value是否存在</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.containKey(<span class="hljs-string">&quot;123&quot;</span>);<br>hashMap.containValue(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure></li><li><p>替换元素</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.replace(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-number">34</span>);<span class="hljs-comment">//如果key不存在，则不处理。</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="HashMap底层实现（代码全解）"><a href="#HashMap底层实现（代码全解）" class="headerlink" title="HashMap底层实现（代码全解）"></a>HashMap底层实现（代码全解）</h2><p>在HashMap中，最主要的就是三个方法的实现，分别是put、get、resize。下面我就对其三个方法的源码进行深入的分析。</p><h3 id="put方法详解"><a href="#put方法详解" class="headerlink" title="put方法详解"></a>put方法详解</h3><p>首先我们先看put的实现：</p><p><img src="/../images/d669d29c.png" alt="put实现流程"></p><p>上面是完整的put实现。其中有一些重要的属性：table是哈希桶表；threshold表示扩容的阈值；loadFactor表示的是负载因子。</p><p><strong>总的逻辑过程如下：</strong></p><ol><li> 判断table是否是空，如果为空，则进行resize</li><li> 根据键值计算插入的数组索引i。</li><li> 如果table[i]是null则直接插入，如果不是null，则查询key是否已经存在，如果存在则直接覆盖。</li><li> 如果key不存在，则考虑是否是红黑树，如果是红黑树，则直接插入红黑树中。</li><li> 如果不是红黑树，则插入链表</li><li> 判断链表长度是否大于8，如果大于8，转换成红黑树。</li><li> 若不大于8，则直接插入，如果key存在，则直接覆盖。</li><li> 最后判断是否到达阈值，如果到达阈值，则进行resize。</li></ol><p><strong>源码分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">                   <span class="hljs-type">boolean</span> evict)</span> &#123;<span class="hljs-comment">//tab是记录哈希表的数组</span><br>        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<span class="hljs-comment">//如果当前的table是null，或者数组的长度是0，则创建一个数组</span><br>        <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            n = (tab = resize()).length;<span class="hljs-comment">//通过hash值去确定插入数组的索引i，如果该索引上为空，则直接插入值。</span><br>        <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>            tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<span class="hljs-comment">//如果该索引不为空</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;K,V&gt; e; K k;<span class="hljs-comment">//如果key已经存在，则直接覆盖node</span><br>            <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>                ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                e = p;<span class="hljs-comment">//如果key不存在，判断是否是红黑树</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<span class="hljs-comment">//是红黑树，直接插入</span><br>                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>            <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果不是红黑树，而是链表，那么循环插入。</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<span class="hljs-comment">//如果下一个node为空，插入</span><br>                    <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                        p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<span class="hljs-comment">//如果链表的长度大于8，则将链表变成红黑树</span><br>                        <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                            treeifyBin(tab, hash);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<span class="hljs-comment">//如果key已经存在则直接覆盖value。</span><br>                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                        ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                        <span class="hljs-keyword">break</span>;<br>                    p = e;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>                <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>                <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                    e.value = value;<br>                afterNodeAccess(e);<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        ++modCount;<span class="hljs-comment">//如果超过了最大值，扩容</span><br>        <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>            resize();<br>        afterNodeInsertion(evict);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">//resize函数就是复制旧数组到新数组。</span><br></code></pre></td></tr></table></figure><p>关于红黑树的实现我会在红黑树详解中介绍该HashMap中的红黑树实现，具体请跳转<a href="/2023/06/15/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%A7%A3%E6%9E%90/" title="红黑树解析">红黑树解析</a></p><h3 id="get方法详解"><a href="#get方法详解" class="headerlink" title="get方法详解"></a>get方法详解</h3><p>对于哈希表来说，不管是查询、增加还是删除，快速定位到元素的位置是非常重要的。前面说到了HashMap是通过数组+链表进行存储的（这里先考虑JDK1.7，因为原理是一样的）。在哈希表中，要提高查询的速度，最好数组中的每个位子都只有一个元素。但是这样子的话就会要求元素之间要足够离散。如果一个哈希表太小，算法再强也没有用；但是如果哈希表过大，造成了空间的浪费也不是好的设计。这里我们可以学习一下HashMap的设计。</p><p><strong>先看看源码（jdk1.7和jdk1.8）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;   <span class="hljs-comment">//jdk1.8 &amp; jdk1.7</span><br>     <span class="hljs-type">int</span> h;<br>     <span class="hljs-comment">// h = key.hashCode() 为第一步 取hashCode值</span><br>     <span class="hljs-comment">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span><br>     <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexFor</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> length)</span> &#123;  <span class="hljs-comment">//jdk1.7的源码</span><br>     <span class="hljs-keyword">return</span> h &amp; (length-<span class="hljs-number">1</span>);  <span class="hljs-comment">//第三步 取模运算</span><br>&#125;<br><br>tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]<br><span class="hljs-comment">//jdk1.8的源码，putVal中的寻址方式</span><br></code></pre></td></tr></table></figure><p>这里的Hash算法本质上就是三步：<strong>取key的hashCode值、高位运算、取模运算</strong>。</p><p><strong>取hashcode</strong>就是非常常规的，这里我讲一下HashMap或者所有的Map类型的数据结构是怎么进行寻址和插入以及删除操作的，其实核心就是如果一样的key，就会生成一样的hashcode，一样的hashcode就会生成一样的hash值，一样的hash值就可以找到一样的索引，然后就可以定位到元素。</p><p>在JDK1.8的实现中，优化了<strong>高位运算</strong>的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。以下是1.7中hash算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object k)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> hashSeed;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != h &amp;&amp; k <span class="hljs-keyword">instanceof</span> String) &#123;<br>        <span class="hljs-keyword">return</span> sun.misc.Hashing.stringHash32((String) k);<br>    &#125;<br>    <span class="hljs-comment">// key的hashcode会和hash seed做与运算</span><br>    h ^= k.hashCode();<br>    h ^= (h &gt;&gt;&gt; <span class="hljs-number">20</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="hljs-number">7</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><p>1.7和1.8得到的值<strong>既包含了自己高位的特性又包含了自己低位的特性</strong>，从而增加了之后得到的下标的不确定性，降低了碰撞的概率。</p><p><img src="/../images/1460000022059146" alt="hash算法实现"></p><p><strong>计算下标：</strong></p><p>在这里的算法真的是惊艳，对应下面的面试题，详细见下边。</p><h3 id="resize方法详解"><a href="#resize方法详解" class="headerlink" title="resize方法详解"></a>resize方法详解</h3><p>因为在JDK1.8中，使用的是红黑树的存储方式，实现起来较为复杂，所以我们先看看在JDK1.7中是如何实现resize这个方法的。</p><p><strong>JDK1.7源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">resize</span><span class="hljs-params">(<span class="hljs-type">int</span> newCapacity)</span> &#123;   <span class="hljs-comment">//传入新的容量</span><br>     Entry[] oldTable = table;    <span class="hljs-comment">//引用扩容前的Entry数组</span><br>     <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> oldTable.length;         <br>     <span class="hljs-keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;  <span class="hljs-comment">//扩容前的数组大小如果已经达到最大(2^30)了</span><br>         threshold = Integer.MAX_VALUE; <span class="hljs-comment">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span><br>         <span class="hljs-keyword">return</span>;<br>    &#125;<br> <br>     Entry[] newTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[newCapacity];  <span class="hljs-comment">//初始化一个新的Entry数组</span><br>   transfer(newTable);                         <span class="hljs-comment">//！！将数据转移到新的Entry数组里</span><br>    table = newTable;                           <span class="hljs-comment">//HashMap的table属性引用新的Entry数组</span><br>   threshold = (<span class="hljs-type">int</span>)(newCapacity * loadFactor);<span class="hljs-comment">//修改阈值</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(Entry[] newTable)</span> &#123;<br>    Entry[] src = table;                   <span class="hljs-comment">//src引用了旧的Entry数组</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> newTable.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; src.length; j++) &#123; <span class="hljs-comment">//遍历旧的Entry数组</span><br>        Entry&lt;K,V&gt; e = src[j];             <span class="hljs-comment">//取得旧Entry数组的每个元素</span><br>       <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>           src[j] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）</span><br>           <span class="hljs-keyword">do</span> &#123;<br>                Entry&lt;K,V&gt; next = e.next;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> indexFor(e.hash, newCapacity); <span class="hljs-comment">//！！重新计算每个元素在数组中的位置</span><br>               e.next = newTable[i]; <span class="hljs-comment">//标记[1]</span><br>               newTable[i] = e;      <span class="hljs-comment">//将元素放在数组上</span><br>               e = next;             <span class="hljs-comment">//访问下一个Entry链上的元素</span><br>             &#125; <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>);<br>         &#125;<br>     &#125;<br> &#125; <br></code></pre></td></tr></table></figure><p>上面就是在1.7中的关键代码，其中resize就是修改阈值和引用transfer函数，内核的交换新旧数组的函数其实是transfer，在transfer中，可以看到标记1这个地方是一个非常明显的头插入，扩容以后的数组里的链表是倒序的，这样的设计也是造成JDK1.7有严重问题的原因，当然在JDK1.8中这个问题已经解决了。在JDK1.8已经修改为了尾插入。</p><p>同样看到标记1上面的这一行代码，这里是一个重新计算每个元素在数组中的位置。下面是对于该行代码的优化。</p><p>我们先来分析扩容机制，当数组的存储量已经到达了threshold，也就是阈值以后，我们就需要扩大容量为两倍。那么对于每一个元素而言，在扩容后，根据下标计算公式，只可能会在原位置或者原位置移动2次幂的位置。</p><p><img src="/../images/4d8022db.png" alt="分析扩容后元素下标变化"></p><p>可以看到上面的这个图，其中n-1就是现在数组的容量，现在将数组扩容为2倍，可以发现其实就是对原容量进行左移1位，然后通过indexFor函数进行取模运算，也就是和length-1进行与运算。可以发现运算之后，如果原来的key高位是0，则下标不变，如果原来的key高位是1，则在原位置移动2次幂。因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>        Node&lt;K,V&gt;[] oldTab = table;<span class="hljs-comment">//oldTab记录旧数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<span class="hljs-comment">//记录旧容量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<span class="hljs-comment">//记录旧的阈值</span><br>        <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//如果旧容量大于0</span><br>            <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="hljs-comment">//如果大于2^30</span><br>                threshold = Integer.MAX_VALUE;<span class="hljs-comment">//修改阈值到2^31-1</span><br>                <span class="hljs-keyword">return</span> oldTab;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<span class="hljs-comment">//如果新的容量小于最大值或者旧容量大于初始值</span><br>                newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 两倍的阈值</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 旧阈值大于0，赋给新容量</span><br>            newCap = oldThr;<br>        <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// 初始化</span><br>            newCap = DEFAULT_INITIAL_CAPACITY;<br>            newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//阈值等于0，赋值</span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                      (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>        &#125;<br>        threshold = newThr;<span class="hljs-comment">//赋值新的阈值</span><br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>        table = newTab;<span class="hljs-comment">//定义新的table</span><br>        <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//接下去就是复制旧数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>                Node&lt;K,V&gt; e;<br>                <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//如果旧数组中某一索引不为空</span><br>                    oldTab[j] = <span class="hljs-literal">null</span>;<span class="hljs-comment">//这个写法在Java中还是比较常见的，可以学习。</span><br>                    <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)<br>                        newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<span class="hljs-comment">//计算新的数组下标</span><br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                        ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);<br>                    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                        Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>                        Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>                        Node&lt;K,V&gt; next;<br>                        <span class="hljs-keyword">do</span> &#123;<br>                            next = e.next;<br>                            <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//原索引</span><br>                                <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)<br>                                    loHead = e;<br>                                <span class="hljs-keyword">else</span><br>                                    loTail.next = e;<br>                                loTail = e;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//原索引＋oldCap</span><br>                                <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<br>                                    hiHead = e;<br>                                <span class="hljs-keyword">else</span><br>                                    hiTail.next = e;<br>                                hiTail = e;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br>                        <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<br>                            loTail.next = <span class="hljs-literal">null</span>;<br>                            newTab[j] = loHead;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<br>                            hiTail.next = <span class="hljs-literal">null</span>;<br>                            newTab[j + oldCap] = hiHead;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newTab;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>集合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程路线</title>
    <link href="/2023/06/14/Java%E7%BC%96%E7%A8%8B%E8%B7%AF%E7%BA%BF/"/>
    <url>/2023/06/14/Java%E7%BC%96%E7%A8%8B%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="Java后端技术体系"><a href="#Java后端技术体系" class="headerlink" title="Java后端技术体系"></a>Java后端技术体系</h1><h2 id="第一部分：Java基础"><a href="#第一部分：Java基础" class="headerlink" title="第一部分：Java基础"></a>第一部分：Java基础</h2><ul><li><p>变量</p></li><li><p>控制结构</p><ul><li>顺序结构</li><li>分支</li><li>循环</li></ul></li><li><p>OOP</p><ul><li>封装</li><li>继承</li><li>多态</li></ul></li><li><p>数组</p></li><li><p>Java API</p></li><li><p>异常处理</p></li><li><p>集合</p></li><li><p>泛型</p></li><li><p>反射</p></li><li><p>网络通信</p></li></ul><h2 id="第二部分：Java高级"><a href="#第二部分：Java高级" class="headerlink" title="==第二部分：Java高级=="></a>==第二部分：Java高级==</h2><h3 id="Java多线程-高并发"><a href="#Java多线程-高并发" class="headerlink" title="Java多线程/高并发"></a>Java多线程/高并发</h3><ul><li>并发基础<ul><li>互斥同步</li><li>非阻塞同步</li><li>指令重排</li><li>synchronized</li><li>volatile</li></ul></li><li>线程</li><li>锁<ul><li>自旋锁</li><li>偏向锁</li><li>可重入锁</li></ul></li><li>线程池</li><li>并发容器</li><li>JUC<ul><li>executor</li><li>collections</li><li>locks</li><li>atomic（原子类）</li><li>tools（CountDownLatch，Exchanger，ThreadLocal，CyclicBarrier）</li></ul></li></ul><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul><li>数据结构<ul><li>数组（稀疏数组）</li><li>队列</li><li>栈</li><li>链表</li><li>树</li><li>散列</li><li>堆</li><li>图</li></ul></li><li>算法<ul><li>排序算法（8种）</li><li>查找</li><li>分治算法</li><li>动态规划（背包问题）</li><li>回溯算法（骑士周游问题）</li><li>贪心算法</li><li>KMP</li><li>Prim</li><li>kruskal</li><li>弗洛伊德算法</li><li>迪杰斯特拉算法</li></ul></li></ul><h3 id="设计模式（23种）"><a href="#设计模式（23种）" class="headerlink" title="设计模式（23种）"></a>设计模式（23种）</h3><p>常用的8种：</p><ul><li>单例模式</li><li>观察者模式</li><li>工厂模式</li><li>适配器模式</li><li>装饰者模式</li><li>代理模式</li><li>模板模式</li><li>责任链模式</li><li>其他（桥接模式、原型模式、组合模式）</li></ul><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul><li>JVM体系</li><li>类加载过程/机制</li><li>双亲委派机制/沙箱安全机制</li><li>JMM（Java内存模式）</li><li>字节码执行的过程/机制</li><li>GC(垃圾回收机制)</li><li>JVM性能监控和故障定位</li><li>JVM调优</li></ul><h2 id="第三部分：JavaWeb"><a href="#第三部分：JavaWeb" class="headerlink" title="第三部分：JavaWeb"></a>第三部分：JavaWeb</h2><h3 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h3><ul><li>HTML</li><li>CSS</li><li>Javascript</li><li>Ajax</li><li>Jquery</li></ul><h3 id="前端框架（弱化）"><a href="#前端框架（弱化）" class="headerlink" title="前端框架（弱化）"></a>前端框架（弱化）</h3><ul><li>VUE</li><li>React</li><li>Angular</li><li>bootstrap</li><li>Node.js</li></ul><h3 id="JavaWeb后端"><a href="#JavaWeb后端" class="headerlink" title="JavaWeb后端"></a>JavaWeb后端</h3><ul><li>Tomcat</li><li>Servlet</li><li>JSP</li></ul><h2 id="第四部分：主流框架和项目管理"><a href="#第四部分：主流框架和项目管理" class="headerlink" title="第四部分：主流框架和项目管理"></a>第四部分：主流框架和项目管理</h2><ul><li>Linux</li><li>Nginx</li><li>==SSM==<ul><li>Spring</li><li>SpringMVC</li><li>MyBatis</li></ul></li><li>项目管理<ul><li>Maven</li><li>git&amp;Github</li></ul></li><li>数据库<ul><li>Redis</li><li>Mysql</li><li>Oracle</li></ul></li><li>其他框架<ul><li>WebService(SOA)</li><li>Activiti(工作流框架)</li><li>Shiro(安全框架)</li><li>Spring  Security(安全框架)</li><li>JPA(持久化)</li><li>SpringData(持久层的通用解决方案)</li></ul></li></ul><h2 id="第五部分：分布式-微服务-并行架构"><a href="#第五部分：分布式-微服务-并行架构" class="headerlink" title="第五部分：分布式|微服务|并行架构"></a>第五部分：分布式|微服务|并行架构</h2><ul><li>Netty</li><li>Dubbo（RPC框架）</li><li>FastDFS（分布式的文件系统）</li><li>Docker（应用容器引擎）</li><li>==Spring家族==<ul><li>SpringBoot</li><li>SpringCloud<ul><li>Nacos（阿里巴巴服务发现，配置，管理）</li><li>Seata（阿里巴巴，分布式事务的中间件）</li><li>Sentinel（阿里巴巴，流量控制，融断，系统负载保护）</li><li>Gateway（网关，限流，日志，监控，鉴权）</li><li>OpenFeign（服务间调用）</li></ul></li></ul></li><li>搜索引擎<ul><li>ElasticSearch</li><li>Solr</li></ul></li><li>==中间件==<ul><li>Mycat（数据库中间件，分库分表）</li><li>消息中间件<ul><li>ActiveMQ</li><li>RabbitMQ</li><li>KafKa</li></ul></li></ul></li><li>日志分析与监控（ELK）<ul><li>ElasticSearch（搜索，存储数据）</li><li>LogStash（分析日志）</li><li>Kibana（可视化）</li></ul></li><li>Zookeeper（一致性服务：比如 配置维护，域名维护，分布式同步）</li></ul><h2 id="第六部分：DevOps（开发运维一体化）自动化部分管理项目，解决CI-CD"><a href="#第六部分：DevOps（开发运维一体化）自动化部分管理项目，解决CI-CD" class="headerlink" title="第六部分：DevOps（开发运维一体化）自动化部分管理项目，解决CI/CD"></a>第六部分：DevOps（开发运维一体化）自动化部分管理项目，解决CI/CD</h2><ul><li>k8s(让部署容器化的应用简单高效)</li><li>普罗米修斯（prometheus）(系统监控和报警)</li><li>Jenkins（监控持续的工作【部署，集成，交付】）</li><li>Harbor（容器的镜像仓库）</li><li>GitLab</li><li>SonarQube(项目工程代码质量检测)</li></ul><h2 id="第七个部分：大数据技术（可以弱化）"><a href="#第七个部分：大数据技术（可以弱化）" class="headerlink" title="第七个部分：大数据技术（可以弱化）"></a>第七个部分：大数据技术（可以弱化）</h2><ul><li>Hadoop</li><li>Hive</li><li>Impals</li><li>spark</li><li>flink</li></ul><h2 id="第八个部分：项目"><a href="#第八个部分：项目" class="headerlink" title="==第八个部分：项目=="></a>==第八个部分：项目==</h2><ul><li>电商</li><li>金融</li><li>教育</li><li>直播</li><li>CRM，ERP</li></ul><h2 id="第九个部分：大厂高频面试题"><a href="#第九个部分：大厂高频面试题" class="headerlink" title="第九个部分：大厂高频面试题"></a>第九个部分：大厂高频面试题</h2><h2 id="第十个部分：底层源码-内核研究"><a href="#第十个部分：底层源码-内核研究" class="headerlink" title="第十个部分：底层源码/内核研究"></a>第十个部分：底层源码/内核研究</h2><h2 id="编程基础的扩展"><a href="#编程基础的扩展" class="headerlink" title="编程基础的扩展"></a>编程基础的扩展</h2><ul><li>计算机网络</li><li>操作系统</li><li>编译原理</li><li>离散数学</li><li>数值分析</li><li>计算机组成原理</li><li>汇编语言</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
