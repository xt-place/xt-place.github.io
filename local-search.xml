<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>红黑树解析</title>
    <link href="/2023/06/15/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/15/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>红黑树是平衡二叉树的一种，可以保证在最坏的情况下基本动态集合操作的时间复杂度为O(lgn)。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>红黑树的每个节点包含有5个属性，color、key、left、right、parent。</p><p>红黑树满足的性质：</p><p>（1）每个节点或者是黑色，或者是红色。</p><p>（2）根节点是黑色。</p><p>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</p><p>（4）如果一个节点是红色的，则它的子节点必须是黑色的。</p><p>（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</p><p><img src="https://images0.cnblogs.com/i/497634/201403/251730074203156.jpg" alt="img"></p><p>引理：一棵有n个内部节点的红黑树的高度至多为2lg(n+1)</p><p>通过这个引理可以知道，动态集合操作SEACHER、MINIMUM、MAXIMUM、SUCCESSOR、PREDECESSOR都可以在O(lgn)时间内操作。</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>旋转的实现代码和平衡二叉树很相似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 左旋</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> x</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(RBTNode&lt;T&gt; x)</span>&#123;<br>    <span class="hljs-comment">//y指向x的右孩子，之后用来交换两个位置</span><br>    RBTNode&lt;T&gt; y=x.right;<br>    x.right=y.left;<br>    <span class="hljs-comment">//如果y的左孩子不为空，那么左孩子的父节点就是x。</span><br>    <span class="hljs-keyword">if</span>(y.left!=<span class="hljs-literal">null</span>)&#123;<br>        y.left.parent=x;<br>    &#125;<br>    y.parent=x.parent;<br>    <span class="hljs-keyword">if</span>(x.parent==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-built_in">this</span>.mRoot=y;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//通过分析x是父节点的左孩子还是右孩子来判断y应该是什么孩子。</span><br>        <span class="hljs-keyword">if</span>(x.parent.left==x)x.parent.left=y;<br>        <span class="hljs-keyword">if</span>(x.parent.right==x)x.parent.right=y;<br><br>    &#125;<br>    y.left=x;<br>    x.parent=y;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 右旋，右旋的实现和左旋差不多。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> y</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(RBTNode&lt;T&gt; y)</span>&#123;<br>    <span class="hljs-comment">//y是x的父节点</span><br>    RBTNode&lt;T&gt; x=y.left;<br>    <span class="hljs-comment">//将x的右节点变成y的左节点。</span><br>    y.left=x.right;<br>    <span class="hljs-keyword">if</span>(x.right!=<span class="hljs-literal">null</span>)&#123;<br>        x.right.parent=y;<br>    &#125;<br>    x.parent=y.parent;<br>    <span class="hljs-keyword">if</span>(y.parent==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-built_in">this</span>.mRoot=x;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(y.parent.left==y)y.parent.left=x;<br>        <span class="hljs-keyword">if</span>(y.parent.right==y)y.parent.right=x;<br>    &#125;<br>    x.right=y;<br>    y.parent=x;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>关于红黑树的插入，就需要考虑不同种情况了。主要就是三步：</p><p>1、将红黑树当作一棵不同的二叉查找树，将节点插入。</p><p>2、将插入的节点着色为“红色”。</p><p>3、通过一系列旋转或者着色操作，使之重新称为一棵红黑树</p><p>众所周知，红黑树的具有5条性质，我们在插入的时候就是可以通过分析将新的节点插入后并且着色为红色，让哪几条性质失效了。</p><p>以下是具体分析：</p><ul><li>  第一步：将红黑树当作一棵二叉树的节点，插入到二叉树中。</li><li>  第二步：将插入的节点着色为红色。当着色红色的时候，不会违背第5条性质。</li><li>  第三步：对于性质1，3性质都不会违背，也就只有2、4性质会违背。违背的情况就是如果插入的z是根节点，那么就违背了2，如果z的父节点是红，就违背了性质4。</li></ul><p>首先，我们先把添加节点的代码写好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 插入操作</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(RBTNode&lt;T&gt; node)</span> &#123;<br>       RBTNode&lt;T&gt; y = <span class="hljs-literal">null</span>;<br>       RBTNode&lt;T&gt; x = <span class="hljs-built_in">this</span>.mRoot;<br>       <span class="hljs-keyword">while</span> (x != <span class="hljs-literal">null</span>) &#123;<br>           y = x;<br>           <span class="hljs-keyword">if</span> (node.key.compareTo(x.key) &lt; <span class="hljs-number">0</span>) &#123;<br>               x = x.left;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               x = x.right;<br>           &#125;<br>       &#125;<br>       node.parent = y;<br>       <span class="hljs-keyword">if</span> (y == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-built_in">this</span>.mRoot = node;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">if</span> (node.key.compareTo(y.key) &lt; <span class="hljs-number">0</span>) &#123;<br>               node.left = y;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               node.right = y;<br>           &#125;<br>       &#125;<br>       node.left = <span class="hljs-literal">null</span>;<br>       node.right = <span class="hljs-literal">null</span>;<br>       node.color = RED;<br>       insertFixUp(node);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T key)</span> &#123;<br>       RBTNode&lt;T&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RBTNode</span>&lt;&gt;(key, BLACK, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>       <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>           insert(node);<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>然后这个时候红黑树会因为插入一个红节点而破坏原有的结构，我们对其进行插入修正操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 插入修正</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFixUp</span><span class="hljs-params">(RBTNode&lt;T&gt; node)</span> &#123;<br>       RBTNode&lt;T&gt; parent, gparent, uncle;<br>       <span class="hljs-keyword">while</span> (node.parent != <span class="hljs-literal">null</span> &amp;&amp; node.parent.color == RED) &#123;<br>           parent = node.parent;<br>           gparent = parent.parent;<br>           <span class="hljs-comment">//当父节点是祖父节点的左孩子</span><br>           <span class="hljs-keyword">if</span> (parent == gparent.left) &#123;<br>               uncle = gparent.right;<br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">               case1:叔节点为red的时候，进行以下操作：</span><br><span class="hljs-comment">               1、将父节点变黑</span><br><span class="hljs-comment">               2、将叔叔节点变黑</span><br><span class="hljs-comment">               3、将祖父节点变红</span><br><span class="hljs-comment">               4、将祖父节点变成现在的节点</span><br><span class="hljs-comment">                */</span><br>               <span class="hljs-keyword">if</span> (uncle != <span class="hljs-literal">null</span> &amp;&amp; uncle.color == RED) &#123;<br>                   parent.color = BLACK;<br>                   uncle.color = BLACK;<br>                   gparent.color = RED;<br>                   node = gparent;<br>               &#125;<br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">               case2:叔叔是黑色，且当前是右孩子。</span><br><span class="hljs-comment">               1、将父节点作为当前节点。</span><br><span class="hljs-comment">               2、以新的节点作为支点进行左旋。</span><br><span class="hljs-comment">                */</span><br>               <span class="hljs-keyword">if</span>(node==parent.right)&#123;<br>                   node=parent;<br>                   leftRotate(node);<br>               &#125;<br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">               case3:叔叔是黑色，且当前是左孩子。</span><br><span class="hljs-comment">               1、将父节点变黑</span><br><span class="hljs-comment">               2、将祖父节点变为红色</span><br><span class="hljs-comment">               3、以祖父节点进行右旋</span><br><span class="hljs-comment">                */</span><br>               <span class="hljs-keyword">if</span>(node==parent.left)&#123;<br>                   parent.color=BLACK;<br>                   gparent.color=RED;<br>                   rightRotate(gparent);<br>               &#125;<br><br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               uncle = gparent.left;<br>               <span class="hljs-keyword">if</span> (uncle != <span class="hljs-literal">null</span> &amp;&amp; uncle.color == RED) &#123;<br>                   parent.color = BLACK;<br>                   uncle.color = BLACK;<br>                   gparent.color = RED;<br>                   node = gparent;<br>               &#125;<br>               <span class="hljs-keyword">if</span>(node==parent.left)&#123;<br>                   node=parent;<br>                   rightRotate(node);<br>               &#125;<br>               <span class="hljs-keyword">if</span>(node==parent.right)&#123;<br>                   parent.color=BLACK;<br>                   gparent.color=RED;<br>                   leftRotate(gparent);<br>               &#125;<br><br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>待补充。。。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap的底层实现</title>
    <link href="/2023/06/15/HashMap%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/06/15/HashMap%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树专题3</title>
    <link href="/2023/06/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%983/"/>
    <url>/2023/06/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%983/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程路线</title>
    <link href="/2023/06/14/Java%E7%BC%96%E7%A8%8B%E8%B7%AF%E7%BA%BF/"/>
    <url>/2023/06/14/Java%E7%BC%96%E7%A8%8B%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="Java后端技术体系"><a href="#Java后端技术体系" class="headerlink" title="Java后端技术体系"></a>Java后端技术体系</h1><h2 id="第一部分：Java基础"><a href="#第一部分：Java基础" class="headerlink" title="第一部分：Java基础"></a>第一部分：Java基础</h2><ul><li><p>变量</p></li><li><p>控制结构</p><ul><li>顺序结构</li><li>分支</li><li>循环</li></ul></li><li><p>OOP</p><ul><li>封装</li><li>继承</li><li>多态</li></ul></li><li><p>数组</p></li><li><p>Java API</p></li><li><p>异常处理</p></li><li><p>集合</p></li><li><p>泛型</p></li><li><p>反射</p></li><li><p>网络通信</p></li></ul><h2 id="第二部分：Java高级"><a href="#第二部分：Java高级" class="headerlink" title="==第二部分：Java高级=="></a>==第二部分：Java高级==</h2><h3 id="Java多线程-高并发"><a href="#Java多线程-高并发" class="headerlink" title="Java多线程/高并发"></a>Java多线程/高并发</h3><ul><li>并发基础<ul><li>互斥同步</li><li>非阻塞同步</li><li>指令重排</li><li>synchronized</li><li>volatile</li></ul></li><li>线程</li><li>锁<ul><li>自旋锁</li><li>偏向锁</li><li>可重入锁</li></ul></li><li>线程池</li><li>并发容器</li><li>JUC<ul><li>executor</li><li>collections</li><li>locks</li><li>atomic（原子类）</li><li>tools（CountDownLatch，Exchanger，ThreadLocal，CyclicBarrier）</li></ul></li></ul><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul><li>数据结构<ul><li>数组（稀疏数组）</li><li>队列</li><li>栈</li><li>链表</li><li>树</li><li>散列</li><li>堆</li><li>图</li></ul></li><li>算法<ul><li>排序算法（8种）</li><li>查找</li><li>分治算法</li><li>动态规划（背包问题）</li><li>回溯算法（骑士周游问题）</li><li>贪心算法</li><li>KMP</li><li>Prim</li><li>kruskal</li><li>弗洛伊德算法</li><li>迪杰斯特拉算法</li></ul></li></ul><h3 id="设计模式（23种）"><a href="#设计模式（23种）" class="headerlink" title="设计模式（23种）"></a>设计模式（23种）</h3><p>常用的8种：</p><ul><li>单例模式</li><li>观察者模式</li><li>工厂模式</li><li>适配器模式</li><li>装饰者模式</li><li>代理模式</li><li>模板模式</li><li>责任链模式</li><li>其他（桥接模式、原型模式、组合模式）</li></ul><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ul><li>JVM体系</li><li>类加载过程/机制</li><li>双亲委派机制/沙箱安全机制</li><li>JMM（Java内存模式）</li><li>字节码执行的过程/机制</li><li>GC(垃圾回收机制)</li><li>JVM性能监控和故障定位</li><li>JVM调优</li></ul><h2 id="第三部分：JavaWeb"><a href="#第三部分：JavaWeb" class="headerlink" title="第三部分：JavaWeb"></a>第三部分：JavaWeb</h2><h3 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h3><ul><li>HTML</li><li>CSS</li><li>Javascript</li><li>Ajax</li><li>Jquery</li></ul><h3 id="前端框架（弱化）"><a href="#前端框架（弱化）" class="headerlink" title="前端框架（弱化）"></a>前端框架（弱化）</h3><ul><li>VUE</li><li>React</li><li>Angular</li><li>bootstrap</li><li>Node.js</li></ul><h3 id="JavaWeb后端"><a href="#JavaWeb后端" class="headerlink" title="JavaWeb后端"></a>JavaWeb后端</h3><ul><li>Tomcat</li><li>Servlet</li><li>JSP</li></ul><h2 id="第四部分：主流框架和项目管理"><a href="#第四部分：主流框架和项目管理" class="headerlink" title="第四部分：主流框架和项目管理"></a>第四部分：主流框架和项目管理</h2><ul><li>Linux</li><li>Nginx</li><li>==SSM==<ul><li>Spring</li><li>SpringMVC</li><li>MyBatis</li></ul></li><li>项目管理<ul><li>Maven</li><li>git&amp;Github</li></ul></li><li>数据库<ul><li>Redis</li><li>Mysql</li><li>Oracle</li></ul></li><li>其他框架<ul><li>WebService(SOA)</li><li>Activiti(工作流框架)</li><li>Shiro(安全框架)</li><li>Spring  Security(安全框架)</li><li>JPA(持久化)</li><li>SpringData(持久层的通用解决方案)</li></ul></li></ul><h2 id="第五部分：分布式-微服务-并行架构"><a href="#第五部分：分布式-微服务-并行架构" class="headerlink" title="第五部分：分布式|微服务|并行架构"></a>第五部分：分布式|微服务|并行架构</h2><ul><li>Netty</li><li>Dubbo（RPC框架）</li><li>FastDFS（分布式的文件系统）</li><li>Docker（应用容器引擎）</li><li>==Spring家族==<ul><li>SpringBoot</li><li>SpringCloud<ul><li>Nacos（阿里巴巴服务发现，配置，管理）</li><li>Seata（阿里巴巴，分布式事务的中间件）</li><li>Sentinel（阿里巴巴，流量控制，融断，系统负载保护）</li><li>Gateway（网关，限流，日志，监控，鉴权）</li><li>OpenFeign（服务间调用）</li></ul></li></ul></li><li>搜索引擎<ul><li>ElasticSearch</li><li>Solr</li></ul></li><li>==中间件==<ul><li>Mycat（数据库中间件，分库分表）</li><li>消息中间件<ul><li>ActiveMQ</li><li>RabbitMQ</li><li>KafKa</li></ul></li></ul></li><li>日志分析与监控（ELK）<ul><li>ElasticSearch（搜索，存储数据）</li><li>LogStash（分析日志）</li><li>Kibana（可视化）</li></ul></li><li>Zookeeper（一致性服务：比如 配置维护，域名维护，分布式同步）</li></ul><h2 id="第六部分：DevOps（开发运维一体化）自动化部分管理项目，解决CI-CD"><a href="#第六部分：DevOps（开发运维一体化）自动化部分管理项目，解决CI-CD" class="headerlink" title="第六部分：DevOps（开发运维一体化）自动化部分管理项目，解决CI/CD"></a>第六部分：DevOps（开发运维一体化）自动化部分管理项目，解决CI/CD</h2><ul><li>k8s(让部署容器化的应用简单高效)</li><li>普罗米修斯（prometheus）(系统监控和报警)</li><li>Jenkins（监控持续的工作【部署，集成，交付】）</li><li>Harbor（容器的镜像仓库）</li><li>GitLab</li><li>SonarQube(项目工程代码质量检测)</li></ul><h2 id="第七个部分：大数据技术（可以弱化）"><a href="#第七个部分：大数据技术（可以弱化）" class="headerlink" title="第七个部分：大数据技术（可以弱化）"></a>第七个部分：大数据技术（可以弱化）</h2><ul><li>Hadoop</li><li>Hive</li><li>Impals</li><li>spark</li><li>flink</li></ul><h2 id="第八个部分：项目"><a href="#第八个部分：项目" class="headerlink" title="==第八个部分：项目=="></a>==第八个部分：项目==</h2><ul><li>电商</li><li>金融</li><li>教育</li><li>直播</li><li>CRM，ERP</li></ul><h2 id="第九个部分：大厂高频面试题"><a href="#第九个部分：大厂高频面试题" class="headerlink" title="第九个部分：大厂高频面试题"></a>第九个部分：大厂高频面试题</h2><h2 id="第十个部分：底层源码-内核研究"><a href="#第十个部分：底层源码-内核研究" class="headerlink" title="第十个部分：底层源码/内核研究"></a>第十个部分：底层源码/内核研究</h2><h2 id="编程基础的扩展"><a href="#编程基础的扩展" class="headerlink" title="编程基础的扩展"></a>编程基础的扩展</h2><ul><li>计算机网络</li><li>操作系统</li><li>编译原理</li><li>离散数学</li><li>数值分析</li><li>计算机组成原理</li><li>汇编语言</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/06/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/06/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p><img src="/../images/image-20230614233143050.png" alt="image-20230614233143050"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/09/hello-world/"/>
    <url>/2022/11/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
